/home/mirror/.local/lib/python3.12/site-packages/pylama/lint/__init__.py:10: UserWarning: pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html. The pkg_resources package is slated for removal as early as 2025-11-30. Refrain from using this package or pin to Setuptools<81.
  from pkg_resources import iter_entry_points
============================= test session starts ==============================
platform linux -- Python 3.12.3, pytest-8.4.1, pluggy-1.6.0
rootdir: /data/triton
configfile: pyproject.toml
plugins: pylama-8.4.1, xdist-3.8.0
collected 17619 items / 17618 deselected / 1 selected

python/test/unit/language/test_core.py // -----// IR Dump Before Inliner (inline) ('builtin.module' operation) //----- //
#loc1 = loc("a_base")
#loc2 = loc("stride_a0")
#loc3 = loc("b_base")
#loc4 = loc("stride_b1")
#loc5 = loc("b_scale")
#loc6 = loc("out")
module {
  tt.func public @dot_scale_kernel(%a_base: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("a_base"), %stride_a0: i32 {tt.divisibility = 16 : i32} loc("stride_a0"), %b_base: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("b_base"), %stride_b1: i32 {tt.divisibility = 16 : i32} loc("stride_b1"), %b_scale: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("b_scale"), %out: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("out")) attributes {noinline = false} {
    %0 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32> loc(#loc)
    %1 = tt.expand_dims %0 {axis = 1 : i32} : tensor<32xi32> -> tensor<32x1xi32> loc(#loc)
    %2 = tt.splat %stride_a0 : i32 -> tensor<32x1xi32> loc(#loc)
    %3 = arith.extsi %1 : tensor<32x1xi32> to tensor<32x1xi64> loc(#loc)
    %4 = arith.extsi %2 : tensor<32x1xi32> to tensor<32x1xi64> loc(#loc)
    %5 = arith.muli %3, %4 : tensor<32x1xi64> loc(#loc)
    %c2147483647_i64 = arith.constant 2147483647 : i64 loc(#loc)
    %c-2147483648_i64 = arith.constant -2147483648 : i64 loc(#loc)
    %cst = arith.constant dense<2147483647> : tensor<32x1xi64> loc(#loc)
    %6 = arith.cmpi sle, %5, %cst : tensor<32x1xi64> loc(#loc)
    %cst_0 = arith.constant dense<-2147483648> : tensor<32x1xi64> loc(#loc)
    %7 = arith.cmpi sge, %5, %cst_0 : tensor<32x1xi64> loc(#loc)
    %8 = arith.andi %6, %7 : tensor<32x1xi1> loc(#loc)
    %9 = arith.muli %1, %2 : tensor<32x1xi32> loc(#loc)
    %10 = tt.splat %a_base : !tt.ptr<bf16> -> tensor<32x1x!tt.ptr<bf16>> loc(#loc)
    %11 = tt.addptr %10, %9 : tensor<32x1x!tt.ptr<bf16>>, tensor<32x1xi32> loc(#loc)
    %12 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32> loc(#loc)
    %13 = tt.expand_dims %12 {axis = 0 : i32} : tensor<256xi32> -> tensor<1x256xi32> loc(#loc)
    %c1_i32 = arith.constant 1 : i32 loc(#loc)
    %c1_i32_1 = arith.constant 1 : i32 loc(#loc)
    %cst_2 = arith.constant dense<1> : tensor<1x256xi32> loc(#loc)
    %14 = arith.extsi %13 : tensor<1x256xi32> to tensor<1x256xi64> loc(#loc)
    %15 = arith.extsi %cst_2 : tensor<1x256xi32> to tensor<1x256xi64> loc(#loc)
    %16 = arith.muli %14, %15 : tensor<1x256xi64> loc(#loc)
    %c2147483647_i64_3 = arith.constant 2147483647 : i64 loc(#loc)
    %c-2147483648_i64_4 = arith.constant -2147483648 : i64 loc(#loc)
    %cst_5 = arith.constant dense<2147483647> : tensor<1x256xi64> loc(#loc)
    %17 = arith.cmpi sle, %16, %cst_5 : tensor<1x256xi64> loc(#loc)
    %cst_6 = arith.constant dense<-2147483648> : tensor<1x256xi64> loc(#loc)
    %18 = arith.cmpi sge, %16, %cst_6 : tensor<1x256xi64> loc(#loc)
    %19 = arith.andi %17, %18 : tensor<1x256xi1> loc(#loc)
    %20 = arith.muli %13, %cst_2 : tensor<1x256xi32> loc(#loc)
    %21 = tt.broadcast %11 : tensor<32x1x!tt.ptr<bf16>> -> tensor<32x256x!tt.ptr<bf16>> loc(#loc)
    %22 = tt.broadcast %20 : tensor<1x256xi32> -> tensor<32x256xi32> loc(#loc)
    %23 = tt.addptr %21, %22 : tensor<32x256x!tt.ptr<bf16>>, tensor<32x256xi32> loc(#loc)
    %24 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32> loc(#loc)
    %25 = tt.expand_dims %24 {axis = 1 : i32} : tensor<128xi32> -> tensor<128x1xi32> loc(#loc)
    %c1_i32_7 = arith.constant 1 : i32 loc(#loc)
    %c1_i32_8 = arith.constant 1 : i32 loc(#loc)
    %cst_9 = arith.constant dense<1> : tensor<128x1xi32> loc(#loc)
    %26 = arith.extsi %25 : tensor<128x1xi32> to tensor<128x1xi64> loc(#loc)
    %27 = arith.extsi %cst_9 : tensor<128x1xi32> to tensor<128x1xi64> loc(#loc)
    %28 = arith.muli %26, %27 : tensor<128x1xi64> loc(#loc)
    %c2147483647_i64_10 = arith.constant 2147483647 : i64 loc(#loc)
    %c-2147483648_i64_11 = arith.constant -2147483648 : i64 loc(#loc)
    %cst_12 = arith.constant dense<2147483647> : tensor<128x1xi64> loc(#loc)
    %29 = arith.cmpi sle, %28, %cst_12 : tensor<128x1xi64> loc(#loc)
    %cst_13 = arith.constant dense<-2147483648> : tensor<128x1xi64> loc(#loc)
    %30 = arith.cmpi sge, %28, %cst_13 : tensor<128x1xi64> loc(#loc)
    %31 = arith.andi %29, %30 : tensor<128x1xi1> loc(#loc)
    %32 = arith.muli %25, %cst_9 : tensor<128x1xi32> loc(#loc)
    %33 = tt.splat %b_base : !tt.ptr<i8> -> tensor<128x1x!tt.ptr<i8>> loc(#loc)
    %34 = tt.addptr %33, %32 : tensor<128x1x!tt.ptr<i8>>, tensor<128x1xi32> loc(#loc)
    %35 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32> loc(#loc)
    %36 = tt.expand_dims %35 {axis = 0 : i32} : tensor<32xi32> -> tensor<1x32xi32> loc(#loc)
    %37 = tt.splat %stride_b1 : i32 -> tensor<1x32xi32> loc(#loc)
    %38 = arith.extsi %36 : tensor<1x32xi32> to tensor<1x32xi64> loc(#loc)
    %39 = arith.extsi %37 : tensor<1x32xi32> to tensor<1x32xi64> loc(#loc)
    %40 = arith.muli %38, %39 : tensor<1x32xi64> loc(#loc)
    %c2147483647_i64_14 = arith.constant 2147483647 : i64 loc(#loc)
    %c-2147483648_i64_15 = arith.constant -2147483648 : i64 loc(#loc)
    %cst_16 = arith.constant dense<2147483647> : tensor<1x32xi64> loc(#loc)
    %41 = arith.cmpi sle, %40, %cst_16 : tensor<1x32xi64> loc(#loc)
    %cst_17 = arith.constant dense<-2147483648> : tensor<1x32xi64> loc(#loc)
    %42 = arith.cmpi sge, %40, %cst_17 : tensor<1x32xi64> loc(#loc)
    %43 = arith.andi %41, %42 : tensor<1x32xi1> loc(#loc)
    %44 = arith.muli %36, %37 : tensor<1x32xi32> loc(#loc)
    %45 = tt.broadcast %34 : tensor<128x1x!tt.ptr<i8>> -> tensor<128x32x!tt.ptr<i8>> loc(#loc)
    %46 = tt.broadcast %44 : tensor<1x32xi32> -> tensor<128x32xi32> loc(#loc)
    %47 = tt.addptr %45, %46 : tensor<128x32x!tt.ptr<i8>>, tensor<128x32xi32> loc(#loc)
    %48 = tt.load %23 : tensor<32x256x!tt.ptr<bf16>> loc(#loc)
    %49 = tt.reshape %48 : tensor<32x256xbf16> -> tensor<32x2x128xbf16> loc(#loc)
    %50 = tt.trans %49 {order = array<i32: 0, 2, 1>} : tensor<32x2x128xbf16> -> tensor<32x128x2xbf16> loc(#loc)
    %outLHS, %outRHS = tt.split %50 : tensor<32x128x2xbf16> -> tensor<32x128xbf16> loc(#loc)
    %51 = tt.load %47 : tensor<128x32x!tt.ptr<i8>> loc(#loc)
    %52 = tt.reshape %51 : tensor<128x32xi8> -> tensor<2x64x32xi8> loc(#loc)
    %53 = tt.trans %52 {order = array<i32: 1, 2, 0>} : tensor<2x64x32xi8> -> tensor<64x32x2xi8> loc(#loc)
    %outLHS_18, %outRHS_19 = tt.split %53 : tensor<64x32x2xi8> -> tensor<64x32xi8> loc(#loc)
    %54 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32> loc(#loc)
    %55 = tt.expand_dims %54 {axis = 1 : i32} : tensor<32xi32> -> tensor<32x1xi32> loc(#loc)
    %c8_i32 = arith.constant 8 : i32 loc(#loc)
    %c8_i32_20 = arith.constant 8 : i32 loc(#loc)
    %cst_21 = arith.constant dense<8> : tensor<32x1xi32> loc(#loc)
    %56 = arith.extsi %55 : tensor<32x1xi32> to tensor<32x1xi64> loc(#loc)
    %57 = arith.extsi %cst_21 : tensor<32x1xi32> to tensor<32x1xi64> loc(#loc)
    %58 = arith.muli %56, %57 : tensor<32x1xi64> loc(#loc)
    %c2147483647_i64_22 = arith.constant 2147483647 : i64 loc(#loc)
    %c-2147483648_i64_23 = arith.constant -2147483648 : i64 loc(#loc)
    %cst_24 = arith.constant dense<2147483647> : tensor<32x1xi64> loc(#loc)
    %59 = arith.cmpi sle, %58, %cst_24 : tensor<32x1xi64> loc(#loc)
    %cst_25 = arith.constant dense<-2147483648> : tensor<32x1xi64> loc(#loc)
    %60 = arith.cmpi sge, %58, %cst_25 : tensor<32x1xi64> loc(#loc)
    %61 = arith.andi %59, %60 : tensor<32x1xi1> loc(#loc)
    %62 = arith.muli %55, %cst_21 : tensor<32x1xi32> loc(#loc)
    %63 = tt.splat %b_scale : !tt.ptr<i8> -> tensor<32x1x!tt.ptr<i8>> loc(#loc)
    %64 = tt.addptr %63, %62 : tensor<32x1x!tt.ptr<i8>>, tensor<32x1xi32> loc(#loc)
    %65 = tt.make_range {end = 8 : i32, start = 0 : i32} : tensor<8xi32> loc(#loc)
    %66 = tt.expand_dims %65 {axis = 0 : i32} : tensor<8xi32> -> tensor<1x8xi32> loc(#loc)
    %67 = tt.broadcast %64 : tensor<32x1x!tt.ptr<i8>> -> tensor<32x8x!tt.ptr<i8>> loc(#loc)
    %68 = tt.broadcast %66 : tensor<1x8xi32> -> tensor<32x8xi32> loc(#loc)
    %69 = tt.addptr %67, %68 : tensor<32x8x!tt.ptr<i8>>, tensor<32x8xi32> loc(#loc)
    %70 = tt.load %69 : tensor<32x8x!tt.ptr<i8>> loc(#loc)
    %71 = tt.reshape %70 : tensor<32x8xi8> -> tensor<32x2x4xi8> loc(#loc)
    %72 = tt.trans %71 {order = array<i32: 0, 2, 1>} : tensor<32x2x4xi8> -> tensor<32x4x2xi8> loc(#loc)
    %outLHS_26, %outRHS_27 = tt.split %72 : tensor<32x4x2xi8> -> tensor<32x4xi8> loc(#loc)
    %cst_28 = arith.constant 0.000000e+00 : f32 loc(#loc)
    %cst_29 = arith.constant dense<0.000000e+00> : tensor<32x32xf32> loc(#loc)
    %73 = tt.dot_scaled %outLHS, %outLHS_18 scale %outLHS_26, %cst_29 lhs = bf16 rhs = e2m1 {fastMath = false} : tensor<32x128xbf16> * tensor<64x32xi8>, tensor<32x4xi8> -> tensor<32x32xf32> loc(#loc)
    %cst_30 = arith.constant 0.000000e+00 : f32 loc(#loc)
    %cst_31 = arith.constant dense<0.000000e+00> : tensor<32x32xf32> loc(#loc)
    %74 = tt.dot_scaled %outRHS, %outRHS_19 scale %outRHS_27, %cst_31 lhs = bf16 rhs = e2m1 {fastMath = false} : tensor<32x128xbf16> * tensor<64x32xi8>, tensor<32x4xi8> -> tensor<32x32xf32> loc(#loc)
    %75 = arith.addf %73, %74 : tensor<32x32xf32> loc(#loc)
    %76 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32> loc(#loc)
    %77 = tt.expand_dims %76 {axis = 1 : i32} : tensor<32xi32> -> tensor<32x1xi32> loc(#loc)
    %c32_i32 = arith.constant 32 : i32 loc(#loc)
    %c32_i32_32 = arith.constant 32 : i32 loc(#loc)
    %cst_33 = arith.constant dense<32> : tensor<32x1xi32> loc(#loc)
    %78 = arith.extsi %77 : tensor<32x1xi32> to tensor<32x1xi64> loc(#loc)
    %79 = arith.extsi %cst_33 : tensor<32x1xi32> to tensor<32x1xi64> loc(#loc)
    %80 = arith.muli %78, %79 : tensor<32x1xi64> loc(#loc)
    %c2147483647_i64_34 = arith.constant 2147483647 : i64 loc(#loc)
    %c-2147483648_i64_35 = arith.constant -2147483648 : i64 loc(#loc)
    %cst_36 = arith.constant dense<2147483647> : tensor<32x1xi64> loc(#loc)
    %81 = arith.cmpi sle, %80, %cst_36 : tensor<32x1xi64> loc(#loc)
    %cst_37 = arith.constant dense<-2147483648> : tensor<32x1xi64> loc(#loc)
    %82 = arith.cmpi sge, %80, %cst_37 : tensor<32x1xi64> loc(#loc)
    %83 = arith.andi %81, %82 : tensor<32x1xi1> loc(#loc)
    %84 = arith.muli %77, %cst_33 : tensor<32x1xi32> loc(#loc)
    %85 = tt.splat %out : !tt.ptr<bf16> -> tensor<32x1x!tt.ptr<bf16>> loc(#loc)
    %86 = tt.addptr %85, %84 : tensor<32x1x!tt.ptr<bf16>>, tensor<32x1xi32> loc(#loc)
    %87 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32> loc(#loc)
    %88 = tt.expand_dims %87 {axis = 0 : i32} : tensor<32xi32> -> tensor<1x32xi32> loc(#loc)
    %89 = tt.broadcast %86 : tensor<32x1x!tt.ptr<bf16>> -> tensor<32x32x!tt.ptr<bf16>> loc(#loc)
    %90 = tt.broadcast %88 : tensor<1x32xi32> -> tensor<32x32xi32> loc(#loc)
    %91 = tt.addptr %89, %90 : tensor<32x32x!tt.ptr<bf16>>, tensor<32x32xi32> loc(#loc)
    %92 = arith.truncf %75 : tensor<32x32xf32> to tensor<32x32xbf16> loc(#loc)
    tt.store %91, %92 : tensor<32x32x!tt.ptr<bf16>> loc(#loc)
    tt.return loc(#loc)
  } loc(#loc)
} loc(#loc)
#loc = loc(unknown)


// -----// IR Dump Before Canonicalizer (canonicalize) ('tt.func' operation: @dot_scale_kernel) //----- //
#loc1 = loc("a_base")
#loc2 = loc("stride_a0")
#loc3 = loc("b_base")
#loc4 = loc("stride_b1")
#loc5 = loc("b_scale")
#loc6 = loc("out")
module {
  tt.func public @dot_scale_kernel(%a_base: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("a_base"), %stride_a0: i32 {tt.divisibility = 16 : i32} loc("stride_a0"), %b_base: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("b_base"), %stride_b1: i32 {tt.divisibility = 16 : i32} loc("stride_b1"), %b_scale: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("b_scale"), %out: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("out")) attributes {noinline = false} {
    %0 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32> loc(#loc)
    %1 = tt.expand_dims %0 {axis = 1 : i32} : tensor<32xi32> -> tensor<32x1xi32> loc(#loc)
    %2 = tt.splat %stride_a0 : i32 -> tensor<32x1xi32> loc(#loc)
    %3 = arith.extsi %1 : tensor<32x1xi32> to tensor<32x1xi64> loc(#loc)
    %4 = arith.extsi %2 : tensor<32x1xi32> to tensor<32x1xi64> loc(#loc)
    %5 = arith.muli %3, %4 : tensor<32x1xi64> loc(#loc)
    %c2147483647_i64 = arith.constant 2147483647 : i64 loc(#loc)
    %c-2147483648_i64 = arith.constant -2147483648 : i64 loc(#loc)
    %cst = arith.constant dense<2147483647> : tensor<32x1xi64> loc(#loc)
    %6 = arith.cmpi sle, %5, %cst : tensor<32x1xi64> loc(#loc)
    %cst_0 = arith.constant dense<-2147483648> : tensor<32x1xi64> loc(#loc)
    %7 = arith.cmpi sge, %5, %cst_0 : tensor<32x1xi64> loc(#loc)
    %8 = arith.andi %6, %7 : tensor<32x1xi1> loc(#loc)
    %9 = arith.muli %1, %2 : tensor<32x1xi32> loc(#loc)
    %10 = tt.splat %a_base : !tt.ptr<bf16> -> tensor<32x1x!tt.ptr<bf16>> loc(#loc)
    %11 = tt.addptr %10, %9 : tensor<32x1x!tt.ptr<bf16>>, tensor<32x1xi32> loc(#loc)
    %12 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32> loc(#loc)
    %13 = tt.expand_dims %12 {axis = 0 : i32} : tensor<256xi32> -> tensor<1x256xi32> loc(#loc)
    %c1_i32 = arith.constant 1 : i32 loc(#loc)
    %c1_i32_1 = arith.constant 1 : i32 loc(#loc)
    %cst_2 = arith.constant dense<1> : tensor<1x256xi32> loc(#loc)
    %14 = arith.extsi %13 : tensor<1x256xi32> to tensor<1x256xi64> loc(#loc)
    %15 = arith.extsi %cst_2 : tensor<1x256xi32> to tensor<1x256xi64> loc(#loc)
    %16 = arith.muli %14, %15 : tensor<1x256xi64> loc(#loc)
    %c2147483647_i64_3 = arith.constant 2147483647 : i64 loc(#loc)
    %c-2147483648_i64_4 = arith.constant -2147483648 : i64 loc(#loc)
    %cst_5 = arith.constant dense<2147483647> : tensor<1x256xi64> loc(#loc)
    %17 = arith.cmpi sle, %16, %cst_5 : tensor<1x256xi64> loc(#loc)
    %cst_6 = arith.constant dense<-2147483648> : tensor<1x256xi64> loc(#loc)
    %18 = arith.cmpi sge, %16, %cst_6 : tensor<1x256xi64> loc(#loc)
    %19 = arith.andi %17, %18 : tensor<1x256xi1> loc(#loc)
    %20 = arith.muli %13, %cst_2 : tensor<1x256xi32> loc(#loc)
    %21 = tt.broadcast %11 : tensor<32x1x!tt.ptr<bf16>> -> tensor<32x256x!tt.ptr<bf16>> loc(#loc)
    %22 = tt.broadcast %20 : tensor<1x256xi32> -> tensor<32x256xi32> loc(#loc)
    %23 = tt.addptr %21, %22 : tensor<32x256x!tt.ptr<bf16>>, tensor<32x256xi32> loc(#loc)
    %24 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32> loc(#loc)
    %25 = tt.expand_dims %24 {axis = 1 : i32} : tensor<128xi32> -> tensor<128x1xi32> loc(#loc)
    %c1_i32_7 = arith.constant 1 : i32 loc(#loc)
    %c1_i32_8 = arith.constant 1 : i32 loc(#loc)
    %cst_9 = arith.constant dense<1> : tensor<128x1xi32> loc(#loc)
    %26 = arith.extsi %25 : tensor<128x1xi32> to tensor<128x1xi64> loc(#loc)
    %27 = arith.extsi %cst_9 : tensor<128x1xi32> to tensor<128x1xi64> loc(#loc)
    %28 = arith.muli %26, %27 : tensor<128x1xi64> loc(#loc)
    %c2147483647_i64_10 = arith.constant 2147483647 : i64 loc(#loc)
    %c-2147483648_i64_11 = arith.constant -2147483648 : i64 loc(#loc)
    %cst_12 = arith.constant dense<2147483647> : tensor<128x1xi64> loc(#loc)
    %29 = arith.cmpi sle, %28, %cst_12 : tensor<128x1xi64> loc(#loc)
    %cst_13 = arith.constant dense<-2147483648> : tensor<128x1xi64> loc(#loc)
    %30 = arith.cmpi sge, %28, %cst_13 : tensor<128x1xi64> loc(#loc)
    %31 = arith.andi %29, %30 : tensor<128x1xi1> loc(#loc)
    %32 = arith.muli %25, %cst_9 : tensor<128x1xi32> loc(#loc)
    %33 = tt.splat %b_base : !tt.ptr<i8> -> tensor<128x1x!tt.ptr<i8>> loc(#loc)
    %34 = tt.addptr %33, %32 : tensor<128x1x!tt.ptr<i8>>, tensor<128x1xi32> loc(#loc)
    %35 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32> loc(#loc)
    %36 = tt.expand_dims %35 {axis = 0 : i32} : tensor<32xi32> -> tensor<1x32xi32> loc(#loc)
    %37 = tt.splat %stride_b1 : i32 -> tensor<1x32xi32> loc(#loc)
    %38 = arith.extsi %36 : tensor<1x32xi32> to tensor<1x32xi64> loc(#loc)
    %39 = arith.extsi %37 : tensor<1x32xi32> to tensor<1x32xi64> loc(#loc)
    %40 = arith.muli %38, %39 : tensor<1x32xi64> loc(#loc)
    %c2147483647_i64_14 = arith.constant 2147483647 : i64 loc(#loc)
    %c-2147483648_i64_15 = arith.constant -2147483648 : i64 loc(#loc)
    %cst_16 = arith.constant dense<2147483647> : tensor<1x32xi64> loc(#loc)
    %41 = arith.cmpi sle, %40, %cst_16 : tensor<1x32xi64> loc(#loc)
    %cst_17 = arith.constant dense<-2147483648> : tensor<1x32xi64> loc(#loc)
    %42 = arith.cmpi sge, %40, %cst_17 : tensor<1x32xi64> loc(#loc)
    %43 = arith.andi %41, %42 : tensor<1x32xi1> loc(#loc)
    %44 = arith.muli %36, %37 : tensor<1x32xi32> loc(#loc)
    %45 = tt.broadcast %34 : tensor<128x1x!tt.ptr<i8>> -> tensor<128x32x!tt.ptr<i8>> loc(#loc)
    %46 = tt.broadcast %44 : tensor<1x32xi32> -> tensor<128x32xi32> loc(#loc)
    %47 = tt.addptr %45, %46 : tensor<128x32x!tt.ptr<i8>>, tensor<128x32xi32> loc(#loc)
    %48 = tt.load %23 : tensor<32x256x!tt.ptr<bf16>> loc(#loc)
    %49 = tt.reshape %48 : tensor<32x256xbf16> -> tensor<32x2x128xbf16> loc(#loc)
    %50 = tt.trans %49 {order = array<i32: 0, 2, 1>} : tensor<32x2x128xbf16> -> tensor<32x128x2xbf16> loc(#loc)
    %outLHS, %outRHS = tt.split %50 : tensor<32x128x2xbf16> -> tensor<32x128xbf16> loc(#loc)
    %51 = tt.load %47 : tensor<128x32x!tt.ptr<i8>> loc(#loc)
    %52 = tt.reshape %51 : tensor<128x32xi8> -> tensor<2x64x32xi8> loc(#loc)
    %53 = tt.trans %52 {order = array<i32: 1, 2, 0>} : tensor<2x64x32xi8> -> tensor<64x32x2xi8> loc(#loc)
    %outLHS_18, %outRHS_19 = tt.split %53 : tensor<64x32x2xi8> -> tensor<64x32xi8> loc(#loc)
    %54 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32> loc(#loc)
    %55 = tt.expand_dims %54 {axis = 1 : i32} : tensor<32xi32> -> tensor<32x1xi32> loc(#loc)
    %c8_i32 = arith.constant 8 : i32 loc(#loc)
    %c8_i32_20 = arith.constant 8 : i32 loc(#loc)
    %cst_21 = arith.constant dense<8> : tensor<32x1xi32> loc(#loc)
    %56 = arith.extsi %55 : tensor<32x1xi32> to tensor<32x1xi64> loc(#loc)
    %57 = arith.extsi %cst_21 : tensor<32x1xi32> to tensor<32x1xi64> loc(#loc)
    %58 = arith.muli %56, %57 : tensor<32x1xi64> loc(#loc)
    %c2147483647_i64_22 = arith.constant 2147483647 : i64 loc(#loc)
    %c-2147483648_i64_23 = arith.constant -2147483648 : i64 loc(#loc)
    %cst_24 = arith.constant dense<2147483647> : tensor<32x1xi64> loc(#loc)
    %59 = arith.cmpi sle, %58, %cst_24 : tensor<32x1xi64> loc(#loc)
    %cst_25 = arith.constant dense<-2147483648> : tensor<32x1xi64> loc(#loc)
    %60 = arith.cmpi sge, %58, %cst_25 : tensor<32x1xi64> loc(#loc)
    %61 = arith.andi %59, %60 : tensor<32x1xi1> loc(#loc)
    %62 = arith.muli %55, %cst_21 : tensor<32x1xi32> loc(#loc)
    %63 = tt.splat %b_scale : !tt.ptr<i8> -> tensor<32x1x!tt.ptr<i8>> loc(#loc)
    %64 = tt.addptr %63, %62 : tensor<32x1x!tt.ptr<i8>>, tensor<32x1xi32> loc(#loc)
    %65 = tt.make_range {end = 8 : i32, start = 0 : i32} : tensor<8xi32> loc(#loc)
    %66 = tt.expand_dims %65 {axis = 0 : i32} : tensor<8xi32> -> tensor<1x8xi32> loc(#loc)
    %67 = tt.broadcast %64 : tensor<32x1x!tt.ptr<i8>> -> tensor<32x8x!tt.ptr<i8>> loc(#loc)
    %68 = tt.broadcast %66 : tensor<1x8xi32> -> tensor<32x8xi32> loc(#loc)
    %69 = tt.addptr %67, %68 : tensor<32x8x!tt.ptr<i8>>, tensor<32x8xi32> loc(#loc)
    %70 = tt.load %69 : tensor<32x8x!tt.ptr<i8>> loc(#loc)
    %71 = tt.reshape %70 : tensor<32x8xi8> -> tensor<32x2x4xi8> loc(#loc)
    %72 = tt.trans %71 {order = array<i32: 0, 2, 1>} : tensor<32x2x4xi8> -> tensor<32x4x2xi8> loc(#loc)
    %outLHS_26, %outRHS_27 = tt.split %72 : tensor<32x4x2xi8> -> tensor<32x4xi8> loc(#loc)
    %cst_28 = arith.constant 0.000000e+00 : f32 loc(#loc)
    %cst_29 = arith.constant dense<0.000000e+00> : tensor<32x32xf32> loc(#loc)
    %73 = tt.dot_scaled %outLHS, %outLHS_18 scale %outLHS_26, %cst_29 lhs = bf16 rhs = e2m1 {fastMath = false} : tensor<32x128xbf16> * tensor<64x32xi8>, tensor<32x4xi8> -> tensor<32x32xf32> loc(#loc)
    %cst_30 = arith.constant 0.000000e+00 : f32 loc(#loc)
    %cst_31 = arith.constant dense<0.000000e+00> : tensor<32x32xf32> loc(#loc)
    %74 = tt.dot_scaled %outRHS, %outRHS_19 scale %outRHS_27, %cst_31 lhs = bf16 rhs = e2m1 {fastMath = false} : tensor<32x128xbf16> * tensor<64x32xi8>, tensor<32x4xi8> -> tensor<32x32xf32> loc(#loc)
    %75 = arith.addf %73, %74 : tensor<32x32xf32> loc(#loc)
    %76 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32> loc(#loc)
    %77 = tt.expand_dims %76 {axis = 1 : i32} : tensor<32xi32> -> tensor<32x1xi32> loc(#loc)
    %c32_i32 = arith.constant 32 : i32 loc(#loc)
    %c32_i32_32 = arith.constant 32 : i32 loc(#loc)
    %cst_33 = arith.constant dense<32> : tensor<32x1xi32> loc(#loc)
    %78 = arith.extsi %77 : tensor<32x1xi32> to tensor<32x1xi64> loc(#loc)
    %79 = arith.extsi %cst_33 : tensor<32x1xi32> to tensor<32x1xi64> loc(#loc)
    %80 = arith.muli %78, %79 : tensor<32x1xi64> loc(#loc)
    %c2147483647_i64_34 = arith.constant 2147483647 : i64 loc(#loc)
    %c-2147483648_i64_35 = arith.constant -2147483648 : i64 loc(#loc)
    %cst_36 = arith.constant dense<2147483647> : tensor<32x1xi64> loc(#loc)
    %81 = arith.cmpi sle, %80, %cst_36 : tensor<32x1xi64> loc(#loc)
    %cst_37 = arith.constant dense<-2147483648> : tensor<32x1xi64> loc(#loc)
    %82 = arith.cmpi sge, %80, %cst_37 : tensor<32x1xi64> loc(#loc)
    %83 = arith.andi %81, %82 : tensor<32x1xi1> loc(#loc)
    %84 = arith.muli %77, %cst_33 : tensor<32x1xi32> loc(#loc)
    %85 = tt.splat %out : !tt.ptr<bf16> -> tensor<32x1x!tt.ptr<bf16>> loc(#loc)
    %86 = tt.addptr %85, %84 : tensor<32x1x!tt.ptr<bf16>>, tensor<32x1xi32> loc(#loc)
    %87 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32> loc(#loc)
    %88 = tt.expand_dims %87 {axis = 0 : i32} : tensor<32xi32> -> tensor<1x32xi32> loc(#loc)
    %89 = tt.broadcast %86 : tensor<32x1x!tt.ptr<bf16>> -> tensor<32x32x!tt.ptr<bf16>> loc(#loc)
    %90 = tt.broadcast %88 : tensor<1x32xi32> -> tensor<32x32xi32> loc(#loc)
    %91 = tt.addptr %89, %90 : tensor<32x32x!tt.ptr<bf16>>, tensor<32x32xi32> loc(#loc)
    %92 = arith.truncf %75 : tensor<32x32xf32> to tensor<32x32xbf16> loc(#loc)
    tt.store %91, %92 : tensor<32x32x!tt.ptr<bf16>> loc(#loc)
    tt.return loc(#loc)
  } loc(#loc)
} loc(#loc)
#loc = loc(unknown)


// -----// IR Dump Before TritonRewriteTensorPointer (triton-rewrite-tensor-pointer) ('builtin.module' operation) //----- //
#loc1 = loc("a_base")
#loc2 = loc("stride_a0")
#loc3 = loc("b_base")
#loc4 = loc("stride_b1")
#loc5 = loc("b_scale")
#loc6 = loc("out")
module {
  tt.func public @dot_scale_kernel(%a_base: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("a_base"), %stride_a0: i32 {tt.divisibility = 16 : i32} loc("stride_a0"), %b_base: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("b_base"), %stride_b1: i32 {tt.divisibility = 16 : i32} loc("stride_b1"), %b_scale: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("b_scale"), %out: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("out")) attributes {noinline = false} {
    %cst = arith.constant dense<32> : tensor<32x1xi32> loc(#loc)
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<32x32xf32> loc(#loc)
    %cst_1 = arith.constant dense<8> : tensor<32x1xi32> loc(#loc)
    %0 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32> loc(#loc)
    %1 = tt.expand_dims %0 {axis = 1 : i32} : tensor<32xi32> -> tensor<32x1xi32> loc(#loc)
    %2 = tt.splat %stride_a0 : i32 -> tensor<32x1xi32> loc(#loc)
    %3 = arith.muli %1, %2 : tensor<32x1xi32> loc(#loc)
    %4 = tt.splat %a_base : !tt.ptr<bf16> -> tensor<32x1x!tt.ptr<bf16>> loc(#loc)
    %5 = tt.addptr %4, %3 : tensor<32x1x!tt.ptr<bf16>>, tensor<32x1xi32> loc(#loc)
    %6 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32> loc(#loc)
    %7 = tt.expand_dims %6 {axis = 0 : i32} : tensor<256xi32> -> tensor<1x256xi32> loc(#loc)
    %8 = tt.broadcast %5 : tensor<32x1x!tt.ptr<bf16>> -> tensor<32x256x!tt.ptr<bf16>> loc(#loc)
    %9 = tt.broadcast %7 : tensor<1x256xi32> -> tensor<32x256xi32> loc(#loc)
    %10 = tt.addptr %8, %9 : tensor<32x256x!tt.ptr<bf16>>, tensor<32x256xi32> loc(#loc)
    %11 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32> loc(#loc)
    %12 = tt.expand_dims %11 {axis = 1 : i32} : tensor<128xi32> -> tensor<128x1xi32> loc(#loc)
    %13 = tt.splat %b_base : !tt.ptr<i8> -> tensor<128x1x!tt.ptr<i8>> loc(#loc)
    %14 = tt.addptr %13, %12 : tensor<128x1x!tt.ptr<i8>>, tensor<128x1xi32> loc(#loc)
    %15 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32> loc(#loc)
    %16 = tt.expand_dims %15 {axis = 0 : i32} : tensor<32xi32> -> tensor<1x32xi32> loc(#loc)
    %17 = tt.splat %stride_b1 : i32 -> tensor<1x32xi32> loc(#loc)
    %18 = arith.muli %16, %17 : tensor<1x32xi32> loc(#loc)
    %19 = tt.broadcast %14 : tensor<128x1x!tt.ptr<i8>> -> tensor<128x32x!tt.ptr<i8>> loc(#loc)
    %20 = tt.broadcast %18 : tensor<1x32xi32> -> tensor<128x32xi32> loc(#loc)
    %21 = tt.addptr %19, %20 : tensor<128x32x!tt.ptr<i8>>, tensor<128x32xi32> loc(#loc)
    %22 = tt.load %10 : tensor<32x256x!tt.ptr<bf16>> loc(#loc)
    %23 = tt.reshape %22 : tensor<32x256xbf16> -> tensor<32x2x128xbf16> loc(#loc)
    %24 = tt.trans %23 {order = array<i32: 0, 2, 1>} : tensor<32x2x128xbf16> -> tensor<32x128x2xbf16> loc(#loc)
    %outLHS, %outRHS = tt.split %24 : tensor<32x128x2xbf16> -> tensor<32x128xbf16> loc(#loc)
    %25 = tt.load %21 : tensor<128x32x!tt.ptr<i8>> loc(#loc)
    %26 = tt.reshape %25 : tensor<128x32xi8> -> tensor<2x64x32xi8> loc(#loc)
    %27 = tt.trans %26 {order = array<i32: 1, 2, 0>} : tensor<2x64x32xi8> -> tensor<64x32x2xi8> loc(#loc)
    %outLHS_2, %outRHS_3 = tt.split %27 : tensor<64x32x2xi8> -> tensor<64x32xi8> loc(#loc)
    %28 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32> loc(#loc)
    %29 = tt.expand_dims %28 {axis = 1 : i32} : tensor<32xi32> -> tensor<32x1xi32> loc(#loc)
    %30 = arith.muli %29, %cst_1 : tensor<32x1xi32> loc(#loc)
    %31 = tt.splat %b_scale : !tt.ptr<i8> -> tensor<32x1x!tt.ptr<i8>> loc(#loc)
    %32 = tt.addptr %31, %30 : tensor<32x1x!tt.ptr<i8>>, tensor<32x1xi32> loc(#loc)
    %33 = tt.make_range {end = 8 : i32, start = 0 : i32} : tensor<8xi32> loc(#loc)
    %34 = tt.expand_dims %33 {axis = 0 : i32} : tensor<8xi32> -> tensor<1x8xi32> loc(#loc)
    %35 = tt.broadcast %32 : tensor<32x1x!tt.ptr<i8>> -> tensor<32x8x!tt.ptr<i8>> loc(#loc)
    %36 = tt.broadcast %34 : tensor<1x8xi32> -> tensor<32x8xi32> loc(#loc)
    %37 = tt.addptr %35, %36 : tensor<32x8x!tt.ptr<i8>>, tensor<32x8xi32> loc(#loc)
    %38 = tt.load %37 : tensor<32x8x!tt.ptr<i8>> loc(#loc)
    %39 = tt.reshape %38 : tensor<32x8xi8> -> tensor<32x2x4xi8> loc(#loc)
    %40 = tt.trans %39 {order = array<i32: 0, 2, 1>} : tensor<32x2x4xi8> -> tensor<32x4x2xi8> loc(#loc)
    %outLHS_4, %outRHS_5 = tt.split %40 : tensor<32x4x2xi8> -> tensor<32x4xi8> loc(#loc)
    %41 = tt.dot_scaled %outLHS, %outLHS_2 scale %outLHS_4, %cst_0 lhs = bf16 rhs = e2m1 {fastMath = false} : tensor<32x128xbf16> * tensor<64x32xi8>, tensor<32x4xi8> -> tensor<32x32xf32> loc(#loc)
    %42 = tt.dot_scaled %outRHS, %outRHS_3 scale %outRHS_5, %cst_0 lhs = bf16 rhs = e2m1 {fastMath = false} : tensor<32x128xbf16> * tensor<64x32xi8>, tensor<32x4xi8> -> tensor<32x32xf32> loc(#loc)
    %43 = arith.addf %41, %42 : tensor<32x32xf32> loc(#loc)
    %44 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32> loc(#loc)
    %45 = tt.expand_dims %44 {axis = 1 : i32} : tensor<32xi32> -> tensor<32x1xi32> loc(#loc)
    %46 = arith.muli %45, %cst : tensor<32x1xi32> loc(#loc)
    %47 = tt.splat %out : !tt.ptr<bf16> -> tensor<32x1x!tt.ptr<bf16>> loc(#loc)
    %48 = tt.addptr %47, %46 : tensor<32x1x!tt.ptr<bf16>>, tensor<32x1xi32> loc(#loc)
    %49 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32> loc(#loc)
    %50 = tt.expand_dims %49 {axis = 0 : i32} : tensor<32xi32> -> tensor<1x32xi32> loc(#loc)
    %51 = tt.broadcast %48 : tensor<32x1x!tt.ptr<bf16>> -> tensor<32x32x!tt.ptr<bf16>> loc(#loc)
    %52 = tt.broadcast %50 : tensor<1x32xi32> -> tensor<32x32xi32> loc(#loc)
    %53 = tt.addptr %51, %52 : tensor<32x32x!tt.ptr<bf16>>, tensor<32x32xi32> loc(#loc)
    %54 = arith.truncf %43 : tensor<32x32xf32> to tensor<32x32xbf16> loc(#loc)
    tt.store %53, %54 : tensor<32x32x!tt.ptr<bf16>> loc(#loc)
    tt.return loc(#loc)
  } loc(#loc)
} loc(#loc)
#loc = loc(unknown)


// -----// IR Dump Before TritonRewriteTensorDescriptorToPointer (triton-rewrite-tensor-descriptor-to-pointer) ('builtin.module' operation) //----- //
#loc1 = loc("a_base")
#loc2 = loc("stride_a0")
#loc3 = loc("b_base")
#loc4 = loc("stride_b1")
#loc5 = loc("b_scale")
#loc6 = loc("out")
module {
  tt.func public @dot_scale_kernel(%a_base: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("a_base"), %stride_a0: i32 {tt.divisibility = 16 : i32} loc("stride_a0"), %b_base: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("b_base"), %stride_b1: i32 {tt.divisibility = 16 : i32} loc("stride_b1"), %b_scale: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("b_scale"), %out: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("out")) attributes {noinline = false} {
    %cst = arith.constant dense<32> : tensor<32x1xi32> loc(#loc)
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<32x32xf32> loc(#loc)
    %cst_1 = arith.constant dense<8> : tensor<32x1xi32> loc(#loc)
    %0 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32> loc(#loc)
    %1 = tt.expand_dims %0 {axis = 1 : i32} : tensor<32xi32> -> tensor<32x1xi32> loc(#loc)
    %2 = tt.splat %stride_a0 : i32 -> tensor<32x1xi32> loc(#loc)
    %3 = arith.muli %1, %2 : tensor<32x1xi32> loc(#loc)
    %4 = tt.splat %a_base : !tt.ptr<bf16> -> tensor<32x1x!tt.ptr<bf16>> loc(#loc)
    %5 = tt.addptr %4, %3 : tensor<32x1x!tt.ptr<bf16>>, tensor<32x1xi32> loc(#loc)
    %6 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32> loc(#loc)
    %7 = tt.expand_dims %6 {axis = 0 : i32} : tensor<256xi32> -> tensor<1x256xi32> loc(#loc)
    %8 = tt.broadcast %5 : tensor<32x1x!tt.ptr<bf16>> -> tensor<32x256x!tt.ptr<bf16>> loc(#loc)
    %9 = tt.broadcast %7 : tensor<1x256xi32> -> tensor<32x256xi32> loc(#loc)
    %10 = tt.addptr %8, %9 : tensor<32x256x!tt.ptr<bf16>>, tensor<32x256xi32> loc(#loc)
    %11 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32> loc(#loc)
    %12 = tt.expand_dims %11 {axis = 1 : i32} : tensor<128xi32> -> tensor<128x1xi32> loc(#loc)
    %13 = tt.splat %b_base : !tt.ptr<i8> -> tensor<128x1x!tt.ptr<i8>> loc(#loc)
    %14 = tt.addptr %13, %12 : tensor<128x1x!tt.ptr<i8>>, tensor<128x1xi32> loc(#loc)
    %15 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32> loc(#loc)
    %16 = tt.expand_dims %15 {axis = 0 : i32} : tensor<32xi32> -> tensor<1x32xi32> loc(#loc)
    %17 = tt.splat %stride_b1 : i32 -> tensor<1x32xi32> loc(#loc)
    %18 = arith.muli %16, %17 : tensor<1x32xi32> loc(#loc)
    %19 = tt.broadcast %14 : tensor<128x1x!tt.ptr<i8>> -> tensor<128x32x!tt.ptr<i8>> loc(#loc)
    %20 = tt.broadcast %18 : tensor<1x32xi32> -> tensor<128x32xi32> loc(#loc)
    %21 = tt.addptr %19, %20 : tensor<128x32x!tt.ptr<i8>>, tensor<128x32xi32> loc(#loc)
    %22 = tt.load %10 : tensor<32x256x!tt.ptr<bf16>> loc(#loc)
    %23 = tt.reshape %22 : tensor<32x256xbf16> -> tensor<32x2x128xbf16> loc(#loc)
    %24 = tt.trans %23 {order = array<i32: 0, 2, 1>} : tensor<32x2x128xbf16> -> tensor<32x128x2xbf16> loc(#loc)
    %outLHS, %outRHS = tt.split %24 : tensor<32x128x2xbf16> -> tensor<32x128xbf16> loc(#loc)
    %25 = tt.load %21 : tensor<128x32x!tt.ptr<i8>> loc(#loc)
    %26 = tt.reshape %25 : tensor<128x32xi8> -> tensor<2x64x32xi8> loc(#loc)
    %27 = tt.trans %26 {order = array<i32: 1, 2, 0>} : tensor<2x64x32xi8> -> tensor<64x32x2xi8> loc(#loc)
    %outLHS_2, %outRHS_3 = tt.split %27 : tensor<64x32x2xi8> -> tensor<64x32xi8> loc(#loc)
    %28 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32> loc(#loc)
    %29 = tt.expand_dims %28 {axis = 1 : i32} : tensor<32xi32> -> tensor<32x1xi32> loc(#loc)
    %30 = arith.muli %29, %cst_1 : tensor<32x1xi32> loc(#loc)
    %31 = tt.splat %b_scale : !tt.ptr<i8> -> tensor<32x1x!tt.ptr<i8>> loc(#loc)
    %32 = tt.addptr %31, %30 : tensor<32x1x!tt.ptr<i8>>, tensor<32x1xi32> loc(#loc)
    %33 = tt.make_range {end = 8 : i32, start = 0 : i32} : tensor<8xi32> loc(#loc)
    %34 = tt.expand_dims %33 {axis = 0 : i32} : tensor<8xi32> -> tensor<1x8xi32> loc(#loc)
    %35 = tt.broadcast %32 : tensor<32x1x!tt.ptr<i8>> -> tensor<32x8x!tt.ptr<i8>> loc(#loc)
    %36 = tt.broadcast %34 : tensor<1x8xi32> -> tensor<32x8xi32> loc(#loc)
    %37 = tt.addptr %35, %36 : tensor<32x8x!tt.ptr<i8>>, tensor<32x8xi32> loc(#loc)
    %38 = tt.load %37 : tensor<32x8x!tt.ptr<i8>> loc(#loc)
    %39 = tt.reshape %38 : tensor<32x8xi8> -> tensor<32x2x4xi8> loc(#loc)
    %40 = tt.trans %39 {order = array<i32: 0, 2, 1>} : tensor<32x2x4xi8> -> tensor<32x4x2xi8> loc(#loc)
    %outLHS_4, %outRHS_5 = tt.split %40 : tensor<32x4x2xi8> -> tensor<32x4xi8> loc(#loc)
    %41 = tt.dot_scaled %outLHS, %outLHS_2 scale %outLHS_4, %cst_0 lhs = bf16 rhs = e2m1 {fastMath = false} : tensor<32x128xbf16> * tensor<64x32xi8>, tensor<32x4xi8> -> tensor<32x32xf32> loc(#loc)
    %42 = tt.dot_scaled %outRHS, %outRHS_3 scale %outRHS_5, %cst_0 lhs = bf16 rhs = e2m1 {fastMath = false} : tensor<32x128xbf16> * tensor<64x32xi8>, tensor<32x4xi8> -> tensor<32x32xf32> loc(#loc)
    %43 = arith.addf %41, %42 : tensor<32x32xf32> loc(#loc)
    %44 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32> loc(#loc)
    %45 = tt.expand_dims %44 {axis = 1 : i32} : tensor<32xi32> -> tensor<32x1xi32> loc(#loc)
    %46 = arith.muli %45, %cst : tensor<32x1xi32> loc(#loc)
    %47 = tt.splat %out : !tt.ptr<bf16> -> tensor<32x1x!tt.ptr<bf16>> loc(#loc)
    %48 = tt.addptr %47, %46 : tensor<32x1x!tt.ptr<bf16>>, tensor<32x1xi32> loc(#loc)
    %49 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32> loc(#loc)
    %50 = tt.expand_dims %49 {axis = 0 : i32} : tensor<32xi32> -> tensor<1x32xi32> loc(#loc)
    %51 = tt.broadcast %48 : tensor<32x1x!tt.ptr<bf16>> -> tensor<32x32x!tt.ptr<bf16>> loc(#loc)
    %52 = tt.broadcast %50 : tensor<1x32xi32> -> tensor<32x32xi32> loc(#loc)
    %53 = tt.addptr %51, %52 : tensor<32x32x!tt.ptr<bf16>>, tensor<32x32xi32> loc(#loc)
    %54 = arith.truncf %43 : tensor<32x32xf32> to tensor<32x32xbf16> loc(#loc)
    tt.store %53, %54 : tensor<32x32x!tt.ptr<bf16>> loc(#loc)
    tt.return loc(#loc)
  } loc(#loc)
} loc(#loc)
#loc = loc(unknown)


// -----// IR Dump Before Canonicalizer (canonicalize) ('builtin.module' operation) //----- //
#loc1 = loc("a_base")
#loc2 = loc("stride_a0")
#loc3 = loc("b_base")
#loc4 = loc("stride_b1")
#loc5 = loc("b_scale")
#loc6 = loc("out")
module {
  tt.func public @dot_scale_kernel(%a_base: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("a_base"), %stride_a0: i32 {tt.divisibility = 16 : i32} loc("stride_a0"), %b_base: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("b_base"), %stride_b1: i32 {tt.divisibility = 16 : i32} loc("stride_b1"), %b_scale: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("b_scale"), %out: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("out")) attributes {noinline = false} {
    %cst = arith.constant dense<32> : tensor<32x1xi32> loc(#loc)
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<32x32xf32> loc(#loc)
    %cst_1 = arith.constant dense<8> : tensor<32x1xi32> loc(#loc)
    %0 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32> loc(#loc)
    %1 = tt.expand_dims %0 {axis = 1 : i32} : tensor<32xi32> -> tensor<32x1xi32> loc(#loc)
    %2 = tt.splat %stride_a0 : i32 -> tensor<32x1xi32> loc(#loc)
    %3 = arith.muli %1, %2 : tensor<32x1xi32> loc(#loc)
    %4 = tt.splat %a_base : !tt.ptr<bf16> -> tensor<32x1x!tt.ptr<bf16>> loc(#loc)
    %5 = tt.addptr %4, %3 : tensor<32x1x!tt.ptr<bf16>>, tensor<32x1xi32> loc(#loc)
    %6 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32> loc(#loc)
    %7 = tt.expand_dims %6 {axis = 0 : i32} : tensor<256xi32> -> tensor<1x256xi32> loc(#loc)
    %8 = tt.broadcast %5 : tensor<32x1x!tt.ptr<bf16>> -> tensor<32x256x!tt.ptr<bf16>> loc(#loc)
    %9 = tt.broadcast %7 : tensor<1x256xi32> -> tensor<32x256xi32> loc(#loc)
    %10 = tt.addptr %8, %9 : tensor<32x256x!tt.ptr<bf16>>, tensor<32x256xi32> loc(#loc)
    %11 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32> loc(#loc)
    %12 = tt.expand_dims %11 {axis = 1 : i32} : tensor<128xi32> -> tensor<128x1xi32> loc(#loc)
    %13 = tt.splat %b_base : !tt.ptr<i8> -> tensor<128x1x!tt.ptr<i8>> loc(#loc)
    %14 = tt.addptr %13, %12 : tensor<128x1x!tt.ptr<i8>>, tensor<128x1xi32> loc(#loc)
    %15 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32> loc(#loc)
    %16 = tt.expand_dims %15 {axis = 0 : i32} : tensor<32xi32> -> tensor<1x32xi32> loc(#loc)
    %17 = tt.splat %stride_b1 : i32 -> tensor<1x32xi32> loc(#loc)
    %18 = arith.muli %16, %17 : tensor<1x32xi32> loc(#loc)
    %19 = tt.broadcast %14 : tensor<128x1x!tt.ptr<i8>> -> tensor<128x32x!tt.ptr<i8>> loc(#loc)
    %20 = tt.broadcast %18 : tensor<1x32xi32> -> tensor<128x32xi32> loc(#loc)
    %21 = tt.addptr %19, %20 : tensor<128x32x!tt.ptr<i8>>, tensor<128x32xi32> loc(#loc)
    %22 = tt.load %10 : tensor<32x256x!tt.ptr<bf16>> loc(#loc)
    %23 = tt.reshape %22 : tensor<32x256xbf16> -> tensor<32x2x128xbf16> loc(#loc)
    %24 = tt.trans %23 {order = array<i32: 0, 2, 1>} : tensor<32x2x128xbf16> -> tensor<32x128x2xbf16> loc(#loc)
    %outLHS, %outRHS = tt.split %24 : tensor<32x128x2xbf16> -> tensor<32x128xbf16> loc(#loc)
    %25 = tt.load %21 : tensor<128x32x!tt.ptr<i8>> loc(#loc)
    %26 = tt.reshape %25 : tensor<128x32xi8> -> tensor<2x64x32xi8> loc(#loc)
    %27 = tt.trans %26 {order = array<i32: 1, 2, 0>} : tensor<2x64x32xi8> -> tensor<64x32x2xi8> loc(#loc)
    %outLHS_2, %outRHS_3 = tt.split %27 : tensor<64x32x2xi8> -> tensor<64x32xi8> loc(#loc)
    %28 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32> loc(#loc)
    %29 = tt.expand_dims %28 {axis = 1 : i32} : tensor<32xi32> -> tensor<32x1xi32> loc(#loc)
    %30 = arith.muli %29, %cst_1 : tensor<32x1xi32> loc(#loc)
    %31 = tt.splat %b_scale : !tt.ptr<i8> -> tensor<32x1x!tt.ptr<i8>> loc(#loc)
    %32 = tt.addptr %31, %30 : tensor<32x1x!tt.ptr<i8>>, tensor<32x1xi32> loc(#loc)
    %33 = tt.make_range {end = 8 : i32, start = 0 : i32} : tensor<8xi32> loc(#loc)
    %34 = tt.expand_dims %33 {axis = 0 : i32} : tensor<8xi32> -> tensor<1x8xi32> loc(#loc)
    %35 = tt.broadcast %32 : tensor<32x1x!tt.ptr<i8>> -> tensor<32x8x!tt.ptr<i8>> loc(#loc)
    %36 = tt.broadcast %34 : tensor<1x8xi32> -> tensor<32x8xi32> loc(#loc)
    %37 = tt.addptr %35, %36 : tensor<32x8x!tt.ptr<i8>>, tensor<32x8xi32> loc(#loc)
    %38 = tt.load %37 : tensor<32x8x!tt.ptr<i8>> loc(#loc)
    %39 = tt.reshape %38 : tensor<32x8xi8> -> tensor<32x2x4xi8> loc(#loc)
    %40 = tt.trans %39 {order = array<i32: 0, 2, 1>} : tensor<32x2x4xi8> -> tensor<32x4x2xi8> loc(#loc)
    %outLHS_4, %outRHS_5 = tt.split %40 : tensor<32x4x2xi8> -> tensor<32x4xi8> loc(#loc)
    %41 = tt.dot_scaled %outLHS, %outLHS_2 scale %outLHS_4, %cst_0 lhs = bf16 rhs = e2m1 {fastMath = false} : tensor<32x128xbf16> * tensor<64x32xi8>, tensor<32x4xi8> -> tensor<32x32xf32> loc(#loc)
    %42 = tt.dot_scaled %outRHS, %outRHS_3 scale %outRHS_5, %cst_0 lhs = bf16 rhs = e2m1 {fastMath = false} : tensor<32x128xbf16> * tensor<64x32xi8>, tensor<32x4xi8> -> tensor<32x32xf32> loc(#loc)
    %43 = arith.addf %41, %42 : tensor<32x32xf32> loc(#loc)
    %44 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32> loc(#loc)
    %45 = tt.expand_dims %44 {axis = 1 : i32} : tensor<32xi32> -> tensor<32x1xi32> loc(#loc)
    %46 = arith.muli %45, %cst : tensor<32x1xi32> loc(#loc)
    %47 = tt.splat %out : !tt.ptr<bf16> -> tensor<32x1x!tt.ptr<bf16>> loc(#loc)
    %48 = tt.addptr %47, %46 : tensor<32x1x!tt.ptr<bf16>>, tensor<32x1xi32> loc(#loc)
    %49 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32> loc(#loc)
    %50 = tt.expand_dims %49 {axis = 0 : i32} : tensor<32xi32> -> tensor<1x32xi32> loc(#loc)
    %51 = tt.broadcast %48 : tensor<32x1x!tt.ptr<bf16>> -> tensor<32x32x!tt.ptr<bf16>> loc(#loc)
    %52 = tt.broadcast %50 : tensor<1x32xi32> -> tensor<32x32xi32> loc(#loc)
    %53 = tt.addptr %51, %52 : tensor<32x32x!tt.ptr<bf16>>, tensor<32x32xi32> loc(#loc)
    %54 = arith.truncf %43 : tensor<32x32xf32> to tensor<32x32xbf16> loc(#loc)
    tt.store %53, %54 : tensor<32x32x!tt.ptr<bf16>> loc(#loc)
    tt.return loc(#loc)
  } loc(#loc)
} loc(#loc)
#loc = loc(unknown)


// -----// IR Dump Before TritonCombineOps (triton-combine) ('builtin.module' operation) //----- //
#loc1 = loc("a_base")
#loc2 = loc("stride_a0")
#loc3 = loc("b_base")
#loc4 = loc("stride_b1")
#loc5 = loc("b_scale")
#loc6 = loc("out")
module {
  tt.func public @dot_scale_kernel(%a_base: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("a_base"), %stride_a0: i32 {tt.divisibility = 16 : i32} loc("stride_a0"), %b_base: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("b_base"), %stride_b1: i32 {tt.divisibility = 16 : i32} loc("stride_b1"), %b_scale: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("b_scale"), %out: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("out")) attributes {noinline = false} {
    %cst = arith.constant dense<32> : tensor<32x1xi32> loc(#loc)
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<32x32xf32> loc(#loc)
    %cst_1 = arith.constant dense<8> : tensor<32x1xi32> loc(#loc)
    %0 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32> loc(#loc)
    %1 = tt.expand_dims %0 {axis = 1 : i32} : tensor<32xi32> -> tensor<32x1xi32> loc(#loc)
    %2 = tt.splat %stride_a0 : i32 -> tensor<32x1xi32> loc(#loc)
    %3 = arith.muli %1, %2 : tensor<32x1xi32> loc(#loc)
    %4 = tt.splat %a_base : !tt.ptr<bf16> -> tensor<32x1x!tt.ptr<bf16>> loc(#loc)
    %5 = tt.addptr %4, %3 : tensor<32x1x!tt.ptr<bf16>>, tensor<32x1xi32> loc(#loc)
    %6 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32> loc(#loc)
    %7 = tt.expand_dims %6 {axis = 0 : i32} : tensor<256xi32> -> tensor<1x256xi32> loc(#loc)
    %8 = tt.broadcast %5 : tensor<32x1x!tt.ptr<bf16>> -> tensor<32x256x!tt.ptr<bf16>> loc(#loc)
    %9 = tt.broadcast %7 : tensor<1x256xi32> -> tensor<32x256xi32> loc(#loc)
    %10 = tt.addptr %8, %9 : tensor<32x256x!tt.ptr<bf16>>, tensor<32x256xi32> loc(#loc)
    %11 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32> loc(#loc)
    %12 = tt.expand_dims %11 {axis = 1 : i32} : tensor<128xi32> -> tensor<128x1xi32> loc(#loc)
    %13 = tt.splat %b_base : !tt.ptr<i8> -> tensor<128x1x!tt.ptr<i8>> loc(#loc)
    %14 = tt.addptr %13, %12 : tensor<128x1x!tt.ptr<i8>>, tensor<128x1xi32> loc(#loc)
    %15 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32> loc(#loc)
    %16 = tt.expand_dims %15 {axis = 0 : i32} : tensor<32xi32> -> tensor<1x32xi32> loc(#loc)
    %17 = tt.splat %stride_b1 : i32 -> tensor<1x32xi32> loc(#loc)
    %18 = arith.muli %16, %17 : tensor<1x32xi32> loc(#loc)
    %19 = tt.broadcast %14 : tensor<128x1x!tt.ptr<i8>> -> tensor<128x32x!tt.ptr<i8>> loc(#loc)
    %20 = tt.broadcast %18 : tensor<1x32xi32> -> tensor<128x32xi32> loc(#loc)
    %21 = tt.addptr %19, %20 : tensor<128x32x!tt.ptr<i8>>, tensor<128x32xi32> loc(#loc)
    %22 = tt.load %10 : tensor<32x256x!tt.ptr<bf16>> loc(#loc)
    %23 = tt.reshape %22 : tensor<32x256xbf16> -> tensor<32x2x128xbf16> loc(#loc)
    %24 = tt.trans %23 {order = array<i32: 0, 2, 1>} : tensor<32x2x128xbf16> -> tensor<32x128x2xbf16> loc(#loc)
    %outLHS, %outRHS = tt.split %24 : tensor<32x128x2xbf16> -> tensor<32x128xbf16> loc(#loc)
    %25 = tt.load %21 : tensor<128x32x!tt.ptr<i8>> loc(#loc)
    %26 = tt.reshape %25 : tensor<128x32xi8> -> tensor<2x64x32xi8> loc(#loc)
    %27 = tt.trans %26 {order = array<i32: 1, 2, 0>} : tensor<2x64x32xi8> -> tensor<64x32x2xi8> loc(#loc)
    %outLHS_2, %outRHS_3 = tt.split %27 : tensor<64x32x2xi8> -> tensor<64x32xi8> loc(#loc)
    %28 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32> loc(#loc)
    %29 = tt.expand_dims %28 {axis = 1 : i32} : tensor<32xi32> -> tensor<32x1xi32> loc(#loc)
    %30 = arith.muli %29, %cst_1 : tensor<32x1xi32> loc(#loc)
    %31 = tt.splat %b_scale : !tt.ptr<i8> -> tensor<32x1x!tt.ptr<i8>> loc(#loc)
    %32 = tt.addptr %31, %30 : tensor<32x1x!tt.ptr<i8>>, tensor<32x1xi32> loc(#loc)
    %33 = tt.make_range {end = 8 : i32, start = 0 : i32} : tensor<8xi32> loc(#loc)
    %34 = tt.expand_dims %33 {axis = 0 : i32} : tensor<8xi32> -> tensor<1x8xi32> loc(#loc)
    %35 = tt.broadcast %32 : tensor<32x1x!tt.ptr<i8>> -> tensor<32x8x!tt.ptr<i8>> loc(#loc)
    %36 = tt.broadcast %34 : tensor<1x8xi32> -> tensor<32x8xi32> loc(#loc)
    %37 = tt.addptr %35, %36 : tensor<32x8x!tt.ptr<i8>>, tensor<32x8xi32> loc(#loc)
    %38 = tt.load %37 : tensor<32x8x!tt.ptr<i8>> loc(#loc)
    %39 = tt.reshape %38 : tensor<32x8xi8> -> tensor<32x2x4xi8> loc(#loc)
    %40 = tt.trans %39 {order = array<i32: 0, 2, 1>} : tensor<32x2x4xi8> -> tensor<32x4x2xi8> loc(#loc)
    %outLHS_4, %outRHS_5 = tt.split %40 : tensor<32x4x2xi8> -> tensor<32x4xi8> loc(#loc)
    %41 = tt.dot_scaled %outLHS, %outLHS_2 scale %outLHS_4, %cst_0 lhs = bf16 rhs = e2m1 {fastMath = false} : tensor<32x128xbf16> * tensor<64x32xi8>, tensor<32x4xi8> -> tensor<32x32xf32> loc(#loc)
    %42 = tt.dot_scaled %outRHS, %outRHS_3 scale %outRHS_5, %cst_0 lhs = bf16 rhs = e2m1 {fastMath = false} : tensor<32x128xbf16> * tensor<64x32xi8>, tensor<32x4xi8> -> tensor<32x32xf32> loc(#loc)
    %43 = arith.addf %41, %42 : tensor<32x32xf32> loc(#loc)
    %44 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32> loc(#loc)
    %45 = tt.expand_dims %44 {axis = 1 : i32} : tensor<32xi32> -> tensor<32x1xi32> loc(#loc)
    %46 = arith.muli %45, %cst : tensor<32x1xi32> loc(#loc)
    %47 = tt.splat %out : !tt.ptr<bf16> -> tensor<32x1x!tt.ptr<bf16>> loc(#loc)
    %48 = tt.addptr %47, %46 : tensor<32x1x!tt.ptr<bf16>>, tensor<32x1xi32> loc(#loc)
    %49 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32> loc(#loc)
    %50 = tt.expand_dims %49 {axis = 0 : i32} : tensor<32xi32> -> tensor<1x32xi32> loc(#loc)
    %51 = tt.broadcast %48 : tensor<32x1x!tt.ptr<bf16>> -> tensor<32x32x!tt.ptr<bf16>> loc(#loc)
    %52 = tt.broadcast %50 : tensor<1x32xi32> -> tensor<32x32xi32> loc(#loc)
    %53 = tt.addptr %51, %52 : tensor<32x32x!tt.ptr<bf16>>, tensor<32x32xi32> loc(#loc)
    %54 = arith.truncf %43 : tensor<32x32xf32> to tensor<32x32xbf16> loc(#loc)
    tt.store %53, %54 : tensor<32x32x!tt.ptr<bf16>> loc(#loc)
    tt.return loc(#loc)
  } loc(#loc)
} loc(#loc)
#loc = loc(unknown)


// -----// IR Dump Before TritonReorderBroadcast (triton-reorder-broadcast) ('builtin.module' operation) //----- //
#loc1 = loc("a_base")
#loc2 = loc("stride_a0")
#loc3 = loc("b_base")
#loc4 = loc("stride_b1")
#loc5 = loc("b_scale")
#loc6 = loc("out")
module {
  tt.func public @dot_scale_kernel(%a_base: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("a_base"), %stride_a0: i32 {tt.divisibility = 16 : i32} loc("stride_a0"), %b_base: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("b_base"), %stride_b1: i32 {tt.divisibility = 16 : i32} loc("stride_b1"), %b_scale: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("b_scale"), %out: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("out")) attributes {noinline = false} {
    %cst = arith.constant dense<32> : tensor<32x1xi32> loc(#loc)
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<32x32xf32> loc(#loc)
    %cst_1 = arith.constant dense<8> : tensor<32x1xi32> loc(#loc)
    %0 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32> loc(#loc)
    %1 = tt.expand_dims %0 {axis = 1 : i32} : tensor<32xi32> -> tensor<32x1xi32> loc(#loc)
    %2 = tt.splat %stride_a0 : i32 -> tensor<32x1xi32> loc(#loc)
    %3 = arith.muli %1, %2 : tensor<32x1xi32> loc(#loc)
    %4 = tt.splat %a_base : !tt.ptr<bf16> -> tensor<32x1x!tt.ptr<bf16>> loc(#loc)
    %5 = tt.addptr %4, %3 : tensor<32x1x!tt.ptr<bf16>>, tensor<32x1xi32> loc(#loc)
    %6 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32> loc(#loc)
    %7 = tt.expand_dims %6 {axis = 0 : i32} : tensor<256xi32> -> tensor<1x256xi32> loc(#loc)
    %8 = tt.broadcast %5 : tensor<32x1x!tt.ptr<bf16>> -> tensor<32x256x!tt.ptr<bf16>> loc(#loc)
    %9 = tt.broadcast %7 : tensor<1x256xi32> -> tensor<32x256xi32> loc(#loc)
    %10 = tt.addptr %8, %9 : tensor<32x256x!tt.ptr<bf16>>, tensor<32x256xi32> loc(#loc)
    %11 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32> loc(#loc)
    %12 = tt.expand_dims %11 {axis = 1 : i32} : tensor<128xi32> -> tensor<128x1xi32> loc(#loc)
    %13 = tt.splat %b_base : !tt.ptr<i8> -> tensor<128x1x!tt.ptr<i8>> loc(#loc)
    %14 = tt.addptr %13, %12 : tensor<128x1x!tt.ptr<i8>>, tensor<128x1xi32> loc(#loc)
    %15 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32> loc(#loc)
    %16 = tt.expand_dims %15 {axis = 0 : i32} : tensor<32xi32> -> tensor<1x32xi32> loc(#loc)
    %17 = tt.splat %stride_b1 : i32 -> tensor<1x32xi32> loc(#loc)
    %18 = arith.muli %16, %17 : tensor<1x32xi32> loc(#loc)
    %19 = tt.broadcast %14 : tensor<128x1x!tt.ptr<i8>> -> tensor<128x32x!tt.ptr<i8>> loc(#loc)
    %20 = tt.broadcast %18 : tensor<1x32xi32> -> tensor<128x32xi32> loc(#loc)
    %21 = tt.addptr %19, %20 : tensor<128x32x!tt.ptr<i8>>, tensor<128x32xi32> loc(#loc)
    %22 = tt.load %10 : tensor<32x256x!tt.ptr<bf16>> loc(#loc)
    %23 = tt.reshape %22 : tensor<32x256xbf16> -> tensor<32x2x128xbf16> loc(#loc)
    %24 = tt.trans %23 {order = array<i32: 0, 2, 1>} : tensor<32x2x128xbf16> -> tensor<32x128x2xbf16> loc(#loc)
    %outLHS, %outRHS = tt.split %24 : tensor<32x128x2xbf16> -> tensor<32x128xbf16> loc(#loc)
    %25 = tt.load %21 : tensor<128x32x!tt.ptr<i8>> loc(#loc)
    %26 = tt.reshape %25 : tensor<128x32xi8> -> tensor<2x64x32xi8> loc(#loc)
    %27 = tt.trans %26 {order = array<i32: 1, 2, 0>} : tensor<2x64x32xi8> -> tensor<64x32x2xi8> loc(#loc)
    %outLHS_2, %outRHS_3 = tt.split %27 : tensor<64x32x2xi8> -> tensor<64x32xi8> loc(#loc)
    %28 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32> loc(#loc)
    %29 = tt.expand_dims %28 {axis = 1 : i32} : tensor<32xi32> -> tensor<32x1xi32> loc(#loc)
    %30 = arith.muli %29, %cst_1 : tensor<32x1xi32> loc(#loc)
    %31 = tt.splat %b_scale : !tt.ptr<i8> -> tensor<32x1x!tt.ptr<i8>> loc(#loc)
    %32 = tt.addptr %31, %30 : tensor<32x1x!tt.ptr<i8>>, tensor<32x1xi32> loc(#loc)
    %33 = tt.make_range {end = 8 : i32, start = 0 : i32} : tensor<8xi32> loc(#loc)
    %34 = tt.expand_dims %33 {axis = 0 : i32} : tensor<8xi32> -> tensor<1x8xi32> loc(#loc)
    %35 = tt.broadcast %32 : tensor<32x1x!tt.ptr<i8>> -> tensor<32x8x!tt.ptr<i8>> loc(#loc)
    %36 = tt.broadcast %34 : tensor<1x8xi32> -> tensor<32x8xi32> loc(#loc)
    %37 = tt.addptr %35, %36 : tensor<32x8x!tt.ptr<i8>>, tensor<32x8xi32> loc(#loc)
    %38 = tt.load %37 : tensor<32x8x!tt.ptr<i8>> loc(#loc)
    %39 = tt.reshape %38 : tensor<32x8xi8> -> tensor<32x2x4xi8> loc(#loc)
    %40 = tt.trans %39 {order = array<i32: 0, 2, 1>} : tensor<32x2x4xi8> -> tensor<32x4x2xi8> loc(#loc)
    %outLHS_4, %outRHS_5 = tt.split %40 : tensor<32x4x2xi8> -> tensor<32x4xi8> loc(#loc)
    %41 = tt.dot_scaled %outLHS, %outLHS_2 scale %outLHS_4, %cst_0 lhs = bf16 rhs = e2m1 {fastMath = false} : tensor<32x128xbf16> * tensor<64x32xi8>, tensor<32x4xi8> -> tensor<32x32xf32> loc(#loc)
    %42 = tt.dot_scaled %outRHS, %outRHS_3 scale %outRHS_5, %cst_0 lhs = bf16 rhs = e2m1 {fastMath = false} : tensor<32x128xbf16> * tensor<64x32xi8>, tensor<32x4xi8> -> tensor<32x32xf32> loc(#loc)
    %43 = arith.addf %41, %42 : tensor<32x32xf32> loc(#loc)
    %44 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32> loc(#loc)
    %45 = tt.expand_dims %44 {axis = 1 : i32} : tensor<32xi32> -> tensor<32x1xi32> loc(#loc)
    %46 = arith.muli %45, %cst : tensor<32x1xi32> loc(#loc)
    %47 = tt.splat %out : !tt.ptr<bf16> -> tensor<32x1x!tt.ptr<bf16>> loc(#loc)
    %48 = tt.addptr %47, %46 : tensor<32x1x!tt.ptr<bf16>>, tensor<32x1xi32> loc(#loc)
    %49 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32> loc(#loc)
    %50 = tt.expand_dims %49 {axis = 0 : i32} : tensor<32xi32> -> tensor<1x32xi32> loc(#loc)
    %51 = tt.broadcast %48 : tensor<32x1x!tt.ptr<bf16>> -> tensor<32x32x!tt.ptr<bf16>> loc(#loc)
    %52 = tt.broadcast %50 : tensor<1x32xi32> -> tensor<32x32xi32> loc(#loc)
    %53 = tt.addptr %51, %52 : tensor<32x32x!tt.ptr<bf16>>, tensor<32x32xi32> loc(#loc)
    %54 = arith.truncf %43 : tensor<32x32xf32> to tensor<32x32xbf16> loc(#loc)
    tt.store %53, %54 : tensor<32x32x!tt.ptr<bf16>> loc(#loc)
    tt.return loc(#loc)
  } loc(#loc)
} loc(#loc)
#loc = loc(unknown)


// -----// IR Dump Before CSE (cse) ('builtin.module' operation) //----- //
#loc1 = loc("a_base")
#loc2 = loc("stride_a0")
#loc3 = loc("b_base")
#loc4 = loc("stride_b1")
#loc5 = loc("b_scale")
#loc6 = loc("out")
module {
  tt.func public @dot_scale_kernel(%a_base: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("a_base"), %stride_a0: i32 {tt.divisibility = 16 : i32} loc("stride_a0"), %b_base: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("b_base"), %stride_b1: i32 {tt.divisibility = 16 : i32} loc("stride_b1"), %b_scale: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("b_scale"), %out: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("out")) attributes {noinline = false} {
    %cst = arith.constant dense<32> : tensor<32x1xi32> loc(#loc)
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<32x32xf32> loc(#loc)
    %cst_1 = arith.constant dense<8> : tensor<32x1xi32> loc(#loc)
    %0 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32> loc(#loc)
    %1 = tt.expand_dims %0 {axis = 1 : i32} : tensor<32xi32> -> tensor<32x1xi32> loc(#loc)
    %2 = tt.splat %stride_a0 : i32 -> tensor<32x1xi32> loc(#loc)
    %3 = arith.muli %1, %2 : tensor<32x1xi32> loc(#loc)
    %4 = tt.splat %a_base : !tt.ptr<bf16> -> tensor<32x1x!tt.ptr<bf16>> loc(#loc)
    %5 = tt.addptr %4, %3 : tensor<32x1x!tt.ptr<bf16>>, tensor<32x1xi32> loc(#loc)
    %6 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32> loc(#loc)
    %7 = tt.expand_dims %6 {axis = 0 : i32} : tensor<256xi32> -> tensor<1x256xi32> loc(#loc)
    %8 = tt.broadcast %5 : tensor<32x1x!tt.ptr<bf16>> -> tensor<32x256x!tt.ptr<bf16>> loc(#loc)
    %9 = tt.broadcast %7 : tensor<1x256xi32> -> tensor<32x256xi32> loc(#loc)
    %10 = tt.addptr %8, %9 : tensor<32x256x!tt.ptr<bf16>>, tensor<32x256xi32> loc(#loc)
    %11 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32> loc(#loc)
    %12 = tt.expand_dims %11 {axis = 1 : i32} : tensor<128xi32> -> tensor<128x1xi32> loc(#loc)
    %13 = tt.splat %b_base : !tt.ptr<i8> -> tensor<128x1x!tt.ptr<i8>> loc(#loc)
    %14 = tt.addptr %13, %12 : tensor<128x1x!tt.ptr<i8>>, tensor<128x1xi32> loc(#loc)
    %15 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32> loc(#loc)
    %16 = tt.expand_dims %15 {axis = 0 : i32} : tensor<32xi32> -> tensor<1x32xi32> loc(#loc)
    %17 = tt.splat %stride_b1 : i32 -> tensor<1x32xi32> loc(#loc)
    %18 = arith.muli %16, %17 : tensor<1x32xi32> loc(#loc)
    %19 = tt.broadcast %14 : tensor<128x1x!tt.ptr<i8>> -> tensor<128x32x!tt.ptr<i8>> loc(#loc)
    %20 = tt.broadcast %18 : tensor<1x32xi32> -> tensor<128x32xi32> loc(#loc)
    %21 = tt.addptr %19, %20 : tensor<128x32x!tt.ptr<i8>>, tensor<128x32xi32> loc(#loc)
    %22 = tt.load %10 : tensor<32x256x!tt.ptr<bf16>> loc(#loc)
    %23 = tt.reshape %22 : tensor<32x256xbf16> -> tensor<32x2x128xbf16> loc(#loc)
    %24 = tt.trans %23 {order = array<i32: 0, 2, 1>} : tensor<32x2x128xbf16> -> tensor<32x128x2xbf16> loc(#loc)
    %outLHS, %outRHS = tt.split %24 : tensor<32x128x2xbf16> -> tensor<32x128xbf16> loc(#loc)
    %25 = tt.load %21 : tensor<128x32x!tt.ptr<i8>> loc(#loc)
    %26 = tt.reshape %25 : tensor<128x32xi8> -> tensor<2x64x32xi8> loc(#loc)
    %27 = tt.trans %26 {order = array<i32: 1, 2, 0>} : tensor<2x64x32xi8> -> tensor<64x32x2xi8> loc(#loc)
    %outLHS_2, %outRHS_3 = tt.split %27 : tensor<64x32x2xi8> -> tensor<64x32xi8> loc(#loc)
    %28 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32> loc(#loc)
    %29 = tt.expand_dims %28 {axis = 1 : i32} : tensor<32xi32> -> tensor<32x1xi32> loc(#loc)
    %30 = arith.muli %29, %cst_1 : tensor<32x1xi32> loc(#loc)
    %31 = tt.splat %b_scale : !tt.ptr<i8> -> tensor<32x1x!tt.ptr<i8>> loc(#loc)
    %32 = tt.addptr %31, %30 : tensor<32x1x!tt.ptr<i8>>, tensor<32x1xi32> loc(#loc)
    %33 = tt.make_range {end = 8 : i32, start = 0 : i32} : tensor<8xi32> loc(#loc)
    %34 = tt.expand_dims %33 {axis = 0 : i32} : tensor<8xi32> -> tensor<1x8xi32> loc(#loc)
    %35 = tt.broadcast %32 : tensor<32x1x!tt.ptr<i8>> -> tensor<32x8x!tt.ptr<i8>> loc(#loc)
    %36 = tt.broadcast %34 : tensor<1x8xi32> -> tensor<32x8xi32> loc(#loc)
    %37 = tt.addptr %35, %36 : tensor<32x8x!tt.ptr<i8>>, tensor<32x8xi32> loc(#loc)
    %38 = tt.load %37 : tensor<32x8x!tt.ptr<i8>> loc(#loc)
    %39 = tt.reshape %38 : tensor<32x8xi8> -> tensor<32x2x4xi8> loc(#loc)
    %40 = tt.trans %39 {order = array<i32: 0, 2, 1>} : tensor<32x2x4xi8> -> tensor<32x4x2xi8> loc(#loc)
    %outLHS_4, %outRHS_5 = tt.split %40 : tensor<32x4x2xi8> -> tensor<32x4xi8> loc(#loc)
    %41 = tt.dot_scaled %outLHS, %outLHS_2 scale %outLHS_4, %cst_0 lhs = bf16 rhs = e2m1 {fastMath = false} : tensor<32x128xbf16> * tensor<64x32xi8>, tensor<32x4xi8> -> tensor<32x32xf32> loc(#loc)
    %42 = tt.dot_scaled %outRHS, %outRHS_3 scale %outRHS_5, %cst_0 lhs = bf16 rhs = e2m1 {fastMath = false} : tensor<32x128xbf16> * tensor<64x32xi8>, tensor<32x4xi8> -> tensor<32x32xf32> loc(#loc)
    %43 = arith.addf %41, %42 : tensor<32x32xf32> loc(#loc)
    %44 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32> loc(#loc)
    %45 = tt.expand_dims %44 {axis = 1 : i32} : tensor<32xi32> -> tensor<32x1xi32> loc(#loc)
    %46 = arith.muli %45, %cst : tensor<32x1xi32> loc(#loc)
    %47 = tt.splat %out : !tt.ptr<bf16> -> tensor<32x1x!tt.ptr<bf16>> loc(#loc)
    %48 = tt.addptr %47, %46 : tensor<32x1x!tt.ptr<bf16>>, tensor<32x1xi32> loc(#loc)
    %49 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32> loc(#loc)
    %50 = tt.expand_dims %49 {axis = 0 : i32} : tensor<32xi32> -> tensor<1x32xi32> loc(#loc)
    %51 = tt.broadcast %48 : tensor<32x1x!tt.ptr<bf16>> -> tensor<32x32x!tt.ptr<bf16>> loc(#loc)
    %52 = tt.broadcast %50 : tensor<1x32xi32> -> tensor<32x32xi32> loc(#loc)
    %53 = tt.addptr %51, %52 : tensor<32x32x!tt.ptr<bf16>>, tensor<32x32xi32> loc(#loc)
    %54 = arith.truncf %43 : tensor<32x32xf32> to tensor<32x32xbf16> loc(#loc)
    tt.store %53, %54 : tensor<32x32x!tt.ptr<bf16>> loc(#loc)
    tt.return loc(#loc)
  } loc(#loc)
} loc(#loc)
#loc = loc(unknown)


// -----// IR Dump Before TritonLoopInvariantCodeMotion (triton-licm) ('builtin.module' operation) //----- //
#loc1 = loc("a_base")
#loc2 = loc("stride_a0")
#loc3 = loc("b_base")
#loc4 = loc("stride_b1")
#loc5 = loc("b_scale")
#loc6 = loc("out")
module {
  tt.func public @dot_scale_kernel(%a_base: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("a_base"), %stride_a0: i32 {tt.divisibility = 16 : i32} loc("stride_a0"), %b_base: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("b_base"), %stride_b1: i32 {tt.divisibility = 16 : i32} loc("stride_b1"), %b_scale: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("b_scale"), %out: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("out")) attributes {noinline = false} {
    %cst = arith.constant dense<32> : tensor<32x1xi32> loc(#loc)
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<32x32xf32> loc(#loc)
    %cst_1 = arith.constant dense<8> : tensor<32x1xi32> loc(#loc)
    %0 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32> loc(#loc)
    %1 = tt.expand_dims %0 {axis = 1 : i32} : tensor<32xi32> -> tensor<32x1xi32> loc(#loc)
    %2 = tt.splat %stride_a0 : i32 -> tensor<32x1xi32> loc(#loc)
    %3 = arith.muli %1, %2 : tensor<32x1xi32> loc(#loc)
    %4 = tt.splat %a_base : !tt.ptr<bf16> -> tensor<32x1x!tt.ptr<bf16>> loc(#loc)
    %5 = tt.addptr %4, %3 : tensor<32x1x!tt.ptr<bf16>>, tensor<32x1xi32> loc(#loc)
    %6 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32> loc(#loc)
    %7 = tt.expand_dims %6 {axis = 0 : i32} : tensor<256xi32> -> tensor<1x256xi32> loc(#loc)
    %8 = tt.broadcast %5 : tensor<32x1x!tt.ptr<bf16>> -> tensor<32x256x!tt.ptr<bf16>> loc(#loc)
    %9 = tt.broadcast %7 : tensor<1x256xi32> -> tensor<32x256xi32> loc(#loc)
    %10 = tt.addptr %8, %9 : tensor<32x256x!tt.ptr<bf16>>, tensor<32x256xi32> loc(#loc)
    %11 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32> loc(#loc)
    %12 = tt.expand_dims %11 {axis = 1 : i32} : tensor<128xi32> -> tensor<128x1xi32> loc(#loc)
    %13 = tt.splat %b_base : !tt.ptr<i8> -> tensor<128x1x!tt.ptr<i8>> loc(#loc)
    %14 = tt.addptr %13, %12 : tensor<128x1x!tt.ptr<i8>>, tensor<128x1xi32> loc(#loc)
    %15 = tt.expand_dims %0 {axis = 0 : i32} : tensor<32xi32> -> tensor<1x32xi32> loc(#loc)
    %16 = tt.splat %stride_b1 : i32 -> tensor<1x32xi32> loc(#loc)
    %17 = arith.muli %15, %16 : tensor<1x32xi32> loc(#loc)
    %18 = tt.broadcast %14 : tensor<128x1x!tt.ptr<i8>> -> tensor<128x32x!tt.ptr<i8>> loc(#loc)
    %19 = tt.broadcast %17 : tensor<1x32xi32> -> tensor<128x32xi32> loc(#loc)
    %20 = tt.addptr %18, %19 : tensor<128x32x!tt.ptr<i8>>, tensor<128x32xi32> loc(#loc)
    %21 = tt.load %10 : tensor<32x256x!tt.ptr<bf16>> loc(#loc)
    %22 = tt.reshape %21 : tensor<32x256xbf16> -> tensor<32x2x128xbf16> loc(#loc)
    %23 = tt.trans %22 {order = array<i32: 0, 2, 1>} : tensor<32x2x128xbf16> -> tensor<32x128x2xbf16> loc(#loc)
    %outLHS, %outRHS = tt.split %23 : tensor<32x128x2xbf16> -> tensor<32x128xbf16> loc(#loc)
    %24 = tt.load %20 : tensor<128x32x!tt.ptr<i8>> loc(#loc)
    %25 = tt.reshape %24 : tensor<128x32xi8> -> tensor<2x64x32xi8> loc(#loc)
    %26 = tt.trans %25 {order = array<i32: 1, 2, 0>} : tensor<2x64x32xi8> -> tensor<64x32x2xi8> loc(#loc)
    %outLHS_2, %outRHS_3 = tt.split %26 : tensor<64x32x2xi8> -> tensor<64x32xi8> loc(#loc)
    %27 = arith.muli %1, %cst_1 : tensor<32x1xi32> loc(#loc)
    %28 = tt.splat %b_scale : !tt.ptr<i8> -> tensor<32x1x!tt.ptr<i8>> loc(#loc)
    %29 = tt.addptr %28, %27 : tensor<32x1x!tt.ptr<i8>>, tensor<32x1xi32> loc(#loc)
    %30 = tt.make_range {end = 8 : i32, start = 0 : i32} : tensor<8xi32> loc(#loc)
    %31 = tt.expand_dims %30 {axis = 0 : i32} : tensor<8xi32> -> tensor<1x8xi32> loc(#loc)
    %32 = tt.broadcast %29 : tensor<32x1x!tt.ptr<i8>> -> tensor<32x8x!tt.ptr<i8>> loc(#loc)
    %33 = tt.broadcast %31 : tensor<1x8xi32> -> tensor<32x8xi32> loc(#loc)
    %34 = tt.addptr %32, %33 : tensor<32x8x!tt.ptr<i8>>, tensor<32x8xi32> loc(#loc)
    %35 = tt.load %34 : tensor<32x8x!tt.ptr<i8>> loc(#loc)
    %36 = tt.reshape %35 : tensor<32x8xi8> -> tensor<32x2x4xi8> loc(#loc)
    %37 = tt.trans %36 {order = array<i32: 0, 2, 1>} : tensor<32x2x4xi8> -> tensor<32x4x2xi8> loc(#loc)
    %outLHS_4, %outRHS_5 = tt.split %37 : tensor<32x4x2xi8> -> tensor<32x4xi8> loc(#loc)
    %38 = tt.dot_scaled %outLHS, %outLHS_2 scale %outLHS_4, %cst_0 lhs = bf16 rhs = e2m1 {fastMath = false} : tensor<32x128xbf16> * tensor<64x32xi8>, tensor<32x4xi8> -> tensor<32x32xf32> loc(#loc)
    %39 = tt.dot_scaled %outRHS, %outRHS_3 scale %outRHS_5, %cst_0 lhs = bf16 rhs = e2m1 {fastMath = false} : tensor<32x128xbf16> * tensor<64x32xi8>, tensor<32x4xi8> -> tensor<32x32xf32> loc(#loc)
    %40 = arith.addf %38, %39 : tensor<32x32xf32> loc(#loc)
    %41 = arith.muli %1, %cst : tensor<32x1xi32> loc(#loc)
    %42 = tt.splat %out : !tt.ptr<bf16> -> tensor<32x1x!tt.ptr<bf16>> loc(#loc)
    %43 = tt.addptr %42, %41 : tensor<32x1x!tt.ptr<bf16>>, tensor<32x1xi32> loc(#loc)
    %44 = tt.broadcast %43 : tensor<32x1x!tt.ptr<bf16>> -> tensor<32x32x!tt.ptr<bf16>> loc(#loc)
    %45 = tt.broadcast %15 : tensor<1x32xi32> -> tensor<32x32xi32> loc(#loc)
    %46 = tt.addptr %44, %45 : tensor<32x32x!tt.ptr<bf16>>, tensor<32x32xi32> loc(#loc)
    %47 = arith.truncf %40 : tensor<32x32xf32> to tensor<32x32xbf16> loc(#loc)
    tt.store %46, %47 : tensor<32x32x!tt.ptr<bf16>> loc(#loc)
    tt.return loc(#loc)
  } loc(#loc)
} loc(#loc)
#loc = loc(unknown)


// -----// IR Dump Before SymbolDCE (symbol-dce) ('builtin.module' operation) //----- //
#loc1 = loc("a_base")
#loc2 = loc("stride_a0")
#loc3 = loc("b_base")
#loc4 = loc("stride_b1")
#loc5 = loc("b_scale")
#loc6 = loc("out")
module {
  tt.func public @dot_scale_kernel(%a_base: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("a_base"), %stride_a0: i32 {tt.divisibility = 16 : i32} loc("stride_a0"), %b_base: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("b_base"), %stride_b1: i32 {tt.divisibility = 16 : i32} loc("stride_b1"), %b_scale: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("b_scale"), %out: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("out")) attributes {noinline = false} {
    %cst = arith.constant dense<32> : tensor<32x1xi32> loc(#loc)
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<32x32xf32> loc(#loc)
    %cst_1 = arith.constant dense<8> : tensor<32x1xi32> loc(#loc)
    %0 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32> loc(#loc)
    %1 = tt.expand_dims %0 {axis = 1 : i32} : tensor<32xi32> -> tensor<32x1xi32> loc(#loc)
    %2 = tt.splat %stride_a0 : i32 -> tensor<32x1xi32> loc(#loc)
    %3 = arith.muli %1, %2 : tensor<32x1xi32> loc(#loc)
    %4 = tt.splat %a_base : !tt.ptr<bf16> -> tensor<32x1x!tt.ptr<bf16>> loc(#loc)
    %5 = tt.addptr %4, %3 : tensor<32x1x!tt.ptr<bf16>>, tensor<32x1xi32> loc(#loc)
    %6 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32> loc(#loc)
    %7 = tt.expand_dims %6 {axis = 0 : i32} : tensor<256xi32> -> tensor<1x256xi32> loc(#loc)
    %8 = tt.broadcast %5 : tensor<32x1x!tt.ptr<bf16>> -> tensor<32x256x!tt.ptr<bf16>> loc(#loc)
    %9 = tt.broadcast %7 : tensor<1x256xi32> -> tensor<32x256xi32> loc(#loc)
    %10 = tt.addptr %8, %9 : tensor<32x256x!tt.ptr<bf16>>, tensor<32x256xi32> loc(#loc)
    %11 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32> loc(#loc)
    %12 = tt.expand_dims %11 {axis = 1 : i32} : tensor<128xi32> -> tensor<128x1xi32> loc(#loc)
    %13 = tt.splat %b_base : !tt.ptr<i8> -> tensor<128x1x!tt.ptr<i8>> loc(#loc)
    %14 = tt.addptr %13, %12 : tensor<128x1x!tt.ptr<i8>>, tensor<128x1xi32> loc(#loc)
    %15 = tt.expand_dims %0 {axis = 0 : i32} : tensor<32xi32> -> tensor<1x32xi32> loc(#loc)
    %16 = tt.splat %stride_b1 : i32 -> tensor<1x32xi32> loc(#loc)
    %17 = arith.muli %15, %16 : tensor<1x32xi32> loc(#loc)
    %18 = tt.broadcast %14 : tensor<128x1x!tt.ptr<i8>> -> tensor<128x32x!tt.ptr<i8>> loc(#loc)
    %19 = tt.broadcast %17 : tensor<1x32xi32> -> tensor<128x32xi32> loc(#loc)
    %20 = tt.addptr %18, %19 : tensor<128x32x!tt.ptr<i8>>, tensor<128x32xi32> loc(#loc)
    %21 = tt.load %10 : tensor<32x256x!tt.ptr<bf16>> loc(#loc)
    %22 = tt.reshape %21 : tensor<32x256xbf16> -> tensor<32x2x128xbf16> loc(#loc)
    %23 = tt.trans %22 {order = array<i32: 0, 2, 1>} : tensor<32x2x128xbf16> -> tensor<32x128x2xbf16> loc(#loc)
    %outLHS, %outRHS = tt.split %23 : tensor<32x128x2xbf16> -> tensor<32x128xbf16> loc(#loc)
    %24 = tt.load %20 : tensor<128x32x!tt.ptr<i8>> loc(#loc)
    %25 = tt.reshape %24 : tensor<128x32xi8> -> tensor<2x64x32xi8> loc(#loc)
    %26 = tt.trans %25 {order = array<i32: 1, 2, 0>} : tensor<2x64x32xi8> -> tensor<64x32x2xi8> loc(#loc)
    %outLHS_2, %outRHS_3 = tt.split %26 : tensor<64x32x2xi8> -> tensor<64x32xi8> loc(#loc)
    %27 = arith.muli %1, %cst_1 : tensor<32x1xi32> loc(#loc)
    %28 = tt.splat %b_scale : !tt.ptr<i8> -> tensor<32x1x!tt.ptr<i8>> loc(#loc)
    %29 = tt.addptr %28, %27 : tensor<32x1x!tt.ptr<i8>>, tensor<32x1xi32> loc(#loc)
    %30 = tt.make_range {end = 8 : i32, start = 0 : i32} : tensor<8xi32> loc(#loc)
    %31 = tt.expand_dims %30 {axis = 0 : i32} : tensor<8xi32> -> tensor<1x8xi32> loc(#loc)
    %32 = tt.broadcast %29 : tensor<32x1x!tt.ptr<i8>> -> tensor<32x8x!tt.ptr<i8>> loc(#loc)
    %33 = tt.broadcast %31 : tensor<1x8xi32> -> tensor<32x8xi32> loc(#loc)
    %34 = tt.addptr %32, %33 : tensor<32x8x!tt.ptr<i8>>, tensor<32x8xi32> loc(#loc)
    %35 = tt.load %34 : tensor<32x8x!tt.ptr<i8>> loc(#loc)
    %36 = tt.reshape %35 : tensor<32x8xi8> -> tensor<32x2x4xi8> loc(#loc)
    %37 = tt.trans %36 {order = array<i32: 0, 2, 1>} : tensor<32x2x4xi8> -> tensor<32x4x2xi8> loc(#loc)
    %outLHS_4, %outRHS_5 = tt.split %37 : tensor<32x4x2xi8> -> tensor<32x4xi8> loc(#loc)
    %38 = tt.dot_scaled %outLHS, %outLHS_2 scale %outLHS_4, %cst_0 lhs = bf16 rhs = e2m1 {fastMath = false} : tensor<32x128xbf16> * tensor<64x32xi8>, tensor<32x4xi8> -> tensor<32x32xf32> loc(#loc)
    %39 = tt.dot_scaled %outRHS, %outRHS_3 scale %outRHS_5, %cst_0 lhs = bf16 rhs = e2m1 {fastMath = false} : tensor<32x128xbf16> * tensor<64x32xi8>, tensor<32x4xi8> -> tensor<32x32xf32> loc(#loc)
    %40 = arith.addf %38, %39 : tensor<32x32xf32> loc(#loc)
    %41 = arith.muli %1, %cst : tensor<32x1xi32> loc(#loc)
    %42 = tt.splat %out : !tt.ptr<bf16> -> tensor<32x1x!tt.ptr<bf16>> loc(#loc)
    %43 = tt.addptr %42, %41 : tensor<32x1x!tt.ptr<bf16>>, tensor<32x1xi32> loc(#loc)
    %44 = tt.broadcast %43 : tensor<32x1x!tt.ptr<bf16>> -> tensor<32x32x!tt.ptr<bf16>> loc(#loc)
    %45 = tt.broadcast %15 : tensor<1x32xi32> -> tensor<32x32xi32> loc(#loc)
    %46 = tt.addptr %44, %45 : tensor<32x32x!tt.ptr<bf16>>, tensor<32x32xi32> loc(#loc)
    %47 = arith.truncf %40 : tensor<32x32xf32> to tensor<32x32xbf16> loc(#loc)
    tt.store %46, %47 : tensor<32x32x!tt.ptr<bf16>> loc(#loc)
    tt.return loc(#loc)
  } loc(#loc)
} loc(#loc)
#loc = loc(unknown)


// -----// IR Dump Before TritonLoopUnroll (triton-loop-unroll) ('builtin.module' operation) //----- //
#loc1 = loc("a_base")
#loc2 = loc("stride_a0")
#loc3 = loc("b_base")
#loc4 = loc("stride_b1")
#loc5 = loc("b_scale")
#loc6 = loc("out")
module {
  tt.func public @dot_scale_kernel(%a_base: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("a_base"), %stride_a0: i32 {tt.divisibility = 16 : i32} loc("stride_a0"), %b_base: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("b_base"), %stride_b1: i32 {tt.divisibility = 16 : i32} loc("stride_b1"), %b_scale: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("b_scale"), %out: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("out")) attributes {noinline = false} {
    %cst = arith.constant dense<32> : tensor<32x1xi32> loc(#loc)
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<32x32xf32> loc(#loc)
    %cst_1 = arith.constant dense<8> : tensor<32x1xi32> loc(#loc)
    %0 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32> loc(#loc)
    %1 = tt.expand_dims %0 {axis = 1 : i32} : tensor<32xi32> -> tensor<32x1xi32> loc(#loc)
    %2 = tt.splat %stride_a0 : i32 -> tensor<32x1xi32> loc(#loc)
    %3 = arith.muli %1, %2 : tensor<32x1xi32> loc(#loc)
    %4 = tt.splat %a_base : !tt.ptr<bf16> -> tensor<32x1x!tt.ptr<bf16>> loc(#loc)
    %5 = tt.addptr %4, %3 : tensor<32x1x!tt.ptr<bf16>>, tensor<32x1xi32> loc(#loc)
    %6 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32> loc(#loc)
    %7 = tt.expand_dims %6 {axis = 0 : i32} : tensor<256xi32> -> tensor<1x256xi32> loc(#loc)
    %8 = tt.broadcast %5 : tensor<32x1x!tt.ptr<bf16>> -> tensor<32x256x!tt.ptr<bf16>> loc(#loc)
    %9 = tt.broadcast %7 : tensor<1x256xi32> -> tensor<32x256xi32> loc(#loc)
    %10 = tt.addptr %8, %9 : tensor<32x256x!tt.ptr<bf16>>, tensor<32x256xi32> loc(#loc)
    %11 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32> loc(#loc)
    %12 = tt.expand_dims %11 {axis = 1 : i32} : tensor<128xi32> -> tensor<128x1xi32> loc(#loc)
    %13 = tt.splat %b_base : !tt.ptr<i8> -> tensor<128x1x!tt.ptr<i8>> loc(#loc)
    %14 = tt.addptr %13, %12 : tensor<128x1x!tt.ptr<i8>>, tensor<128x1xi32> loc(#loc)
    %15 = tt.expand_dims %0 {axis = 0 : i32} : tensor<32xi32> -> tensor<1x32xi32> loc(#loc)
    %16 = tt.splat %stride_b1 : i32 -> tensor<1x32xi32> loc(#loc)
    %17 = arith.muli %15, %16 : tensor<1x32xi32> loc(#loc)
    %18 = tt.broadcast %14 : tensor<128x1x!tt.ptr<i8>> -> tensor<128x32x!tt.ptr<i8>> loc(#loc)
    %19 = tt.broadcast %17 : tensor<1x32xi32> -> tensor<128x32xi32> loc(#loc)
    %20 = tt.addptr %18, %19 : tensor<128x32x!tt.ptr<i8>>, tensor<128x32xi32> loc(#loc)
    %21 = tt.load %10 : tensor<32x256x!tt.ptr<bf16>> loc(#loc)
    %22 = tt.reshape %21 : tensor<32x256xbf16> -> tensor<32x2x128xbf16> loc(#loc)
    %23 = tt.trans %22 {order = array<i32: 0, 2, 1>} : tensor<32x2x128xbf16> -> tensor<32x128x2xbf16> loc(#loc)
    %outLHS, %outRHS = tt.split %23 : tensor<32x128x2xbf16> -> tensor<32x128xbf16> loc(#loc)
    %24 = tt.load %20 : tensor<128x32x!tt.ptr<i8>> loc(#loc)
    %25 = tt.reshape %24 : tensor<128x32xi8> -> tensor<2x64x32xi8> loc(#loc)
    %26 = tt.trans %25 {order = array<i32: 1, 2, 0>} : tensor<2x64x32xi8> -> tensor<64x32x2xi8> loc(#loc)
    %outLHS_2, %outRHS_3 = tt.split %26 : tensor<64x32x2xi8> -> tensor<64x32xi8> loc(#loc)
    %27 = arith.muli %1, %cst_1 : tensor<32x1xi32> loc(#loc)
    %28 = tt.splat %b_scale : !tt.ptr<i8> -> tensor<32x1x!tt.ptr<i8>> loc(#loc)
    %29 = tt.addptr %28, %27 : tensor<32x1x!tt.ptr<i8>>, tensor<32x1xi32> loc(#loc)
    %30 = tt.make_range {end = 8 : i32, start = 0 : i32} : tensor<8xi32> loc(#loc)
    %31 = tt.expand_dims %30 {axis = 0 : i32} : tensor<8xi32> -> tensor<1x8xi32> loc(#loc)
    %32 = tt.broadcast %29 : tensor<32x1x!tt.ptr<i8>> -> tensor<32x8x!tt.ptr<i8>> loc(#loc)
    %33 = tt.broadcast %31 : tensor<1x8xi32> -> tensor<32x8xi32> loc(#loc)
    %34 = tt.addptr %32, %33 : tensor<32x8x!tt.ptr<i8>>, tensor<32x8xi32> loc(#loc)
    %35 = tt.load %34 : tensor<32x8x!tt.ptr<i8>> loc(#loc)
    %36 = tt.reshape %35 : tensor<32x8xi8> -> tensor<32x2x4xi8> loc(#loc)
    %37 = tt.trans %36 {order = array<i32: 0, 2, 1>} : tensor<32x2x4xi8> -> tensor<32x4x2xi8> loc(#loc)
    %outLHS_4, %outRHS_5 = tt.split %37 : tensor<32x4x2xi8> -> tensor<32x4xi8> loc(#loc)
    %38 = tt.dot_scaled %outLHS, %outLHS_2 scale %outLHS_4, %cst_0 lhs = bf16 rhs = e2m1 {fastMath = false} : tensor<32x128xbf16> * tensor<64x32xi8>, tensor<32x4xi8> -> tensor<32x32xf32> loc(#loc)
    %39 = tt.dot_scaled %outRHS, %outRHS_3 scale %outRHS_5, %cst_0 lhs = bf16 rhs = e2m1 {fastMath = false} : tensor<32x128xbf16> * tensor<64x32xi8>, tensor<32x4xi8> -> tensor<32x32xf32> loc(#loc)
    %40 = arith.addf %38, %39 : tensor<32x32xf32> loc(#loc)
    %41 = arith.muli %1, %cst : tensor<32x1xi32> loc(#loc)
    %42 = tt.splat %out : !tt.ptr<bf16> -> tensor<32x1x!tt.ptr<bf16>> loc(#loc)
    %43 = tt.addptr %42, %41 : tensor<32x1x!tt.ptr<bf16>>, tensor<32x1xi32> loc(#loc)
    %44 = tt.broadcast %43 : tensor<32x1x!tt.ptr<bf16>> -> tensor<32x32x!tt.ptr<bf16>> loc(#loc)
    %45 = tt.broadcast %15 : tensor<1x32xi32> -> tensor<32x32xi32> loc(#loc)
    %46 = tt.addptr %44, %45 : tensor<32x32x!tt.ptr<bf16>>, tensor<32x32xi32> loc(#loc)
    %47 = arith.truncf %40 : tensor<32x32xf32> to tensor<32x32xbf16> loc(#loc)
    tt.store %46, %47 : tensor<32x32x!tt.ptr<bf16>> loc(#loc)
    tt.return loc(#loc)
  } loc(#loc)
} loc(#loc)
#loc = loc(unknown)


// -----// IR Dump Before ConvertTritonToTritonGPU (convert-triton-to-tritongpu) ('builtin.module' operation) //----- //
#loc1 = loc("a_base")
#loc2 = loc("stride_a0")
#loc3 = loc("b_base")
#loc4 = loc("stride_b1")
#loc5 = loc("b_scale")
#loc6 = loc("out")
module {
  tt.func public @dot_scale_kernel(%a_base: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("a_base"), %stride_a0: i32 {tt.divisibility = 16 : i32} loc("stride_a0"), %b_base: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("b_base"), %stride_b1: i32 {tt.divisibility = 16 : i32} loc("stride_b1"), %b_scale: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("b_scale"), %out: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("out")) attributes {noinline = false} {
    %cst = arith.constant dense<32> : tensor<32x1xi32> loc(#loc)
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<32x32xf32> loc(#loc)
    %cst_1 = arith.constant dense<8> : tensor<32x1xi32> loc(#loc)
    %0 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32> loc(#loc)
    %1 = tt.expand_dims %0 {axis = 1 : i32} : tensor<32xi32> -> tensor<32x1xi32> loc(#loc)
    %2 = tt.splat %stride_a0 : i32 -> tensor<32x1xi32> loc(#loc)
    %3 = arith.muli %1, %2 : tensor<32x1xi32> loc(#loc)
    %4 = tt.splat %a_base : !tt.ptr<bf16> -> tensor<32x1x!tt.ptr<bf16>> loc(#loc)
    %5 = tt.addptr %4, %3 : tensor<32x1x!tt.ptr<bf16>>, tensor<32x1xi32> loc(#loc)
    %6 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32> loc(#loc)
    %7 = tt.expand_dims %6 {axis = 0 : i32} : tensor<256xi32> -> tensor<1x256xi32> loc(#loc)
    %8 = tt.broadcast %5 : tensor<32x1x!tt.ptr<bf16>> -> tensor<32x256x!tt.ptr<bf16>> loc(#loc)
    %9 = tt.broadcast %7 : tensor<1x256xi32> -> tensor<32x256xi32> loc(#loc)
    %10 = tt.addptr %8, %9 : tensor<32x256x!tt.ptr<bf16>>, tensor<32x256xi32> loc(#loc)
    %11 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32> loc(#loc)
    %12 = tt.expand_dims %11 {axis = 1 : i32} : tensor<128xi32> -> tensor<128x1xi32> loc(#loc)
    %13 = tt.splat %b_base : !tt.ptr<i8> -> tensor<128x1x!tt.ptr<i8>> loc(#loc)
    %14 = tt.addptr %13, %12 : tensor<128x1x!tt.ptr<i8>>, tensor<128x1xi32> loc(#loc)
    %15 = tt.expand_dims %0 {axis = 0 : i32} : tensor<32xi32> -> tensor<1x32xi32> loc(#loc)
    %16 = tt.splat %stride_b1 : i32 -> tensor<1x32xi32> loc(#loc)
    %17 = arith.muli %15, %16 : tensor<1x32xi32> loc(#loc)
    %18 = tt.broadcast %14 : tensor<128x1x!tt.ptr<i8>> -> tensor<128x32x!tt.ptr<i8>> loc(#loc)
    %19 = tt.broadcast %17 : tensor<1x32xi32> -> tensor<128x32xi32> loc(#loc)
    %20 = tt.addptr %18, %19 : tensor<128x32x!tt.ptr<i8>>, tensor<128x32xi32> loc(#loc)
    %21 = tt.load %10 : tensor<32x256x!tt.ptr<bf16>> loc(#loc)
    %22 = tt.reshape %21 : tensor<32x256xbf16> -> tensor<32x2x128xbf16> loc(#loc)
    %23 = tt.trans %22 {order = array<i32: 0, 2, 1>} : tensor<32x2x128xbf16> -> tensor<32x128x2xbf16> loc(#loc)
    %outLHS, %outRHS = tt.split %23 : tensor<32x128x2xbf16> -> tensor<32x128xbf16> loc(#loc)
    %24 = tt.load %20 : tensor<128x32x!tt.ptr<i8>> loc(#loc)
    %25 = tt.reshape %24 : tensor<128x32xi8> -> tensor<2x64x32xi8> loc(#loc)
    %26 = tt.trans %25 {order = array<i32: 1, 2, 0>} : tensor<2x64x32xi8> -> tensor<64x32x2xi8> loc(#loc)
    %outLHS_2, %outRHS_3 = tt.split %26 : tensor<64x32x2xi8> -> tensor<64x32xi8> loc(#loc)
    %27 = arith.muli %1, %cst_1 : tensor<32x1xi32> loc(#loc)
    %28 = tt.splat %b_scale : !tt.ptr<i8> -> tensor<32x1x!tt.ptr<i8>> loc(#loc)
    %29 = tt.addptr %28, %27 : tensor<32x1x!tt.ptr<i8>>, tensor<32x1xi32> loc(#loc)
    %30 = tt.make_range {end = 8 : i32, start = 0 : i32} : tensor<8xi32> loc(#loc)
    %31 = tt.expand_dims %30 {axis = 0 : i32} : tensor<8xi32> -> tensor<1x8xi32> loc(#loc)
    %32 = tt.broadcast %29 : tensor<32x1x!tt.ptr<i8>> -> tensor<32x8x!tt.ptr<i8>> loc(#loc)
    %33 = tt.broadcast %31 : tensor<1x8xi32> -> tensor<32x8xi32> loc(#loc)
    %34 = tt.addptr %32, %33 : tensor<32x8x!tt.ptr<i8>>, tensor<32x8xi32> loc(#loc)
    %35 = tt.load %34 : tensor<32x8x!tt.ptr<i8>> loc(#loc)
    %36 = tt.reshape %35 : tensor<32x8xi8> -> tensor<32x2x4xi8> loc(#loc)
    %37 = tt.trans %36 {order = array<i32: 0, 2, 1>} : tensor<32x2x4xi8> -> tensor<32x4x2xi8> loc(#loc)
    %outLHS_4, %outRHS_5 = tt.split %37 : tensor<32x4x2xi8> -> tensor<32x4xi8> loc(#loc)
    %38 = tt.dot_scaled %outLHS, %outLHS_2 scale %outLHS_4, %cst_0 lhs = bf16 rhs = e2m1 {fastMath = false} : tensor<32x128xbf16> * tensor<64x32xi8>, tensor<32x4xi8> -> tensor<32x32xf32> loc(#loc)
    %39 = tt.dot_scaled %outRHS, %outRHS_3 scale %outRHS_5, %cst_0 lhs = bf16 rhs = e2m1 {fastMath = false} : tensor<32x128xbf16> * tensor<64x32xi8>, tensor<32x4xi8> -> tensor<32x32xf32> loc(#loc)
    %40 = arith.addf %38, %39 : tensor<32x32xf32> loc(#loc)
    %41 = arith.muli %1, %cst : tensor<32x1xi32> loc(#loc)
    %42 = tt.splat %out : !tt.ptr<bf16> -> tensor<32x1x!tt.ptr<bf16>> loc(#loc)
    %43 = tt.addptr %42, %41 : tensor<32x1x!tt.ptr<bf16>>, tensor<32x1xi32> loc(#loc)
    %44 = tt.broadcast %43 : tensor<32x1x!tt.ptr<bf16>> -> tensor<32x32x!tt.ptr<bf16>> loc(#loc)
    %45 = tt.broadcast %15 : tensor<1x32xi32> -> tensor<32x32xi32> loc(#loc)
    %46 = tt.addptr %44, %45 : tensor<32x32x!tt.ptr<bf16>>, tensor<32x32xi32> loc(#loc)
    %47 = arith.truncf %40 : tensor<32x32xf32> to tensor<32x32xbf16> loc(#loc)
    tt.store %46, %47 : tensor<32x32x!tt.ptr<bf16>> loc(#loc)
    tt.return loc(#loc)
  } loc(#loc)
} loc(#loc)
#loc = loc(unknown)


// -----// IR Dump Before TritonGPUCoalesce (tritongpu-coalesce) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [64, 1], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 32], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked2 = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [64], warpsPerCTA = [4], order = [0]}>
#blocked3 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [64, 1], warpsPerCTA = [4, 1], order = [0, 1]}>
#blocked4 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 64], warpsPerCTA = [1, 4], order = [0, 1]}>
#blocked5 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 64], warpsPerCTA = [1, 4], order = [1, 0]}>
#blocked6 = #ttg.blocked<{sizePerThread = [1, 1, 1], threadsPerWarp = [1, 1, 64], warpsPerCTA = [1, 2, 2], order = [2, 1, 0]}>
#blocked7 = #ttg.blocked<{sizePerThread = [1, 1, 1], threadsPerWarp = [1, 64, 1], warpsPerCTA = [1, 2, 2], order = [1, 2, 0]}>
#blocked8 = #ttg.blocked<{sizePerThread = [1, 1, 1], threadsPerWarp = [1, 32, 2], warpsPerCTA = [1, 4, 1], order = [2, 1, 0]}>
#blocked9 = #ttg.blocked<{sizePerThread = [1, 1, 2], threadsPerWarp = [1, 64, 1], warpsPerCTA = [2, 2, 1], order = [2, 1, 0]}>
#blocked10 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 64], warpsPerCTA = [2, 2], order = [1, 0]}>
#blocked11 = #ttg.blocked<{sizePerThread = [1, 1, 1], threadsPerWarp = [1, 2, 32], warpsPerCTA = [1, 4, 1], order = [2, 1, 0]}>
#blocked12 = #ttg.blocked<{sizePerThread = [1, 1, 1], threadsPerWarp = [2, 32, 1], warpsPerCTA = [4, 1, 1], order = [1, 0, 2]}>
#blocked13 = #ttg.blocked<{sizePerThread = [1, 1, 1], threadsPerWarp = [1, 32, 2], warpsPerCTA = [4, 1, 1], order = [2, 1, 0]}>
#blocked14 = #ttg.blocked<{sizePerThread = [1, 1, 2], threadsPerWarp = [2, 32, 1], warpsPerCTA = [4, 1, 1], order = [2, 1, 0]}>
#blocked15 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [8, 8], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked16 = #ttg.blocked<{sizePerThread = [1, 1, 1], threadsPerWarp = [8, 2, 4], warpsPerCTA = [4, 1, 1], order = [2, 1, 0]}>
#blocked17 = #ttg.blocked<{sizePerThread = [1, 1, 1], threadsPerWarp = [8, 4, 2], warpsPerCTA = [4, 1, 1], order = [1, 2, 0]}>
#blocked18 = #ttg.blocked<{sizePerThread = [1, 1, 1], threadsPerWarp = [8, 4, 2], warpsPerCTA = [4, 1, 1], order = [2, 1, 0]}>
#blocked19 = #ttg.blocked<{sizePerThread = [1, 1, 2], threadsPerWarp = [16, 4, 1], warpsPerCTA = [4, 1, 1], order = [2, 1, 0]}>
#blocked20 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [16, 4], warpsPerCTA = [4, 1], order = [1, 0]}>
#loc1 = loc("a_base")
#loc2 = loc("stride_a0")
#loc3 = loc("b_base")
#loc4 = loc("stride_b1")
#loc5 = loc("b_scale")
#loc6 = loc("out")
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "hip:gfx950", "ttg.threads-per-warp" = 64 : i32} {
  tt.func public @dot_scale_kernel(%a_base: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("a_base"), %stride_a0: i32 {tt.divisibility = 16 : i32} loc("stride_a0"), %b_base: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("b_base"), %stride_b1: i32 {tt.divisibility = 16 : i32} loc("stride_b1"), %b_scale: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("b_scale"), %out: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("out")) attributes {noinline = false} {
    %cst = arith.constant dense<32> : tensor<32x1xi32, #blocked> loc(#loc)
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<32x32xf32, #blocked1> loc(#loc)
    %cst_1 = arith.constant dense<8> : tensor<32x1xi32, #blocked> loc(#loc)
    %0 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #blocked2> loc(#loc)
    %1 = ttg.convert_layout %0 : tensor<32xi32, #blocked2> -> tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked3}>> loc(#loc)
    %2 = tt.expand_dims %1 {axis = 1 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked3}>> -> tensor<32x1xi32, #blocked3> loc(#loc)
    %3 = ttg.convert_layout %2 : tensor<32x1xi32, #blocked3> -> tensor<32x1xi32, #blocked> loc(#loc)
    %4 = tt.splat %stride_a0 : i32 -> tensor<32x1xi32, #blocked> loc(#loc)
    %5 = arith.muli %3, %4 : tensor<32x1xi32, #blocked> loc(#loc)
    %6 = tt.splat %a_base : !tt.ptr<bf16> -> tensor<32x1x!tt.ptr<bf16>, #blocked> loc(#loc)
    %7 = tt.addptr %6, %5 : tensor<32x1x!tt.ptr<bf16>, #blocked>, tensor<32x1xi32, #blocked> loc(#loc)
    %8 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #blocked2> loc(#loc)
    %9 = ttg.convert_layout %8 : tensor<256xi32, #blocked2> -> tensor<256xi32, #ttg.slice<{dim = 0, parent = #blocked4}>> loc(#loc)
    %10 = tt.expand_dims %9 {axis = 0 : i32} : tensor<256xi32, #ttg.slice<{dim = 0, parent = #blocked4}>> -> tensor<1x256xi32, #blocked4> loc(#loc)
    %11 = ttg.convert_layout %10 : tensor<1x256xi32, #blocked4> -> tensor<1x256xi32, #blocked5> loc(#loc)
    %12 = tt.broadcast %7 : tensor<32x1x!tt.ptr<bf16>, #blocked> -> tensor<32x256x!tt.ptr<bf16>, #blocked> loc(#loc)
    %13 = ttg.convert_layout %12 : tensor<32x256x!tt.ptr<bf16>, #blocked> -> tensor<32x256x!tt.ptr<bf16>, #blocked5> loc(#loc)
    %14 = tt.broadcast %11 : tensor<1x256xi32, #blocked5> -> tensor<32x256xi32, #blocked5> loc(#loc)
    %15 = tt.addptr %13, %14 : tensor<32x256x!tt.ptr<bf16>, #blocked5>, tensor<32x256xi32, #blocked5> loc(#loc)
    %16 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #blocked2> loc(#loc)
    %17 = ttg.convert_layout %16 : tensor<128xi32, #blocked2> -> tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked3}>> loc(#loc)
    %18 = tt.expand_dims %17 {axis = 1 : i32} : tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked3}>> -> tensor<128x1xi32, #blocked3> loc(#loc)
    %19 = ttg.convert_layout %18 : tensor<128x1xi32, #blocked3> -> tensor<128x1xi32, #blocked> loc(#loc)
    %20 = tt.splat %b_base : !tt.ptr<i8> -> tensor<128x1x!tt.ptr<i8>, #blocked> loc(#loc)
    %21 = tt.addptr %20, %19 : tensor<128x1x!tt.ptr<i8>, #blocked>, tensor<128x1xi32, #blocked> loc(#loc)
    %22 = ttg.convert_layout %0 : tensor<32xi32, #blocked2> -> tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked4}>> loc(#loc)
    %23 = tt.expand_dims %22 {axis = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked4}>> -> tensor<1x32xi32, #blocked4> loc(#loc)
    %24 = ttg.convert_layout %23 : tensor<1x32xi32, #blocked4> -> tensor<1x32xi32, #blocked1> loc(#loc)
    %25 = tt.splat %stride_b1 : i32 -> tensor<1x32xi32, #blocked1> loc(#loc)
    %26 = arith.muli %24, %25 : tensor<1x32xi32, #blocked1> loc(#loc)
    %27 = tt.broadcast %21 : tensor<128x1x!tt.ptr<i8>, #blocked> -> tensor<128x32x!tt.ptr<i8>, #blocked> loc(#loc)
    %28 = ttg.convert_layout %27 : tensor<128x32x!tt.ptr<i8>, #blocked> -> tensor<128x32x!tt.ptr<i8>, #blocked1> loc(#loc)
    %29 = tt.broadcast %26 : tensor<1x32xi32, #blocked1> -> tensor<128x32xi32, #blocked1> loc(#loc)
    %30 = tt.addptr %28, %29 : tensor<128x32x!tt.ptr<i8>, #blocked1>, tensor<128x32xi32, #blocked1> loc(#loc)
    %31 = tt.load %15 : tensor<32x256x!tt.ptr<bf16>, #blocked5> loc(#loc)
    %32 = tt.reshape %31 : tensor<32x256xbf16, #blocked5> -> tensor<32x2x128xbf16, #blocked6> loc(#loc)
    %33 = tt.trans %32 {order = array<i32: 0, 2, 1>} : tensor<32x2x128xbf16, #blocked6> -> tensor<32x128x2xbf16, #blocked7> loc(#loc)
    %34 = ttg.convert_layout %33 : tensor<32x128x2xbf16, #blocked7> -> tensor<32x128x2xbf16, #blocked8> loc(#loc)
    %35 = ttg.convert_layout %34 : tensor<32x128x2xbf16, #blocked8> -> tensor<32x128x2xbf16, #blocked9> loc(#loc)
    %outLHS, %outRHS = tt.split %35 : tensor<32x128x2xbf16, #blocked9> -> tensor<32x128xbf16, #blocked10> loc(#loc)
    %36 = tt.load %30 : tensor<128x32x!tt.ptr<i8>, #blocked1> loc(#loc)
    %37 = tt.reshape %36 : tensor<128x32xi8, #blocked1> -> tensor<2x64x32xi8, #blocked11> loc(#loc)
    %38 = tt.trans %37 {order = array<i32: 1, 2, 0>} : tensor<2x64x32xi8, #blocked11> -> tensor<64x32x2xi8, #blocked12> loc(#loc)
    %39 = ttg.convert_layout %38 : tensor<64x32x2xi8, #blocked12> -> tensor<64x32x2xi8, #blocked13> loc(#loc)
    %40 = ttg.convert_layout %39 : tensor<64x32x2xi8, #blocked13> -> tensor<64x32x2xi8, #blocked14> loc(#loc)
    %outLHS_2, %outRHS_3 = tt.split %40 : tensor<64x32x2xi8, #blocked14> -> tensor<64x32xi8, #blocked1> loc(#loc)
    %41 = arith.muli %3, %cst_1 : tensor<32x1xi32, #blocked> loc(#loc)
    %42 = tt.splat %b_scale : !tt.ptr<i8> -> tensor<32x1x!tt.ptr<i8>, #blocked> loc(#loc)
    %43 = tt.addptr %42, %41 : tensor<32x1x!tt.ptr<i8>, #blocked>, tensor<32x1xi32, #blocked> loc(#loc)
    %44 = tt.make_range {end = 8 : i32, start = 0 : i32} : tensor<8xi32, #blocked2> loc(#loc)
    %45 = ttg.convert_layout %44 : tensor<8xi32, #blocked2> -> tensor<8xi32, #ttg.slice<{dim = 0, parent = #blocked4}>> loc(#loc)
    %46 = tt.expand_dims %45 {axis = 0 : i32} : tensor<8xi32, #ttg.slice<{dim = 0, parent = #blocked4}>> -> tensor<1x8xi32, #blocked4> loc(#loc)
    %47 = ttg.convert_layout %46 : tensor<1x8xi32, #blocked4> -> tensor<1x8xi32, #blocked15> loc(#loc)
    %48 = tt.broadcast %43 : tensor<32x1x!tt.ptr<i8>, #blocked> -> tensor<32x8x!tt.ptr<i8>, #blocked> loc(#loc)
    %49 = ttg.convert_layout %48 : tensor<32x8x!tt.ptr<i8>, #blocked> -> tensor<32x8x!tt.ptr<i8>, #blocked15> loc(#loc)
    %50 = tt.broadcast %47 : tensor<1x8xi32, #blocked15> -> tensor<32x8xi32, #blocked15> loc(#loc)
    %51 = tt.addptr %49, %50 : tensor<32x8x!tt.ptr<i8>, #blocked15>, tensor<32x8xi32, #blocked15> loc(#loc)
    %52 = tt.load %51 : tensor<32x8x!tt.ptr<i8>, #blocked15> loc(#loc)
    %53 = tt.reshape %52 : tensor<32x8xi8, #blocked15> -> tensor<32x2x4xi8, #blocked16> loc(#loc)
    %54 = tt.trans %53 {order = array<i32: 0, 2, 1>} : tensor<32x2x4xi8, #blocked16> -> tensor<32x4x2xi8, #blocked17> loc(#loc)
    %55 = ttg.convert_layout %54 : tensor<32x4x2xi8, #blocked17> -> tensor<32x4x2xi8, #blocked18> loc(#loc)
    %56 = ttg.convert_layout %55 : tensor<32x4x2xi8, #blocked18> -> tensor<32x4x2xi8, #blocked19> loc(#loc)
    %outLHS_4, %outRHS_5 = tt.split %56 : tensor<32x4x2xi8, #blocked19> -> tensor<32x4xi8, #blocked20> loc(#loc)
    %57 = tt.dot_scaled %outLHS, %outLHS_2 scale %outLHS_4, %cst_0 lhs = bf16 rhs = e2m1 {fastMath = false} : tensor<32x128xbf16, #blocked10> * tensor<64x32xi8, #blocked1>, tensor<32x4xi8, #blocked20> -> tensor<32x32xf32, #blocked1> loc(#loc)
    %58 = tt.dot_scaled %outRHS, %outRHS_3 scale %outRHS_5, %cst_0 lhs = bf16 rhs = e2m1 {fastMath = false} : tensor<32x128xbf16, #blocked10> * tensor<64x32xi8, #blocked1>, tensor<32x4xi8, #blocked20> -> tensor<32x32xf32, #blocked1> loc(#loc)
    %59 = arith.addf %57, %58 : tensor<32x32xf32, #blocked1> loc(#loc)
    %60 = arith.muli %3, %cst : tensor<32x1xi32, #blocked> loc(#loc)
    %61 = tt.splat %out : !tt.ptr<bf16> -> tensor<32x1x!tt.ptr<bf16>, #blocked> loc(#loc)
    %62 = tt.addptr %61, %60 : tensor<32x1x!tt.ptr<bf16>, #blocked>, tensor<32x1xi32, #blocked> loc(#loc)
    %63 = tt.broadcast %62 : tensor<32x1x!tt.ptr<bf16>, #blocked> -> tensor<32x32x!tt.ptr<bf16>, #blocked> loc(#loc)
    %64 = ttg.convert_layout %63 : tensor<32x32x!tt.ptr<bf16>, #blocked> -> tensor<32x32x!tt.ptr<bf16>, #blocked1> loc(#loc)
    %65 = tt.broadcast %24 : tensor<1x32xi32, #blocked1> -> tensor<32x32xi32, #blocked1> loc(#loc)
    %66 = tt.addptr %64, %65 : tensor<32x32x!tt.ptr<bf16>, #blocked1>, tensor<32x32xi32, #blocked1> loc(#loc)
    %67 = arith.truncf %59 : tensor<32x32xf32, #blocked1> to tensor<32x32xbf16, #blocked1> loc(#loc)
    tt.store %66, %67 : tensor<32x32x!tt.ptr<bf16>, #blocked1> loc(#loc)
    tt.return loc(#loc)
  } loc(#loc)
} loc(#loc)
#loc = loc(unknown)


// -----// IR Dump Before TritonGPURemoveLayoutConversions (tritongpu-remove-layout-conversions) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [64, 1], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 32], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked2 = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [64], warpsPerCTA = [4], order = [0]}>
#blocked3 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [64, 1], warpsPerCTA = [4, 1], order = [0, 1]}>
#blocked4 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 64], warpsPerCTA = [1, 4], order = [0, 1]}>
#blocked5 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 64], warpsPerCTA = [1, 4], order = [1, 0]}>
#blocked6 = #ttg.blocked<{sizePerThread = [1, 8], threadsPerWarp = [2, 32], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked7 = #ttg.blocked<{sizePerThread = [1, 1, 1], threadsPerWarp = [1, 1, 64], warpsPerCTA = [1, 2, 2], order = [2, 1, 0]}>
#blocked8 = #ttg.blocked<{sizePerThread = [1, 1, 1], threadsPerWarp = [1, 64, 1], warpsPerCTA = [1, 2, 2], order = [1, 2, 0]}>
#blocked9 = #ttg.blocked<{sizePerThread = [1, 1, 1], threadsPerWarp = [1, 32, 2], warpsPerCTA = [1, 4, 1], order = [2, 1, 0]}>
#blocked10 = #ttg.blocked<{sizePerThread = [1, 1, 2], threadsPerWarp = [1, 64, 1], warpsPerCTA = [2, 2, 1], order = [2, 1, 0]}>
#blocked11 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 64], warpsPerCTA = [2, 2], order = [1, 0]}>
#blocked12 = #ttg.blocked<{sizePerThread = [16, 1], threadsPerWarp = [8, 8], warpsPerCTA = [1, 4], order = [0, 1]}>
#blocked13 = #ttg.blocked<{sizePerThread = [1, 1, 1], threadsPerWarp = [1, 2, 32], warpsPerCTA = [1, 4, 1], order = [2, 1, 0]}>
#blocked14 = #ttg.blocked<{sizePerThread = [1, 1, 1], threadsPerWarp = [2, 32, 1], warpsPerCTA = [4, 1, 1], order = [1, 0, 2]}>
#blocked15 = #ttg.blocked<{sizePerThread = [1, 1, 1], threadsPerWarp = [1, 32, 2], warpsPerCTA = [4, 1, 1], order = [2, 1, 0]}>
#blocked16 = #ttg.blocked<{sizePerThread = [1, 1, 2], threadsPerWarp = [2, 32, 1], warpsPerCTA = [4, 1, 1], order = [2, 1, 0]}>
#blocked17 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [8, 8], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked18 = #ttg.blocked<{sizePerThread = [1, 1, 1], threadsPerWarp = [8, 2, 4], warpsPerCTA = [4, 1, 1], order = [2, 1, 0]}>
#blocked19 = #ttg.blocked<{sizePerThread = [1, 1, 1], threadsPerWarp = [8, 4, 2], warpsPerCTA = [4, 1, 1], order = [1, 2, 0]}>
#blocked20 = #ttg.blocked<{sizePerThread = [1, 1, 1], threadsPerWarp = [8, 4, 2], warpsPerCTA = [4, 1, 1], order = [2, 1, 0]}>
#blocked21 = #ttg.blocked<{sizePerThread = [1, 1, 2], threadsPerWarp = [16, 4, 1], warpsPerCTA = [4, 1, 1], order = [2, 1, 0]}>
#blocked22 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [16, 4], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked23 = #ttg.blocked<{sizePerThread = [1, 4], threadsPerWarp = [8, 8], warpsPerCTA = [4, 1], order = [1, 0]}>
#loc1 = loc("a_base")
#loc2 = loc("stride_a0")
#loc3 = loc("b_base")
#loc4 = loc("stride_b1")
#loc5 = loc("b_scale")
#loc6 = loc("out")
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "hip:gfx950", "ttg.threads-per-warp" = 64 : i32} {
  tt.func public @dot_scale_kernel(%a_base: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("a_base"), %stride_a0: i32 {tt.divisibility = 16 : i32} loc("stride_a0"), %b_base: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("b_base"), %stride_b1: i32 {tt.divisibility = 16 : i32} loc("stride_b1"), %b_scale: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("b_scale"), %out: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("out")) attributes {noinline = false} {
    %cst = arith.constant dense<32> : tensor<32x1xi32, #blocked> loc(#loc)
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<32x32xf32, #blocked1> loc(#loc)
    %cst_1 = arith.constant dense<8> : tensor<32x1xi32, #blocked> loc(#loc)
    %0 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #blocked2> loc(#loc)
    %1 = ttg.convert_layout %0 : tensor<32xi32, #blocked2> -> tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked3}>> loc(#loc)
    %2 = tt.expand_dims %1 {axis = 1 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked3}>> -> tensor<32x1xi32, #blocked3> loc(#loc)
    %3 = ttg.convert_layout %2 : tensor<32x1xi32, #blocked3> -> tensor<32x1xi32, #blocked> loc(#loc)
    %4 = tt.splat %stride_a0 : i32 -> tensor<32x1xi32, #blocked> loc(#loc)
    %5 = arith.muli %3, %4 : tensor<32x1xi32, #blocked> loc(#loc)
    %6 = tt.splat %a_base : !tt.ptr<bf16> -> tensor<32x1x!tt.ptr<bf16>, #blocked> loc(#loc)
    %7 = tt.addptr %6, %5 : tensor<32x1x!tt.ptr<bf16>, #blocked>, tensor<32x1xi32, #blocked> loc(#loc)
    %8 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #blocked2> loc(#loc)
    %9 = ttg.convert_layout %8 : tensor<256xi32, #blocked2> -> tensor<256xi32, #ttg.slice<{dim = 0, parent = #blocked4}>> loc(#loc)
    %10 = tt.expand_dims %9 {axis = 0 : i32} : tensor<256xi32, #ttg.slice<{dim = 0, parent = #blocked4}>> -> tensor<1x256xi32, #blocked4> loc(#loc)
    %11 = ttg.convert_layout %10 : tensor<1x256xi32, #blocked4> -> tensor<1x256xi32, #blocked5> loc(#loc)
    %12 = tt.broadcast %7 : tensor<32x1x!tt.ptr<bf16>, #blocked> -> tensor<32x256x!tt.ptr<bf16>, #blocked> loc(#loc)
    %13 = ttg.convert_layout %12 : tensor<32x256x!tt.ptr<bf16>, #blocked> -> tensor<32x256x!tt.ptr<bf16>, #blocked5> loc(#loc)
    %14 = tt.broadcast %11 : tensor<1x256xi32, #blocked5> -> tensor<32x256xi32, #blocked5> loc(#loc)
    %15 = tt.addptr %13, %14 : tensor<32x256x!tt.ptr<bf16>, #blocked5>, tensor<32x256xi32, #blocked5> loc(#loc)
    %16 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #blocked2> loc(#loc)
    %17 = ttg.convert_layout %16 : tensor<128xi32, #blocked2> -> tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked3}>> loc(#loc)
    %18 = tt.expand_dims %17 {axis = 1 : i32} : tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked3}>> -> tensor<128x1xi32, #blocked3> loc(#loc)
    %19 = ttg.convert_layout %18 : tensor<128x1xi32, #blocked3> -> tensor<128x1xi32, #blocked> loc(#loc)
    %20 = tt.splat %b_base : !tt.ptr<i8> -> tensor<128x1x!tt.ptr<i8>, #blocked> loc(#loc)
    %21 = tt.addptr %20, %19 : tensor<128x1x!tt.ptr<i8>, #blocked>, tensor<128x1xi32, #blocked> loc(#loc)
    %22 = ttg.convert_layout %0 : tensor<32xi32, #blocked2> -> tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked4}>> loc(#loc)
    %23 = tt.expand_dims %22 {axis = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked4}>> -> tensor<1x32xi32, #blocked4> loc(#loc)
    %24 = ttg.convert_layout %23 : tensor<1x32xi32, #blocked4> -> tensor<1x32xi32, #blocked1> loc(#loc)
    %25 = tt.splat %stride_b1 : i32 -> tensor<1x32xi32, #blocked1> loc(#loc)
    %26 = arith.muli %24, %25 : tensor<1x32xi32, #blocked1> loc(#loc)
    %27 = tt.broadcast %21 : tensor<128x1x!tt.ptr<i8>, #blocked> -> tensor<128x32x!tt.ptr<i8>, #blocked> loc(#loc)
    %28 = ttg.convert_layout %27 : tensor<128x32x!tt.ptr<i8>, #blocked> -> tensor<128x32x!tt.ptr<i8>, #blocked1> loc(#loc)
    %29 = tt.broadcast %26 : tensor<1x32xi32, #blocked1> -> tensor<128x32xi32, #blocked1> loc(#loc)
    %30 = tt.addptr %28, %29 : tensor<128x32x!tt.ptr<i8>, #blocked1>, tensor<128x32xi32, #blocked1> loc(#loc)
    %31 = ttg.convert_layout %15 : tensor<32x256x!tt.ptr<bf16>, #blocked5> -> tensor<32x256x!tt.ptr<bf16>, #blocked6> loc(#loc)
    %32 = tt.load %31 : tensor<32x256x!tt.ptr<bf16>, #blocked6> loc(#loc)
    %33 = ttg.convert_layout %32 : tensor<32x256xbf16, #blocked6> -> tensor<32x256xbf16, #blocked5> loc(#loc)
    %34 = tt.reshape %33 : tensor<32x256xbf16, #blocked5> -> tensor<32x2x128xbf16, #blocked7> loc(#loc)
    %35 = tt.trans %34 {order = array<i32: 0, 2, 1>} : tensor<32x2x128xbf16, #blocked7> -> tensor<32x128x2xbf16, #blocked8> loc(#loc)
    %36 = ttg.convert_layout %35 : tensor<32x128x2xbf16, #blocked8> -> tensor<32x128x2xbf16, #blocked9> loc(#loc)
    %37 = ttg.convert_layout %36 : tensor<32x128x2xbf16, #blocked9> -> tensor<32x128x2xbf16, #blocked10> loc(#loc)
    %outLHS, %outRHS = tt.split %37 : tensor<32x128x2xbf16, #blocked10> -> tensor<32x128xbf16, #blocked11> loc(#loc)
    %38 = ttg.convert_layout %30 : tensor<128x32x!tt.ptr<i8>, #blocked1> -> tensor<128x32x!tt.ptr<i8>, #blocked12> loc(#loc)
    %39 = tt.load %38 : tensor<128x32x!tt.ptr<i8>, #blocked12> loc(#loc)
    %40 = ttg.convert_layout %39 : tensor<128x32xi8, #blocked12> -> tensor<128x32xi8, #blocked1> loc(#loc)
    %41 = tt.reshape %40 : tensor<128x32xi8, #blocked1> -> tensor<2x64x32xi8, #blocked13> loc(#loc)
    %42 = tt.trans %41 {order = array<i32: 1, 2, 0>} : tensor<2x64x32xi8, #blocked13> -> tensor<64x32x2xi8, #blocked14> loc(#loc)
    %43 = ttg.convert_layout %42 : tensor<64x32x2xi8, #blocked14> -> tensor<64x32x2xi8, #blocked15> loc(#loc)
    %44 = ttg.convert_layout %43 : tensor<64x32x2xi8, #blocked15> -> tensor<64x32x2xi8, #blocked16> loc(#loc)
    %outLHS_2, %outRHS_3 = tt.split %44 : tensor<64x32x2xi8, #blocked16> -> tensor<64x32xi8, #blocked1> loc(#loc)
    %45 = arith.muli %3, %cst_1 : tensor<32x1xi32, #blocked> loc(#loc)
    %46 = tt.splat %b_scale : !tt.ptr<i8> -> tensor<32x1x!tt.ptr<i8>, #blocked> loc(#loc)
    %47 = tt.addptr %46, %45 : tensor<32x1x!tt.ptr<i8>, #blocked>, tensor<32x1xi32, #blocked> loc(#loc)
    %48 = tt.make_range {end = 8 : i32, start = 0 : i32} : tensor<8xi32, #blocked2> loc(#loc)
    %49 = ttg.convert_layout %48 : tensor<8xi32, #blocked2> -> tensor<8xi32, #ttg.slice<{dim = 0, parent = #blocked4}>> loc(#loc)
    %50 = tt.expand_dims %49 {axis = 0 : i32} : tensor<8xi32, #ttg.slice<{dim = 0, parent = #blocked4}>> -> tensor<1x8xi32, #blocked4> loc(#loc)
    %51 = ttg.convert_layout %50 : tensor<1x8xi32, #blocked4> -> tensor<1x8xi32, #blocked17> loc(#loc)
    %52 = tt.broadcast %47 : tensor<32x1x!tt.ptr<i8>, #blocked> -> tensor<32x8x!tt.ptr<i8>, #blocked> loc(#loc)
    %53 = ttg.convert_layout %52 : tensor<32x8x!tt.ptr<i8>, #blocked> -> tensor<32x8x!tt.ptr<i8>, #blocked17> loc(#loc)
    %54 = tt.broadcast %51 : tensor<1x8xi32, #blocked17> -> tensor<32x8xi32, #blocked17> loc(#loc)
    %55 = tt.addptr %53, %54 : tensor<32x8x!tt.ptr<i8>, #blocked17>, tensor<32x8xi32, #blocked17> loc(#loc)
    %56 = ttg.convert_layout %55 : tensor<32x8x!tt.ptr<i8>, #blocked17> -> tensor<32x8x!tt.ptr<i8>, #blocked17> loc(#loc)
    %57 = tt.load %56 : tensor<32x8x!tt.ptr<i8>, #blocked17> loc(#loc)
    %58 = tt.reshape %57 : tensor<32x8xi8, #blocked17> -> tensor<32x2x4xi8, #blocked18> loc(#loc)
    %59 = tt.trans %58 {order = array<i32: 0, 2, 1>} : tensor<32x2x4xi8, #blocked18> -> tensor<32x4x2xi8, #blocked19> loc(#loc)
    %60 = ttg.convert_layout %59 : tensor<32x4x2xi8, #blocked19> -> tensor<32x4x2xi8, #blocked20> loc(#loc)
    %61 = ttg.convert_layout %60 : tensor<32x4x2xi8, #blocked20> -> tensor<32x4x2xi8, #blocked21> loc(#loc)
    %outLHS_4, %outRHS_5 = tt.split %61 : tensor<32x4x2xi8, #blocked21> -> tensor<32x4xi8, #blocked22> loc(#loc)
    %62 = tt.dot_scaled %outLHS, %outLHS_2 scale %outLHS_4, %cst_0 lhs = bf16 rhs = e2m1 {fastMath = false} : tensor<32x128xbf16, #blocked11> * tensor<64x32xi8, #blocked1>, tensor<32x4xi8, #blocked22> -> tensor<32x32xf32, #blocked1> loc(#loc)
    %63 = tt.dot_scaled %outRHS, %outRHS_3 scale %outRHS_5, %cst_0 lhs = bf16 rhs = e2m1 {fastMath = false} : tensor<32x128xbf16, #blocked11> * tensor<64x32xi8, #blocked1>, tensor<32x4xi8, #blocked22> -> tensor<32x32xf32, #blocked1> loc(#loc)
    %64 = arith.addf %62, %63 : tensor<32x32xf32, #blocked1> loc(#loc)
    %65 = arith.muli %3, %cst : tensor<32x1xi32, #blocked> loc(#loc)
    %66 = tt.splat %out : !tt.ptr<bf16> -> tensor<32x1x!tt.ptr<bf16>, #blocked> loc(#loc)
    %67 = tt.addptr %66, %65 : tensor<32x1x!tt.ptr<bf16>, #blocked>, tensor<32x1xi32, #blocked> loc(#loc)
    %68 = tt.broadcast %67 : tensor<32x1x!tt.ptr<bf16>, #blocked> -> tensor<32x32x!tt.ptr<bf16>, #blocked> loc(#loc)
    %69 = ttg.convert_layout %68 : tensor<32x32x!tt.ptr<bf16>, #blocked> -> tensor<32x32x!tt.ptr<bf16>, #blocked1> loc(#loc)
    %70 = tt.broadcast %24 : tensor<1x32xi32, #blocked1> -> tensor<32x32xi32, #blocked1> loc(#loc)
    %71 = tt.addptr %69, %70 : tensor<32x32x!tt.ptr<bf16>, #blocked1>, tensor<32x32xi32, #blocked1> loc(#loc)
    %72 = arith.truncf %64 : tensor<32x32xf32, #blocked1> to tensor<32x32xbf16, #blocked1> loc(#loc)
    %73 = ttg.convert_layout %71 : tensor<32x32x!tt.ptr<bf16>, #blocked1> -> tensor<32x32x!tt.ptr<bf16>, #blocked23> loc(#loc)
    %74 = ttg.convert_layout %72 : tensor<32x32xbf16, #blocked1> -> tensor<32x32xbf16, #blocked23> loc(#loc)
    tt.store %73, %74 : tensor<32x32x!tt.ptr<bf16>, #blocked23> loc(#loc)
    tt.return loc(#loc)
  } loc(#loc)
} loc(#loc)
#loc = loc(unknown)


// -----// IR Dump Before TritonGPUOptimizeThreadLocality (tritongpu-optimize-thread-locality) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 32], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [1, 4], threadsPerWarp = [8, 8], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked2 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [8, 8], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked3 = #ttg.blocked<{sizePerThread = [1, 8], threadsPerWarp = [2, 32], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked4 = #ttg.blocked<{sizePerThread = [16, 1], threadsPerWarp = [8, 8], warpsPerCTA = [1, 4], order = [0, 1]}>
#blocked5 = #ttg.blocked<{sizePerThread = [1, 1, 8], threadsPerWarp = [2, 2, 16], warpsPerCTA = [4, 1, 1], order = [2, 1, 0]}>
#blocked6 = #ttg.blocked<{sizePerThread = [1, 8, 1], threadsPerWarp = [2, 16, 2], warpsPerCTA = [4, 1, 1], order = [1, 2, 0]}>
#blocked7 = #ttg.blocked<{sizePerThread = [1, 1, 2], threadsPerWarp = [1, 64, 1], warpsPerCTA = [2, 2, 1], order = [2, 1, 0]}>
#blocked8 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 64], warpsPerCTA = [2, 2], order = [1, 0]}>
#blocked9 = #ttg.blocked<{sizePerThread = [1, 16, 1], threadsPerWarp = [2, 4, 8], warpsPerCTA = [1, 1, 4], order = [1, 0, 2]}>
#blocked10 = #ttg.blocked<{sizePerThread = [16, 1, 1], threadsPerWarp = [4, 8, 2], warpsPerCTA = [1, 4, 1], order = [0, 2, 1]}>
#blocked11 = #ttg.blocked<{sizePerThread = [1, 1, 2], threadsPerWarp = [2, 32, 1], warpsPerCTA = [4, 1, 1], order = [2, 1, 0]}>
#blocked12 = #ttg.blocked<{sizePerThread = [1, 1, 1], threadsPerWarp = [8, 2, 4], warpsPerCTA = [4, 1, 1], order = [2, 1, 0]}>
#blocked13 = #ttg.blocked<{sizePerThread = [1, 1, 1], threadsPerWarp = [8, 4, 2], warpsPerCTA = [4, 1, 1], order = [1, 2, 0]}>
#blocked14 = #ttg.blocked<{sizePerThread = [1, 1, 2], threadsPerWarp = [16, 4, 1], warpsPerCTA = [4, 1, 1], order = [2, 1, 0]}>
#blocked15 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [16, 4], warpsPerCTA = [4, 1], order = [1, 0]}>
#loc1 = loc("a_base")
#loc2 = loc("stride_a0")
#loc3 = loc("b_base")
#loc4 = loc("stride_b1")
#loc5 = loc("b_scale")
#loc6 = loc("out")
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "hip:gfx950", "ttg.threads-per-warp" = 64 : i32} {
  tt.func public @dot_scale_kernel(%a_base: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("a_base"), %stride_a0: i32 {tt.divisibility = 16 : i32} loc("stride_a0"), %b_base: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("b_base"), %stride_b1: i32 {tt.divisibility = 16 : i32} loc("stride_b1"), %b_scale: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("b_scale"), %out: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("out")) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<32x32xf32, #blocked> loc(#loc)
    %cst_0 = arith.constant dense<32> : tensor<32x1xi32, #blocked1> loc(#loc)
    %cst_1 = arith.constant dense<8> : tensor<32x1xi32, #blocked2> loc(#loc)
    %0 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked3}>> loc(#loc)
    %1 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked2}>> loc(#loc)
    %2 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc)
    %3 = tt.expand_dims %0 {axis = 1 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked3}>> -> tensor<32x1xi32, #blocked3> loc(#loc)
    %4 = tt.expand_dims %1 {axis = 1 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked2}>> -> tensor<32x1xi32, #blocked2> loc(#loc)
    %5 = tt.expand_dims %2 {axis = 1 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> -> tensor<32x1xi32, #blocked1> loc(#loc)
    %6 = tt.splat %stride_a0 : i32 -> tensor<32x1xi32, #blocked3> loc(#loc)
    %7 = arith.muli %3, %6 : tensor<32x1xi32, #blocked3> loc(#loc)
    %8 = tt.splat %a_base : !tt.ptr<bf16> -> tensor<32x1x!tt.ptr<bf16>, #blocked3> loc(#loc)
    %9 = tt.addptr %8, %7 : tensor<32x1x!tt.ptr<bf16>, #blocked3>, tensor<32x1xi32, #blocked3> loc(#loc)
    %10 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #ttg.slice<{dim = 0, parent = #blocked3}>> loc(#loc)
    %11 = tt.expand_dims %10 {axis = 0 : i32} : tensor<256xi32, #ttg.slice<{dim = 0, parent = #blocked3}>> -> tensor<1x256xi32, #blocked3> loc(#loc)
    %12 = tt.broadcast %9 : tensor<32x1x!tt.ptr<bf16>, #blocked3> -> tensor<32x256x!tt.ptr<bf16>, #blocked3> loc(#loc)
    %13 = tt.broadcast %11 : tensor<1x256xi32, #blocked3> -> tensor<32x256xi32, #blocked3> loc(#loc)
    %14 = tt.addptr %12, %13 : tensor<32x256x!tt.ptr<bf16>, #blocked3>, tensor<32x256xi32, #blocked3> loc(#loc)
    %15 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked4}>> loc(#loc)
    %16 = tt.expand_dims %15 {axis = 1 : i32} : tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked4}>> -> tensor<128x1xi32, #blocked4> loc(#loc)
    %17 = tt.splat %b_base : !tt.ptr<i8> -> tensor<128x1x!tt.ptr<i8>, #blocked4> loc(#loc)
    %18 = tt.addptr %17, %16 : tensor<128x1x!tt.ptr<i8>, #blocked4>, tensor<128x1xi32, #blocked4> loc(#loc)
    %19 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked4}>> loc(#loc)
    %20 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc)
    %21 = tt.expand_dims %19 {axis = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked4}>> -> tensor<1x32xi32, #blocked4> loc(#loc)
    %22 = tt.expand_dims %20 {axis = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x32xi32, #blocked1> loc(#loc)
    %23 = tt.splat %stride_b1 : i32 -> tensor<1x32xi32, #blocked4> loc(#loc)
    %24 = arith.muli %21, %23 : tensor<1x32xi32, #blocked4> loc(#loc)
    %25 = tt.broadcast %18 : tensor<128x1x!tt.ptr<i8>, #blocked4> -> tensor<128x32x!tt.ptr<i8>, #blocked4> loc(#loc)
    %26 = tt.broadcast %24 : tensor<1x32xi32, #blocked4> -> tensor<128x32xi32, #blocked4> loc(#loc)
    %27 = tt.addptr %25, %26 : tensor<128x32x!tt.ptr<i8>, #blocked4>, tensor<128x32xi32, #blocked4> loc(#loc)
    %28 = tt.load %14 : tensor<32x256x!tt.ptr<bf16>, #blocked3> loc(#loc)
    %29 = tt.reshape %28 : tensor<32x256xbf16, #blocked3> -> tensor<32x2x128xbf16, #blocked5> loc(#loc)
    %30 = tt.trans %29 {order = array<i32: 0, 2, 1>} : tensor<32x2x128xbf16, #blocked5> -> tensor<32x128x2xbf16, #blocked6> loc(#loc)
    %31 = ttg.convert_layout %30 : tensor<32x128x2xbf16, #blocked6> -> tensor<32x128x2xbf16, #blocked7> loc(#loc)
    %outLHS, %outRHS = tt.split %31 : tensor<32x128x2xbf16, #blocked7> -> tensor<32x128xbf16, #blocked8> loc(#loc)
    %32 = tt.load %27 : tensor<128x32x!tt.ptr<i8>, #blocked4> loc(#loc)
    %33 = tt.reshape %32 : tensor<128x32xi8, #blocked4> -> tensor<2x64x32xi8, #blocked9> loc(#loc)
    %34 = tt.trans %33 {order = array<i32: 1, 2, 0>} : tensor<2x64x32xi8, #blocked9> -> tensor<64x32x2xi8, #blocked10> loc(#loc)
    %35 = ttg.convert_layout %34 : tensor<64x32x2xi8, #blocked10> -> tensor<64x32x2xi8, #blocked11> loc(#loc)
    %outLHS_2, %outRHS_3 = tt.split %35 : tensor<64x32x2xi8, #blocked11> -> tensor<64x32xi8, #blocked> loc(#loc)
    %36 = arith.muli %4, %cst_1 : tensor<32x1xi32, #blocked2> loc(#loc)
    %37 = tt.splat %b_scale : !tt.ptr<i8> -> tensor<32x1x!tt.ptr<i8>, #blocked2> loc(#loc)
    %38 = tt.addptr %37, %36 : tensor<32x1x!tt.ptr<i8>, #blocked2>, tensor<32x1xi32, #blocked2> loc(#loc)
    %39 = tt.make_range {end = 8 : i32, start = 0 : i32} : tensor<8xi32, #ttg.slice<{dim = 0, parent = #blocked2}>> loc(#loc)
    %40 = tt.expand_dims %39 {axis = 0 : i32} : tensor<8xi32, #ttg.slice<{dim = 0, parent = #blocked2}>> -> tensor<1x8xi32, #blocked2> loc(#loc)
    %41 = tt.broadcast %38 : tensor<32x1x!tt.ptr<i8>, #blocked2> -> tensor<32x8x!tt.ptr<i8>, #blocked2> loc(#loc)
    %42 = tt.broadcast %40 : tensor<1x8xi32, #blocked2> -> tensor<32x8xi32, #blocked2> loc(#loc)
    %43 = tt.addptr %41, %42 : tensor<32x8x!tt.ptr<i8>, #blocked2>, tensor<32x8xi32, #blocked2> loc(#loc)
    %44 = tt.load %43 : tensor<32x8x!tt.ptr<i8>, #blocked2> loc(#loc)
    %45 = tt.reshape %44 : tensor<32x8xi8, #blocked2> -> tensor<32x2x4xi8, #blocked12> loc(#loc)
    %46 = tt.trans %45 {order = array<i32: 0, 2, 1>} : tensor<32x2x4xi8, #blocked12> -> tensor<32x4x2xi8, #blocked13> loc(#loc)
    %47 = ttg.convert_layout %46 : tensor<32x4x2xi8, #blocked13> -> tensor<32x4x2xi8, #blocked14> loc(#loc)
    %outLHS_4, %outRHS_5 = tt.split %47 : tensor<32x4x2xi8, #blocked14> -> tensor<32x4xi8, #blocked15> loc(#loc)
    %48 = tt.dot_scaled %outLHS, %outLHS_2 scale %outLHS_4, %cst lhs = bf16 rhs = e2m1 {fastMath = false} : tensor<32x128xbf16, #blocked8> * tensor<64x32xi8, #blocked>, tensor<32x4xi8, #blocked15> -> tensor<32x32xf32, #blocked> loc(#loc)
    %49 = tt.dot_scaled %outRHS, %outRHS_3 scale %outRHS_5, %cst lhs = bf16 rhs = e2m1 {fastMath = false} : tensor<32x128xbf16, #blocked8> * tensor<64x32xi8, #blocked>, tensor<32x4xi8, #blocked15> -> tensor<32x32xf32, #blocked> loc(#loc)
    %50 = arith.addf %48, %49 : tensor<32x32xf32, #blocked> loc(#loc)
    %51 = arith.muli %5, %cst_0 : tensor<32x1xi32, #blocked1> loc(#loc)
    %52 = tt.splat %out : !tt.ptr<bf16> -> tensor<32x1x!tt.ptr<bf16>, #blocked1> loc(#loc)
    %53 = tt.addptr %52, %51 : tensor<32x1x!tt.ptr<bf16>, #blocked1>, tensor<32x1xi32, #blocked1> loc(#loc)
    %54 = tt.broadcast %53 : tensor<32x1x!tt.ptr<bf16>, #blocked1> -> tensor<32x32x!tt.ptr<bf16>, #blocked1> loc(#loc)
    %55 = tt.broadcast %22 : tensor<1x32xi32, #blocked1> -> tensor<32x32xi32, #blocked1> loc(#loc)
    %56 = tt.addptr %54, %55 : tensor<32x32x!tt.ptr<bf16>, #blocked1>, tensor<32x32xi32, #blocked1> loc(#loc)
    %57 = arith.truncf %50 : tensor<32x32xf32, #blocked> to tensor<32x32xbf16, #blocked> loc(#loc)
    %58 = ttg.convert_layout %57 : tensor<32x32xbf16, #blocked> -> tensor<32x32xbf16, #blocked1> loc(#loc)
    tt.store %56, %58 : tensor<32x32x!tt.ptr<bf16>, #blocked1> loc(#loc)
    tt.return loc(#loc)
  } loc(#loc)
} loc(#loc)
#loc = loc(unknown)


// -----// IR Dump Before TritonAMDGPUAccelerateMatmul (tritonamdgpu-accelerate-matmul) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 32], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [1, 4], threadsPerWarp = [8, 8], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked2 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [8, 8], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked3 = #ttg.blocked<{sizePerThread = [1, 8], threadsPerWarp = [2, 32], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked4 = #ttg.blocked<{sizePerThread = [16, 1], threadsPerWarp = [8, 8], warpsPerCTA = [1, 4], order = [0, 1]}>
#blocked5 = #ttg.blocked<{sizePerThread = [1, 1, 8], threadsPerWarp = [2, 2, 16], warpsPerCTA = [4, 1, 1], order = [2, 1, 0]}>
#blocked6 = #ttg.blocked<{sizePerThread = [1, 8, 1], threadsPerWarp = [2, 16, 2], warpsPerCTA = [4, 1, 1], order = [1, 2, 0]}>
#blocked7 = #ttg.blocked<{sizePerThread = [1, 1, 2], threadsPerWarp = [1, 64, 1], warpsPerCTA = [2, 2, 1], order = [2, 1, 0]}>
#blocked8 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 64], warpsPerCTA = [2, 2], order = [1, 0]}>
#blocked9 = #ttg.blocked<{sizePerThread = [1, 16, 1], threadsPerWarp = [2, 4, 8], warpsPerCTA = [1, 1, 4], order = [1, 0, 2]}>
#blocked10 = #ttg.blocked<{sizePerThread = [16, 1, 1], threadsPerWarp = [4, 8, 2], warpsPerCTA = [1, 4, 1], order = [0, 2, 1]}>
#blocked11 = #ttg.blocked<{sizePerThread = [1, 1, 2], threadsPerWarp = [2, 32, 1], warpsPerCTA = [4, 1, 1], order = [2, 1, 0]}>
#blocked12 = #ttg.blocked<{sizePerThread = [1, 1, 1], threadsPerWarp = [8, 2, 4], warpsPerCTA = [4, 1, 1], order = [2, 1, 0]}>
#blocked13 = #ttg.blocked<{sizePerThread = [1, 1, 1], threadsPerWarp = [8, 4, 2], warpsPerCTA = [4, 1, 1], order = [1, 2, 0]}>
#blocked14 = #ttg.blocked<{sizePerThread = [1, 1, 2], threadsPerWarp = [16, 4, 1], warpsPerCTA = [4, 1, 1], order = [2, 1, 0]}>
#blocked15 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [16, 4], warpsPerCTA = [4, 1], order = [1, 0]}>
#loc1 = loc("a_base")
#loc2 = loc("stride_a0")
#loc3 = loc("b_base")
#loc4 = loc("stride_b1")
#loc5 = loc("b_scale")
#loc6 = loc("out")
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "hip:gfx950", "ttg.threads-per-warp" = 64 : i32} {
  tt.func public @dot_scale_kernel(%a_base: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("a_base"), %stride_a0: i32 {tt.divisibility = 16 : i32} loc("stride_a0"), %b_base: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("b_base"), %stride_b1: i32 {tt.divisibility = 16 : i32} loc("stride_b1"), %b_scale: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("b_scale"), %out: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("out")) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<32x32xf32, #blocked> loc(#loc)
    %cst_0 = arith.constant dense<32> : tensor<32x1xi32, #blocked1> loc(#loc)
    %cst_1 = arith.constant dense<8> : tensor<32x1xi32, #blocked2> loc(#loc)
    %0 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked3}>> loc(#loc)
    %1 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked2}>> loc(#loc)
    %2 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc)
    %3 = tt.expand_dims %0 {axis = 1 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked3}>> -> tensor<32x1xi32, #blocked3> loc(#loc)
    %4 = tt.expand_dims %1 {axis = 1 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked2}>> -> tensor<32x1xi32, #blocked2> loc(#loc)
    %5 = tt.expand_dims %2 {axis = 1 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> -> tensor<32x1xi32, #blocked1> loc(#loc)
    %6 = tt.splat %stride_a0 : i32 -> tensor<32x1xi32, #blocked3> loc(#loc)
    %7 = arith.muli %3, %6 : tensor<32x1xi32, #blocked3> loc(#loc)
    %8 = tt.splat %a_base : !tt.ptr<bf16> -> tensor<32x1x!tt.ptr<bf16>, #blocked3> loc(#loc)
    %9 = tt.addptr %8, %7 : tensor<32x1x!tt.ptr<bf16>, #blocked3>, tensor<32x1xi32, #blocked3> loc(#loc)
    %10 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #ttg.slice<{dim = 0, parent = #blocked3}>> loc(#loc)
    %11 = tt.expand_dims %10 {axis = 0 : i32} : tensor<256xi32, #ttg.slice<{dim = 0, parent = #blocked3}>> -> tensor<1x256xi32, #blocked3> loc(#loc)
    %12 = tt.broadcast %9 : tensor<32x1x!tt.ptr<bf16>, #blocked3> -> tensor<32x256x!tt.ptr<bf16>, #blocked3> loc(#loc)
    %13 = tt.broadcast %11 : tensor<1x256xi32, #blocked3> -> tensor<32x256xi32, #blocked3> loc(#loc)
    %14 = tt.addptr %12, %13 : tensor<32x256x!tt.ptr<bf16>, #blocked3>, tensor<32x256xi32, #blocked3> loc(#loc)
    %15 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked4}>> loc(#loc)
    %16 = tt.expand_dims %15 {axis = 1 : i32} : tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked4}>> -> tensor<128x1xi32, #blocked4> loc(#loc)
    %17 = tt.splat %b_base : !tt.ptr<i8> -> tensor<128x1x!tt.ptr<i8>, #blocked4> loc(#loc)
    %18 = tt.addptr %17, %16 : tensor<128x1x!tt.ptr<i8>, #blocked4>, tensor<128x1xi32, #blocked4> loc(#loc)
    %19 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked4}>> loc(#loc)
    %20 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc)
    %21 = tt.expand_dims %19 {axis = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked4}>> -> tensor<1x32xi32, #blocked4> loc(#loc)
    %22 = tt.expand_dims %20 {axis = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x32xi32, #blocked1> loc(#loc)
    %23 = tt.splat %stride_b1 : i32 -> tensor<1x32xi32, #blocked4> loc(#loc)
    %24 = arith.muli %21, %23 : tensor<1x32xi32, #blocked4> loc(#loc)
    %25 = tt.broadcast %18 : tensor<128x1x!tt.ptr<i8>, #blocked4> -> tensor<128x32x!tt.ptr<i8>, #blocked4> loc(#loc)
    %26 = tt.broadcast %24 : tensor<1x32xi32, #blocked4> -> tensor<128x32xi32, #blocked4> loc(#loc)
    %27 = tt.addptr %25, %26 : tensor<128x32x!tt.ptr<i8>, #blocked4>, tensor<128x32xi32, #blocked4> loc(#loc)
    %28 = tt.load %14 : tensor<32x256x!tt.ptr<bf16>, #blocked3> loc(#loc)
    %29 = tt.reshape %28 : tensor<32x256xbf16, #blocked3> -> tensor<32x2x128xbf16, #blocked5> loc(#loc)
    %30 = tt.trans %29 {order = array<i32: 0, 2, 1>} : tensor<32x2x128xbf16, #blocked5> -> tensor<32x128x2xbf16, #blocked6> loc(#loc)
    %31 = ttg.convert_layout %30 : tensor<32x128x2xbf16, #blocked6> -> tensor<32x128x2xbf16, #blocked7> loc(#loc)
    %outLHS, %outRHS = tt.split %31 : tensor<32x128x2xbf16, #blocked7> -> tensor<32x128xbf16, #blocked8> loc(#loc)
    %32 = tt.load %27 : tensor<128x32x!tt.ptr<i8>, #blocked4> loc(#loc)
    %33 = tt.reshape %32 : tensor<128x32xi8, #blocked4> -> tensor<2x64x32xi8, #blocked9> loc(#loc)
    %34 = tt.trans %33 {order = array<i32: 1, 2, 0>} : tensor<2x64x32xi8, #blocked9> -> tensor<64x32x2xi8, #blocked10> loc(#loc)
    %35 = ttg.convert_layout %34 : tensor<64x32x2xi8, #blocked10> -> tensor<64x32x2xi8, #blocked11> loc(#loc)
    %outLHS_2, %outRHS_3 = tt.split %35 : tensor<64x32x2xi8, #blocked11> -> tensor<64x32xi8, #blocked> loc(#loc)
    %36 = arith.muli %4, %cst_1 : tensor<32x1xi32, #blocked2> loc(#loc)
    %37 = tt.splat %b_scale : !tt.ptr<i8> -> tensor<32x1x!tt.ptr<i8>, #blocked2> loc(#loc)
    %38 = tt.addptr %37, %36 : tensor<32x1x!tt.ptr<i8>, #blocked2>, tensor<32x1xi32, #blocked2> loc(#loc)
    %39 = tt.make_range {end = 8 : i32, start = 0 : i32} : tensor<8xi32, #ttg.slice<{dim = 0, parent = #blocked2}>> loc(#loc)
    %40 = tt.expand_dims %39 {axis = 0 : i32} : tensor<8xi32, #ttg.slice<{dim = 0, parent = #blocked2}>> -> tensor<1x8xi32, #blocked2> loc(#loc)
    %41 = tt.broadcast %38 : tensor<32x1x!tt.ptr<i8>, #blocked2> -> tensor<32x8x!tt.ptr<i8>, #blocked2> loc(#loc)
    %42 = tt.broadcast %40 : tensor<1x8xi32, #blocked2> -> tensor<32x8xi32, #blocked2> loc(#loc)
    %43 = tt.addptr %41, %42 : tensor<32x8x!tt.ptr<i8>, #blocked2>, tensor<32x8xi32, #blocked2> loc(#loc)
    %44 = tt.load %43 : tensor<32x8x!tt.ptr<i8>, #blocked2> loc(#loc)
    %45 = tt.reshape %44 : tensor<32x8xi8, #blocked2> -> tensor<32x2x4xi8, #blocked12> loc(#loc)
    %46 = tt.trans %45 {order = array<i32: 0, 2, 1>} : tensor<32x2x4xi8, #blocked12> -> tensor<32x4x2xi8, #blocked13> loc(#loc)
    %47 = ttg.convert_layout %46 : tensor<32x4x2xi8, #blocked13> -> tensor<32x4x2xi8, #blocked14> loc(#loc)
    %outLHS_4, %outRHS_5 = tt.split %47 : tensor<32x4x2xi8, #blocked14> -> tensor<32x4xi8, #blocked15> loc(#loc)
    %48 = tt.dot_scaled %outLHS, %outLHS_2 scale %outLHS_4, %cst lhs = bf16 rhs = e2m1 {fastMath = false} : tensor<32x128xbf16, #blocked8> * tensor<64x32xi8, #blocked>, tensor<32x4xi8, #blocked15> -> tensor<32x32xf32, #blocked> loc(#loc)
    %49 = tt.dot_scaled %outRHS, %outRHS_3 scale %outRHS_5, %cst lhs = bf16 rhs = e2m1 {fastMath = false} : tensor<32x128xbf16, #blocked8> * tensor<64x32xi8, #blocked>, tensor<32x4xi8, #blocked15> -> tensor<32x32xf32, #blocked> loc(#loc)
    %50 = arith.addf %48, %49 : tensor<32x32xf32, #blocked> loc(#loc)
    %51 = arith.muli %5, %cst_0 : tensor<32x1xi32, #blocked1> loc(#loc)
    %52 = tt.splat %out : !tt.ptr<bf16> -> tensor<32x1x!tt.ptr<bf16>, #blocked1> loc(#loc)
    %53 = tt.addptr %52, %51 : tensor<32x1x!tt.ptr<bf16>, #blocked1>, tensor<32x1xi32, #blocked1> loc(#loc)
    %54 = tt.broadcast %53 : tensor<32x1x!tt.ptr<bf16>, #blocked1> -> tensor<32x32x!tt.ptr<bf16>, #blocked1> loc(#loc)
    %55 = tt.broadcast %22 : tensor<1x32xi32, #blocked1> -> tensor<32x32xi32, #blocked1> loc(#loc)
    %56 = tt.addptr %54, %55 : tensor<32x32x!tt.ptr<bf16>, #blocked1>, tensor<32x32xi32, #blocked1> loc(#loc)
    %57 = arith.truncf %50 : tensor<32x32xf32, #blocked> to tensor<32x32xbf16, #blocked> loc(#loc)
    %58 = ttg.convert_layout %57 : tensor<32x32xbf16, #blocked> -> tensor<32x32xbf16, #blocked1> loc(#loc)
    tt.store %56, %58 : tensor<32x32x!tt.ptr<bf16>, #blocked1> loc(#loc)
    tt.return loc(#loc)
  } loc(#loc)
} loc(#loc)
#loc = loc(unknown)


// -----// IR Dump Before TritonGPURemoveLayoutConversions (tritongpu-remove-layout-conversions) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [2, 1], threadsPerWarp = [2, 32], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [4, 16], warpsPerCTA = [1, 4], order = [0, 1]}>
#blocked2 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 32], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked3 = #ttg.blocked<{sizePerThread = [1, 4], threadsPerWarp = [8, 8], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked4 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [8, 8], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked5 = #ttg.blocked<{sizePerThread = [1, 8], threadsPerWarp = [2, 32], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked6 = #ttg.blocked<{sizePerThread = [16, 1], threadsPerWarp = [8, 8], warpsPerCTA = [1, 4], order = [0, 1]}>
#blocked7 = #ttg.blocked<{sizePerThread = [1, 1, 8], threadsPerWarp = [2, 2, 16], warpsPerCTA = [4, 1, 1], order = [2, 1, 0]}>
#blocked8 = #ttg.blocked<{sizePerThread = [1, 8, 1], threadsPerWarp = [2, 16, 2], warpsPerCTA = [4, 1, 1], order = [1, 2, 0]}>
#blocked9 = #ttg.blocked<{sizePerThread = [1, 1, 2], threadsPerWarp = [1, 64, 1], warpsPerCTA = [2, 2, 1], order = [2, 1, 0]}>
#blocked10 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 64], warpsPerCTA = [2, 2], order = [1, 0]}>
#blocked11 = #ttg.blocked<{sizePerThread = [1, 16, 1], threadsPerWarp = [2, 4, 8], warpsPerCTA = [1, 1, 4], order = [1, 0, 2]}>
#blocked12 = #ttg.blocked<{sizePerThread = [16, 1, 1], threadsPerWarp = [4, 8, 2], warpsPerCTA = [1, 4, 1], order = [0, 2, 1]}>
#blocked13 = #ttg.blocked<{sizePerThread = [1, 1, 2], threadsPerWarp = [2, 32, 1], warpsPerCTA = [4, 1, 1], order = [2, 1, 0]}>
#blocked14 = #ttg.blocked<{sizePerThread = [1, 1, 1], threadsPerWarp = [8, 2, 4], warpsPerCTA = [4, 1, 1], order = [2, 1, 0]}>
#blocked15 = #ttg.blocked<{sizePerThread = [1, 1, 1], threadsPerWarp = [8, 4, 2], warpsPerCTA = [4, 1, 1], order = [1, 2, 0]}>
#blocked16 = #ttg.blocked<{sizePerThread = [1, 1, 2], threadsPerWarp = [16, 4, 1], warpsPerCTA = [4, 1, 1], order = [2, 1, 0]}>
#blocked17 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [16, 4], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked18 = #ttg.blocked<{sizePerThread = [1, 1, 1], threadsPerWarp = [2, 32, 1], warpsPerCTA = [4, 1, 1], order = [2, 1, 0]}>
#blocked19 = #ttg.blocked<{sizePerThread = [1, 1, 1], threadsPerWarp = [2, 1, 32], warpsPerCTA = [4, 1, 1], order = [1, 2, 0]}>
#linear = #ttg.linear<{register = [[1, 0], [2, 0], [4, 0], [8, 0], [16, 0]], lane = [[0, 1], [0, 2], [0, 4], [0, 8], [0, 16], [32, 0]], warp = [[64, 0], [0, 0]], block = []}>
#loc1 = loc("a_base")
#loc2 = loc("stride_a0")
#loc3 = loc("b_base")
#loc4 = loc("stride_b1")
#loc5 = loc("b_scale")
#loc6 = loc("out")
#mma = #ttg.amd_mfma<{version = 4, warpsPerCTA = [2, 2], instrShape = [16, 16], isTransposed = true}>
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "hip:gfx950", "ttg.threads-per-warp" = 64 : i32} {
  tt.func public @dot_scale_kernel(%a_base: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("a_base"), %stride_a0: i32 {tt.divisibility = 16 : i32} loc("stride_a0"), %b_base: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("b_base"), %stride_b1: i32 {tt.divisibility = 16 : i32} loc("stride_b1"), %b_scale: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("b_scale"), %out: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("out")) attributes {noinline = false} {
    %cst = arith.constant dense<0x7FC0> : tensor<128x32xbf16, #blocked> loc(#loc)
    %cst_0 = arith.constant dense<-1> : tensor<4x32xi8, #blocked1> loc(#loc)
    %cst_1 = arith.constant dense<7> : tensor<4x32xi16, #blocked1> loc(#loc)
    %cst_2 = arith.constant dense<0.000000e+00> : tensor<32x32xf32, #blocked2> loc(#loc)
    %cst_3 = arith.constant dense<32> : tensor<32x1xi32, #blocked3> loc(#loc)
    %cst_4 = arith.constant dense<8> : tensor<32x1xi32, #blocked4> loc(#loc)
    %0 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked5}>> loc(#loc)
    %1 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked4}>> loc(#loc)
    %2 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked3}>> loc(#loc)
    %3 = tt.expand_dims %0 {axis = 1 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked5}>> -> tensor<32x1xi32, #blocked5> loc(#loc)
    %4 = tt.expand_dims %1 {axis = 1 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked4}>> -> tensor<32x1xi32, #blocked4> loc(#loc)
    %5 = tt.expand_dims %2 {axis = 1 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked3}>> -> tensor<32x1xi32, #blocked3> loc(#loc)
    %6 = tt.splat %stride_a0 : i32 -> tensor<32x1xi32, #blocked5> loc(#loc)
    %7 = arith.muli %3, %6 : tensor<32x1xi32, #blocked5> loc(#loc)
    %8 = tt.splat %a_base : !tt.ptr<bf16> -> tensor<32x1x!tt.ptr<bf16>, #blocked5> loc(#loc)
    %9 = tt.addptr %8, %7 : tensor<32x1x!tt.ptr<bf16>, #blocked5>, tensor<32x1xi32, #blocked5> loc(#loc)
    %10 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #ttg.slice<{dim = 0, parent = #blocked5}>> loc(#loc)
    %11 = tt.expand_dims %10 {axis = 0 : i32} : tensor<256xi32, #ttg.slice<{dim = 0, parent = #blocked5}>> -> tensor<1x256xi32, #blocked5> loc(#loc)
    %12 = tt.broadcast %9 : tensor<32x1x!tt.ptr<bf16>, #blocked5> -> tensor<32x256x!tt.ptr<bf16>, #blocked5> loc(#loc)
    %13 = tt.broadcast %11 : tensor<1x256xi32, #blocked5> -> tensor<32x256xi32, #blocked5> loc(#loc)
    %14 = tt.addptr %12, %13 : tensor<32x256x!tt.ptr<bf16>, #blocked5>, tensor<32x256xi32, #blocked5> loc(#loc)
    %15 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked6}>> loc(#loc)
    %16 = tt.expand_dims %15 {axis = 1 : i32} : tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked6}>> -> tensor<128x1xi32, #blocked6> loc(#loc)
    %17 = tt.splat %b_base : !tt.ptr<i8> -> tensor<128x1x!tt.ptr<i8>, #blocked6> loc(#loc)
    %18 = tt.addptr %17, %16 : tensor<128x1x!tt.ptr<i8>, #blocked6>, tensor<128x1xi32, #blocked6> loc(#loc)
    %19 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked6}>> loc(#loc)
    %20 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked3}>> loc(#loc)
    %21 = tt.expand_dims %19 {axis = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked6}>> -> tensor<1x32xi32, #blocked6> loc(#loc)
    %22 = tt.expand_dims %20 {axis = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked3}>> -> tensor<1x32xi32, #blocked3> loc(#loc)
    %23 = tt.splat %stride_b1 : i32 -> tensor<1x32xi32, #blocked6> loc(#loc)
    %24 = arith.muli %21, %23 : tensor<1x32xi32, #blocked6> loc(#loc)
    %25 = tt.broadcast %18 : tensor<128x1x!tt.ptr<i8>, #blocked6> -> tensor<128x32x!tt.ptr<i8>, #blocked6> loc(#loc)
    %26 = tt.broadcast %24 : tensor<1x32xi32, #blocked6> -> tensor<128x32xi32, #blocked6> loc(#loc)
    %27 = tt.addptr %25, %26 : tensor<128x32x!tt.ptr<i8>, #blocked6>, tensor<128x32xi32, #blocked6> loc(#loc)
    %28 = tt.load %14 : tensor<32x256x!tt.ptr<bf16>, #blocked5> loc(#loc)
    %29 = tt.reshape %28 : tensor<32x256xbf16, #blocked5> -> tensor<32x2x128xbf16, #blocked7> loc(#loc)
    %30 = tt.trans %29 {order = array<i32: 0, 2, 1>} : tensor<32x2x128xbf16, #blocked7> -> tensor<32x128x2xbf16, #blocked8> loc(#loc)
    %31 = ttg.convert_layout %30 : tensor<32x128x2xbf16, #blocked8> -> tensor<32x128x2xbf16, #blocked9> loc(#loc)
    %outLHS, %outRHS = tt.split %31 : tensor<32x128x2xbf16, #blocked9> -> tensor<32x128xbf16, #blocked10> loc(#loc)
    %32 = tt.load %27 : tensor<128x32x!tt.ptr<i8>, #blocked6> loc(#loc)
    %33 = tt.reshape %32 : tensor<128x32xi8, #blocked6> -> tensor<2x64x32xi8, #blocked11> loc(#loc)
    %34 = tt.trans %33 {order = array<i32: 1, 2, 0>} : tensor<2x64x32xi8, #blocked11> -> tensor<64x32x2xi8, #blocked12> loc(#loc)
    %35 = ttg.convert_layout %34 : tensor<64x32x2xi8, #blocked12> -> tensor<64x32x2xi8, #blocked13> loc(#loc)
    %outLHS_5, %outRHS_6 = tt.split %35 : tensor<64x32x2xi8, #blocked13> -> tensor<64x32xi8, #blocked2> loc(#loc)
    %36 = arith.muli %4, %cst_4 : tensor<32x1xi32, #blocked4> loc(#loc)
    %37 = tt.splat %b_scale : !tt.ptr<i8> -> tensor<32x1x!tt.ptr<i8>, #blocked4> loc(#loc)
    %38 = tt.addptr %37, %36 : tensor<32x1x!tt.ptr<i8>, #blocked4>, tensor<32x1xi32, #blocked4> loc(#loc)
    %39 = tt.make_range {end = 8 : i32, start = 0 : i32} : tensor<8xi32, #ttg.slice<{dim = 0, parent = #blocked4}>> loc(#loc)
    %40 = tt.expand_dims %39 {axis = 0 : i32} : tensor<8xi32, #ttg.slice<{dim = 0, parent = #blocked4}>> -> tensor<1x8xi32, #blocked4> loc(#loc)
    %41 = tt.broadcast %38 : tensor<32x1x!tt.ptr<i8>, #blocked4> -> tensor<32x8x!tt.ptr<i8>, #blocked4> loc(#loc)
    %42 = tt.broadcast %40 : tensor<1x8xi32, #blocked4> -> tensor<32x8xi32, #blocked4> loc(#loc)
    %43 = tt.addptr %41, %42 : tensor<32x8x!tt.ptr<i8>, #blocked4>, tensor<32x8xi32, #blocked4> loc(#loc)
    %44 = tt.load %43 : tensor<32x8x!tt.ptr<i8>, #blocked4> loc(#loc)
    %45 = tt.reshape %44 : tensor<32x8xi8, #blocked4> -> tensor<32x2x4xi8, #blocked14> loc(#loc)
    %46 = tt.trans %45 {order = array<i32: 0, 2, 1>} : tensor<32x2x4xi8, #blocked14> -> tensor<32x4x2xi8, #blocked15> loc(#loc)
    %47 = ttg.convert_layout %46 : tensor<32x4x2xi8, #blocked15> -> tensor<32x4x2xi8, #blocked16> loc(#loc)
    %outLHS_7, %outRHS_8 = tt.split %47 : tensor<32x4x2xi8, #blocked16> -> tensor<32x4xi8, #blocked17> loc(#loc)
    %48 = ttg.convert_layout %outLHS : tensor<32x128xbf16, #blocked10> -> tensor<32x128xbf16, #ttg.dot_op<{opIdx = 0, parent = #blocked2}>> loc(#loc)
    %49 = ttg.fp4_to_fp %outLHS_5 {axis = 0 : i32} : tensor<64x32xi8, #blocked2> -> tensor<128x32xbf16, #blocked> loc(#loc)
    %50 = tt.trans %outLHS_7 {order = array<i32: 1, 0>} : tensor<32x4xi8, #blocked17> -> tensor<4x32xi8, #blocked1> loc(#loc)
    %51 = arith.extui %50 : tensor<4x32xi8, #blocked1> to tensor<4x32xi16, #blocked1> loc(#loc)
    %52 = arith.shli %51, %cst_1 : tensor<4x32xi16, #blocked1> loc(#loc)
    %53 = tt.bitcast %52 : tensor<4x32xi16, #blocked1> -> tensor<4x32xbf16, #blocked1> loc(#loc)
    %54 = ttg.convert_layout %53 : tensor<4x32xbf16, #blocked1> -> tensor<4x32xbf16, #ttg.slice<{dim = 2, parent = #blocked18}>> loc(#loc)
    %55 = tt.expand_dims %54 {axis = 2 : i32} : tensor<4x32xbf16, #ttg.slice<{dim = 2, parent = #blocked18}>> -> tensor<4x32x1xbf16, #blocked18> loc(#loc)
    %56 = tt.broadcast %55 : tensor<4x32x1xbf16, #blocked18> -> tensor<4x32x32xbf16, #blocked18> loc(#loc)
    %57 = tt.trans %56 {order = array<i32: 0, 2, 1>} : tensor<4x32x32xbf16, #blocked18> -> tensor<4x32x32xbf16, #blocked19> loc(#loc)
    %58 = tt.reshape %57 : tensor<4x32x32xbf16, #blocked19> -> tensor<128x32xbf16, #linear> loc(#loc)
    %59 = ttg.convert_layout %58 : tensor<128x32xbf16, #linear> -> tensor<128x32xbf16, #blocked> loc(#loc)
    %60 = arith.mulf %49, %59 : tensor<128x32xbf16, #blocked> loc(#loc)
    %61 = arith.cmpi eq, %50, %cst_0 : tensor<4x32xi8, #blocked1> loc(#loc)
    %62 = ttg.convert_layout %61 : tensor<4x32xi1, #blocked1> -> tensor<4x32xi1, #ttg.slice<{dim = 2, parent = #blocked18}>> loc(#loc)
    %63 = tt.expand_dims %62 {axis = 2 : i32} : tensor<4x32xi1, #ttg.slice<{dim = 2, parent = #blocked18}>> -> tensor<4x32x1xi1, #blocked18> loc(#loc)
    %64 = tt.broadcast %63 : tensor<4x32x1xi1, #blocked18> -> tensor<4x32x32xi1, #blocked18> loc(#loc)
    %65 = tt.trans %64 {order = array<i32: 0, 2, 1>} : tensor<4x32x32xi1, #blocked18> -> tensor<4x32x32xi1, #blocked19> loc(#loc)
    %66 = tt.reshape %65 : tensor<4x32x32xi1, #blocked19> -> tensor<128x32xi1, #linear> loc(#loc)
    %67 = ttg.convert_layout %66 : tensor<128x32xi1, #linear> -> tensor<128x32xi1, #blocked> loc(#loc)
    %68 = arith.select %67, %cst, %60 : tensor<128x32xi1, #blocked>, tensor<128x32xbf16, #blocked> loc(#loc)
    %69 = ttg.convert_layout %68 : tensor<128x32xbf16, #blocked> -> tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #blocked2}>> loc(#loc)
    %70 = ttg.convert_layout %cst_2 : tensor<32x32xf32, #blocked2> -> tensor<32x32xf32, #mma> loc(#loc)
    %71 = ttg.convert_layout %48 : tensor<32x128xbf16, #ttg.dot_op<{opIdx = 0, parent = #blocked2}>> -> tensor<32x128xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> loc(#loc)
    %72 = ttg.convert_layout %69 : tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #blocked2}>> -> tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %73 = tt.dot %71, %72, %70 : tensor<32x128xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> * tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> -> tensor<32x32xf32, #mma> loc(#loc)
    %74 = ttg.convert_layout %73 : tensor<32x32xf32, #mma> -> tensor<32x32xf32, #blocked2> loc(#loc)
    %75 = ttg.convert_layout %74 : tensor<32x32xf32, #blocked2> -> tensor<32x32xf32, #blocked2> loc(#loc)
    %76 = ttg.convert_layout %outRHS : tensor<32x128xbf16, #blocked10> -> tensor<32x128xbf16, #ttg.dot_op<{opIdx = 0, parent = #blocked2}>> loc(#loc)
    %77 = ttg.fp4_to_fp %outRHS_6 {axis = 0 : i32} : tensor<64x32xi8, #blocked2> -> tensor<128x32xbf16, #blocked> loc(#loc)
    %78 = tt.trans %outRHS_8 {order = array<i32: 1, 0>} : tensor<32x4xi8, #blocked17> -> tensor<4x32xi8, #blocked1> loc(#loc)
    %79 = arith.extui %78 : tensor<4x32xi8, #blocked1> to tensor<4x32xi16, #blocked1> loc(#loc)
    %80 = arith.shli %79, %cst_1 : tensor<4x32xi16, #blocked1> loc(#loc)
    %81 = tt.bitcast %80 : tensor<4x32xi16, #blocked1> -> tensor<4x32xbf16, #blocked1> loc(#loc)
    %82 = ttg.convert_layout %81 : tensor<4x32xbf16, #blocked1> -> tensor<4x32xbf16, #ttg.slice<{dim = 2, parent = #blocked18}>> loc(#loc)
    %83 = tt.expand_dims %82 {axis = 2 : i32} : tensor<4x32xbf16, #ttg.slice<{dim = 2, parent = #blocked18}>> -> tensor<4x32x1xbf16, #blocked18> loc(#loc)
    %84 = tt.broadcast %83 : tensor<4x32x1xbf16, #blocked18> -> tensor<4x32x32xbf16, #blocked18> loc(#loc)
    %85 = tt.trans %84 {order = array<i32: 0, 2, 1>} : tensor<4x32x32xbf16, #blocked18> -> tensor<4x32x32xbf16, #blocked19> loc(#loc)
    %86 = tt.reshape %85 : tensor<4x32x32xbf16, #blocked19> -> tensor<128x32xbf16, #linear> loc(#loc)
    %87 = ttg.convert_layout %86 : tensor<128x32xbf16, #linear> -> tensor<128x32xbf16, #blocked> loc(#loc)
    %88 = arith.mulf %77, %87 : tensor<128x32xbf16, #blocked> loc(#loc)
    %89 = arith.cmpi eq, %78, %cst_0 : tensor<4x32xi8, #blocked1> loc(#loc)
    %90 = ttg.convert_layout %89 : tensor<4x32xi1, #blocked1> -> tensor<4x32xi1, #ttg.slice<{dim = 2, parent = #blocked18}>> loc(#loc)
    %91 = tt.expand_dims %90 {axis = 2 : i32} : tensor<4x32xi1, #ttg.slice<{dim = 2, parent = #blocked18}>> -> tensor<4x32x1xi1, #blocked18> loc(#loc)
    %92 = tt.broadcast %91 : tensor<4x32x1xi1, #blocked18> -> tensor<4x32x32xi1, #blocked18> loc(#loc)
    %93 = tt.trans %92 {order = array<i32: 0, 2, 1>} : tensor<4x32x32xi1, #blocked18> -> tensor<4x32x32xi1, #blocked19> loc(#loc)
    %94 = tt.reshape %93 : tensor<4x32x32xi1, #blocked19> -> tensor<128x32xi1, #linear> loc(#loc)
    %95 = ttg.convert_layout %94 : tensor<128x32xi1, #linear> -> tensor<128x32xi1, #blocked> loc(#loc)
    %96 = arith.select %95, %cst, %88 : tensor<128x32xi1, #blocked>, tensor<128x32xbf16, #blocked> loc(#loc)
    %97 = ttg.convert_layout %96 : tensor<128x32xbf16, #blocked> -> tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #blocked2}>> loc(#loc)
    %98 = ttg.convert_layout %cst_2 : tensor<32x32xf32, #blocked2> -> tensor<32x32xf32, #mma> loc(#loc)
    %99 = ttg.convert_layout %76 : tensor<32x128xbf16, #ttg.dot_op<{opIdx = 0, parent = #blocked2}>> -> tensor<32x128xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> loc(#loc)
    %100 = ttg.convert_layout %97 : tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #blocked2}>> -> tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %101 = tt.dot %99, %100, %98 : tensor<32x128xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> * tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> -> tensor<32x32xf32, #mma> loc(#loc)
    %102 = ttg.convert_layout %101 : tensor<32x32xf32, #mma> -> tensor<32x32xf32, #blocked2> loc(#loc)
    %103 = ttg.convert_layout %102 : tensor<32x32xf32, #blocked2> -> tensor<32x32xf32, #blocked2> loc(#loc)
    %104 = arith.addf %75, %103 : tensor<32x32xf32, #blocked2> loc(#loc)
    %105 = arith.muli %5, %cst_3 : tensor<32x1xi32, #blocked3> loc(#loc)
    %106 = tt.splat %out : !tt.ptr<bf16> -> tensor<32x1x!tt.ptr<bf16>, #blocked3> loc(#loc)
    %107 = tt.addptr %106, %105 : tensor<32x1x!tt.ptr<bf16>, #blocked3>, tensor<32x1xi32, #blocked3> loc(#loc)
    %108 = tt.broadcast %107 : tensor<32x1x!tt.ptr<bf16>, #blocked3> -> tensor<32x32x!tt.ptr<bf16>, #blocked3> loc(#loc)
    %109 = tt.broadcast %22 : tensor<1x32xi32, #blocked3> -> tensor<32x32xi32, #blocked3> loc(#loc)
    %110 = tt.addptr %108, %109 : tensor<32x32x!tt.ptr<bf16>, #blocked3>, tensor<32x32xi32, #blocked3> loc(#loc)
    %111 = arith.truncf %104 : tensor<32x32xf32, #blocked2> to tensor<32x32xbf16, #blocked2> loc(#loc)
    %112 = ttg.convert_layout %111 : tensor<32x32xbf16, #blocked2> -> tensor<32x32xbf16, #blocked3> loc(#loc)
    tt.store %110, %112 : tensor<32x32x!tt.ptr<bf16>, #blocked3> loc(#loc)
    tt.return loc(#loc)
  } loc(#loc)
} loc(#loc)
#loc = loc(unknown)


// -----// IR Dump Before TritonAMDGPUOptimizeEpilogue (tritonamdgpu-optimize-epilogue) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [8, 8], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [1, 4], threadsPerWarp = [8, 8], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked2 = #ttg.blocked<{sizePerThread = [1, 8], threadsPerWarp = [2, 32], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked3 = #ttg.blocked<{sizePerThread = [16, 1], threadsPerWarp = [8, 8], warpsPerCTA = [1, 4], order = [0, 1]}>
#linear = #ttg.linear<{register = [[0, 0, 1], [0, 0, 2], [0, 0, 4], [1, 0, 0], [2, 0, 0]], lane = [[0, 1, 0], [0, 2, 0], [0, 4, 0], [0, 8, 0], [0, 0, 8], [0, 0, 16]], warp = [[0, 16, 0], [0, 0, 0]], block = []}>
#linear1 = #ttg.linear<{register = [[0, 128], [0, 1], [0, 2], [0, 4], [0, 32], [0, 64]], lane = [[1, 0], [2, 0], [4, 0], [8, 0], [0, 8], [0, 16]], warp = [[0, 0], [16, 0]], block = []}>
#linear2 = #ttg.linear<{register = [[0, 1, 0], [0, 0, 1], [0, 0, 2], [0, 0, 4], [0, 0, 32], [0, 0, 64]], lane = [[1, 0, 0], [2, 0, 0], [4, 0, 0], [8, 0, 0], [0, 0, 8], [0, 0, 16]], warp = [[0, 0, 0], [16, 0, 0]], block = []}>
#linear3 = #ttg.linear<{register = [[0, 0, 1], [0, 1, 0], [0, 2, 0], [0, 4, 0], [0, 32, 0], [0, 64, 0]], lane = [[1, 0, 0], [2, 0, 0], [4, 0, 0], [8, 0, 0], [0, 8, 0], [0, 16, 0]], warp = [[0, 0, 0], [16, 0, 0]], block = []}>
#linear4 = #ttg.linear<{register = [[64, 0], [1, 0], [2, 0], [16, 0], [32, 0]], lane = [[0, 1], [0, 2], [0, 4], [0, 8], [4, 0], [8, 0]], warp = [[0, 16], [0, 0]], block = []}>
#linear5 = #ttg.linear<{register = [[1, 0, 0], [0, 1, 0], [0, 2, 0], [0, 16, 0], [0, 32, 0]], lane = [[0, 0, 1], [0, 0, 2], [0, 0, 4], [0, 0, 8], [0, 4, 0], [0, 8, 0]], warp = [[0, 0, 16], [0, 0, 0]], block = []}>
#linear6 = #ttg.linear<{register = [[0, 0, 1], [1, 0, 0], [2, 0, 0], [16, 0, 0], [32, 0, 0]], lane = [[0, 1, 0], [0, 2, 0], [0, 4, 0], [0, 8, 0], [4, 0, 0], [8, 0, 0]], warp = [[0, 16, 0], [0, 0, 0]], block = []}>
#linear7 = #ttg.linear<{register = [[0, 4], [0, 1], [0, 2]], lane = [[1, 0], [2, 0], [4, 0], [8, 0], [0, 0], [0, 0]], warp = [[16, 0], [0, 0]], block = []}>
#linear8 = #ttg.linear<{register = [[0, 1, 0], [0, 0, 1], [0, 0, 2]], lane = [[1, 0, 0], [2, 0, 0], [4, 0, 0], [8, 0, 0], [0, 0, 0], [0, 0, 0]], warp = [[16, 0, 0], [0, 0, 0]], block = []}>
#linear9 = #ttg.linear<{register = [[0, 0, 1], [0, 1, 0], [0, 2, 0]], lane = [[1, 0, 0], [2, 0, 0], [4, 0, 0], [8, 0, 0], [0, 0, 0], [0, 0, 0]], warp = [[16, 0, 0], [0, 0, 0]], block = []}>
#linear10 = #ttg.linear<{register = [[0, 1], [0, 2]], lane = [[1, 0], [2, 0], [4, 0], [8, 0], [0, 0], [0, 0]], warp = [[16, 0], [0, 0]], block = []}>
#linear11 = #ttg.linear<{register = [[0, 1, 0], [0, 2, 0], [0, 4, 0], [1, 0, 0], [2, 0, 0]], lane = [[0, 0, 1], [0, 0, 2], [0, 0, 4], [0, 0, 8], [0, 8, 0], [0, 16, 0]], warp = [[0, 0, 16], [0, 0, 0]], block = []}>
#loc1 = loc("a_base")
#loc2 = loc("stride_a0")
#loc3 = loc("b_base")
#loc4 = loc("stride_b1")
#loc5 = loc("b_scale")
#loc6 = loc("out")
#mma = #ttg.amd_mfma<{version = 4, warpsPerCTA = [2, 2], instrShape = [16, 16], isTransposed = true}>
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "hip:gfx950", "ttg.threads-per-warp" = 64 : i32} {
  tt.func public @dot_scale_kernel(%a_base: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("a_base"), %stride_a0: i32 {tt.divisibility = 16 : i32} loc("stride_a0"), %b_base: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("b_base"), %stride_b1: i32 {tt.divisibility = 16 : i32} loc("stride_b1"), %b_scale: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("b_scale"), %out: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("out")) attributes {noinline = false} {
    %cst = arith.constant dense<8> : tensor<32x1xi32, #blocked> loc(#loc)
    %cst_0 = arith.constant dense<32> : tensor<32x1xi32, #blocked1> loc(#loc)
    %cst_1 = arith.constant dense<0.000000e+00> : tensor<32x32xf32, #mma> loc(#loc)
    %cst_2 = arith.constant dense<0x7FC0> : tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %cst_3 = arith.constant dense<-1> : tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %cst_4 = arith.constant dense<7> : tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %0 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked2}>> loc(#loc)
    %1 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc)
    %2 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc)
    %3 = tt.expand_dims %0 {axis = 1 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked2}>> -> tensor<32x1xi32, #blocked2> loc(#loc)
    %4 = tt.expand_dims %1 {axis = 1 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<32x1xi32, #blocked> loc(#loc)
    %5 = tt.expand_dims %2 {axis = 1 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> -> tensor<32x1xi32, #blocked1> loc(#loc)
    %6 = tt.splat %stride_a0 : i32 -> tensor<32x1xi32, #blocked2> loc(#loc)
    %7 = arith.muli %3, %6 : tensor<32x1xi32, #blocked2> loc(#loc)
    %8 = tt.splat %a_base : !tt.ptr<bf16> -> tensor<32x1x!tt.ptr<bf16>, #blocked2> loc(#loc)
    %9 = tt.addptr %8, %7 : tensor<32x1x!tt.ptr<bf16>, #blocked2>, tensor<32x1xi32, #blocked2> loc(#loc)
    %10 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #ttg.slice<{dim = 0, parent = #blocked2}>> loc(#loc)
    %11 = tt.expand_dims %10 {axis = 0 : i32} : tensor<256xi32, #ttg.slice<{dim = 0, parent = #blocked2}>> -> tensor<1x256xi32, #blocked2> loc(#loc)
    %12 = tt.broadcast %9 : tensor<32x1x!tt.ptr<bf16>, #blocked2> -> tensor<32x256x!tt.ptr<bf16>, #blocked2> loc(#loc)
    %13 = tt.broadcast %11 : tensor<1x256xi32, #blocked2> -> tensor<32x256xi32, #blocked2> loc(#loc)
    %14 = tt.addptr %12, %13 : tensor<32x256x!tt.ptr<bf16>, #blocked2>, tensor<32x256xi32, #blocked2> loc(#loc)
    %15 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked3}>> loc(#loc)
    %16 = tt.expand_dims %15 {axis = 1 : i32} : tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked3}>> -> tensor<128x1xi32, #blocked3> loc(#loc)
    %17 = tt.splat %b_base : !tt.ptr<i8> -> tensor<128x1x!tt.ptr<i8>, #blocked3> loc(#loc)
    %18 = tt.addptr %17, %16 : tensor<128x1x!tt.ptr<i8>, #blocked3>, tensor<128x1xi32, #blocked3> loc(#loc)
    %19 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked3}>> loc(#loc)
    %20 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc)
    %21 = tt.expand_dims %19 {axis = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked3}>> -> tensor<1x32xi32, #blocked3> loc(#loc)
    %22 = tt.expand_dims %20 {axis = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x32xi32, #blocked1> loc(#loc)
    %23 = tt.splat %stride_b1 : i32 -> tensor<1x32xi32, #blocked3> loc(#loc)
    %24 = arith.muli %21, %23 : tensor<1x32xi32, #blocked3> loc(#loc)
    %25 = tt.broadcast %18 : tensor<128x1x!tt.ptr<i8>, #blocked3> -> tensor<128x32x!tt.ptr<i8>, #blocked3> loc(#loc)
    %26 = tt.broadcast %24 : tensor<1x32xi32, #blocked3> -> tensor<128x32xi32, #blocked3> loc(#loc)
    %27 = tt.addptr %25, %26 : tensor<128x32x!tt.ptr<i8>, #blocked3>, tensor<128x32xi32, #blocked3> loc(#loc)
    %28 = tt.load %14 : tensor<32x256x!tt.ptr<bf16>, #blocked2> loc(#loc)
    %29 = ttg.convert_layout %28 : tensor<32x256xbf16, #blocked2> -> tensor<32x256xbf16, #linear1> loc(#loc)
    %30 = tt.reshape %29 : tensor<32x256xbf16, #linear1> -> tensor<32x2x128xbf16, #linear2> loc(#loc)
    %31 = tt.trans %30 {order = array<i32: 0, 2, 1>} : tensor<32x2x128xbf16, #linear2> -> tensor<32x128x2xbf16, #linear3> loc(#loc)
    %outLHS, %outRHS = tt.split %31 : tensor<32x128x2xbf16, #linear3> -> tensor<32x128xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> loc(#loc)
    %32 = tt.load %27 : tensor<128x32x!tt.ptr<i8>, #blocked3> loc(#loc)
    %33 = ttg.convert_layout %32 : tensor<128x32xi8, #blocked3> -> tensor<128x32xi8, #linear4> loc(#loc)
    %34 = tt.reshape %33 : tensor<128x32xi8, #linear4> -> tensor<2x64x32xi8, #linear5> loc(#loc)
    %35 = tt.trans %34 {order = array<i32: 1, 2, 0>} : tensor<2x64x32xi8, #linear5> -> tensor<64x32x2xi8, #linear6> loc(#loc)
    %outLHS_5, %outRHS_6 = tt.split %35 : tensor<64x32x2xi8, #linear6> -> tensor<64x32xi8, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 4}>> loc(#loc)
    %36 = arith.muli %4, %cst : tensor<32x1xi32, #blocked> loc(#loc)
    %37 = tt.splat %b_scale : !tt.ptr<i8> -> tensor<32x1x!tt.ptr<i8>, #blocked> loc(#loc)
    %38 = tt.addptr %37, %36 : tensor<32x1x!tt.ptr<i8>, #blocked>, tensor<32x1xi32, #blocked> loc(#loc)
    %39 = tt.make_range {end = 8 : i32, start = 0 : i32} : tensor<8xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc)
    %40 = tt.expand_dims %39 {axis = 0 : i32} : tensor<8xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x8xi32, #blocked> loc(#loc)
    %41 = tt.broadcast %38 : tensor<32x1x!tt.ptr<i8>, #blocked> -> tensor<32x8x!tt.ptr<i8>, #blocked> loc(#loc)
    %42 = tt.broadcast %40 : tensor<1x8xi32, #blocked> -> tensor<32x8xi32, #blocked> loc(#loc)
    %43 = tt.addptr %41, %42 : tensor<32x8x!tt.ptr<i8>, #blocked>, tensor<32x8xi32, #blocked> loc(#loc)
    %44 = tt.load %43 : tensor<32x8x!tt.ptr<i8>, #blocked> loc(#loc)
    %45 = ttg.convert_layout %44 : tensor<32x8xi8, #blocked> -> tensor<32x8xi8, #linear7> loc(#loc)
    %46 = tt.reshape %45 : tensor<32x8xi8, #linear7> -> tensor<32x2x4xi8, #linear8> loc(#loc)
    %47 = tt.trans %46 {order = array<i32: 0, 2, 1>} : tensor<32x2x4xi8, #linear8> -> tensor<32x4x2xi8, #linear9> loc(#loc)
    %outLHS_7, %outRHS_8 = tt.split %47 : tensor<32x4x2xi8, #linear9> -> tensor<32x4xi8, #linear10> loc(#loc)
    %48 = ttg.fp4_to_fp %outLHS_5 {axis = 0 : i32} : tensor<64x32xi8, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 4}>> -> tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %49 = tt.trans %outLHS_7 {order = array<i32: 1, 0>} : tensor<32x4xi8, #linear10> -> tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %50 = arith.extui %49 : tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> to tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %51 = arith.shli %50, %cst_4 : tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %52 = tt.bitcast %51 : tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> -> tensor<4x32xbf16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %53 = tt.expand_dims %52 {axis = 2 : i32} : tensor<4x32xbf16, #ttg.slice<{dim = 2, parent = #linear}>> -> tensor<4x32x1xbf16, #linear> loc(#loc)
    %54 = tt.broadcast %53 : tensor<4x32x1xbf16, #linear> -> tensor<4x32x32xbf16, #linear> loc(#loc)
    %55 = tt.trans %54 {order = array<i32: 0, 2, 1>} : tensor<4x32x32xbf16, #linear> -> tensor<4x32x32xbf16, #linear11> loc(#loc)
    %56 = tt.reshape %55 : tensor<4x32x32xbf16, #linear11> -> tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %57 = arith.mulf %48, %56 : tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %58 = arith.cmpi eq, %49, %cst_3 : tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %59 = tt.expand_dims %58 {axis = 2 : i32} : tensor<4x32xi1, #ttg.slice<{dim = 2, parent = #linear}>> -> tensor<4x32x1xi1, #linear> loc(#loc)
    %60 = tt.broadcast %59 : tensor<4x32x1xi1, #linear> -> tensor<4x32x32xi1, #linear> loc(#loc)
    %61 = tt.trans %60 {order = array<i32: 0, 2, 1>} : tensor<4x32x32xi1, #linear> -> tensor<4x32x32xi1, #linear11> loc(#loc)
    %62 = tt.reshape %61 : tensor<4x32x32xi1, #linear11> -> tensor<128x32xi1, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %63 = arith.select %62, %cst_2, %57 : tensor<128x32xi1, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>>, tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %64 = tt.dot %outLHS, %63, %cst_1 : tensor<32x128xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> * tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> -> tensor<32x32xf32, #mma> loc(#loc)
    %65 = ttg.fp4_to_fp %outRHS_6 {axis = 0 : i32} : tensor<64x32xi8, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 4}>> -> tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %66 = tt.trans %outRHS_8 {order = array<i32: 1, 0>} : tensor<32x4xi8, #linear10> -> tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %67 = arith.extui %66 : tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> to tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %68 = arith.shli %67, %cst_4 : tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %69 = tt.bitcast %68 : tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> -> tensor<4x32xbf16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %70 = tt.expand_dims %69 {axis = 2 : i32} : tensor<4x32xbf16, #ttg.slice<{dim = 2, parent = #linear}>> -> tensor<4x32x1xbf16, #linear> loc(#loc)
    %71 = tt.broadcast %70 : tensor<4x32x1xbf16, #linear> -> tensor<4x32x32xbf16, #linear> loc(#loc)
    %72 = tt.trans %71 {order = array<i32: 0, 2, 1>} : tensor<4x32x32xbf16, #linear> -> tensor<4x32x32xbf16, #linear11> loc(#loc)
    %73 = tt.reshape %72 : tensor<4x32x32xbf16, #linear11> -> tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %74 = arith.mulf %65, %73 : tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %75 = arith.cmpi eq, %66, %cst_3 : tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %76 = tt.expand_dims %75 {axis = 2 : i32} : tensor<4x32xi1, #ttg.slice<{dim = 2, parent = #linear}>> -> tensor<4x32x1xi1, #linear> loc(#loc)
    %77 = tt.broadcast %76 : tensor<4x32x1xi1, #linear> -> tensor<4x32x32xi1, #linear> loc(#loc)
    %78 = tt.trans %77 {order = array<i32: 0, 2, 1>} : tensor<4x32x32xi1, #linear> -> tensor<4x32x32xi1, #linear11> loc(#loc)
    %79 = tt.reshape %78 : tensor<4x32x32xi1, #linear11> -> tensor<128x32xi1, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %80 = arith.select %79, %cst_2, %74 : tensor<128x32xi1, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>>, tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %81 = tt.dot %outRHS, %80, %cst_1 : tensor<32x128xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> * tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> -> tensor<32x32xf32, #mma> loc(#loc)
    %82 = arith.addf %64, %81 : tensor<32x32xf32, #mma> loc(#loc)
    %83 = arith.muli %5, %cst_0 : tensor<32x1xi32, #blocked1> loc(#loc)
    %84 = tt.splat %out : !tt.ptr<bf16> -> tensor<32x1x!tt.ptr<bf16>, #blocked1> loc(#loc)
    %85 = tt.addptr %84, %83 : tensor<32x1x!tt.ptr<bf16>, #blocked1>, tensor<32x1xi32, #blocked1> loc(#loc)
    %86 = tt.broadcast %85 : tensor<32x1x!tt.ptr<bf16>, #blocked1> -> tensor<32x32x!tt.ptr<bf16>, #blocked1> loc(#loc)
    %87 = tt.broadcast %22 : tensor<1x32xi32, #blocked1> -> tensor<32x32xi32, #blocked1> loc(#loc)
    %88 = tt.addptr %86, %87 : tensor<32x32x!tt.ptr<bf16>, #blocked1>, tensor<32x32xi32, #blocked1> loc(#loc)
    %89 = arith.truncf %82 : tensor<32x32xf32, #mma> to tensor<32x32xbf16, #mma> loc(#loc)
    %90 = ttg.convert_layout %89 : tensor<32x32xbf16, #mma> -> tensor<32x32xbf16, #blocked1> loc(#loc)
    tt.store %88, %90 : tensor<32x32x!tt.ptr<bf16>, #blocked1> loc(#loc)
    tt.return loc(#loc)
  } loc(#loc)
} loc(#loc)
#loc = loc(unknown)


// -----// IR Dump Before TritonGPUOptimizeDotOperands (tritongpu-optimize-dot-operands) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [8, 8], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [1, 4], threadsPerWarp = [8, 8], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked2 = #ttg.blocked<{sizePerThread = [1, 8], threadsPerWarp = [2, 32], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked3 = #ttg.blocked<{sizePerThread = [16, 1], threadsPerWarp = [8, 8], warpsPerCTA = [1, 4], order = [0, 1]}>
#linear = #ttg.linear<{register = [[0, 0, 1], [0, 0, 2], [0, 0, 4], [1, 0, 0], [2, 0, 0]], lane = [[0, 1, 0], [0, 2, 0], [0, 4, 0], [0, 8, 0], [0, 0, 8], [0, 0, 16]], warp = [[0, 16, 0], [0, 0, 0]], block = []}>
#linear1 = #ttg.linear<{register = [[0, 128], [0, 1], [0, 2], [0, 4], [0, 32], [0, 64]], lane = [[1, 0], [2, 0], [4, 0], [8, 0], [0, 8], [0, 16]], warp = [[0, 0], [16, 0]], block = []}>
#linear2 = #ttg.linear<{register = [[0, 1, 0], [0, 0, 1], [0, 0, 2], [0, 0, 4], [0, 0, 32], [0, 0, 64]], lane = [[1, 0, 0], [2, 0, 0], [4, 0, 0], [8, 0, 0], [0, 0, 8], [0, 0, 16]], warp = [[0, 0, 0], [16, 0, 0]], block = []}>
#linear3 = #ttg.linear<{register = [[0, 0, 1], [0, 1, 0], [0, 2, 0], [0, 4, 0], [0, 32, 0], [0, 64, 0]], lane = [[1, 0, 0], [2, 0, 0], [4, 0, 0], [8, 0, 0], [0, 8, 0], [0, 16, 0]], warp = [[0, 0, 0], [16, 0, 0]], block = []}>
#linear4 = #ttg.linear<{register = [[64, 0], [1, 0], [2, 0], [16, 0], [32, 0]], lane = [[0, 1], [0, 2], [0, 4], [0, 8], [4, 0], [8, 0]], warp = [[0, 16], [0, 0]], block = []}>
#linear5 = #ttg.linear<{register = [[1, 0, 0], [0, 1, 0], [0, 2, 0], [0, 16, 0], [0, 32, 0]], lane = [[0, 0, 1], [0, 0, 2], [0, 0, 4], [0, 0, 8], [0, 4, 0], [0, 8, 0]], warp = [[0, 0, 16], [0, 0, 0]], block = []}>
#linear6 = #ttg.linear<{register = [[0, 0, 1], [1, 0, 0], [2, 0, 0], [16, 0, 0], [32, 0, 0]], lane = [[0, 1, 0], [0, 2, 0], [0, 4, 0], [0, 8, 0], [4, 0, 0], [8, 0, 0]], warp = [[0, 16, 0], [0, 0, 0]], block = []}>
#linear7 = #ttg.linear<{register = [[0, 4], [0, 1], [0, 2]], lane = [[1, 0], [2, 0], [4, 0], [8, 0], [0, 0], [0, 0]], warp = [[16, 0], [0, 0]], block = []}>
#linear8 = #ttg.linear<{register = [[0, 1, 0], [0, 0, 1], [0, 0, 2]], lane = [[1, 0, 0], [2, 0, 0], [4, 0, 0], [8, 0, 0], [0, 0, 0], [0, 0, 0]], warp = [[16, 0, 0], [0, 0, 0]], block = []}>
#linear9 = #ttg.linear<{register = [[0, 0, 1], [0, 1, 0], [0, 2, 0]], lane = [[1, 0, 0], [2, 0, 0], [4, 0, 0], [8, 0, 0], [0, 0, 0], [0, 0, 0]], warp = [[16, 0, 0], [0, 0, 0]], block = []}>
#linear10 = #ttg.linear<{register = [[0, 1], [0, 2]], lane = [[1, 0], [2, 0], [4, 0], [8, 0], [0, 0], [0, 0]], warp = [[16, 0], [0, 0]], block = []}>
#linear11 = #ttg.linear<{register = [[0, 1, 0], [0, 2, 0], [0, 4, 0], [1, 0, 0], [2, 0, 0]], lane = [[0, 0, 1], [0, 0, 2], [0, 0, 4], [0, 0, 8], [0, 8, 0], [0, 16, 0]], warp = [[0, 0, 16], [0, 0, 0]], block = []}>
#loc1 = loc("a_base")
#loc2 = loc("stride_a0")
#loc3 = loc("b_base")
#loc4 = loc("stride_b1")
#loc5 = loc("b_scale")
#loc6 = loc("out")
#mma = #ttg.amd_mfma<{version = 4, warpsPerCTA = [2, 2], instrShape = [16, 16], isTransposed = true}>
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "hip:gfx950", "ttg.threads-per-warp" = 64 : i32} {
  tt.func public @dot_scale_kernel(%a_base: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("a_base"), %stride_a0: i32 {tt.divisibility = 16 : i32} loc("stride_a0"), %b_base: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("b_base"), %stride_b1: i32 {tt.divisibility = 16 : i32} loc("stride_b1"), %b_scale: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("b_scale"), %out: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("out")) attributes {noinline = false} {
    %cst = arith.constant dense<8> : tensor<32x1xi32, #blocked> loc(#loc)
    %cst_0 = arith.constant dense<32> : tensor<32x1xi32, #blocked1> loc(#loc)
    %cst_1 = arith.constant dense<0.000000e+00> : tensor<32x32xf32, #mma> loc(#loc)
    %cst_2 = arith.constant dense<0x7FC0> : tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %cst_3 = arith.constant dense<-1> : tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %cst_4 = arith.constant dense<7> : tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %0 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked2}>> loc(#loc)
    %1 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc)
    %2 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc)
    %3 = tt.expand_dims %0 {axis = 1 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked2}>> -> tensor<32x1xi32, #blocked2> loc(#loc)
    %4 = tt.expand_dims %1 {axis = 1 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<32x1xi32, #blocked> loc(#loc)
    %5 = tt.expand_dims %2 {axis = 1 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> -> tensor<32x1xi32, #blocked1> loc(#loc)
    %6 = tt.splat %stride_a0 : i32 -> tensor<32x1xi32, #blocked2> loc(#loc)
    %7 = arith.muli %3, %6 : tensor<32x1xi32, #blocked2> loc(#loc)
    %8 = tt.splat %a_base : !tt.ptr<bf16> -> tensor<32x1x!tt.ptr<bf16>, #blocked2> loc(#loc)
    %9 = tt.addptr %8, %7 : tensor<32x1x!tt.ptr<bf16>, #blocked2>, tensor<32x1xi32, #blocked2> loc(#loc)
    %10 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #ttg.slice<{dim = 0, parent = #blocked2}>> loc(#loc)
    %11 = tt.expand_dims %10 {axis = 0 : i32} : tensor<256xi32, #ttg.slice<{dim = 0, parent = #blocked2}>> -> tensor<1x256xi32, #blocked2> loc(#loc)
    %12 = tt.broadcast %9 : tensor<32x1x!tt.ptr<bf16>, #blocked2> -> tensor<32x256x!tt.ptr<bf16>, #blocked2> loc(#loc)
    %13 = tt.broadcast %11 : tensor<1x256xi32, #blocked2> -> tensor<32x256xi32, #blocked2> loc(#loc)
    %14 = tt.addptr %12, %13 : tensor<32x256x!tt.ptr<bf16>, #blocked2>, tensor<32x256xi32, #blocked2> loc(#loc)
    %15 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked3}>> loc(#loc)
    %16 = tt.expand_dims %15 {axis = 1 : i32} : tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked3}>> -> tensor<128x1xi32, #blocked3> loc(#loc)
    %17 = tt.splat %b_base : !tt.ptr<i8> -> tensor<128x1x!tt.ptr<i8>, #blocked3> loc(#loc)
    %18 = tt.addptr %17, %16 : tensor<128x1x!tt.ptr<i8>, #blocked3>, tensor<128x1xi32, #blocked3> loc(#loc)
    %19 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked3}>> loc(#loc)
    %20 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc)
    %21 = tt.expand_dims %19 {axis = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked3}>> -> tensor<1x32xi32, #blocked3> loc(#loc)
    %22 = tt.expand_dims %20 {axis = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x32xi32, #blocked1> loc(#loc)
    %23 = tt.splat %stride_b1 : i32 -> tensor<1x32xi32, #blocked3> loc(#loc)
    %24 = arith.muli %21, %23 : tensor<1x32xi32, #blocked3> loc(#loc)
    %25 = tt.broadcast %18 : tensor<128x1x!tt.ptr<i8>, #blocked3> -> tensor<128x32x!tt.ptr<i8>, #blocked3> loc(#loc)
    %26 = tt.broadcast %24 : tensor<1x32xi32, #blocked3> -> tensor<128x32xi32, #blocked3> loc(#loc)
    %27 = tt.addptr %25, %26 : tensor<128x32x!tt.ptr<i8>, #blocked3>, tensor<128x32xi32, #blocked3> loc(#loc)
    %28 = tt.load %14 : tensor<32x256x!tt.ptr<bf16>, #blocked2> loc(#loc)
    %29 = ttg.convert_layout %28 : tensor<32x256xbf16, #blocked2> -> tensor<32x256xbf16, #linear1> loc(#loc)
    %30 = tt.reshape %29 : tensor<32x256xbf16, #linear1> -> tensor<32x2x128xbf16, #linear2> loc(#loc)
    %31 = tt.trans %30 {order = array<i32: 0, 2, 1>} : tensor<32x2x128xbf16, #linear2> -> tensor<32x128x2xbf16, #linear3> loc(#loc)
    %outLHS, %outRHS = tt.split %31 : tensor<32x128x2xbf16, #linear3> -> tensor<32x128xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> loc(#loc)
    %32 = tt.load %27 : tensor<128x32x!tt.ptr<i8>, #blocked3> loc(#loc)
    %33 = ttg.convert_layout %32 : tensor<128x32xi8, #blocked3> -> tensor<128x32xi8, #linear4> loc(#loc)
    %34 = tt.reshape %33 : tensor<128x32xi8, #linear4> -> tensor<2x64x32xi8, #linear5> loc(#loc)
    %35 = tt.trans %34 {order = array<i32: 1, 2, 0>} : tensor<2x64x32xi8, #linear5> -> tensor<64x32x2xi8, #linear6> loc(#loc)
    %outLHS_5, %outRHS_6 = tt.split %35 : tensor<64x32x2xi8, #linear6> -> tensor<64x32xi8, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 4}>> loc(#loc)
    %36 = arith.muli %4, %cst : tensor<32x1xi32, #blocked> loc(#loc)
    %37 = tt.splat %b_scale : !tt.ptr<i8> -> tensor<32x1x!tt.ptr<i8>, #blocked> loc(#loc)
    %38 = tt.addptr %37, %36 : tensor<32x1x!tt.ptr<i8>, #blocked>, tensor<32x1xi32, #blocked> loc(#loc)
    %39 = tt.make_range {end = 8 : i32, start = 0 : i32} : tensor<8xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc)
    %40 = tt.expand_dims %39 {axis = 0 : i32} : tensor<8xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x8xi32, #blocked> loc(#loc)
    %41 = tt.broadcast %38 : tensor<32x1x!tt.ptr<i8>, #blocked> -> tensor<32x8x!tt.ptr<i8>, #blocked> loc(#loc)
    %42 = tt.broadcast %40 : tensor<1x8xi32, #blocked> -> tensor<32x8xi32, #blocked> loc(#loc)
    %43 = tt.addptr %41, %42 : tensor<32x8x!tt.ptr<i8>, #blocked>, tensor<32x8xi32, #blocked> loc(#loc)
    %44 = tt.load %43 : tensor<32x8x!tt.ptr<i8>, #blocked> loc(#loc)
    %45 = ttg.convert_layout %44 : tensor<32x8xi8, #blocked> -> tensor<32x8xi8, #linear7> loc(#loc)
    %46 = tt.reshape %45 : tensor<32x8xi8, #linear7> -> tensor<32x2x4xi8, #linear8> loc(#loc)
    %47 = tt.trans %46 {order = array<i32: 0, 2, 1>} : tensor<32x2x4xi8, #linear8> -> tensor<32x4x2xi8, #linear9> loc(#loc)
    %outLHS_7, %outRHS_8 = tt.split %47 : tensor<32x4x2xi8, #linear9> -> tensor<32x4xi8, #linear10> loc(#loc)
    %48 = ttg.fp4_to_fp %outLHS_5 {axis = 0 : i32} : tensor<64x32xi8, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 4}>> -> tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %49 = tt.trans %outLHS_7 {order = array<i32: 1, 0>} : tensor<32x4xi8, #linear10> -> tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %50 = arith.extui %49 : tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> to tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %51 = arith.shli %50, %cst_4 : tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %52 = tt.bitcast %51 : tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> -> tensor<4x32xbf16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %53 = tt.expand_dims %52 {axis = 2 : i32} : tensor<4x32xbf16, #ttg.slice<{dim = 2, parent = #linear}>> -> tensor<4x32x1xbf16, #linear> loc(#loc)
    %54 = tt.broadcast %53 : tensor<4x32x1xbf16, #linear> -> tensor<4x32x32xbf16, #linear> loc(#loc)
    %55 = tt.trans %54 {order = array<i32: 0, 2, 1>} : tensor<4x32x32xbf16, #linear> -> tensor<4x32x32xbf16, #linear11> loc(#loc)
    %56 = tt.reshape %55 : tensor<4x32x32xbf16, #linear11> -> tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %57 = arith.mulf %48, %56 : tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %58 = arith.cmpi eq, %49, %cst_3 : tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %59 = tt.expand_dims %58 {axis = 2 : i32} : tensor<4x32xi1, #ttg.slice<{dim = 2, parent = #linear}>> -> tensor<4x32x1xi1, #linear> loc(#loc)
    %60 = tt.broadcast %59 : tensor<4x32x1xi1, #linear> -> tensor<4x32x32xi1, #linear> loc(#loc)
    %61 = tt.trans %60 {order = array<i32: 0, 2, 1>} : tensor<4x32x32xi1, #linear> -> tensor<4x32x32xi1, #linear11> loc(#loc)
    %62 = tt.reshape %61 : tensor<4x32x32xi1, #linear11> -> tensor<128x32xi1, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %63 = arith.select %62, %cst_2, %57 : tensor<128x32xi1, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>>, tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %64 = tt.dot %outLHS, %63, %cst_1 : tensor<32x128xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> * tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> -> tensor<32x32xf32, #mma> loc(#loc)
    %65 = ttg.fp4_to_fp %outRHS_6 {axis = 0 : i32} : tensor<64x32xi8, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 4}>> -> tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %66 = tt.trans %outRHS_8 {order = array<i32: 1, 0>} : tensor<32x4xi8, #linear10> -> tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %67 = arith.extui %66 : tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> to tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %68 = arith.shli %67, %cst_4 : tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %69 = tt.bitcast %68 : tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> -> tensor<4x32xbf16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %70 = tt.expand_dims %69 {axis = 2 : i32} : tensor<4x32xbf16, #ttg.slice<{dim = 2, parent = #linear}>> -> tensor<4x32x1xbf16, #linear> loc(#loc)
    %71 = tt.broadcast %70 : tensor<4x32x1xbf16, #linear> -> tensor<4x32x32xbf16, #linear> loc(#loc)
    %72 = tt.trans %71 {order = array<i32: 0, 2, 1>} : tensor<4x32x32xbf16, #linear> -> tensor<4x32x32xbf16, #linear11> loc(#loc)
    %73 = tt.reshape %72 : tensor<4x32x32xbf16, #linear11> -> tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %74 = arith.mulf %65, %73 : tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %75 = arith.cmpi eq, %66, %cst_3 : tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %76 = tt.expand_dims %75 {axis = 2 : i32} : tensor<4x32xi1, #ttg.slice<{dim = 2, parent = #linear}>> -> tensor<4x32x1xi1, #linear> loc(#loc)
    %77 = tt.broadcast %76 : tensor<4x32x1xi1, #linear> -> tensor<4x32x32xi1, #linear> loc(#loc)
    %78 = tt.trans %77 {order = array<i32: 0, 2, 1>} : tensor<4x32x32xi1, #linear> -> tensor<4x32x32xi1, #linear11> loc(#loc)
    %79 = tt.reshape %78 : tensor<4x32x32xi1, #linear11> -> tensor<128x32xi1, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %80 = arith.select %79, %cst_2, %74 : tensor<128x32xi1, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>>, tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %81 = tt.dot %outRHS, %80, %cst_1 : tensor<32x128xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> * tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> -> tensor<32x32xf32, #mma> loc(#loc)
    %82 = arith.addf %64, %81 : tensor<32x32xf32, #mma> loc(#loc)
    %83 = arith.muli %5, %cst_0 : tensor<32x1xi32, #blocked1> loc(#loc)
    %84 = tt.splat %out : !tt.ptr<bf16> -> tensor<32x1x!tt.ptr<bf16>, #blocked1> loc(#loc)
    %85 = tt.addptr %84, %83 : tensor<32x1x!tt.ptr<bf16>, #blocked1>, tensor<32x1xi32, #blocked1> loc(#loc)
    %86 = tt.broadcast %85 : tensor<32x1x!tt.ptr<bf16>, #blocked1> -> tensor<32x32x!tt.ptr<bf16>, #blocked1> loc(#loc)
    %87 = tt.broadcast %22 : tensor<1x32xi32, #blocked1> -> tensor<32x32xi32, #blocked1> loc(#loc)
    %88 = tt.addptr %86, %87 : tensor<32x32x!tt.ptr<bf16>, #blocked1>, tensor<32x32xi32, #blocked1> loc(#loc)
    %89 = arith.truncf %82 : tensor<32x32xf32, #mma> to tensor<32x32xbf16, #mma> loc(#loc)
    %90 = ttg.convert_layout %88 : tensor<32x32x!tt.ptr<bf16>, #blocked1> -> tensor<32x32x!tt.ptr<bf16>, #mma> loc(#loc)
    tt.store %90, %89 : tensor<32x32x!tt.ptr<bf16>, #mma> loc(#loc)
    tt.return loc(#loc)
  } loc(#loc)
} loc(#loc)
#loc = loc(unknown)


// -----// IR Dump Before Canonicalizer (canonicalize) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [8, 8], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [1, 4], threadsPerWarp = [8, 8], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked2 = #ttg.blocked<{sizePerThread = [1, 8], threadsPerWarp = [2, 32], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked3 = #ttg.blocked<{sizePerThread = [16, 1], threadsPerWarp = [8, 8], warpsPerCTA = [1, 4], order = [0, 1]}>
#linear = #ttg.linear<{register = [[0, 0, 1], [0, 0, 2], [0, 0, 4], [1, 0, 0], [2, 0, 0]], lane = [[0, 1, 0], [0, 2, 0], [0, 4, 0], [0, 8, 0], [0, 0, 8], [0, 0, 16]], warp = [[0, 16, 0], [0, 0, 0]], block = []}>
#linear1 = #ttg.linear<{register = [[0, 128], [0, 1], [0, 2], [0, 4], [0, 32], [0, 64]], lane = [[1, 0], [2, 0], [4, 0], [8, 0], [0, 8], [0, 16]], warp = [[0, 0], [16, 0]], block = []}>
#linear2 = #ttg.linear<{register = [[0, 1, 0], [0, 0, 1], [0, 0, 2], [0, 0, 4], [0, 0, 32], [0, 0, 64]], lane = [[1, 0, 0], [2, 0, 0], [4, 0, 0], [8, 0, 0], [0, 0, 8], [0, 0, 16]], warp = [[0, 0, 0], [16, 0, 0]], block = []}>
#linear3 = #ttg.linear<{register = [[0, 0, 1], [0, 1, 0], [0, 2, 0], [0, 4, 0], [0, 32, 0], [0, 64, 0]], lane = [[1, 0, 0], [2, 0, 0], [4, 0, 0], [8, 0, 0], [0, 8, 0], [0, 16, 0]], warp = [[0, 0, 0], [16, 0, 0]], block = []}>
#linear4 = #ttg.linear<{register = [[64, 0], [1, 0], [2, 0], [16, 0], [32, 0]], lane = [[0, 1], [0, 2], [0, 4], [0, 8], [4, 0], [8, 0]], warp = [[0, 16], [0, 0]], block = []}>
#linear5 = #ttg.linear<{register = [[1, 0, 0], [0, 1, 0], [0, 2, 0], [0, 16, 0], [0, 32, 0]], lane = [[0, 0, 1], [0, 0, 2], [0, 0, 4], [0, 0, 8], [0, 4, 0], [0, 8, 0]], warp = [[0, 0, 16], [0, 0, 0]], block = []}>
#linear6 = #ttg.linear<{register = [[0, 0, 1], [1, 0, 0], [2, 0, 0], [16, 0, 0], [32, 0, 0]], lane = [[0, 1, 0], [0, 2, 0], [0, 4, 0], [0, 8, 0], [4, 0, 0], [8, 0, 0]], warp = [[0, 16, 0], [0, 0, 0]], block = []}>
#linear7 = #ttg.linear<{register = [[0, 4], [0, 1], [0, 2]], lane = [[1, 0], [2, 0], [4, 0], [8, 0], [0, 0], [0, 0]], warp = [[16, 0], [0, 0]], block = []}>
#linear8 = #ttg.linear<{register = [[0, 1, 0], [0, 0, 1], [0, 0, 2]], lane = [[1, 0, 0], [2, 0, 0], [4, 0, 0], [8, 0, 0], [0, 0, 0], [0, 0, 0]], warp = [[16, 0, 0], [0, 0, 0]], block = []}>
#linear9 = #ttg.linear<{register = [[0, 0, 1], [0, 1, 0], [0, 2, 0]], lane = [[1, 0, 0], [2, 0, 0], [4, 0, 0], [8, 0, 0], [0, 0, 0], [0, 0, 0]], warp = [[16, 0, 0], [0, 0, 0]], block = []}>
#linear10 = #ttg.linear<{register = [[0, 1], [0, 2]], lane = [[1, 0], [2, 0], [4, 0], [8, 0], [0, 0], [0, 0]], warp = [[16, 0], [0, 0]], block = []}>
#linear11 = #ttg.linear<{register = [[0, 1, 0], [0, 2, 0], [0, 4, 0], [1, 0, 0], [2, 0, 0]], lane = [[0, 0, 1], [0, 0, 2], [0, 0, 4], [0, 0, 8], [0, 8, 0], [0, 16, 0]], warp = [[0, 0, 16], [0, 0, 0]], block = []}>
#loc1 = loc("a_base")
#loc2 = loc("stride_a0")
#loc3 = loc("b_base")
#loc4 = loc("stride_b1")
#loc5 = loc("b_scale")
#loc6 = loc("out")
#mma = #ttg.amd_mfma<{version = 4, warpsPerCTA = [2, 2], instrShape = [16, 16], isTransposed = true}>
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "hip:gfx950", "ttg.threads-per-warp" = 64 : i32} {
  tt.func public @dot_scale_kernel(%a_base: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("a_base"), %stride_a0: i32 {tt.divisibility = 16 : i32} loc("stride_a0"), %b_base: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("b_base"), %stride_b1: i32 {tt.divisibility = 16 : i32} loc("stride_b1"), %b_scale: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("b_scale"), %out: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("out")) attributes {noinline = false} {
    %cst = arith.constant dense<8> : tensor<32x1xi32, #blocked> loc(#loc)
    %cst_0 = arith.constant dense<32> : tensor<32x1xi32, #blocked1> loc(#loc)
    %cst_1 = arith.constant dense<0.000000e+00> : tensor<32x32xf32, #mma> loc(#loc)
    %cst_2 = arith.constant dense<0x7FC0> : tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %cst_3 = arith.constant dense<-1> : tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %cst_4 = arith.constant dense<7> : tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %0 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked2}>> loc(#loc)
    %1 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc)
    %2 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc)
    %3 = tt.expand_dims %0 {axis = 1 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked2}>> -> tensor<32x1xi32, #blocked2> loc(#loc)
    %4 = tt.expand_dims %1 {axis = 1 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<32x1xi32, #blocked> loc(#loc)
    %5 = tt.expand_dims %2 {axis = 1 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> -> tensor<32x1xi32, #blocked1> loc(#loc)
    %6 = tt.splat %stride_a0 : i32 -> tensor<32x1xi32, #blocked2> loc(#loc)
    %7 = arith.muli %3, %6 : tensor<32x1xi32, #blocked2> loc(#loc)
    %8 = tt.splat %a_base : !tt.ptr<bf16> -> tensor<32x1x!tt.ptr<bf16>, #blocked2> loc(#loc)
    %9 = tt.addptr %8, %7 : tensor<32x1x!tt.ptr<bf16>, #blocked2>, tensor<32x1xi32, #blocked2> loc(#loc)
    %10 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #ttg.slice<{dim = 0, parent = #blocked2}>> loc(#loc)
    %11 = tt.expand_dims %10 {axis = 0 : i32} : tensor<256xi32, #ttg.slice<{dim = 0, parent = #blocked2}>> -> tensor<1x256xi32, #blocked2> loc(#loc)
    %12 = tt.broadcast %9 : tensor<32x1x!tt.ptr<bf16>, #blocked2> -> tensor<32x256x!tt.ptr<bf16>, #blocked2> loc(#loc)
    %13 = tt.broadcast %11 : tensor<1x256xi32, #blocked2> -> tensor<32x256xi32, #blocked2> loc(#loc)
    %14 = tt.addptr %12, %13 : tensor<32x256x!tt.ptr<bf16>, #blocked2>, tensor<32x256xi32, #blocked2> loc(#loc)
    %15 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked3}>> loc(#loc)
    %16 = tt.expand_dims %15 {axis = 1 : i32} : tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked3}>> -> tensor<128x1xi32, #blocked3> loc(#loc)
    %17 = tt.splat %b_base : !tt.ptr<i8> -> tensor<128x1x!tt.ptr<i8>, #blocked3> loc(#loc)
    %18 = tt.addptr %17, %16 : tensor<128x1x!tt.ptr<i8>, #blocked3>, tensor<128x1xi32, #blocked3> loc(#loc)
    %19 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked3}>> loc(#loc)
    %20 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc)
    %21 = tt.expand_dims %19 {axis = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked3}>> -> tensor<1x32xi32, #blocked3> loc(#loc)
    %22 = tt.expand_dims %20 {axis = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x32xi32, #blocked1> loc(#loc)
    %23 = tt.splat %stride_b1 : i32 -> tensor<1x32xi32, #blocked3> loc(#loc)
    %24 = arith.muli %21, %23 : tensor<1x32xi32, #blocked3> loc(#loc)
    %25 = tt.broadcast %18 : tensor<128x1x!tt.ptr<i8>, #blocked3> -> tensor<128x32x!tt.ptr<i8>, #blocked3> loc(#loc)
    %26 = tt.broadcast %24 : tensor<1x32xi32, #blocked3> -> tensor<128x32xi32, #blocked3> loc(#loc)
    %27 = tt.addptr %25, %26 : tensor<128x32x!tt.ptr<i8>, #blocked3>, tensor<128x32xi32, #blocked3> loc(#loc)
    %28 = tt.load %14 : tensor<32x256x!tt.ptr<bf16>, #blocked2> loc(#loc)
    %29 = ttg.convert_layout %28 : tensor<32x256xbf16, #blocked2> -> tensor<32x256xbf16, #linear1> loc(#loc)
    %30 = tt.reshape %29 : tensor<32x256xbf16, #linear1> -> tensor<32x2x128xbf16, #linear2> loc(#loc)
    %31 = tt.trans %30 {order = array<i32: 0, 2, 1>} : tensor<32x2x128xbf16, #linear2> -> tensor<32x128x2xbf16, #linear3> loc(#loc)
    %outLHS, %outRHS = tt.split %31 : tensor<32x128x2xbf16, #linear3> -> tensor<32x128xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> loc(#loc)
    %32 = tt.load %27 : tensor<128x32x!tt.ptr<i8>, #blocked3> loc(#loc)
    %33 = ttg.convert_layout %32 : tensor<128x32xi8, #blocked3> -> tensor<128x32xi8, #linear4> loc(#loc)
    %34 = tt.reshape %33 : tensor<128x32xi8, #linear4> -> tensor<2x64x32xi8, #linear5> loc(#loc)
    %35 = tt.trans %34 {order = array<i32: 1, 2, 0>} : tensor<2x64x32xi8, #linear5> -> tensor<64x32x2xi8, #linear6> loc(#loc)
    %outLHS_5, %outRHS_6 = tt.split %35 : tensor<64x32x2xi8, #linear6> -> tensor<64x32xi8, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 4}>> loc(#loc)
    %36 = arith.muli %4, %cst : tensor<32x1xi32, #blocked> loc(#loc)
    %37 = tt.splat %b_scale : !tt.ptr<i8> -> tensor<32x1x!tt.ptr<i8>, #blocked> loc(#loc)
    %38 = tt.addptr %37, %36 : tensor<32x1x!tt.ptr<i8>, #blocked>, tensor<32x1xi32, #blocked> loc(#loc)
    %39 = tt.make_range {end = 8 : i32, start = 0 : i32} : tensor<8xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc)
    %40 = tt.expand_dims %39 {axis = 0 : i32} : tensor<8xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x8xi32, #blocked> loc(#loc)
    %41 = tt.broadcast %38 : tensor<32x1x!tt.ptr<i8>, #blocked> -> tensor<32x8x!tt.ptr<i8>, #blocked> loc(#loc)
    %42 = tt.broadcast %40 : tensor<1x8xi32, #blocked> -> tensor<32x8xi32, #blocked> loc(#loc)
    %43 = tt.addptr %41, %42 : tensor<32x8x!tt.ptr<i8>, #blocked>, tensor<32x8xi32, #blocked> loc(#loc)
    %44 = tt.load %43 : tensor<32x8x!tt.ptr<i8>, #blocked> loc(#loc)
    %45 = ttg.convert_layout %44 : tensor<32x8xi8, #blocked> -> tensor<32x8xi8, #linear7> loc(#loc)
    %46 = tt.reshape %45 : tensor<32x8xi8, #linear7> -> tensor<32x2x4xi8, #linear8> loc(#loc)
    %47 = tt.trans %46 {order = array<i32: 0, 2, 1>} : tensor<32x2x4xi8, #linear8> -> tensor<32x4x2xi8, #linear9> loc(#loc)
    %outLHS_7, %outRHS_8 = tt.split %47 : tensor<32x4x2xi8, #linear9> -> tensor<32x4xi8, #linear10> loc(#loc)
    %48 = ttg.fp4_to_fp %outLHS_5 {axis = 0 : i32} : tensor<64x32xi8, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 4}>> -> tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %49 = tt.trans %outLHS_7 {order = array<i32: 1, 0>} : tensor<32x4xi8, #linear10> -> tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %50 = arith.extui %49 : tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> to tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %51 = arith.shli %50, %cst_4 : tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %52 = tt.bitcast %51 : tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> -> tensor<4x32xbf16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %53 = tt.expand_dims %52 {axis = 2 : i32} : tensor<4x32xbf16, #ttg.slice<{dim = 2, parent = #linear}>> -> tensor<4x32x1xbf16, #linear> loc(#loc)
    %54 = tt.broadcast %53 : tensor<4x32x1xbf16, #linear> -> tensor<4x32x32xbf16, #linear> loc(#loc)
    %55 = tt.trans %54 {order = array<i32: 0, 2, 1>} : tensor<4x32x32xbf16, #linear> -> tensor<4x32x32xbf16, #linear11> loc(#loc)
    %56 = tt.reshape %55 : tensor<4x32x32xbf16, #linear11> -> tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %57 = arith.mulf %48, %56 : tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %58 = arith.cmpi eq, %49, %cst_3 : tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %59 = tt.expand_dims %58 {axis = 2 : i32} : tensor<4x32xi1, #ttg.slice<{dim = 2, parent = #linear}>> -> tensor<4x32x1xi1, #linear> loc(#loc)
    %60 = tt.broadcast %59 : tensor<4x32x1xi1, #linear> -> tensor<4x32x32xi1, #linear> loc(#loc)
    %61 = tt.trans %60 {order = array<i32: 0, 2, 1>} : tensor<4x32x32xi1, #linear> -> tensor<4x32x32xi1, #linear11> loc(#loc)
    %62 = tt.reshape %61 : tensor<4x32x32xi1, #linear11> -> tensor<128x32xi1, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %63 = arith.select %62, %cst_2, %57 : tensor<128x32xi1, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>>, tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %64 = tt.dot %outLHS, %63, %cst_1 : tensor<32x128xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> * tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> -> tensor<32x32xf32, #mma> loc(#loc)
    %65 = ttg.fp4_to_fp %outRHS_6 {axis = 0 : i32} : tensor<64x32xi8, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 4}>> -> tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %66 = tt.trans %outRHS_8 {order = array<i32: 1, 0>} : tensor<32x4xi8, #linear10> -> tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %67 = arith.extui %66 : tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> to tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %68 = arith.shli %67, %cst_4 : tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %69 = tt.bitcast %68 : tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> -> tensor<4x32xbf16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %70 = tt.expand_dims %69 {axis = 2 : i32} : tensor<4x32xbf16, #ttg.slice<{dim = 2, parent = #linear}>> -> tensor<4x32x1xbf16, #linear> loc(#loc)
    %71 = tt.broadcast %70 : tensor<4x32x1xbf16, #linear> -> tensor<4x32x32xbf16, #linear> loc(#loc)
    %72 = tt.trans %71 {order = array<i32: 0, 2, 1>} : tensor<4x32x32xbf16, #linear> -> tensor<4x32x32xbf16, #linear11> loc(#loc)
    %73 = tt.reshape %72 : tensor<4x32x32xbf16, #linear11> -> tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %74 = arith.mulf %65, %73 : tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %75 = arith.cmpi eq, %66, %cst_3 : tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %76 = tt.expand_dims %75 {axis = 2 : i32} : tensor<4x32xi1, #ttg.slice<{dim = 2, parent = #linear}>> -> tensor<4x32x1xi1, #linear> loc(#loc)
    %77 = tt.broadcast %76 : tensor<4x32x1xi1, #linear> -> tensor<4x32x32xi1, #linear> loc(#loc)
    %78 = tt.trans %77 {order = array<i32: 0, 2, 1>} : tensor<4x32x32xi1, #linear> -> tensor<4x32x32xi1, #linear11> loc(#loc)
    %79 = tt.reshape %78 : tensor<4x32x32xi1, #linear11> -> tensor<128x32xi1, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %80 = arith.select %79, %cst_2, %74 : tensor<128x32xi1, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>>, tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %81 = tt.dot %outRHS, %80, %cst_1 : tensor<32x128xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> * tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> -> tensor<32x32xf32, #mma> loc(#loc)
    %82 = arith.addf %64, %81 : tensor<32x32xf32, #mma> loc(#loc)
    %83 = arith.muli %5, %cst_0 : tensor<32x1xi32, #blocked1> loc(#loc)
    %84 = tt.splat %out : !tt.ptr<bf16> -> tensor<32x1x!tt.ptr<bf16>, #blocked1> loc(#loc)
    %85 = tt.addptr %84, %83 : tensor<32x1x!tt.ptr<bf16>, #blocked1>, tensor<32x1xi32, #blocked1> loc(#loc)
    %86 = tt.broadcast %85 : tensor<32x1x!tt.ptr<bf16>, #blocked1> -> tensor<32x32x!tt.ptr<bf16>, #blocked1> loc(#loc)
    %87 = tt.broadcast %22 : tensor<1x32xi32, #blocked1> -> tensor<32x32xi32, #blocked1> loc(#loc)
    %88 = tt.addptr %86, %87 : tensor<32x32x!tt.ptr<bf16>, #blocked1>, tensor<32x32xi32, #blocked1> loc(#loc)
    %89 = arith.truncf %82 : tensor<32x32xf32, #mma> to tensor<32x32xbf16, #mma> loc(#loc)
    %90 = ttg.convert_layout %88 : tensor<32x32x!tt.ptr<bf16>, #blocked1> -> tensor<32x32x!tt.ptr<bf16>, #mma> loc(#loc)
    tt.store %90, %89 : tensor<32x32x!tt.ptr<bf16>, #mma> loc(#loc)
    tt.return loc(#loc)
  } loc(#loc)
} loc(#loc)
#loc = loc(unknown)


// -----// IR Dump Before TritonAMDGPUHoistLayoutConversions (tritonamdgpu-hoist-layout-conversions) ('tt.func' operation: @dot_scale_kernel) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [8, 8], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [1, 4], threadsPerWarp = [8, 8], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked2 = #ttg.blocked<{sizePerThread = [1, 8], threadsPerWarp = [2, 32], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked3 = #ttg.blocked<{sizePerThread = [16, 1], threadsPerWarp = [8, 8], warpsPerCTA = [1, 4], order = [0, 1]}>
#linear = #ttg.linear<{register = [[0, 0, 1], [0, 0, 2], [0, 0, 4], [1, 0, 0], [2, 0, 0]], lane = [[0, 1, 0], [0, 2, 0], [0, 4, 0], [0, 8, 0], [0, 0, 8], [0, 0, 16]], warp = [[0, 16, 0], [0, 0, 0]], block = []}>
#linear1 = #ttg.linear<{register = [[0, 128], [0, 1], [0, 2], [0, 4], [0, 32], [0, 64]], lane = [[1, 0], [2, 0], [4, 0], [8, 0], [0, 8], [0, 16]], warp = [[0, 0], [16, 0]], block = []}>
#linear2 = #ttg.linear<{register = [[0, 1, 0], [0, 0, 1], [0, 0, 2], [0, 0, 4], [0, 0, 32], [0, 0, 64]], lane = [[1, 0, 0], [2, 0, 0], [4, 0, 0], [8, 0, 0], [0, 0, 8], [0, 0, 16]], warp = [[0, 0, 0], [16, 0, 0]], block = []}>
#linear3 = #ttg.linear<{register = [[0, 0, 1], [0, 1, 0], [0, 2, 0], [0, 4, 0], [0, 32, 0], [0, 64, 0]], lane = [[1, 0, 0], [2, 0, 0], [4, 0, 0], [8, 0, 0], [0, 8, 0], [0, 16, 0]], warp = [[0, 0, 0], [16, 0, 0]], block = []}>
#linear4 = #ttg.linear<{register = [[64, 0], [1, 0], [2, 0], [16, 0], [32, 0]], lane = [[0, 1], [0, 2], [0, 4], [0, 8], [4, 0], [8, 0]], warp = [[0, 16], [0, 0]], block = []}>
#linear5 = #ttg.linear<{register = [[1, 0, 0], [0, 1, 0], [0, 2, 0], [0, 16, 0], [0, 32, 0]], lane = [[0, 0, 1], [0, 0, 2], [0, 0, 4], [0, 0, 8], [0, 4, 0], [0, 8, 0]], warp = [[0, 0, 16], [0, 0, 0]], block = []}>
#linear6 = #ttg.linear<{register = [[0, 0, 1], [1, 0, 0], [2, 0, 0], [16, 0, 0], [32, 0, 0]], lane = [[0, 1, 0], [0, 2, 0], [0, 4, 0], [0, 8, 0], [4, 0, 0], [8, 0, 0]], warp = [[0, 16, 0], [0, 0, 0]], block = []}>
#linear7 = #ttg.linear<{register = [[0, 4], [0, 1], [0, 2]], lane = [[1, 0], [2, 0], [4, 0], [8, 0], [0, 0], [0, 0]], warp = [[16, 0], [0, 0]], block = []}>
#linear8 = #ttg.linear<{register = [[0, 1, 0], [0, 0, 1], [0, 0, 2]], lane = [[1, 0, 0], [2, 0, 0], [4, 0, 0], [8, 0, 0], [0, 0, 0], [0, 0, 0]], warp = [[16, 0, 0], [0, 0, 0]], block = []}>
#linear9 = #ttg.linear<{register = [[0, 0, 1], [0, 1, 0], [0, 2, 0]], lane = [[1, 0, 0], [2, 0, 0], [4, 0, 0], [8, 0, 0], [0, 0, 0], [0, 0, 0]], warp = [[16, 0, 0], [0, 0, 0]], block = []}>
#linear10 = #ttg.linear<{register = [[0, 1], [0, 2]], lane = [[1, 0], [2, 0], [4, 0], [8, 0], [0, 0], [0, 0]], warp = [[16, 0], [0, 0]], block = []}>
#linear11 = #ttg.linear<{register = [[0, 1, 0], [0, 2, 0], [0, 4, 0], [1, 0, 0], [2, 0, 0]], lane = [[0, 0, 1], [0, 0, 2], [0, 0, 4], [0, 0, 8], [0, 8, 0], [0, 16, 0]], warp = [[0, 0, 16], [0, 0, 0]], block = []}>
#loc1 = loc("a_base")
#loc2 = loc("stride_a0")
#loc3 = loc("b_base")
#loc4 = loc("stride_b1")
#loc5 = loc("b_scale")
#loc6 = loc("out")
#mma = #ttg.amd_mfma<{version = 4, warpsPerCTA = [2, 2], instrShape = [16, 16], isTransposed = true}>
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "hip:gfx950", "ttg.threads-per-warp" = 64 : i32} {
  tt.func public @dot_scale_kernel(%a_base: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("a_base"), %stride_a0: i32 {tt.divisibility = 16 : i32} loc("stride_a0"), %b_base: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("b_base"), %stride_b1: i32 {tt.divisibility = 16 : i32} loc("stride_b1"), %b_scale: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("b_scale"), %out: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("out")) attributes {noinline = false} {
    %cst = arith.constant dense<8> : tensor<32x1xi32, #blocked> loc(#loc)
    %cst_0 = arith.constant dense<32> : tensor<32x1xi32, #blocked1> loc(#loc)
    %cst_1 = arith.constant dense<0.000000e+00> : tensor<32x32xf32, #mma> loc(#loc)
    %cst_2 = arith.constant dense<0x7FC0> : tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %cst_3 = arith.constant dense<-1> : tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %cst_4 = arith.constant dense<7> : tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %0 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked2}>> loc(#loc)
    %1 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc)
    %2 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc)
    %3 = tt.expand_dims %0 {axis = 1 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked2}>> -> tensor<32x1xi32, #blocked2> loc(#loc)
    %4 = tt.expand_dims %1 {axis = 1 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<32x1xi32, #blocked> loc(#loc)
    %5 = tt.expand_dims %2 {axis = 1 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> -> tensor<32x1xi32, #blocked1> loc(#loc)
    %6 = tt.splat %stride_a0 : i32 -> tensor<32x1xi32, #blocked2> loc(#loc)
    %7 = arith.muli %3, %6 : tensor<32x1xi32, #blocked2> loc(#loc)
    %8 = tt.splat %a_base : !tt.ptr<bf16> -> tensor<32x1x!tt.ptr<bf16>, #blocked2> loc(#loc)
    %9 = tt.addptr %8, %7 : tensor<32x1x!tt.ptr<bf16>, #blocked2>, tensor<32x1xi32, #blocked2> loc(#loc)
    %10 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #ttg.slice<{dim = 0, parent = #blocked2}>> loc(#loc)
    %11 = tt.expand_dims %10 {axis = 0 : i32} : tensor<256xi32, #ttg.slice<{dim = 0, parent = #blocked2}>> -> tensor<1x256xi32, #blocked2> loc(#loc)
    %12 = tt.broadcast %9 : tensor<32x1x!tt.ptr<bf16>, #blocked2> -> tensor<32x256x!tt.ptr<bf16>, #blocked2> loc(#loc)
    %13 = tt.broadcast %11 : tensor<1x256xi32, #blocked2> -> tensor<32x256xi32, #blocked2> loc(#loc)
    %14 = tt.addptr %12, %13 : tensor<32x256x!tt.ptr<bf16>, #blocked2>, tensor<32x256xi32, #blocked2> loc(#loc)
    %15 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked3}>> loc(#loc)
    %16 = tt.expand_dims %15 {axis = 1 : i32} : tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked3}>> -> tensor<128x1xi32, #blocked3> loc(#loc)
    %17 = tt.splat %b_base : !tt.ptr<i8> -> tensor<128x1x!tt.ptr<i8>, #blocked3> loc(#loc)
    %18 = tt.addptr %17, %16 : tensor<128x1x!tt.ptr<i8>, #blocked3>, tensor<128x1xi32, #blocked3> loc(#loc)
    %19 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked3}>> loc(#loc)
    %20 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc)
    %21 = tt.expand_dims %19 {axis = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked3}>> -> tensor<1x32xi32, #blocked3> loc(#loc)
    %22 = tt.expand_dims %20 {axis = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x32xi32, #blocked1> loc(#loc)
    %23 = tt.splat %stride_b1 : i32 -> tensor<1x32xi32, #blocked3> loc(#loc)
    %24 = arith.muli %21, %23 : tensor<1x32xi32, #blocked3> loc(#loc)
    %25 = tt.broadcast %18 : tensor<128x1x!tt.ptr<i8>, #blocked3> -> tensor<128x32x!tt.ptr<i8>, #blocked3> loc(#loc)
    %26 = tt.broadcast %24 : tensor<1x32xi32, #blocked3> -> tensor<128x32xi32, #blocked3> loc(#loc)
    %27 = tt.addptr %25, %26 : tensor<128x32x!tt.ptr<i8>, #blocked3>, tensor<128x32xi32, #blocked3> loc(#loc)
    %28 = tt.load %14 : tensor<32x256x!tt.ptr<bf16>, #blocked2> loc(#loc)
    %29 = ttg.convert_layout %28 : tensor<32x256xbf16, #blocked2> -> tensor<32x256xbf16, #linear1> loc(#loc)
    %30 = tt.reshape %29 : tensor<32x256xbf16, #linear1> -> tensor<32x2x128xbf16, #linear2> loc(#loc)
    %31 = tt.trans %30 {order = array<i32: 0, 2, 1>} : tensor<32x2x128xbf16, #linear2> -> tensor<32x128x2xbf16, #linear3> loc(#loc)
    %outLHS, %outRHS = tt.split %31 : tensor<32x128x2xbf16, #linear3> -> tensor<32x128xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> loc(#loc)
    %32 = tt.load %27 : tensor<128x32x!tt.ptr<i8>, #blocked3> loc(#loc)
    %33 = ttg.convert_layout %32 : tensor<128x32xi8, #blocked3> -> tensor<128x32xi8, #linear4> loc(#loc)
    %34 = tt.reshape %33 : tensor<128x32xi8, #linear4> -> tensor<2x64x32xi8, #linear5> loc(#loc)
    %35 = tt.trans %34 {order = array<i32: 1, 2, 0>} : tensor<2x64x32xi8, #linear5> -> tensor<64x32x2xi8, #linear6> loc(#loc)
    %outLHS_5, %outRHS_6 = tt.split %35 : tensor<64x32x2xi8, #linear6> -> tensor<64x32xi8, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 4}>> loc(#loc)
    %36 = arith.muli %4, %cst : tensor<32x1xi32, #blocked> loc(#loc)
    %37 = tt.splat %b_scale : !tt.ptr<i8> -> tensor<32x1x!tt.ptr<i8>, #blocked> loc(#loc)
    %38 = tt.addptr %37, %36 : tensor<32x1x!tt.ptr<i8>, #blocked>, tensor<32x1xi32, #blocked> loc(#loc)
    %39 = tt.make_range {end = 8 : i32, start = 0 : i32} : tensor<8xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc)
    %40 = tt.expand_dims %39 {axis = 0 : i32} : tensor<8xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x8xi32, #blocked> loc(#loc)
    %41 = tt.broadcast %38 : tensor<32x1x!tt.ptr<i8>, #blocked> -> tensor<32x8x!tt.ptr<i8>, #blocked> loc(#loc)
    %42 = tt.broadcast %40 : tensor<1x8xi32, #blocked> -> tensor<32x8xi32, #blocked> loc(#loc)
    %43 = tt.addptr %41, %42 : tensor<32x8x!tt.ptr<i8>, #blocked>, tensor<32x8xi32, #blocked> loc(#loc)
    %44 = tt.load %43 : tensor<32x8x!tt.ptr<i8>, #blocked> loc(#loc)
    %45 = ttg.convert_layout %44 : tensor<32x8xi8, #blocked> -> tensor<32x8xi8, #linear7> loc(#loc)
    %46 = tt.reshape %45 : tensor<32x8xi8, #linear7> -> tensor<32x2x4xi8, #linear8> loc(#loc)
    %47 = tt.trans %46 {order = array<i32: 0, 2, 1>} : tensor<32x2x4xi8, #linear8> -> tensor<32x4x2xi8, #linear9> loc(#loc)
    %outLHS_7, %outRHS_8 = tt.split %47 : tensor<32x4x2xi8, #linear9> -> tensor<32x4xi8, #linear10> loc(#loc)
    %48 = ttg.fp4_to_fp %outLHS_5 {axis = 0 : i32} : tensor<64x32xi8, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 4}>> -> tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %49 = tt.trans %outLHS_7 {order = array<i32: 1, 0>} : tensor<32x4xi8, #linear10> -> tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %50 = arith.extui %49 : tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> to tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %51 = arith.shli %50, %cst_4 : tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %52 = tt.bitcast %51 : tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> -> tensor<4x32xbf16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %53 = tt.expand_dims %52 {axis = 2 : i32} : tensor<4x32xbf16, #ttg.slice<{dim = 2, parent = #linear}>> -> tensor<4x32x1xbf16, #linear> loc(#loc)
    %54 = tt.broadcast %53 : tensor<4x32x1xbf16, #linear> -> tensor<4x32x32xbf16, #linear> loc(#loc)
    %55 = tt.trans %54 {order = array<i32: 0, 2, 1>} : tensor<4x32x32xbf16, #linear> -> tensor<4x32x32xbf16, #linear11> loc(#loc)
    %56 = tt.reshape %55 : tensor<4x32x32xbf16, #linear11> -> tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %57 = arith.mulf %48, %56 : tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %58 = arith.cmpi eq, %49, %cst_3 : tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %59 = tt.expand_dims %58 {axis = 2 : i32} : tensor<4x32xi1, #ttg.slice<{dim = 2, parent = #linear}>> -> tensor<4x32x1xi1, #linear> loc(#loc)
    %60 = tt.broadcast %59 : tensor<4x32x1xi1, #linear> -> tensor<4x32x32xi1, #linear> loc(#loc)
    %61 = tt.trans %60 {order = array<i32: 0, 2, 1>} : tensor<4x32x32xi1, #linear> -> tensor<4x32x32xi1, #linear11> loc(#loc)
    %62 = tt.reshape %61 : tensor<4x32x32xi1, #linear11> -> tensor<128x32xi1, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %63 = arith.select %62, %cst_2, %57 : tensor<128x32xi1, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>>, tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %64 = tt.dot %outLHS, %63, %cst_1 : tensor<32x128xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> * tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> -> tensor<32x32xf32, #mma> loc(#loc)
    %65 = ttg.fp4_to_fp %outRHS_6 {axis = 0 : i32} : tensor<64x32xi8, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 4}>> -> tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %66 = tt.trans %outRHS_8 {order = array<i32: 1, 0>} : tensor<32x4xi8, #linear10> -> tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %67 = arith.extui %66 : tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> to tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %68 = arith.shli %67, %cst_4 : tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %69 = tt.bitcast %68 : tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> -> tensor<4x32xbf16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %70 = tt.expand_dims %69 {axis = 2 : i32} : tensor<4x32xbf16, #ttg.slice<{dim = 2, parent = #linear}>> -> tensor<4x32x1xbf16, #linear> loc(#loc)
    %71 = tt.broadcast %70 : tensor<4x32x1xbf16, #linear> -> tensor<4x32x32xbf16, #linear> loc(#loc)
    %72 = tt.trans %71 {order = array<i32: 0, 2, 1>} : tensor<4x32x32xbf16, #linear> -> tensor<4x32x32xbf16, #linear11> loc(#loc)
    %73 = tt.reshape %72 : tensor<4x32x32xbf16, #linear11> -> tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %74 = arith.mulf %65, %73 : tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %75 = arith.cmpi eq, %66, %cst_3 : tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %76 = tt.expand_dims %75 {axis = 2 : i32} : tensor<4x32xi1, #ttg.slice<{dim = 2, parent = #linear}>> -> tensor<4x32x1xi1, #linear> loc(#loc)
    %77 = tt.broadcast %76 : tensor<4x32x1xi1, #linear> -> tensor<4x32x32xi1, #linear> loc(#loc)
    %78 = tt.trans %77 {order = array<i32: 0, 2, 1>} : tensor<4x32x32xi1, #linear> -> tensor<4x32x32xi1, #linear11> loc(#loc)
    %79 = tt.reshape %78 : tensor<4x32x32xi1, #linear11> -> tensor<128x32xi1, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %80 = arith.select %79, %cst_2, %74 : tensor<128x32xi1, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>>, tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %81 = tt.dot %outRHS, %80, %cst_1 : tensor<32x128xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> * tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> -> tensor<32x32xf32, #mma> loc(#loc)
    %82 = arith.addf %64, %81 : tensor<32x32xf32, #mma> loc(#loc)
    %83 = arith.muli %5, %cst_0 : tensor<32x1xi32, #blocked1> loc(#loc)
    %84 = tt.splat %out : !tt.ptr<bf16> -> tensor<32x1x!tt.ptr<bf16>, #blocked1> loc(#loc)
    %85 = tt.addptr %84, %83 : tensor<32x1x!tt.ptr<bf16>, #blocked1>, tensor<32x1xi32, #blocked1> loc(#loc)
    %86 = tt.broadcast %85 : tensor<32x1x!tt.ptr<bf16>, #blocked1> -> tensor<32x32x!tt.ptr<bf16>, #blocked1> loc(#loc)
    %87 = tt.broadcast %22 : tensor<1x32xi32, #blocked1> -> tensor<32x32xi32, #blocked1> loc(#loc)
    %88 = tt.addptr %86, %87 : tensor<32x32x!tt.ptr<bf16>, #blocked1>, tensor<32x32xi32, #blocked1> loc(#loc)
    %89 = arith.truncf %82 : tensor<32x32xf32, #mma> to tensor<32x32xbf16, #mma> loc(#loc)
    %90 = ttg.convert_layout %88 : tensor<32x32x!tt.ptr<bf16>, #blocked1> -> tensor<32x32x!tt.ptr<bf16>, #mma> loc(#loc)
    tt.store %90, %89 : tensor<32x32x!tt.ptr<bf16>, #mma> loc(#loc)
    tt.return loc(#loc)
  } loc(#loc)
} loc(#loc)
#loc = loc(unknown)


// -----// IR Dump Before TritonGPUFuseNestedLoops (tritongpu-fuse-nested-loops) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [8, 8], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [1, 4], threadsPerWarp = [8, 8], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked2 = #ttg.blocked<{sizePerThread = [1, 8], threadsPerWarp = [2, 32], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked3 = #ttg.blocked<{sizePerThread = [16, 1], threadsPerWarp = [8, 8], warpsPerCTA = [1, 4], order = [0, 1]}>
#linear = #ttg.linear<{register = [[0, 0, 1], [0, 0, 2], [0, 0, 4], [1, 0, 0], [2, 0, 0]], lane = [[0, 1, 0], [0, 2, 0], [0, 4, 0], [0, 8, 0], [0, 0, 8], [0, 0, 16]], warp = [[0, 16, 0], [0, 0, 0]], block = []}>
#linear1 = #ttg.linear<{register = [[0, 128], [0, 1], [0, 2], [0, 4], [0, 32], [0, 64]], lane = [[1, 0], [2, 0], [4, 0], [8, 0], [0, 8], [0, 16]], warp = [[0, 0], [16, 0]], block = []}>
#linear2 = #ttg.linear<{register = [[0, 1, 0], [0, 0, 1], [0, 0, 2], [0, 0, 4], [0, 0, 32], [0, 0, 64]], lane = [[1, 0, 0], [2, 0, 0], [4, 0, 0], [8, 0, 0], [0, 0, 8], [0, 0, 16]], warp = [[0, 0, 0], [16, 0, 0]], block = []}>
#linear3 = #ttg.linear<{register = [[0, 0, 1], [0, 1, 0], [0, 2, 0], [0, 4, 0], [0, 32, 0], [0, 64, 0]], lane = [[1, 0, 0], [2, 0, 0], [4, 0, 0], [8, 0, 0], [0, 8, 0], [0, 16, 0]], warp = [[0, 0, 0], [16, 0, 0]], block = []}>
#linear4 = #ttg.linear<{register = [[64, 0], [1, 0], [2, 0], [16, 0], [32, 0]], lane = [[0, 1], [0, 2], [0, 4], [0, 8], [4, 0], [8, 0]], warp = [[0, 16], [0, 0]], block = []}>
#linear5 = #ttg.linear<{register = [[1, 0, 0], [0, 1, 0], [0, 2, 0], [0, 16, 0], [0, 32, 0]], lane = [[0, 0, 1], [0, 0, 2], [0, 0, 4], [0, 0, 8], [0, 4, 0], [0, 8, 0]], warp = [[0, 0, 16], [0, 0, 0]], block = []}>
#linear6 = #ttg.linear<{register = [[0, 0, 1], [1, 0, 0], [2, 0, 0], [16, 0, 0], [32, 0, 0]], lane = [[0, 1, 0], [0, 2, 0], [0, 4, 0], [0, 8, 0], [4, 0, 0], [8, 0, 0]], warp = [[0, 16, 0], [0, 0, 0]], block = []}>
#linear7 = #ttg.linear<{register = [[0, 4], [0, 1], [0, 2]], lane = [[1, 0], [2, 0], [4, 0], [8, 0], [0, 0], [0, 0]], warp = [[16, 0], [0, 0]], block = []}>
#linear8 = #ttg.linear<{register = [[0, 1, 0], [0, 0, 1], [0, 0, 2]], lane = [[1, 0, 0], [2, 0, 0], [4, 0, 0], [8, 0, 0], [0, 0, 0], [0, 0, 0]], warp = [[16, 0, 0], [0, 0, 0]], block = []}>
#linear9 = #ttg.linear<{register = [[0, 0, 1], [0, 1, 0], [0, 2, 0]], lane = [[1, 0, 0], [2, 0, 0], [4, 0, 0], [8, 0, 0], [0, 0, 0], [0, 0, 0]], warp = [[16, 0, 0], [0, 0, 0]], block = []}>
#linear10 = #ttg.linear<{register = [[0, 1], [0, 2]], lane = [[1, 0], [2, 0], [4, 0], [8, 0], [0, 0], [0, 0]], warp = [[16, 0], [0, 0]], block = []}>
#linear11 = #ttg.linear<{register = [[0, 1, 0], [0, 2, 0], [0, 4, 0], [1, 0, 0], [2, 0, 0]], lane = [[0, 0, 1], [0, 0, 2], [0, 0, 4], [0, 0, 8], [0, 8, 0], [0, 16, 0]], warp = [[0, 0, 16], [0, 0, 0]], block = []}>
#loc1 = loc("a_base")
#loc2 = loc("stride_a0")
#loc3 = loc("b_base")
#loc4 = loc("stride_b1")
#loc5 = loc("b_scale")
#loc6 = loc("out")
#mma = #ttg.amd_mfma<{version = 4, warpsPerCTA = [2, 2], instrShape = [16, 16], isTransposed = true}>
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "hip:gfx950", "ttg.threads-per-warp" = 64 : i32} {
  tt.func public @dot_scale_kernel(%a_base: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("a_base"), %stride_a0: i32 {tt.divisibility = 16 : i32} loc("stride_a0"), %b_base: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("b_base"), %stride_b1: i32 {tt.divisibility = 16 : i32} loc("stride_b1"), %b_scale: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("b_scale"), %out: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("out")) attributes {noinline = false} {
    %cst = arith.constant dense<8> : tensor<32x1xi32, #blocked> loc(#loc)
    %cst_0 = arith.constant dense<32> : tensor<32x1xi32, #blocked1> loc(#loc)
    %cst_1 = arith.constant dense<0.000000e+00> : tensor<32x32xf32, #mma> loc(#loc)
    %cst_2 = arith.constant dense<0x7FC0> : tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %cst_3 = arith.constant dense<-1> : tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %cst_4 = arith.constant dense<7> : tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %0 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked2}>> loc(#loc)
    %1 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc)
    %2 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc)
    %3 = tt.expand_dims %0 {axis = 1 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked2}>> -> tensor<32x1xi32, #blocked2> loc(#loc)
    %4 = tt.expand_dims %1 {axis = 1 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<32x1xi32, #blocked> loc(#loc)
    %5 = tt.expand_dims %2 {axis = 1 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> -> tensor<32x1xi32, #blocked1> loc(#loc)
    %6 = tt.splat %stride_a0 : i32 -> tensor<32x1xi32, #blocked2> loc(#loc)
    %7 = arith.muli %3, %6 : tensor<32x1xi32, #blocked2> loc(#loc)
    %8 = tt.splat %a_base : !tt.ptr<bf16> -> tensor<32x1x!tt.ptr<bf16>, #blocked2> loc(#loc)
    %9 = tt.addptr %8, %7 : tensor<32x1x!tt.ptr<bf16>, #blocked2>, tensor<32x1xi32, #blocked2> loc(#loc)
    %10 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #ttg.slice<{dim = 0, parent = #blocked2}>> loc(#loc)
    %11 = tt.expand_dims %10 {axis = 0 : i32} : tensor<256xi32, #ttg.slice<{dim = 0, parent = #blocked2}>> -> tensor<1x256xi32, #blocked2> loc(#loc)
    %12 = tt.broadcast %9 : tensor<32x1x!tt.ptr<bf16>, #blocked2> -> tensor<32x256x!tt.ptr<bf16>, #blocked2> loc(#loc)
    %13 = tt.broadcast %11 : tensor<1x256xi32, #blocked2> -> tensor<32x256xi32, #blocked2> loc(#loc)
    %14 = tt.addptr %12, %13 : tensor<32x256x!tt.ptr<bf16>, #blocked2>, tensor<32x256xi32, #blocked2> loc(#loc)
    %15 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked3}>> loc(#loc)
    %16 = tt.expand_dims %15 {axis = 1 : i32} : tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked3}>> -> tensor<128x1xi32, #blocked3> loc(#loc)
    %17 = tt.splat %b_base : !tt.ptr<i8> -> tensor<128x1x!tt.ptr<i8>, #blocked3> loc(#loc)
    %18 = tt.addptr %17, %16 : tensor<128x1x!tt.ptr<i8>, #blocked3>, tensor<128x1xi32, #blocked3> loc(#loc)
    %19 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked3}>> loc(#loc)
    %20 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc)
    %21 = tt.expand_dims %19 {axis = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked3}>> -> tensor<1x32xi32, #blocked3> loc(#loc)
    %22 = tt.expand_dims %20 {axis = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x32xi32, #blocked1> loc(#loc)
    %23 = tt.splat %stride_b1 : i32 -> tensor<1x32xi32, #blocked3> loc(#loc)
    %24 = arith.muli %21, %23 : tensor<1x32xi32, #blocked3> loc(#loc)
    %25 = tt.broadcast %18 : tensor<128x1x!tt.ptr<i8>, #blocked3> -> tensor<128x32x!tt.ptr<i8>, #blocked3> loc(#loc)
    %26 = tt.broadcast %24 : tensor<1x32xi32, #blocked3> -> tensor<128x32xi32, #blocked3> loc(#loc)
    %27 = tt.addptr %25, %26 : tensor<128x32x!tt.ptr<i8>, #blocked3>, tensor<128x32xi32, #blocked3> loc(#loc)
    %28 = tt.load %14 : tensor<32x256x!tt.ptr<bf16>, #blocked2> loc(#loc)
    %29 = ttg.convert_layout %28 : tensor<32x256xbf16, #blocked2> -> tensor<32x256xbf16, #linear1> loc(#loc)
    %30 = tt.reshape %29 : tensor<32x256xbf16, #linear1> -> tensor<32x2x128xbf16, #linear2> loc(#loc)
    %31 = tt.trans %30 {order = array<i32: 0, 2, 1>} : tensor<32x2x128xbf16, #linear2> -> tensor<32x128x2xbf16, #linear3> loc(#loc)
    %outLHS, %outRHS = tt.split %31 : tensor<32x128x2xbf16, #linear3> -> tensor<32x128xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> loc(#loc)
    %32 = tt.load %27 : tensor<128x32x!tt.ptr<i8>, #blocked3> loc(#loc)
    %33 = ttg.convert_layout %32 : tensor<128x32xi8, #blocked3> -> tensor<128x32xi8, #linear4> loc(#loc)
    %34 = tt.reshape %33 : tensor<128x32xi8, #linear4> -> tensor<2x64x32xi8, #linear5> loc(#loc)
    %35 = tt.trans %34 {order = array<i32: 1, 2, 0>} : tensor<2x64x32xi8, #linear5> -> tensor<64x32x2xi8, #linear6> loc(#loc)
    %outLHS_5, %outRHS_6 = tt.split %35 : tensor<64x32x2xi8, #linear6> -> tensor<64x32xi8, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 4}>> loc(#loc)
    %36 = arith.muli %4, %cst : tensor<32x1xi32, #blocked> loc(#loc)
    %37 = tt.splat %b_scale : !tt.ptr<i8> -> tensor<32x1x!tt.ptr<i8>, #blocked> loc(#loc)
    %38 = tt.addptr %37, %36 : tensor<32x1x!tt.ptr<i8>, #blocked>, tensor<32x1xi32, #blocked> loc(#loc)
    %39 = tt.make_range {end = 8 : i32, start = 0 : i32} : tensor<8xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc)
    %40 = tt.expand_dims %39 {axis = 0 : i32} : tensor<8xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x8xi32, #blocked> loc(#loc)
    %41 = tt.broadcast %38 : tensor<32x1x!tt.ptr<i8>, #blocked> -> tensor<32x8x!tt.ptr<i8>, #blocked> loc(#loc)
    %42 = tt.broadcast %40 : tensor<1x8xi32, #blocked> -> tensor<32x8xi32, #blocked> loc(#loc)
    %43 = tt.addptr %41, %42 : tensor<32x8x!tt.ptr<i8>, #blocked>, tensor<32x8xi32, #blocked> loc(#loc)
    %44 = tt.load %43 : tensor<32x8x!tt.ptr<i8>, #blocked> loc(#loc)
    %45 = ttg.convert_layout %44 : tensor<32x8xi8, #blocked> -> tensor<32x8xi8, #linear7> loc(#loc)
    %46 = tt.reshape %45 : tensor<32x8xi8, #linear7> -> tensor<32x2x4xi8, #linear8> loc(#loc)
    %47 = tt.trans %46 {order = array<i32: 0, 2, 1>} : tensor<32x2x4xi8, #linear8> -> tensor<32x4x2xi8, #linear9> loc(#loc)
    %outLHS_7, %outRHS_8 = tt.split %47 : tensor<32x4x2xi8, #linear9> -> tensor<32x4xi8, #linear10> loc(#loc)
    %48 = ttg.fp4_to_fp %outLHS_5 {axis = 0 : i32} : tensor<64x32xi8, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 4}>> -> tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %49 = tt.trans %outLHS_7 {order = array<i32: 1, 0>} : tensor<32x4xi8, #linear10> -> tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %50 = arith.extui %49 : tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> to tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %51 = arith.shli %50, %cst_4 : tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %52 = tt.bitcast %51 : tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> -> tensor<4x32xbf16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %53 = tt.expand_dims %52 {axis = 2 : i32} : tensor<4x32xbf16, #ttg.slice<{dim = 2, parent = #linear}>> -> tensor<4x32x1xbf16, #linear> loc(#loc)
    %54 = tt.broadcast %53 : tensor<4x32x1xbf16, #linear> -> tensor<4x32x32xbf16, #linear> loc(#loc)
    %55 = tt.trans %54 {order = array<i32: 0, 2, 1>} : tensor<4x32x32xbf16, #linear> -> tensor<4x32x32xbf16, #linear11> loc(#loc)
    %56 = tt.reshape %55 : tensor<4x32x32xbf16, #linear11> -> tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %57 = arith.mulf %48, %56 : tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %58 = arith.cmpi eq, %49, %cst_3 : tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %59 = tt.expand_dims %58 {axis = 2 : i32} : tensor<4x32xi1, #ttg.slice<{dim = 2, parent = #linear}>> -> tensor<4x32x1xi1, #linear> loc(#loc)
    %60 = tt.broadcast %59 : tensor<4x32x1xi1, #linear> -> tensor<4x32x32xi1, #linear> loc(#loc)
    %61 = tt.trans %60 {order = array<i32: 0, 2, 1>} : tensor<4x32x32xi1, #linear> -> tensor<4x32x32xi1, #linear11> loc(#loc)
    %62 = tt.reshape %61 : tensor<4x32x32xi1, #linear11> -> tensor<128x32xi1, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %63 = arith.select %62, %cst_2, %57 : tensor<128x32xi1, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>>, tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %64 = tt.dot %outLHS, %63, %cst_1 : tensor<32x128xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> * tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> -> tensor<32x32xf32, #mma> loc(#loc)
    %65 = ttg.fp4_to_fp %outRHS_6 {axis = 0 : i32} : tensor<64x32xi8, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 4}>> -> tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %66 = tt.trans %outRHS_8 {order = array<i32: 1, 0>} : tensor<32x4xi8, #linear10> -> tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %67 = arith.extui %66 : tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> to tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %68 = arith.shli %67, %cst_4 : tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %69 = tt.bitcast %68 : tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> -> tensor<4x32xbf16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %70 = tt.expand_dims %69 {axis = 2 : i32} : tensor<4x32xbf16, #ttg.slice<{dim = 2, parent = #linear}>> -> tensor<4x32x1xbf16, #linear> loc(#loc)
    %71 = tt.broadcast %70 : tensor<4x32x1xbf16, #linear> -> tensor<4x32x32xbf16, #linear> loc(#loc)
    %72 = tt.trans %71 {order = array<i32: 0, 2, 1>} : tensor<4x32x32xbf16, #linear> -> tensor<4x32x32xbf16, #linear11> loc(#loc)
    %73 = tt.reshape %72 : tensor<4x32x32xbf16, #linear11> -> tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %74 = arith.mulf %65, %73 : tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %75 = arith.cmpi eq, %66, %cst_3 : tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %76 = tt.expand_dims %75 {axis = 2 : i32} : tensor<4x32xi1, #ttg.slice<{dim = 2, parent = #linear}>> -> tensor<4x32x1xi1, #linear> loc(#loc)
    %77 = tt.broadcast %76 : tensor<4x32x1xi1, #linear> -> tensor<4x32x32xi1, #linear> loc(#loc)
    %78 = tt.trans %77 {order = array<i32: 0, 2, 1>} : tensor<4x32x32xi1, #linear> -> tensor<4x32x32xi1, #linear11> loc(#loc)
    %79 = tt.reshape %78 : tensor<4x32x32xi1, #linear11> -> tensor<128x32xi1, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %80 = arith.select %79, %cst_2, %74 : tensor<128x32xi1, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>>, tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %81 = tt.dot %outRHS, %80, %cst_1 : tensor<32x128xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> * tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> -> tensor<32x32xf32, #mma> loc(#loc)
    %82 = arith.addf %64, %81 : tensor<32x32xf32, #mma> loc(#loc)
    %83 = arith.muli %5, %cst_0 : tensor<32x1xi32, #blocked1> loc(#loc)
    %84 = tt.splat %out : !tt.ptr<bf16> -> tensor<32x1x!tt.ptr<bf16>, #blocked1> loc(#loc)
    %85 = tt.addptr %84, %83 : tensor<32x1x!tt.ptr<bf16>, #blocked1>, tensor<32x1xi32, #blocked1> loc(#loc)
    %86 = tt.broadcast %85 : tensor<32x1x!tt.ptr<bf16>, #blocked1> -> tensor<32x32x!tt.ptr<bf16>, #blocked1> loc(#loc)
    %87 = tt.broadcast %22 : tensor<1x32xi32, #blocked1> -> tensor<32x32xi32, #blocked1> loc(#loc)
    %88 = tt.addptr %86, %87 : tensor<32x32x!tt.ptr<bf16>, #blocked1>, tensor<32x32xi32, #blocked1> loc(#loc)
    %89 = arith.truncf %82 : tensor<32x32xf32, #mma> to tensor<32x32xbf16, #mma> loc(#loc)
    %90 = ttg.convert_layout %88 : tensor<32x32x!tt.ptr<bf16>, #blocked1> -> tensor<32x32x!tt.ptr<bf16>, #mma> loc(#loc)
    tt.store %90, %89 : tensor<32x32x!tt.ptr<bf16>, #mma> loc(#loc)
    tt.return loc(#loc)
  } loc(#loc)
} loc(#loc)
#loc = loc(unknown)


// -----// IR Dump Before Canonicalizer (canonicalize) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [8, 8], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [1, 4], threadsPerWarp = [8, 8], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked2 = #ttg.blocked<{sizePerThread = [1, 8], threadsPerWarp = [2, 32], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked3 = #ttg.blocked<{sizePerThread = [16, 1], threadsPerWarp = [8, 8], warpsPerCTA = [1, 4], order = [0, 1]}>
#linear = #ttg.linear<{register = [[0, 0, 1], [0, 0, 2], [0, 0, 4], [1, 0, 0], [2, 0, 0]], lane = [[0, 1, 0], [0, 2, 0], [0, 4, 0], [0, 8, 0], [0, 0, 8], [0, 0, 16]], warp = [[0, 16, 0], [0, 0, 0]], block = []}>
#linear1 = #ttg.linear<{register = [[0, 128], [0, 1], [0, 2], [0, 4], [0, 32], [0, 64]], lane = [[1, 0], [2, 0], [4, 0], [8, 0], [0, 8], [0, 16]], warp = [[0, 0], [16, 0]], block = []}>
#linear2 = #ttg.linear<{register = [[0, 1, 0], [0, 0, 1], [0, 0, 2], [0, 0, 4], [0, 0, 32], [0, 0, 64]], lane = [[1, 0, 0], [2, 0, 0], [4, 0, 0], [8, 0, 0], [0, 0, 8], [0, 0, 16]], warp = [[0, 0, 0], [16, 0, 0]], block = []}>
#linear3 = #ttg.linear<{register = [[0, 0, 1], [0, 1, 0], [0, 2, 0], [0, 4, 0], [0, 32, 0], [0, 64, 0]], lane = [[1, 0, 0], [2, 0, 0], [4, 0, 0], [8, 0, 0], [0, 8, 0], [0, 16, 0]], warp = [[0, 0, 0], [16, 0, 0]], block = []}>
#linear4 = #ttg.linear<{register = [[64, 0], [1, 0], [2, 0], [16, 0], [32, 0]], lane = [[0, 1], [0, 2], [0, 4], [0, 8], [4, 0], [8, 0]], warp = [[0, 16], [0, 0]], block = []}>
#linear5 = #ttg.linear<{register = [[1, 0, 0], [0, 1, 0], [0, 2, 0], [0, 16, 0], [0, 32, 0]], lane = [[0, 0, 1], [0, 0, 2], [0, 0, 4], [0, 0, 8], [0, 4, 0], [0, 8, 0]], warp = [[0, 0, 16], [0, 0, 0]], block = []}>
#linear6 = #ttg.linear<{register = [[0, 0, 1], [1, 0, 0], [2, 0, 0], [16, 0, 0], [32, 0, 0]], lane = [[0, 1, 0], [0, 2, 0], [0, 4, 0], [0, 8, 0], [4, 0, 0], [8, 0, 0]], warp = [[0, 16, 0], [0, 0, 0]], block = []}>
#linear7 = #ttg.linear<{register = [[0, 4], [0, 1], [0, 2]], lane = [[1, 0], [2, 0], [4, 0], [8, 0], [0, 0], [0, 0]], warp = [[16, 0], [0, 0]], block = []}>
#linear8 = #ttg.linear<{register = [[0, 1, 0], [0, 0, 1], [0, 0, 2]], lane = [[1, 0, 0], [2, 0, 0], [4, 0, 0], [8, 0, 0], [0, 0, 0], [0, 0, 0]], warp = [[16, 0, 0], [0, 0, 0]], block = []}>
#linear9 = #ttg.linear<{register = [[0, 0, 1], [0, 1, 0], [0, 2, 0]], lane = [[1, 0, 0], [2, 0, 0], [4, 0, 0], [8, 0, 0], [0, 0, 0], [0, 0, 0]], warp = [[16, 0, 0], [0, 0, 0]], block = []}>
#linear10 = #ttg.linear<{register = [[0, 1], [0, 2]], lane = [[1, 0], [2, 0], [4, 0], [8, 0], [0, 0], [0, 0]], warp = [[16, 0], [0, 0]], block = []}>
#linear11 = #ttg.linear<{register = [[0, 1, 0], [0, 2, 0], [0, 4, 0], [1, 0, 0], [2, 0, 0]], lane = [[0, 0, 1], [0, 0, 2], [0, 0, 4], [0, 0, 8], [0, 8, 0], [0, 16, 0]], warp = [[0, 0, 16], [0, 0, 0]], block = []}>
#loc1 = loc("a_base")
#loc2 = loc("stride_a0")
#loc3 = loc("b_base")
#loc4 = loc("stride_b1")
#loc5 = loc("b_scale")
#loc6 = loc("out")
#mma = #ttg.amd_mfma<{version = 4, warpsPerCTA = [2, 2], instrShape = [16, 16], isTransposed = true}>
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "hip:gfx950", "ttg.threads-per-warp" = 64 : i32} {
  tt.func public @dot_scale_kernel(%a_base: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("a_base"), %stride_a0: i32 {tt.divisibility = 16 : i32} loc("stride_a0"), %b_base: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("b_base"), %stride_b1: i32 {tt.divisibility = 16 : i32} loc("stride_b1"), %b_scale: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("b_scale"), %out: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("out")) attributes {noinline = false} {
    %cst = arith.constant dense<8> : tensor<32x1xi32, #blocked> loc(#loc)
    %cst_0 = arith.constant dense<32> : tensor<32x1xi32, #blocked1> loc(#loc)
    %cst_1 = arith.constant dense<0.000000e+00> : tensor<32x32xf32, #mma> loc(#loc)
    %cst_2 = arith.constant dense<0x7FC0> : tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %cst_3 = arith.constant dense<-1> : tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %cst_4 = arith.constant dense<7> : tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %0 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked2}>> loc(#loc)
    %1 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc)
    %2 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc)
    %3 = tt.expand_dims %0 {axis = 1 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked2}>> -> tensor<32x1xi32, #blocked2> loc(#loc)
    %4 = tt.expand_dims %1 {axis = 1 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<32x1xi32, #blocked> loc(#loc)
    %5 = tt.expand_dims %2 {axis = 1 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> -> tensor<32x1xi32, #blocked1> loc(#loc)
    %6 = tt.splat %stride_a0 : i32 -> tensor<32x1xi32, #blocked2> loc(#loc)
    %7 = arith.muli %3, %6 : tensor<32x1xi32, #blocked2> loc(#loc)
    %8 = tt.splat %a_base : !tt.ptr<bf16> -> tensor<32x1x!tt.ptr<bf16>, #blocked2> loc(#loc)
    %9 = tt.addptr %8, %7 : tensor<32x1x!tt.ptr<bf16>, #blocked2>, tensor<32x1xi32, #blocked2> loc(#loc)
    %10 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #ttg.slice<{dim = 0, parent = #blocked2}>> loc(#loc)
    %11 = tt.expand_dims %10 {axis = 0 : i32} : tensor<256xi32, #ttg.slice<{dim = 0, parent = #blocked2}>> -> tensor<1x256xi32, #blocked2> loc(#loc)
    %12 = tt.broadcast %9 : tensor<32x1x!tt.ptr<bf16>, #blocked2> -> tensor<32x256x!tt.ptr<bf16>, #blocked2> loc(#loc)
    %13 = tt.broadcast %11 : tensor<1x256xi32, #blocked2> -> tensor<32x256xi32, #blocked2> loc(#loc)
    %14 = tt.addptr %12, %13 : tensor<32x256x!tt.ptr<bf16>, #blocked2>, tensor<32x256xi32, #blocked2> loc(#loc)
    %15 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked3}>> loc(#loc)
    %16 = tt.expand_dims %15 {axis = 1 : i32} : tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked3}>> -> tensor<128x1xi32, #blocked3> loc(#loc)
    %17 = tt.splat %b_base : !tt.ptr<i8> -> tensor<128x1x!tt.ptr<i8>, #blocked3> loc(#loc)
    %18 = tt.addptr %17, %16 : tensor<128x1x!tt.ptr<i8>, #blocked3>, tensor<128x1xi32, #blocked3> loc(#loc)
    %19 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked3}>> loc(#loc)
    %20 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc)
    %21 = tt.expand_dims %19 {axis = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked3}>> -> tensor<1x32xi32, #blocked3> loc(#loc)
    %22 = tt.expand_dims %20 {axis = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x32xi32, #blocked1> loc(#loc)
    %23 = tt.splat %stride_b1 : i32 -> tensor<1x32xi32, #blocked3> loc(#loc)
    %24 = arith.muli %21, %23 : tensor<1x32xi32, #blocked3> loc(#loc)
    %25 = tt.broadcast %18 : tensor<128x1x!tt.ptr<i8>, #blocked3> -> tensor<128x32x!tt.ptr<i8>, #blocked3> loc(#loc)
    %26 = tt.broadcast %24 : tensor<1x32xi32, #blocked3> -> tensor<128x32xi32, #blocked3> loc(#loc)
    %27 = tt.addptr %25, %26 : tensor<128x32x!tt.ptr<i8>, #blocked3>, tensor<128x32xi32, #blocked3> loc(#loc)
    %28 = tt.load %14 : tensor<32x256x!tt.ptr<bf16>, #blocked2> loc(#loc)
    %29 = ttg.convert_layout %28 : tensor<32x256xbf16, #blocked2> -> tensor<32x256xbf16, #linear1> loc(#loc)
    %30 = tt.reshape %29 : tensor<32x256xbf16, #linear1> -> tensor<32x2x128xbf16, #linear2> loc(#loc)
    %31 = tt.trans %30 {order = array<i32: 0, 2, 1>} : tensor<32x2x128xbf16, #linear2> -> tensor<32x128x2xbf16, #linear3> loc(#loc)
    %outLHS, %outRHS = tt.split %31 : tensor<32x128x2xbf16, #linear3> -> tensor<32x128xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> loc(#loc)
    %32 = tt.load %27 : tensor<128x32x!tt.ptr<i8>, #blocked3> loc(#loc)
    %33 = ttg.convert_layout %32 : tensor<128x32xi8, #blocked3> -> tensor<128x32xi8, #linear4> loc(#loc)
    %34 = tt.reshape %33 : tensor<128x32xi8, #linear4> -> tensor<2x64x32xi8, #linear5> loc(#loc)
    %35 = tt.trans %34 {order = array<i32: 1, 2, 0>} : tensor<2x64x32xi8, #linear5> -> tensor<64x32x2xi8, #linear6> loc(#loc)
    %outLHS_5, %outRHS_6 = tt.split %35 : tensor<64x32x2xi8, #linear6> -> tensor<64x32xi8, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 4}>> loc(#loc)
    %36 = arith.muli %4, %cst : tensor<32x1xi32, #blocked> loc(#loc)
    %37 = tt.splat %b_scale : !tt.ptr<i8> -> tensor<32x1x!tt.ptr<i8>, #blocked> loc(#loc)
    %38 = tt.addptr %37, %36 : tensor<32x1x!tt.ptr<i8>, #blocked>, tensor<32x1xi32, #blocked> loc(#loc)
    %39 = tt.make_range {end = 8 : i32, start = 0 : i32} : tensor<8xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc)
    %40 = tt.expand_dims %39 {axis = 0 : i32} : tensor<8xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x8xi32, #blocked> loc(#loc)
    %41 = tt.broadcast %38 : tensor<32x1x!tt.ptr<i8>, #blocked> -> tensor<32x8x!tt.ptr<i8>, #blocked> loc(#loc)
    %42 = tt.broadcast %40 : tensor<1x8xi32, #blocked> -> tensor<32x8xi32, #blocked> loc(#loc)
    %43 = tt.addptr %41, %42 : tensor<32x8x!tt.ptr<i8>, #blocked>, tensor<32x8xi32, #blocked> loc(#loc)
    %44 = tt.load %43 : tensor<32x8x!tt.ptr<i8>, #blocked> loc(#loc)
    %45 = ttg.convert_layout %44 : tensor<32x8xi8, #blocked> -> tensor<32x8xi8, #linear7> loc(#loc)
    %46 = tt.reshape %45 : tensor<32x8xi8, #linear7> -> tensor<32x2x4xi8, #linear8> loc(#loc)
    %47 = tt.trans %46 {order = array<i32: 0, 2, 1>} : tensor<32x2x4xi8, #linear8> -> tensor<32x4x2xi8, #linear9> loc(#loc)
    %outLHS_7, %outRHS_8 = tt.split %47 : tensor<32x4x2xi8, #linear9> -> tensor<32x4xi8, #linear10> loc(#loc)
    %48 = ttg.fp4_to_fp %outLHS_5 {axis = 0 : i32} : tensor<64x32xi8, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 4}>> -> tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %49 = tt.trans %outLHS_7 {order = array<i32: 1, 0>} : tensor<32x4xi8, #linear10> -> tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %50 = arith.extui %49 : tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> to tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %51 = arith.shli %50, %cst_4 : tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %52 = tt.bitcast %51 : tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> -> tensor<4x32xbf16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %53 = tt.expand_dims %52 {axis = 2 : i32} : tensor<4x32xbf16, #ttg.slice<{dim = 2, parent = #linear}>> -> tensor<4x32x1xbf16, #linear> loc(#loc)
    %54 = tt.broadcast %53 : tensor<4x32x1xbf16, #linear> -> tensor<4x32x32xbf16, #linear> loc(#loc)
    %55 = tt.trans %54 {order = array<i32: 0, 2, 1>} : tensor<4x32x32xbf16, #linear> -> tensor<4x32x32xbf16, #linear11> loc(#loc)
    %56 = tt.reshape %55 : tensor<4x32x32xbf16, #linear11> -> tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %57 = arith.mulf %48, %56 : tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %58 = arith.cmpi eq, %49, %cst_3 : tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %59 = tt.expand_dims %58 {axis = 2 : i32} : tensor<4x32xi1, #ttg.slice<{dim = 2, parent = #linear}>> -> tensor<4x32x1xi1, #linear> loc(#loc)
    %60 = tt.broadcast %59 : tensor<4x32x1xi1, #linear> -> tensor<4x32x32xi1, #linear> loc(#loc)
    %61 = tt.trans %60 {order = array<i32: 0, 2, 1>} : tensor<4x32x32xi1, #linear> -> tensor<4x32x32xi1, #linear11> loc(#loc)
    %62 = tt.reshape %61 : tensor<4x32x32xi1, #linear11> -> tensor<128x32xi1, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %63 = arith.select %62, %cst_2, %57 : tensor<128x32xi1, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>>, tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %64 = tt.dot %outLHS, %63, %cst_1 : tensor<32x128xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> * tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> -> tensor<32x32xf32, #mma> loc(#loc)
    %65 = ttg.fp4_to_fp %outRHS_6 {axis = 0 : i32} : tensor<64x32xi8, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 4}>> -> tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %66 = tt.trans %outRHS_8 {order = array<i32: 1, 0>} : tensor<32x4xi8, #linear10> -> tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %67 = arith.extui %66 : tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> to tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %68 = arith.shli %67, %cst_4 : tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %69 = tt.bitcast %68 : tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> -> tensor<4x32xbf16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %70 = tt.expand_dims %69 {axis = 2 : i32} : tensor<4x32xbf16, #ttg.slice<{dim = 2, parent = #linear}>> -> tensor<4x32x1xbf16, #linear> loc(#loc)
    %71 = tt.broadcast %70 : tensor<4x32x1xbf16, #linear> -> tensor<4x32x32xbf16, #linear> loc(#loc)
    %72 = tt.trans %71 {order = array<i32: 0, 2, 1>} : tensor<4x32x32xbf16, #linear> -> tensor<4x32x32xbf16, #linear11> loc(#loc)
    %73 = tt.reshape %72 : tensor<4x32x32xbf16, #linear11> -> tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %74 = arith.mulf %65, %73 : tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %75 = arith.cmpi eq, %66, %cst_3 : tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %76 = tt.expand_dims %75 {axis = 2 : i32} : tensor<4x32xi1, #ttg.slice<{dim = 2, parent = #linear}>> -> tensor<4x32x1xi1, #linear> loc(#loc)
    %77 = tt.broadcast %76 : tensor<4x32x1xi1, #linear> -> tensor<4x32x32xi1, #linear> loc(#loc)
    %78 = tt.trans %77 {order = array<i32: 0, 2, 1>} : tensor<4x32x32xi1, #linear> -> tensor<4x32x32xi1, #linear11> loc(#loc)
    %79 = tt.reshape %78 : tensor<4x32x32xi1, #linear11> -> tensor<128x32xi1, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %80 = arith.select %79, %cst_2, %74 : tensor<128x32xi1, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>>, tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %81 = tt.dot %outRHS, %80, %cst_1 : tensor<32x128xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> * tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> -> tensor<32x32xf32, #mma> loc(#loc)
    %82 = arith.addf %64, %81 : tensor<32x32xf32, #mma> loc(#loc)
    %83 = arith.muli %5, %cst_0 : tensor<32x1xi32, #blocked1> loc(#loc)
    %84 = tt.splat %out : !tt.ptr<bf16> -> tensor<32x1x!tt.ptr<bf16>, #blocked1> loc(#loc)
    %85 = tt.addptr %84, %83 : tensor<32x1x!tt.ptr<bf16>, #blocked1>, tensor<32x1xi32, #blocked1> loc(#loc)
    %86 = tt.broadcast %85 : tensor<32x1x!tt.ptr<bf16>, #blocked1> -> tensor<32x32x!tt.ptr<bf16>, #blocked1> loc(#loc)
    %87 = tt.broadcast %22 : tensor<1x32xi32, #blocked1> -> tensor<32x32xi32, #blocked1> loc(#loc)
    %88 = tt.addptr %86, %87 : tensor<32x32x!tt.ptr<bf16>, #blocked1>, tensor<32x32xi32, #blocked1> loc(#loc)
    %89 = arith.truncf %82 : tensor<32x32xf32, #mma> to tensor<32x32xbf16, #mma> loc(#loc)
    %90 = ttg.convert_layout %88 : tensor<32x32x!tt.ptr<bf16>, #blocked1> -> tensor<32x32x!tt.ptr<bf16>, #mma> loc(#loc)
    tt.store %90, %89 : tensor<32x32x!tt.ptr<bf16>, #mma> loc(#loc)
    tt.return loc(#loc)
  } loc(#loc)
} loc(#loc)
#loc = loc(unknown)


// -----// IR Dump Before TritonLoopInvariantCodeMotion (triton-licm) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [8, 8], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [1, 4], threadsPerWarp = [8, 8], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked2 = #ttg.blocked<{sizePerThread = [1, 8], threadsPerWarp = [2, 32], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked3 = #ttg.blocked<{sizePerThread = [16, 1], threadsPerWarp = [8, 8], warpsPerCTA = [1, 4], order = [0, 1]}>
#linear = #ttg.linear<{register = [[0, 0, 1], [0, 0, 2], [0, 0, 4], [1, 0, 0], [2, 0, 0]], lane = [[0, 1, 0], [0, 2, 0], [0, 4, 0], [0, 8, 0], [0, 0, 8], [0, 0, 16]], warp = [[0, 16, 0], [0, 0, 0]], block = []}>
#linear1 = #ttg.linear<{register = [[0, 128], [0, 1], [0, 2], [0, 4], [0, 32], [0, 64]], lane = [[1, 0], [2, 0], [4, 0], [8, 0], [0, 8], [0, 16]], warp = [[0, 0], [16, 0]], block = []}>
#linear2 = #ttg.linear<{register = [[0, 1, 0], [0, 0, 1], [0, 0, 2], [0, 0, 4], [0, 0, 32], [0, 0, 64]], lane = [[1, 0, 0], [2, 0, 0], [4, 0, 0], [8, 0, 0], [0, 0, 8], [0, 0, 16]], warp = [[0, 0, 0], [16, 0, 0]], block = []}>
#linear3 = #ttg.linear<{register = [[0, 0, 1], [0, 1, 0], [0, 2, 0], [0, 4, 0], [0, 32, 0], [0, 64, 0]], lane = [[1, 0, 0], [2, 0, 0], [4, 0, 0], [8, 0, 0], [0, 8, 0], [0, 16, 0]], warp = [[0, 0, 0], [16, 0, 0]], block = []}>
#linear4 = #ttg.linear<{register = [[64, 0], [1, 0], [2, 0], [16, 0], [32, 0]], lane = [[0, 1], [0, 2], [0, 4], [0, 8], [4, 0], [8, 0]], warp = [[0, 16], [0, 0]], block = []}>
#linear5 = #ttg.linear<{register = [[1, 0, 0], [0, 1, 0], [0, 2, 0], [0, 16, 0], [0, 32, 0]], lane = [[0, 0, 1], [0, 0, 2], [0, 0, 4], [0, 0, 8], [0, 4, 0], [0, 8, 0]], warp = [[0, 0, 16], [0, 0, 0]], block = []}>
#linear6 = #ttg.linear<{register = [[0, 0, 1], [1, 0, 0], [2, 0, 0], [16, 0, 0], [32, 0, 0]], lane = [[0, 1, 0], [0, 2, 0], [0, 4, 0], [0, 8, 0], [4, 0, 0], [8, 0, 0]], warp = [[0, 16, 0], [0, 0, 0]], block = []}>
#linear7 = #ttg.linear<{register = [[0, 4], [0, 1], [0, 2]], lane = [[1, 0], [2, 0], [4, 0], [8, 0], [0, 0], [0, 0]], warp = [[16, 0], [0, 0]], block = []}>
#linear8 = #ttg.linear<{register = [[0, 1, 0], [0, 0, 1], [0, 0, 2]], lane = [[1, 0, 0], [2, 0, 0], [4, 0, 0], [8, 0, 0], [0, 0, 0], [0, 0, 0]], warp = [[16, 0, 0], [0, 0, 0]], block = []}>
#linear9 = #ttg.linear<{register = [[0, 0, 1], [0, 1, 0], [0, 2, 0]], lane = [[1, 0, 0], [2, 0, 0], [4, 0, 0], [8, 0, 0], [0, 0, 0], [0, 0, 0]], warp = [[16, 0, 0], [0, 0, 0]], block = []}>
#linear10 = #ttg.linear<{register = [[0, 1], [0, 2]], lane = [[1, 0], [2, 0], [4, 0], [8, 0], [0, 0], [0, 0]], warp = [[16, 0], [0, 0]], block = []}>
#linear11 = #ttg.linear<{register = [[0, 1, 0], [0, 2, 0], [0, 4, 0], [1, 0, 0], [2, 0, 0]], lane = [[0, 0, 1], [0, 0, 2], [0, 0, 4], [0, 0, 8], [0, 8, 0], [0, 16, 0]], warp = [[0, 0, 16], [0, 0, 0]], block = []}>
#loc1 = loc("a_base")
#loc2 = loc("stride_a0")
#loc3 = loc("b_base")
#loc4 = loc("stride_b1")
#loc5 = loc("b_scale")
#loc6 = loc("out")
#mma = #ttg.amd_mfma<{version = 4, warpsPerCTA = [2, 2], instrShape = [16, 16], isTransposed = true}>
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "hip:gfx950", "ttg.threads-per-warp" = 64 : i32} {
  tt.func public @dot_scale_kernel(%a_base: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("a_base"), %stride_a0: i32 {tt.divisibility = 16 : i32} loc("stride_a0"), %b_base: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("b_base"), %stride_b1: i32 {tt.divisibility = 16 : i32} loc("stride_b1"), %b_scale: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("b_scale"), %out: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("out")) attributes {noinline = false} {
    %cst = arith.constant dense<8> : tensor<32x1xi32, #blocked> loc(#loc)
    %cst_0 = arith.constant dense<32> : tensor<32x1xi32, #blocked1> loc(#loc)
    %cst_1 = arith.constant dense<0.000000e+00> : tensor<32x32xf32, #mma> loc(#loc)
    %cst_2 = arith.constant dense<0x7FC0> : tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %cst_3 = arith.constant dense<-1> : tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %cst_4 = arith.constant dense<7> : tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %0 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked2}>> loc(#loc)
    %1 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc)
    %2 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc)
    %3 = tt.expand_dims %0 {axis = 1 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked2}>> -> tensor<32x1xi32, #blocked2> loc(#loc)
    %4 = tt.expand_dims %1 {axis = 1 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<32x1xi32, #blocked> loc(#loc)
    %5 = tt.expand_dims %2 {axis = 1 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> -> tensor<32x1xi32, #blocked1> loc(#loc)
    %6 = tt.splat %stride_a0 : i32 -> tensor<32x1xi32, #blocked2> loc(#loc)
    %7 = arith.muli %3, %6 : tensor<32x1xi32, #blocked2> loc(#loc)
    %8 = tt.splat %a_base : !tt.ptr<bf16> -> tensor<32x1x!tt.ptr<bf16>, #blocked2> loc(#loc)
    %9 = tt.addptr %8, %7 : tensor<32x1x!tt.ptr<bf16>, #blocked2>, tensor<32x1xi32, #blocked2> loc(#loc)
    %10 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #ttg.slice<{dim = 0, parent = #blocked2}>> loc(#loc)
    %11 = tt.expand_dims %10 {axis = 0 : i32} : tensor<256xi32, #ttg.slice<{dim = 0, parent = #blocked2}>> -> tensor<1x256xi32, #blocked2> loc(#loc)
    %12 = tt.broadcast %9 : tensor<32x1x!tt.ptr<bf16>, #blocked2> -> tensor<32x256x!tt.ptr<bf16>, #blocked2> loc(#loc)
    %13 = tt.broadcast %11 : tensor<1x256xi32, #blocked2> -> tensor<32x256xi32, #blocked2> loc(#loc)
    %14 = tt.addptr %12, %13 : tensor<32x256x!tt.ptr<bf16>, #blocked2>, tensor<32x256xi32, #blocked2> loc(#loc)
    %15 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked3}>> loc(#loc)
    %16 = tt.expand_dims %15 {axis = 1 : i32} : tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked3}>> -> tensor<128x1xi32, #blocked3> loc(#loc)
    %17 = tt.splat %b_base : !tt.ptr<i8> -> tensor<128x1x!tt.ptr<i8>, #blocked3> loc(#loc)
    %18 = tt.addptr %17, %16 : tensor<128x1x!tt.ptr<i8>, #blocked3>, tensor<128x1xi32, #blocked3> loc(#loc)
    %19 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked3}>> loc(#loc)
    %20 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc)
    %21 = tt.expand_dims %19 {axis = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked3}>> -> tensor<1x32xi32, #blocked3> loc(#loc)
    %22 = tt.expand_dims %20 {axis = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x32xi32, #blocked1> loc(#loc)
    %23 = tt.splat %stride_b1 : i32 -> tensor<1x32xi32, #blocked3> loc(#loc)
    %24 = arith.muli %21, %23 : tensor<1x32xi32, #blocked3> loc(#loc)
    %25 = tt.broadcast %18 : tensor<128x1x!tt.ptr<i8>, #blocked3> -> tensor<128x32x!tt.ptr<i8>, #blocked3> loc(#loc)
    %26 = tt.broadcast %24 : tensor<1x32xi32, #blocked3> -> tensor<128x32xi32, #blocked3> loc(#loc)
    %27 = tt.addptr %25, %26 : tensor<128x32x!tt.ptr<i8>, #blocked3>, tensor<128x32xi32, #blocked3> loc(#loc)
    %28 = tt.load %14 : tensor<32x256x!tt.ptr<bf16>, #blocked2> loc(#loc)
    %29 = ttg.convert_layout %28 : tensor<32x256xbf16, #blocked2> -> tensor<32x256xbf16, #linear1> loc(#loc)
    %30 = tt.reshape %29 : tensor<32x256xbf16, #linear1> -> tensor<32x2x128xbf16, #linear2> loc(#loc)
    %31 = tt.trans %30 {order = array<i32: 0, 2, 1>} : tensor<32x2x128xbf16, #linear2> -> tensor<32x128x2xbf16, #linear3> loc(#loc)
    %outLHS, %outRHS = tt.split %31 : tensor<32x128x2xbf16, #linear3> -> tensor<32x128xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> loc(#loc)
    %32 = tt.load %27 : tensor<128x32x!tt.ptr<i8>, #blocked3> loc(#loc)
    %33 = ttg.convert_layout %32 : tensor<128x32xi8, #blocked3> -> tensor<128x32xi8, #linear4> loc(#loc)
    %34 = tt.reshape %33 : tensor<128x32xi8, #linear4> -> tensor<2x64x32xi8, #linear5> loc(#loc)
    %35 = tt.trans %34 {order = array<i32: 1, 2, 0>} : tensor<2x64x32xi8, #linear5> -> tensor<64x32x2xi8, #linear6> loc(#loc)
    %outLHS_5, %outRHS_6 = tt.split %35 : tensor<64x32x2xi8, #linear6> -> tensor<64x32xi8, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 4}>> loc(#loc)
    %36 = arith.muli %4, %cst : tensor<32x1xi32, #blocked> loc(#loc)
    %37 = tt.splat %b_scale : !tt.ptr<i8> -> tensor<32x1x!tt.ptr<i8>, #blocked> loc(#loc)
    %38 = tt.addptr %37, %36 : tensor<32x1x!tt.ptr<i8>, #blocked>, tensor<32x1xi32, #blocked> loc(#loc)
    %39 = tt.make_range {end = 8 : i32, start = 0 : i32} : tensor<8xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc)
    %40 = tt.expand_dims %39 {axis = 0 : i32} : tensor<8xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x8xi32, #blocked> loc(#loc)
    %41 = tt.broadcast %38 : tensor<32x1x!tt.ptr<i8>, #blocked> -> tensor<32x8x!tt.ptr<i8>, #blocked> loc(#loc)
    %42 = tt.broadcast %40 : tensor<1x8xi32, #blocked> -> tensor<32x8xi32, #blocked> loc(#loc)
    %43 = tt.addptr %41, %42 : tensor<32x8x!tt.ptr<i8>, #blocked>, tensor<32x8xi32, #blocked> loc(#loc)
    %44 = tt.load %43 : tensor<32x8x!tt.ptr<i8>, #blocked> loc(#loc)
    %45 = ttg.convert_layout %44 : tensor<32x8xi8, #blocked> -> tensor<32x8xi8, #linear7> loc(#loc)
    %46 = tt.reshape %45 : tensor<32x8xi8, #linear7> -> tensor<32x2x4xi8, #linear8> loc(#loc)
    %47 = tt.trans %46 {order = array<i32: 0, 2, 1>} : tensor<32x2x4xi8, #linear8> -> tensor<32x4x2xi8, #linear9> loc(#loc)
    %outLHS_7, %outRHS_8 = tt.split %47 : tensor<32x4x2xi8, #linear9> -> tensor<32x4xi8, #linear10> loc(#loc)
    %48 = ttg.fp4_to_fp %outLHS_5 {axis = 0 : i32} : tensor<64x32xi8, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 4}>> -> tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %49 = tt.trans %outLHS_7 {order = array<i32: 1, 0>} : tensor<32x4xi8, #linear10> -> tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %50 = arith.extui %49 : tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> to tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %51 = arith.shli %50, %cst_4 : tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %52 = tt.bitcast %51 : tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> -> tensor<4x32xbf16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %53 = tt.expand_dims %52 {axis = 2 : i32} : tensor<4x32xbf16, #ttg.slice<{dim = 2, parent = #linear}>> -> tensor<4x32x1xbf16, #linear> loc(#loc)
    %54 = tt.broadcast %53 : tensor<4x32x1xbf16, #linear> -> tensor<4x32x32xbf16, #linear> loc(#loc)
    %55 = tt.trans %54 {order = array<i32: 0, 2, 1>} : tensor<4x32x32xbf16, #linear> -> tensor<4x32x32xbf16, #linear11> loc(#loc)
    %56 = tt.reshape %55 : tensor<4x32x32xbf16, #linear11> -> tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %57 = arith.mulf %48, %56 : tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %58 = arith.cmpi eq, %49, %cst_3 : tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %59 = tt.expand_dims %58 {axis = 2 : i32} : tensor<4x32xi1, #ttg.slice<{dim = 2, parent = #linear}>> -> tensor<4x32x1xi1, #linear> loc(#loc)
    %60 = tt.broadcast %59 : tensor<4x32x1xi1, #linear> -> tensor<4x32x32xi1, #linear> loc(#loc)
    %61 = tt.trans %60 {order = array<i32: 0, 2, 1>} : tensor<4x32x32xi1, #linear> -> tensor<4x32x32xi1, #linear11> loc(#loc)
    %62 = tt.reshape %61 : tensor<4x32x32xi1, #linear11> -> tensor<128x32xi1, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %63 = arith.select %62, %cst_2, %57 : tensor<128x32xi1, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>>, tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %64 = tt.dot %outLHS, %63, %cst_1 : tensor<32x128xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> * tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> -> tensor<32x32xf32, #mma> loc(#loc)
    %65 = ttg.fp4_to_fp %outRHS_6 {axis = 0 : i32} : tensor<64x32xi8, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 4}>> -> tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %66 = tt.trans %outRHS_8 {order = array<i32: 1, 0>} : tensor<32x4xi8, #linear10> -> tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %67 = arith.extui %66 : tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> to tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %68 = arith.shli %67, %cst_4 : tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %69 = tt.bitcast %68 : tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> -> tensor<4x32xbf16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %70 = tt.expand_dims %69 {axis = 2 : i32} : tensor<4x32xbf16, #ttg.slice<{dim = 2, parent = #linear}>> -> tensor<4x32x1xbf16, #linear> loc(#loc)
    %71 = tt.broadcast %70 : tensor<4x32x1xbf16, #linear> -> tensor<4x32x32xbf16, #linear> loc(#loc)
    %72 = tt.trans %71 {order = array<i32: 0, 2, 1>} : tensor<4x32x32xbf16, #linear> -> tensor<4x32x32xbf16, #linear11> loc(#loc)
    %73 = tt.reshape %72 : tensor<4x32x32xbf16, #linear11> -> tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %74 = arith.mulf %65, %73 : tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %75 = arith.cmpi eq, %66, %cst_3 : tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %76 = tt.expand_dims %75 {axis = 2 : i32} : tensor<4x32xi1, #ttg.slice<{dim = 2, parent = #linear}>> -> tensor<4x32x1xi1, #linear> loc(#loc)
    %77 = tt.broadcast %76 : tensor<4x32x1xi1, #linear> -> tensor<4x32x32xi1, #linear> loc(#loc)
    %78 = tt.trans %77 {order = array<i32: 0, 2, 1>} : tensor<4x32x32xi1, #linear> -> tensor<4x32x32xi1, #linear11> loc(#loc)
    %79 = tt.reshape %78 : tensor<4x32x32xi1, #linear11> -> tensor<128x32xi1, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %80 = arith.select %79, %cst_2, %74 : tensor<128x32xi1, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>>, tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %81 = tt.dot %outRHS, %80, %cst_1 : tensor<32x128xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> * tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> -> tensor<32x32xf32, #mma> loc(#loc)
    %82 = arith.addf %64, %81 : tensor<32x32xf32, #mma> loc(#loc)
    %83 = arith.muli %5, %cst_0 : tensor<32x1xi32, #blocked1> loc(#loc)
    %84 = tt.splat %out : !tt.ptr<bf16> -> tensor<32x1x!tt.ptr<bf16>, #blocked1> loc(#loc)
    %85 = tt.addptr %84, %83 : tensor<32x1x!tt.ptr<bf16>, #blocked1>, tensor<32x1xi32, #blocked1> loc(#loc)
    %86 = tt.broadcast %85 : tensor<32x1x!tt.ptr<bf16>, #blocked1> -> tensor<32x32x!tt.ptr<bf16>, #blocked1> loc(#loc)
    %87 = tt.broadcast %22 : tensor<1x32xi32, #blocked1> -> tensor<32x32xi32, #blocked1> loc(#loc)
    %88 = tt.addptr %86, %87 : tensor<32x32x!tt.ptr<bf16>, #blocked1>, tensor<32x32xi32, #blocked1> loc(#loc)
    %89 = arith.truncf %82 : tensor<32x32xf32, #mma> to tensor<32x32xbf16, #mma> loc(#loc)
    %90 = ttg.convert_layout %88 : tensor<32x32x!tt.ptr<bf16>, #blocked1> -> tensor<32x32x!tt.ptr<bf16>, #mma> loc(#loc)
    tt.store %90, %89 : tensor<32x32x!tt.ptr<bf16>, #mma> loc(#loc)
    tt.return loc(#loc)
  } loc(#loc)
} loc(#loc)
#loc = loc(unknown)


// -----// IR Dump Before Canonicalizer (canonicalize) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [8, 8], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [1, 4], threadsPerWarp = [8, 8], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked2 = #ttg.blocked<{sizePerThread = [1, 8], threadsPerWarp = [2, 32], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked3 = #ttg.blocked<{sizePerThread = [16, 1], threadsPerWarp = [8, 8], warpsPerCTA = [1, 4], order = [0, 1]}>
#linear = #ttg.linear<{register = [[0, 0, 1], [0, 0, 2], [0, 0, 4], [1, 0, 0], [2, 0, 0]], lane = [[0, 1, 0], [0, 2, 0], [0, 4, 0], [0, 8, 0], [0, 0, 8], [0, 0, 16]], warp = [[0, 16, 0], [0, 0, 0]], block = []}>
#linear1 = #ttg.linear<{register = [[0, 128], [0, 1], [0, 2], [0, 4], [0, 32], [0, 64]], lane = [[1, 0], [2, 0], [4, 0], [8, 0], [0, 8], [0, 16]], warp = [[0, 0], [16, 0]], block = []}>
#linear2 = #ttg.linear<{register = [[0, 1, 0], [0, 0, 1], [0, 0, 2], [0, 0, 4], [0, 0, 32], [0, 0, 64]], lane = [[1, 0, 0], [2, 0, 0], [4, 0, 0], [8, 0, 0], [0, 0, 8], [0, 0, 16]], warp = [[0, 0, 0], [16, 0, 0]], block = []}>
#linear3 = #ttg.linear<{register = [[0, 0, 1], [0, 1, 0], [0, 2, 0], [0, 4, 0], [0, 32, 0], [0, 64, 0]], lane = [[1, 0, 0], [2, 0, 0], [4, 0, 0], [8, 0, 0], [0, 8, 0], [0, 16, 0]], warp = [[0, 0, 0], [16, 0, 0]], block = []}>
#linear4 = #ttg.linear<{register = [[64, 0], [1, 0], [2, 0], [16, 0], [32, 0]], lane = [[0, 1], [0, 2], [0, 4], [0, 8], [4, 0], [8, 0]], warp = [[0, 16], [0, 0]], block = []}>
#linear5 = #ttg.linear<{register = [[1, 0, 0], [0, 1, 0], [0, 2, 0], [0, 16, 0], [0, 32, 0]], lane = [[0, 0, 1], [0, 0, 2], [0, 0, 4], [0, 0, 8], [0, 4, 0], [0, 8, 0]], warp = [[0, 0, 16], [0, 0, 0]], block = []}>
#linear6 = #ttg.linear<{register = [[0, 0, 1], [1, 0, 0], [2, 0, 0], [16, 0, 0], [32, 0, 0]], lane = [[0, 1, 0], [0, 2, 0], [0, 4, 0], [0, 8, 0], [4, 0, 0], [8, 0, 0]], warp = [[0, 16, 0], [0, 0, 0]], block = []}>
#linear7 = #ttg.linear<{register = [[0, 4], [0, 1], [0, 2]], lane = [[1, 0], [2, 0], [4, 0], [8, 0], [0, 0], [0, 0]], warp = [[16, 0], [0, 0]], block = []}>
#linear8 = #ttg.linear<{register = [[0, 1, 0], [0, 0, 1], [0, 0, 2]], lane = [[1, 0, 0], [2, 0, 0], [4, 0, 0], [8, 0, 0], [0, 0, 0], [0, 0, 0]], warp = [[16, 0, 0], [0, 0, 0]], block = []}>
#linear9 = #ttg.linear<{register = [[0, 0, 1], [0, 1, 0], [0, 2, 0]], lane = [[1, 0, 0], [2, 0, 0], [4, 0, 0], [8, 0, 0], [0, 0, 0], [0, 0, 0]], warp = [[16, 0, 0], [0, 0, 0]], block = []}>
#linear10 = #ttg.linear<{register = [[0, 1], [0, 2]], lane = [[1, 0], [2, 0], [4, 0], [8, 0], [0, 0], [0, 0]], warp = [[16, 0], [0, 0]], block = []}>
#linear11 = #ttg.linear<{register = [[0, 1, 0], [0, 2, 0], [0, 4, 0], [1, 0, 0], [2, 0, 0]], lane = [[0, 0, 1], [0, 0, 2], [0, 0, 4], [0, 0, 8], [0, 8, 0], [0, 16, 0]], warp = [[0, 0, 16], [0, 0, 0]], block = []}>
#loc1 = loc("a_base")
#loc2 = loc("stride_a0")
#loc3 = loc("b_base")
#loc4 = loc("stride_b1")
#loc5 = loc("b_scale")
#loc6 = loc("out")
#mma = #ttg.amd_mfma<{version = 4, warpsPerCTA = [2, 2], instrShape = [16, 16], isTransposed = true}>
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "hip:gfx950", "ttg.threads-per-warp" = 64 : i32} {
  tt.func public @dot_scale_kernel(%a_base: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("a_base"), %stride_a0: i32 {tt.divisibility = 16 : i32} loc("stride_a0"), %b_base: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("b_base"), %stride_b1: i32 {tt.divisibility = 16 : i32} loc("stride_b1"), %b_scale: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("b_scale"), %out: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("out")) attributes {noinline = false} {
    %cst = arith.constant dense<8> : tensor<32x1xi32, #blocked> loc(#loc)
    %cst_0 = arith.constant dense<32> : tensor<32x1xi32, #blocked1> loc(#loc)
    %cst_1 = arith.constant dense<0.000000e+00> : tensor<32x32xf32, #mma> loc(#loc)
    %cst_2 = arith.constant dense<0x7FC0> : tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %cst_3 = arith.constant dense<-1> : tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %cst_4 = arith.constant dense<7> : tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %0 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked2}>> loc(#loc)
    %1 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc)
    %2 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc)
    %3 = tt.expand_dims %0 {axis = 1 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked2}>> -> tensor<32x1xi32, #blocked2> loc(#loc)
    %4 = tt.expand_dims %1 {axis = 1 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<32x1xi32, #blocked> loc(#loc)
    %5 = tt.expand_dims %2 {axis = 1 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> -> tensor<32x1xi32, #blocked1> loc(#loc)
    %6 = tt.splat %stride_a0 : i32 -> tensor<32x1xi32, #blocked2> loc(#loc)
    %7 = arith.muli %3, %6 : tensor<32x1xi32, #blocked2> loc(#loc)
    %8 = tt.splat %a_base : !tt.ptr<bf16> -> tensor<32x1x!tt.ptr<bf16>, #blocked2> loc(#loc)
    %9 = tt.addptr %8, %7 : tensor<32x1x!tt.ptr<bf16>, #blocked2>, tensor<32x1xi32, #blocked2> loc(#loc)
    %10 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #ttg.slice<{dim = 0, parent = #blocked2}>> loc(#loc)
    %11 = tt.expand_dims %10 {axis = 0 : i32} : tensor<256xi32, #ttg.slice<{dim = 0, parent = #blocked2}>> -> tensor<1x256xi32, #blocked2> loc(#loc)
    %12 = tt.broadcast %9 : tensor<32x1x!tt.ptr<bf16>, #blocked2> -> tensor<32x256x!tt.ptr<bf16>, #blocked2> loc(#loc)
    %13 = tt.broadcast %11 : tensor<1x256xi32, #blocked2> -> tensor<32x256xi32, #blocked2> loc(#loc)
    %14 = tt.addptr %12, %13 : tensor<32x256x!tt.ptr<bf16>, #blocked2>, tensor<32x256xi32, #blocked2> loc(#loc)
    %15 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked3}>> loc(#loc)
    %16 = tt.expand_dims %15 {axis = 1 : i32} : tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked3}>> -> tensor<128x1xi32, #blocked3> loc(#loc)
    %17 = tt.splat %b_base : !tt.ptr<i8> -> tensor<128x1x!tt.ptr<i8>, #blocked3> loc(#loc)
    %18 = tt.addptr %17, %16 : tensor<128x1x!tt.ptr<i8>, #blocked3>, tensor<128x1xi32, #blocked3> loc(#loc)
    %19 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked3}>> loc(#loc)
    %20 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc)
    %21 = tt.expand_dims %19 {axis = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked3}>> -> tensor<1x32xi32, #blocked3> loc(#loc)
    %22 = tt.expand_dims %20 {axis = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x32xi32, #blocked1> loc(#loc)
    %23 = tt.splat %stride_b1 : i32 -> tensor<1x32xi32, #blocked3> loc(#loc)
    %24 = arith.muli %21, %23 : tensor<1x32xi32, #blocked3> loc(#loc)
    %25 = tt.broadcast %18 : tensor<128x1x!tt.ptr<i8>, #blocked3> -> tensor<128x32x!tt.ptr<i8>, #blocked3> loc(#loc)
    %26 = tt.broadcast %24 : tensor<1x32xi32, #blocked3> -> tensor<128x32xi32, #blocked3> loc(#loc)
    %27 = tt.addptr %25, %26 : tensor<128x32x!tt.ptr<i8>, #blocked3>, tensor<128x32xi32, #blocked3> loc(#loc)
    %28 = tt.load %14 : tensor<32x256x!tt.ptr<bf16>, #blocked2> loc(#loc)
    %29 = ttg.convert_layout %28 : tensor<32x256xbf16, #blocked2> -> tensor<32x256xbf16, #linear1> loc(#loc)
    %30 = tt.reshape %29 : tensor<32x256xbf16, #linear1> -> tensor<32x2x128xbf16, #linear2> loc(#loc)
    %31 = tt.trans %30 {order = array<i32: 0, 2, 1>} : tensor<32x2x128xbf16, #linear2> -> tensor<32x128x2xbf16, #linear3> loc(#loc)
    %outLHS, %outRHS = tt.split %31 : tensor<32x128x2xbf16, #linear3> -> tensor<32x128xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> loc(#loc)
    %32 = tt.load %27 : tensor<128x32x!tt.ptr<i8>, #blocked3> loc(#loc)
    %33 = ttg.convert_layout %32 : tensor<128x32xi8, #blocked3> -> tensor<128x32xi8, #linear4> loc(#loc)
    %34 = tt.reshape %33 : tensor<128x32xi8, #linear4> -> tensor<2x64x32xi8, #linear5> loc(#loc)
    %35 = tt.trans %34 {order = array<i32: 1, 2, 0>} : tensor<2x64x32xi8, #linear5> -> tensor<64x32x2xi8, #linear6> loc(#loc)
    %outLHS_5, %outRHS_6 = tt.split %35 : tensor<64x32x2xi8, #linear6> -> tensor<64x32xi8, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 4}>> loc(#loc)
    %36 = arith.muli %4, %cst : tensor<32x1xi32, #blocked> loc(#loc)
    %37 = tt.splat %b_scale : !tt.ptr<i8> -> tensor<32x1x!tt.ptr<i8>, #blocked> loc(#loc)
    %38 = tt.addptr %37, %36 : tensor<32x1x!tt.ptr<i8>, #blocked>, tensor<32x1xi32, #blocked> loc(#loc)
    %39 = tt.make_range {end = 8 : i32, start = 0 : i32} : tensor<8xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc)
    %40 = tt.expand_dims %39 {axis = 0 : i32} : tensor<8xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x8xi32, #blocked> loc(#loc)
    %41 = tt.broadcast %38 : tensor<32x1x!tt.ptr<i8>, #blocked> -> tensor<32x8x!tt.ptr<i8>, #blocked> loc(#loc)
    %42 = tt.broadcast %40 : tensor<1x8xi32, #blocked> -> tensor<32x8xi32, #blocked> loc(#loc)
    %43 = tt.addptr %41, %42 : tensor<32x8x!tt.ptr<i8>, #blocked>, tensor<32x8xi32, #blocked> loc(#loc)
    %44 = tt.load %43 : tensor<32x8x!tt.ptr<i8>, #blocked> loc(#loc)
    %45 = ttg.convert_layout %44 : tensor<32x8xi8, #blocked> -> tensor<32x8xi8, #linear7> loc(#loc)
    %46 = tt.reshape %45 : tensor<32x8xi8, #linear7> -> tensor<32x2x4xi8, #linear8> loc(#loc)
    %47 = tt.trans %46 {order = array<i32: 0, 2, 1>} : tensor<32x2x4xi8, #linear8> -> tensor<32x4x2xi8, #linear9> loc(#loc)
    %outLHS_7, %outRHS_8 = tt.split %47 : tensor<32x4x2xi8, #linear9> -> tensor<32x4xi8, #linear10> loc(#loc)
    %48 = ttg.fp4_to_fp %outLHS_5 {axis = 0 : i32} : tensor<64x32xi8, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 4}>> -> tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %49 = tt.trans %outLHS_7 {order = array<i32: 1, 0>} : tensor<32x4xi8, #linear10> -> tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %50 = arith.extui %49 : tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> to tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %51 = arith.shli %50, %cst_4 : tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %52 = tt.bitcast %51 : tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> -> tensor<4x32xbf16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %53 = tt.expand_dims %52 {axis = 2 : i32} : tensor<4x32xbf16, #ttg.slice<{dim = 2, parent = #linear}>> -> tensor<4x32x1xbf16, #linear> loc(#loc)
    %54 = tt.broadcast %53 : tensor<4x32x1xbf16, #linear> -> tensor<4x32x32xbf16, #linear> loc(#loc)
    %55 = tt.trans %54 {order = array<i32: 0, 2, 1>} : tensor<4x32x32xbf16, #linear> -> tensor<4x32x32xbf16, #linear11> loc(#loc)
    %56 = tt.reshape %55 : tensor<4x32x32xbf16, #linear11> -> tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %57 = arith.mulf %48, %56 : tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %58 = arith.cmpi eq, %49, %cst_3 : tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %59 = tt.expand_dims %58 {axis = 2 : i32} : tensor<4x32xi1, #ttg.slice<{dim = 2, parent = #linear}>> -> tensor<4x32x1xi1, #linear> loc(#loc)
    %60 = tt.broadcast %59 : tensor<4x32x1xi1, #linear> -> tensor<4x32x32xi1, #linear> loc(#loc)
    %61 = tt.trans %60 {order = array<i32: 0, 2, 1>} : tensor<4x32x32xi1, #linear> -> tensor<4x32x32xi1, #linear11> loc(#loc)
    %62 = tt.reshape %61 : tensor<4x32x32xi1, #linear11> -> tensor<128x32xi1, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %63 = arith.select %62, %cst_2, %57 : tensor<128x32xi1, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>>, tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %64 = tt.dot %outLHS, %63, %cst_1 : tensor<32x128xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> * tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> -> tensor<32x32xf32, #mma> loc(#loc)
    %65 = ttg.fp4_to_fp %outRHS_6 {axis = 0 : i32} : tensor<64x32xi8, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 4}>> -> tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %66 = tt.trans %outRHS_8 {order = array<i32: 1, 0>} : tensor<32x4xi8, #linear10> -> tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %67 = arith.extui %66 : tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> to tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %68 = arith.shli %67, %cst_4 : tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %69 = tt.bitcast %68 : tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> -> tensor<4x32xbf16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %70 = tt.expand_dims %69 {axis = 2 : i32} : tensor<4x32xbf16, #ttg.slice<{dim = 2, parent = #linear}>> -> tensor<4x32x1xbf16, #linear> loc(#loc)
    %71 = tt.broadcast %70 : tensor<4x32x1xbf16, #linear> -> tensor<4x32x32xbf16, #linear> loc(#loc)
    %72 = tt.trans %71 {order = array<i32: 0, 2, 1>} : tensor<4x32x32xbf16, #linear> -> tensor<4x32x32xbf16, #linear11> loc(#loc)
    %73 = tt.reshape %72 : tensor<4x32x32xbf16, #linear11> -> tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %74 = arith.mulf %65, %73 : tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %75 = arith.cmpi eq, %66, %cst_3 : tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %76 = tt.expand_dims %75 {axis = 2 : i32} : tensor<4x32xi1, #ttg.slice<{dim = 2, parent = #linear}>> -> tensor<4x32x1xi1, #linear> loc(#loc)
    %77 = tt.broadcast %76 : tensor<4x32x1xi1, #linear> -> tensor<4x32x32xi1, #linear> loc(#loc)
    %78 = tt.trans %77 {order = array<i32: 0, 2, 1>} : tensor<4x32x32xi1, #linear> -> tensor<4x32x32xi1, #linear11> loc(#loc)
    %79 = tt.reshape %78 : tensor<4x32x32xi1, #linear11> -> tensor<128x32xi1, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %80 = arith.select %79, %cst_2, %74 : tensor<128x32xi1, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>>, tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %81 = tt.dot %outRHS, %80, %cst_1 : tensor<32x128xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> * tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> -> tensor<32x32xf32, #mma> loc(#loc)
    %82 = arith.addf %64, %81 : tensor<32x32xf32, #mma> loc(#loc)
    %83 = arith.muli %5, %cst_0 : tensor<32x1xi32, #blocked1> loc(#loc)
    %84 = tt.splat %out : !tt.ptr<bf16> -> tensor<32x1x!tt.ptr<bf16>, #blocked1> loc(#loc)
    %85 = tt.addptr %84, %83 : tensor<32x1x!tt.ptr<bf16>, #blocked1>, tensor<32x1xi32, #blocked1> loc(#loc)
    %86 = tt.broadcast %85 : tensor<32x1x!tt.ptr<bf16>, #blocked1> -> tensor<32x32x!tt.ptr<bf16>, #blocked1> loc(#loc)
    %87 = tt.broadcast %22 : tensor<1x32xi32, #blocked1> -> tensor<32x32xi32, #blocked1> loc(#loc)
    %88 = tt.addptr %86, %87 : tensor<32x32x!tt.ptr<bf16>, #blocked1>, tensor<32x32xi32, #blocked1> loc(#loc)
    %89 = arith.truncf %82 : tensor<32x32xf32, #mma> to tensor<32x32xbf16, #mma> loc(#loc)
    %90 = ttg.convert_layout %88 : tensor<32x32x!tt.ptr<bf16>, #blocked1> -> tensor<32x32x!tt.ptr<bf16>, #mma> loc(#loc)
    tt.store %90, %89 : tensor<32x32x!tt.ptr<bf16>, #mma> loc(#loc)
    tt.return loc(#loc)
  } loc(#loc)
} loc(#loc)
#loc = loc(unknown)


// -----// IR Dump Before TritonAMDGPUStreamPipeline (tritonamdgpu-stream-pipeline) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [8, 8], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [1, 4], threadsPerWarp = [8, 8], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked2 = #ttg.blocked<{sizePerThread = [1, 8], threadsPerWarp = [2, 32], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked3 = #ttg.blocked<{sizePerThread = [16, 1], threadsPerWarp = [8, 8], warpsPerCTA = [1, 4], order = [0, 1]}>
#linear = #ttg.linear<{register = [[0, 0, 1], [0, 0, 2], [0, 0, 4], [1, 0, 0], [2, 0, 0]], lane = [[0, 1, 0], [0, 2, 0], [0, 4, 0], [0, 8, 0], [0, 0, 8], [0, 0, 16]], warp = [[0, 16, 0], [0, 0, 0]], block = []}>
#linear1 = #ttg.linear<{register = [[0, 128], [0, 1], [0, 2], [0, 4], [0, 32], [0, 64]], lane = [[1, 0], [2, 0], [4, 0], [8, 0], [0, 8], [0, 16]], warp = [[0, 0], [16, 0]], block = []}>
#linear2 = #ttg.linear<{register = [[0, 1, 0], [0, 0, 1], [0, 0, 2], [0, 0, 4], [0, 0, 32], [0, 0, 64]], lane = [[1, 0, 0], [2, 0, 0], [4, 0, 0], [8, 0, 0], [0, 0, 8], [0, 0, 16]], warp = [[0, 0, 0], [16, 0, 0]], block = []}>
#linear3 = #ttg.linear<{register = [[0, 0, 1], [0, 1, 0], [0, 2, 0], [0, 4, 0], [0, 32, 0], [0, 64, 0]], lane = [[1, 0, 0], [2, 0, 0], [4, 0, 0], [8, 0, 0], [0, 8, 0], [0, 16, 0]], warp = [[0, 0, 0], [16, 0, 0]], block = []}>
#linear4 = #ttg.linear<{register = [[64, 0], [1, 0], [2, 0], [16, 0], [32, 0]], lane = [[0, 1], [0, 2], [0, 4], [0, 8], [4, 0], [8, 0]], warp = [[0, 16], [0, 0]], block = []}>
#linear5 = #ttg.linear<{register = [[1, 0, 0], [0, 1, 0], [0, 2, 0], [0, 16, 0], [0, 32, 0]], lane = [[0, 0, 1], [0, 0, 2], [0, 0, 4], [0, 0, 8], [0, 4, 0], [0, 8, 0]], warp = [[0, 0, 16], [0, 0, 0]], block = []}>
#linear6 = #ttg.linear<{register = [[0, 0, 1], [1, 0, 0], [2, 0, 0], [16, 0, 0], [32, 0, 0]], lane = [[0, 1, 0], [0, 2, 0], [0, 4, 0], [0, 8, 0], [4, 0, 0], [8, 0, 0]], warp = [[0, 16, 0], [0, 0, 0]], block = []}>
#linear7 = #ttg.linear<{register = [[0, 4], [0, 1], [0, 2]], lane = [[1, 0], [2, 0], [4, 0], [8, 0], [0, 0], [0, 0]], warp = [[16, 0], [0, 0]], block = []}>
#linear8 = #ttg.linear<{register = [[0, 1, 0], [0, 0, 1], [0, 0, 2]], lane = [[1, 0, 0], [2, 0, 0], [4, 0, 0], [8, 0, 0], [0, 0, 0], [0, 0, 0]], warp = [[16, 0, 0], [0, 0, 0]], block = []}>
#linear9 = #ttg.linear<{register = [[0, 0, 1], [0, 1, 0], [0, 2, 0]], lane = [[1, 0, 0], [2, 0, 0], [4, 0, 0], [8, 0, 0], [0, 0, 0], [0, 0, 0]], warp = [[16, 0, 0], [0, 0, 0]], block = []}>
#linear10 = #ttg.linear<{register = [[0, 1], [0, 2]], lane = [[1, 0], [2, 0], [4, 0], [8, 0], [0, 0], [0, 0]], warp = [[16, 0], [0, 0]], block = []}>
#linear11 = #ttg.linear<{register = [[0, 1, 0], [0, 2, 0], [0, 4, 0], [1, 0, 0], [2, 0, 0]], lane = [[0, 0, 1], [0, 0, 2], [0, 0, 4], [0, 0, 8], [0, 8, 0], [0, 16, 0]], warp = [[0, 0, 16], [0, 0, 0]], block = []}>
#loc1 = loc("a_base")
#loc2 = loc("stride_a0")
#loc3 = loc("b_base")
#loc4 = loc("stride_b1")
#loc5 = loc("b_scale")
#loc6 = loc("out")
#mma = #ttg.amd_mfma<{version = 4, warpsPerCTA = [2, 2], instrShape = [16, 16], isTransposed = true}>
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "hip:gfx950", "ttg.threads-per-warp" = 64 : i32} {
  tt.func public @dot_scale_kernel(%a_base: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("a_base"), %stride_a0: i32 {tt.divisibility = 16 : i32} loc("stride_a0"), %b_base: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("b_base"), %stride_b1: i32 {tt.divisibility = 16 : i32} loc("stride_b1"), %b_scale: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("b_scale"), %out: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("out")) attributes {noinline = false} {
    %cst = arith.constant dense<8> : tensor<32x1xi32, #blocked> loc(#loc)
    %cst_0 = arith.constant dense<32> : tensor<32x1xi32, #blocked1> loc(#loc)
    %cst_1 = arith.constant dense<0.000000e+00> : tensor<32x32xf32, #mma> loc(#loc)
    %cst_2 = arith.constant dense<0x7FC0> : tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %cst_3 = arith.constant dense<-1> : tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %cst_4 = arith.constant dense<7> : tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %0 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked2}>> loc(#loc)
    %1 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc)
    %2 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc)
    %3 = tt.expand_dims %0 {axis = 1 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked2}>> -> tensor<32x1xi32, #blocked2> loc(#loc)
    %4 = tt.expand_dims %1 {axis = 1 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<32x1xi32, #blocked> loc(#loc)
    %5 = tt.expand_dims %2 {axis = 1 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> -> tensor<32x1xi32, #blocked1> loc(#loc)
    %6 = tt.splat %stride_a0 : i32 -> tensor<32x1xi32, #blocked2> loc(#loc)
    %7 = arith.muli %3, %6 : tensor<32x1xi32, #blocked2> loc(#loc)
    %8 = tt.splat %a_base : !tt.ptr<bf16> -> tensor<32x1x!tt.ptr<bf16>, #blocked2> loc(#loc)
    %9 = tt.addptr %8, %7 : tensor<32x1x!tt.ptr<bf16>, #blocked2>, tensor<32x1xi32, #blocked2> loc(#loc)
    %10 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #ttg.slice<{dim = 0, parent = #blocked2}>> loc(#loc)
    %11 = tt.expand_dims %10 {axis = 0 : i32} : tensor<256xi32, #ttg.slice<{dim = 0, parent = #blocked2}>> -> tensor<1x256xi32, #blocked2> loc(#loc)
    %12 = tt.broadcast %9 : tensor<32x1x!tt.ptr<bf16>, #blocked2> -> tensor<32x256x!tt.ptr<bf16>, #blocked2> loc(#loc)
    %13 = tt.broadcast %11 : tensor<1x256xi32, #blocked2> -> tensor<32x256xi32, #blocked2> loc(#loc)
    %14 = tt.addptr %12, %13 : tensor<32x256x!tt.ptr<bf16>, #blocked2>, tensor<32x256xi32, #blocked2> loc(#loc)
    %15 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked3}>> loc(#loc)
    %16 = tt.expand_dims %15 {axis = 1 : i32} : tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked3}>> -> tensor<128x1xi32, #blocked3> loc(#loc)
    %17 = tt.splat %b_base : !tt.ptr<i8> -> tensor<128x1x!tt.ptr<i8>, #blocked3> loc(#loc)
    %18 = tt.addptr %17, %16 : tensor<128x1x!tt.ptr<i8>, #blocked3>, tensor<128x1xi32, #blocked3> loc(#loc)
    %19 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked3}>> loc(#loc)
    %20 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc)
    %21 = tt.expand_dims %19 {axis = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked3}>> -> tensor<1x32xi32, #blocked3> loc(#loc)
    %22 = tt.expand_dims %20 {axis = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x32xi32, #blocked1> loc(#loc)
    %23 = tt.splat %stride_b1 : i32 -> tensor<1x32xi32, #blocked3> loc(#loc)
    %24 = arith.muli %21, %23 : tensor<1x32xi32, #blocked3> loc(#loc)
    %25 = tt.broadcast %18 : tensor<128x1x!tt.ptr<i8>, #blocked3> -> tensor<128x32x!tt.ptr<i8>, #blocked3> loc(#loc)
    %26 = tt.broadcast %24 : tensor<1x32xi32, #blocked3> -> tensor<128x32xi32, #blocked3> loc(#loc)
    %27 = tt.addptr %25, %26 : tensor<128x32x!tt.ptr<i8>, #blocked3>, tensor<128x32xi32, #blocked3> loc(#loc)
    %28 = tt.load %14 : tensor<32x256x!tt.ptr<bf16>, #blocked2> loc(#loc)
    %29 = ttg.convert_layout %28 : tensor<32x256xbf16, #blocked2> -> tensor<32x256xbf16, #linear1> loc(#loc)
    %30 = tt.reshape %29 : tensor<32x256xbf16, #linear1> -> tensor<32x2x128xbf16, #linear2> loc(#loc)
    %31 = tt.trans %30 {order = array<i32: 0, 2, 1>} : tensor<32x2x128xbf16, #linear2> -> tensor<32x128x2xbf16, #linear3> loc(#loc)
    %outLHS, %outRHS = tt.split %31 : tensor<32x128x2xbf16, #linear3> -> tensor<32x128xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> loc(#loc)
    %32 = tt.load %27 : tensor<128x32x!tt.ptr<i8>, #blocked3> loc(#loc)
    %33 = ttg.convert_layout %32 : tensor<128x32xi8, #blocked3> -> tensor<128x32xi8, #linear4> loc(#loc)
    %34 = tt.reshape %33 : tensor<128x32xi8, #linear4> -> tensor<2x64x32xi8, #linear5> loc(#loc)
    %35 = tt.trans %34 {order = array<i32: 1, 2, 0>} : tensor<2x64x32xi8, #linear5> -> tensor<64x32x2xi8, #linear6> loc(#loc)
    %outLHS_5, %outRHS_6 = tt.split %35 : tensor<64x32x2xi8, #linear6> -> tensor<64x32xi8, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 4}>> loc(#loc)
    %36 = arith.muli %4, %cst : tensor<32x1xi32, #blocked> loc(#loc)
    %37 = tt.splat %b_scale : !tt.ptr<i8> -> tensor<32x1x!tt.ptr<i8>, #blocked> loc(#loc)
    %38 = tt.addptr %37, %36 : tensor<32x1x!tt.ptr<i8>, #blocked>, tensor<32x1xi32, #blocked> loc(#loc)
    %39 = tt.make_range {end = 8 : i32, start = 0 : i32} : tensor<8xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc)
    %40 = tt.expand_dims %39 {axis = 0 : i32} : tensor<8xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x8xi32, #blocked> loc(#loc)
    %41 = tt.broadcast %38 : tensor<32x1x!tt.ptr<i8>, #blocked> -> tensor<32x8x!tt.ptr<i8>, #blocked> loc(#loc)
    %42 = tt.broadcast %40 : tensor<1x8xi32, #blocked> -> tensor<32x8xi32, #blocked> loc(#loc)
    %43 = tt.addptr %41, %42 : tensor<32x8x!tt.ptr<i8>, #blocked>, tensor<32x8xi32, #blocked> loc(#loc)
    %44 = tt.load %43 : tensor<32x8x!tt.ptr<i8>, #blocked> loc(#loc)
    %45 = ttg.convert_layout %44 : tensor<32x8xi8, #blocked> -> tensor<32x8xi8, #linear7> loc(#loc)
    %46 = tt.reshape %45 : tensor<32x8xi8, #linear7> -> tensor<32x2x4xi8, #linear8> loc(#loc)
    %47 = tt.trans %46 {order = array<i32: 0, 2, 1>} : tensor<32x2x4xi8, #linear8> -> tensor<32x4x2xi8, #linear9> loc(#loc)
    %outLHS_7, %outRHS_8 = tt.split %47 : tensor<32x4x2xi8, #linear9> -> tensor<32x4xi8, #linear10> loc(#loc)
    %48 = ttg.fp4_to_fp %outLHS_5 {axis = 0 : i32} : tensor<64x32xi8, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 4}>> -> tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %49 = tt.trans %outLHS_7 {order = array<i32: 1, 0>} : tensor<32x4xi8, #linear10> -> tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %50 = arith.extui %49 : tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> to tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %51 = arith.shli %50, %cst_4 : tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %52 = tt.bitcast %51 : tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> -> tensor<4x32xbf16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %53 = tt.expand_dims %52 {axis = 2 : i32} : tensor<4x32xbf16, #ttg.slice<{dim = 2, parent = #linear}>> -> tensor<4x32x1xbf16, #linear> loc(#loc)
    %54 = tt.broadcast %53 : tensor<4x32x1xbf16, #linear> -> tensor<4x32x32xbf16, #linear> loc(#loc)
    %55 = tt.trans %54 {order = array<i32: 0, 2, 1>} : tensor<4x32x32xbf16, #linear> -> tensor<4x32x32xbf16, #linear11> loc(#loc)
    %56 = tt.reshape %55 : tensor<4x32x32xbf16, #linear11> -> tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %57 = arith.mulf %48, %56 : tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %58 = arith.cmpi eq, %49, %cst_3 : tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %59 = tt.expand_dims %58 {axis = 2 : i32} : tensor<4x32xi1, #ttg.slice<{dim = 2, parent = #linear}>> -> tensor<4x32x1xi1, #linear> loc(#loc)
    %60 = tt.broadcast %59 : tensor<4x32x1xi1, #linear> -> tensor<4x32x32xi1, #linear> loc(#loc)
    %61 = tt.trans %60 {order = array<i32: 0, 2, 1>} : tensor<4x32x32xi1, #linear> -> tensor<4x32x32xi1, #linear11> loc(#loc)
    %62 = tt.reshape %61 : tensor<4x32x32xi1, #linear11> -> tensor<128x32xi1, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %63 = arith.select %62, %cst_2, %57 : tensor<128x32xi1, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>>, tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %64 = tt.dot %outLHS, %63, %cst_1 : tensor<32x128xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> * tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> -> tensor<32x32xf32, #mma> loc(#loc)
    %65 = ttg.fp4_to_fp %outRHS_6 {axis = 0 : i32} : tensor<64x32xi8, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 4}>> -> tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %66 = tt.trans %outRHS_8 {order = array<i32: 1, 0>} : tensor<32x4xi8, #linear10> -> tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %67 = arith.extui %66 : tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> to tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %68 = arith.shli %67, %cst_4 : tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %69 = tt.bitcast %68 : tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> -> tensor<4x32xbf16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %70 = tt.expand_dims %69 {axis = 2 : i32} : tensor<4x32xbf16, #ttg.slice<{dim = 2, parent = #linear}>> -> tensor<4x32x1xbf16, #linear> loc(#loc)
    %71 = tt.broadcast %70 : tensor<4x32x1xbf16, #linear> -> tensor<4x32x32xbf16, #linear> loc(#loc)
    %72 = tt.trans %71 {order = array<i32: 0, 2, 1>} : tensor<4x32x32xbf16, #linear> -> tensor<4x32x32xbf16, #linear11> loc(#loc)
    %73 = tt.reshape %72 : tensor<4x32x32xbf16, #linear11> -> tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %74 = arith.mulf %65, %73 : tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %75 = arith.cmpi eq, %66, %cst_3 : tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %76 = tt.expand_dims %75 {axis = 2 : i32} : tensor<4x32xi1, #ttg.slice<{dim = 2, parent = #linear}>> -> tensor<4x32x1xi1, #linear> loc(#loc)
    %77 = tt.broadcast %76 : tensor<4x32x1xi1, #linear> -> tensor<4x32x32xi1, #linear> loc(#loc)
    %78 = tt.trans %77 {order = array<i32: 0, 2, 1>} : tensor<4x32x32xi1, #linear> -> tensor<4x32x32xi1, #linear11> loc(#loc)
    %79 = tt.reshape %78 : tensor<4x32x32xi1, #linear11> -> tensor<128x32xi1, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %80 = arith.select %79, %cst_2, %74 : tensor<128x32xi1, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>>, tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %81 = tt.dot %outRHS, %80, %cst_1 : tensor<32x128xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> * tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> -> tensor<32x32xf32, #mma> loc(#loc)
    %82 = arith.addf %64, %81 : tensor<32x32xf32, #mma> loc(#loc)
    %83 = arith.muli %5, %cst_0 : tensor<32x1xi32, #blocked1> loc(#loc)
    %84 = tt.splat %out : !tt.ptr<bf16> -> tensor<32x1x!tt.ptr<bf16>, #blocked1> loc(#loc)
    %85 = tt.addptr %84, %83 : tensor<32x1x!tt.ptr<bf16>, #blocked1>, tensor<32x1xi32, #blocked1> loc(#loc)
    %86 = tt.broadcast %85 : tensor<32x1x!tt.ptr<bf16>, #blocked1> -> tensor<32x32x!tt.ptr<bf16>, #blocked1> loc(#loc)
    %87 = tt.broadcast %22 : tensor<1x32xi32, #blocked1> -> tensor<32x32xi32, #blocked1> loc(#loc)
    %88 = tt.addptr %86, %87 : tensor<32x32x!tt.ptr<bf16>, #blocked1>, tensor<32x32xi32, #blocked1> loc(#loc)
    %89 = arith.truncf %82 : tensor<32x32xf32, #mma> to tensor<32x32xbf16, #mma> loc(#loc)
    %90 = ttg.convert_layout %88 : tensor<32x32x!tt.ptr<bf16>, #blocked1> -> tensor<32x32x!tt.ptr<bf16>, #mma> loc(#loc)
    tt.store %90, %89 : tensor<32x32x!tt.ptr<bf16>, #mma> loc(#loc)
    tt.return loc(#loc)
  } loc(#loc)
} loc(#loc)
#loc = loc(unknown)


// -----// IR Dump Before Canonicalizer (canonicalize) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [8, 8], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [1, 4], threadsPerWarp = [8, 8], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked2 = #ttg.blocked<{sizePerThread = [1, 8], threadsPerWarp = [2, 32], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked3 = #ttg.blocked<{sizePerThread = [16, 1], threadsPerWarp = [8, 8], warpsPerCTA = [1, 4], order = [0, 1]}>
#linear = #ttg.linear<{register = [[0, 0, 1], [0, 0, 2], [0, 0, 4], [1, 0, 0], [2, 0, 0]], lane = [[0, 1, 0], [0, 2, 0], [0, 4, 0], [0, 8, 0], [0, 0, 8], [0, 0, 16]], warp = [[0, 16, 0], [0, 0, 0]], block = []}>
#linear1 = #ttg.linear<{register = [[0, 128], [0, 1], [0, 2], [0, 4], [0, 32], [0, 64]], lane = [[1, 0], [2, 0], [4, 0], [8, 0], [0, 8], [0, 16]], warp = [[0, 0], [16, 0]], block = []}>
#linear2 = #ttg.linear<{register = [[0, 1, 0], [0, 0, 1], [0, 0, 2], [0, 0, 4], [0, 0, 32], [0, 0, 64]], lane = [[1, 0, 0], [2, 0, 0], [4, 0, 0], [8, 0, 0], [0, 0, 8], [0, 0, 16]], warp = [[0, 0, 0], [16, 0, 0]], block = []}>
#linear3 = #ttg.linear<{register = [[0, 0, 1], [0, 1, 0], [0, 2, 0], [0, 4, 0], [0, 32, 0], [0, 64, 0]], lane = [[1, 0, 0], [2, 0, 0], [4, 0, 0], [8, 0, 0], [0, 8, 0], [0, 16, 0]], warp = [[0, 0, 0], [16, 0, 0]], block = []}>
#linear4 = #ttg.linear<{register = [[64, 0], [1, 0], [2, 0], [16, 0], [32, 0]], lane = [[0, 1], [0, 2], [0, 4], [0, 8], [4, 0], [8, 0]], warp = [[0, 16], [0, 0]], block = []}>
#linear5 = #ttg.linear<{register = [[1, 0, 0], [0, 1, 0], [0, 2, 0], [0, 16, 0], [0, 32, 0]], lane = [[0, 0, 1], [0, 0, 2], [0, 0, 4], [0, 0, 8], [0, 4, 0], [0, 8, 0]], warp = [[0, 0, 16], [0, 0, 0]], block = []}>
#linear6 = #ttg.linear<{register = [[0, 0, 1], [1, 0, 0], [2, 0, 0], [16, 0, 0], [32, 0, 0]], lane = [[0, 1, 0], [0, 2, 0], [0, 4, 0], [0, 8, 0], [4, 0, 0], [8, 0, 0]], warp = [[0, 16, 0], [0, 0, 0]], block = []}>
#linear7 = #ttg.linear<{register = [[0, 4], [0, 1], [0, 2]], lane = [[1, 0], [2, 0], [4, 0], [8, 0], [0, 0], [0, 0]], warp = [[16, 0], [0, 0]], block = []}>
#linear8 = #ttg.linear<{register = [[0, 1, 0], [0, 0, 1], [0, 0, 2]], lane = [[1, 0, 0], [2, 0, 0], [4, 0, 0], [8, 0, 0], [0, 0, 0], [0, 0, 0]], warp = [[16, 0, 0], [0, 0, 0]], block = []}>
#linear9 = #ttg.linear<{register = [[0, 0, 1], [0, 1, 0], [0, 2, 0]], lane = [[1, 0, 0], [2, 0, 0], [4, 0, 0], [8, 0, 0], [0, 0, 0], [0, 0, 0]], warp = [[16, 0, 0], [0, 0, 0]], block = []}>
#linear10 = #ttg.linear<{register = [[0, 1], [0, 2]], lane = [[1, 0], [2, 0], [4, 0], [8, 0], [0, 0], [0, 0]], warp = [[16, 0], [0, 0]], block = []}>
#linear11 = #ttg.linear<{register = [[0, 1, 0], [0, 2, 0], [0, 4, 0], [1, 0, 0], [2, 0, 0]], lane = [[0, 0, 1], [0, 0, 2], [0, 0, 4], [0, 0, 8], [0, 8, 0], [0, 16, 0]], warp = [[0, 0, 16], [0, 0, 0]], block = []}>
#loc1 = loc("a_base")
#loc2 = loc("stride_a0")
#loc3 = loc("b_base")
#loc4 = loc("stride_b1")
#loc5 = loc("b_scale")
#loc6 = loc("out")
#mma = #ttg.amd_mfma<{version = 4, warpsPerCTA = [2, 2], instrShape = [16, 16], isTransposed = true}>
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "hip:gfx950", "ttg.threads-per-warp" = 64 : i32} {
  tt.func public @dot_scale_kernel(%a_base: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("a_base"), %stride_a0: i32 {tt.divisibility = 16 : i32} loc("stride_a0"), %b_base: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("b_base"), %stride_b1: i32 {tt.divisibility = 16 : i32} loc("stride_b1"), %b_scale: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("b_scale"), %out: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("out")) attributes {noinline = false} {
    %cst = arith.constant dense<8> : tensor<32x1xi32, #blocked> loc(#loc)
    %cst_0 = arith.constant dense<32> : tensor<32x1xi32, #blocked1> loc(#loc)
    %cst_1 = arith.constant dense<0.000000e+00> : tensor<32x32xf32, #mma> loc(#loc)
    %cst_2 = arith.constant dense<0x7FC0> : tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %cst_3 = arith.constant dense<-1> : tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %cst_4 = arith.constant dense<7> : tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %0 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked2}>> loc(#loc)
    %1 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc)
    %2 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc)
    %3 = tt.expand_dims %0 {axis = 1 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked2}>> -> tensor<32x1xi32, #blocked2> loc(#loc)
    %4 = tt.expand_dims %1 {axis = 1 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<32x1xi32, #blocked> loc(#loc)
    %5 = tt.expand_dims %2 {axis = 1 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> -> tensor<32x1xi32, #blocked1> loc(#loc)
    %6 = tt.splat %stride_a0 : i32 -> tensor<32x1xi32, #blocked2> loc(#loc)
    %7 = arith.muli %3, %6 : tensor<32x1xi32, #blocked2> loc(#loc)
    %8 = tt.splat %a_base : !tt.ptr<bf16> -> tensor<32x1x!tt.ptr<bf16>, #blocked2> loc(#loc)
    %9 = tt.addptr %8, %7 : tensor<32x1x!tt.ptr<bf16>, #blocked2>, tensor<32x1xi32, #blocked2> loc(#loc)
    %10 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #ttg.slice<{dim = 0, parent = #blocked2}>> loc(#loc)
    %11 = tt.expand_dims %10 {axis = 0 : i32} : tensor<256xi32, #ttg.slice<{dim = 0, parent = #blocked2}>> -> tensor<1x256xi32, #blocked2> loc(#loc)
    %12 = tt.broadcast %9 : tensor<32x1x!tt.ptr<bf16>, #blocked2> -> tensor<32x256x!tt.ptr<bf16>, #blocked2> loc(#loc)
    %13 = tt.broadcast %11 : tensor<1x256xi32, #blocked2> -> tensor<32x256xi32, #blocked2> loc(#loc)
    %14 = tt.addptr %12, %13 : tensor<32x256x!tt.ptr<bf16>, #blocked2>, tensor<32x256xi32, #blocked2> loc(#loc)
    %15 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked3}>> loc(#loc)
    %16 = tt.expand_dims %15 {axis = 1 : i32} : tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked3}>> -> tensor<128x1xi32, #blocked3> loc(#loc)
    %17 = tt.splat %b_base : !tt.ptr<i8> -> tensor<128x1x!tt.ptr<i8>, #blocked3> loc(#loc)
    %18 = tt.addptr %17, %16 : tensor<128x1x!tt.ptr<i8>, #blocked3>, tensor<128x1xi32, #blocked3> loc(#loc)
    %19 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked3}>> loc(#loc)
    %20 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc)
    %21 = tt.expand_dims %19 {axis = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked3}>> -> tensor<1x32xi32, #blocked3> loc(#loc)
    %22 = tt.expand_dims %20 {axis = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x32xi32, #blocked1> loc(#loc)
    %23 = tt.splat %stride_b1 : i32 -> tensor<1x32xi32, #blocked3> loc(#loc)
    %24 = arith.muli %21, %23 : tensor<1x32xi32, #blocked3> loc(#loc)
    %25 = tt.broadcast %18 : tensor<128x1x!tt.ptr<i8>, #blocked3> -> tensor<128x32x!tt.ptr<i8>, #blocked3> loc(#loc)
    %26 = tt.broadcast %24 : tensor<1x32xi32, #blocked3> -> tensor<128x32xi32, #blocked3> loc(#loc)
    %27 = tt.addptr %25, %26 : tensor<128x32x!tt.ptr<i8>, #blocked3>, tensor<128x32xi32, #blocked3> loc(#loc)
    %28 = tt.load %14 : tensor<32x256x!tt.ptr<bf16>, #blocked2> loc(#loc)
    %29 = ttg.convert_layout %28 : tensor<32x256xbf16, #blocked2> -> tensor<32x256xbf16, #linear1> loc(#loc)
    %30 = tt.reshape %29 : tensor<32x256xbf16, #linear1> -> tensor<32x2x128xbf16, #linear2> loc(#loc)
    %31 = tt.trans %30 {order = array<i32: 0, 2, 1>} : tensor<32x2x128xbf16, #linear2> -> tensor<32x128x2xbf16, #linear3> loc(#loc)
    %outLHS, %outRHS = tt.split %31 : tensor<32x128x2xbf16, #linear3> -> tensor<32x128xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> loc(#loc)
    %32 = tt.load %27 : tensor<128x32x!tt.ptr<i8>, #blocked3> loc(#loc)
    %33 = ttg.convert_layout %32 : tensor<128x32xi8, #blocked3> -> tensor<128x32xi8, #linear4> loc(#loc)
    %34 = tt.reshape %33 : tensor<128x32xi8, #linear4> -> tensor<2x64x32xi8, #linear5> loc(#loc)
    %35 = tt.trans %34 {order = array<i32: 1, 2, 0>} : tensor<2x64x32xi8, #linear5> -> tensor<64x32x2xi8, #linear6> loc(#loc)
    %outLHS_5, %outRHS_6 = tt.split %35 : tensor<64x32x2xi8, #linear6> -> tensor<64x32xi8, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 4}>> loc(#loc)
    %36 = arith.muli %4, %cst : tensor<32x1xi32, #blocked> loc(#loc)
    %37 = tt.splat %b_scale : !tt.ptr<i8> -> tensor<32x1x!tt.ptr<i8>, #blocked> loc(#loc)
    %38 = tt.addptr %37, %36 : tensor<32x1x!tt.ptr<i8>, #blocked>, tensor<32x1xi32, #blocked> loc(#loc)
    %39 = tt.make_range {end = 8 : i32, start = 0 : i32} : tensor<8xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc)
    %40 = tt.expand_dims %39 {axis = 0 : i32} : tensor<8xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x8xi32, #blocked> loc(#loc)
    %41 = tt.broadcast %38 : tensor<32x1x!tt.ptr<i8>, #blocked> -> tensor<32x8x!tt.ptr<i8>, #blocked> loc(#loc)
    %42 = tt.broadcast %40 : tensor<1x8xi32, #blocked> -> tensor<32x8xi32, #blocked> loc(#loc)
    %43 = tt.addptr %41, %42 : tensor<32x8x!tt.ptr<i8>, #blocked>, tensor<32x8xi32, #blocked> loc(#loc)
    %44 = tt.load %43 : tensor<32x8x!tt.ptr<i8>, #blocked> loc(#loc)
    %45 = ttg.convert_layout %44 : tensor<32x8xi8, #blocked> -> tensor<32x8xi8, #linear7> loc(#loc)
    %46 = tt.reshape %45 : tensor<32x8xi8, #linear7> -> tensor<32x2x4xi8, #linear8> loc(#loc)
    %47 = tt.trans %46 {order = array<i32: 0, 2, 1>} : tensor<32x2x4xi8, #linear8> -> tensor<32x4x2xi8, #linear9> loc(#loc)
    %outLHS_7, %outRHS_8 = tt.split %47 : tensor<32x4x2xi8, #linear9> -> tensor<32x4xi8, #linear10> loc(#loc)
    %48 = ttg.fp4_to_fp %outLHS_5 {axis = 0 : i32} : tensor<64x32xi8, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 4}>> -> tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %49 = tt.trans %outLHS_7 {order = array<i32: 1, 0>} : tensor<32x4xi8, #linear10> -> tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %50 = arith.extui %49 : tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> to tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %51 = arith.shli %50, %cst_4 : tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %52 = tt.bitcast %51 : tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> -> tensor<4x32xbf16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %53 = tt.expand_dims %52 {axis = 2 : i32} : tensor<4x32xbf16, #ttg.slice<{dim = 2, parent = #linear}>> -> tensor<4x32x1xbf16, #linear> loc(#loc)
    %54 = tt.broadcast %53 : tensor<4x32x1xbf16, #linear> -> tensor<4x32x32xbf16, #linear> loc(#loc)
    %55 = tt.trans %54 {order = array<i32: 0, 2, 1>} : tensor<4x32x32xbf16, #linear> -> tensor<4x32x32xbf16, #linear11> loc(#loc)
    %56 = tt.reshape %55 : tensor<4x32x32xbf16, #linear11> -> tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %57 = arith.mulf %48, %56 : tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %58 = arith.cmpi eq, %49, %cst_3 : tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %59 = tt.expand_dims %58 {axis = 2 : i32} : tensor<4x32xi1, #ttg.slice<{dim = 2, parent = #linear}>> -> tensor<4x32x1xi1, #linear> loc(#loc)
    %60 = tt.broadcast %59 : tensor<4x32x1xi1, #linear> -> tensor<4x32x32xi1, #linear> loc(#loc)
    %61 = tt.trans %60 {order = array<i32: 0, 2, 1>} : tensor<4x32x32xi1, #linear> -> tensor<4x32x32xi1, #linear11> loc(#loc)
    %62 = tt.reshape %61 : tensor<4x32x32xi1, #linear11> -> tensor<128x32xi1, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %63 = arith.select %62, %cst_2, %57 : tensor<128x32xi1, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>>, tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %64 = tt.dot %outLHS, %63, %cst_1 : tensor<32x128xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> * tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> -> tensor<32x32xf32, #mma> loc(#loc)
    %65 = ttg.fp4_to_fp %outRHS_6 {axis = 0 : i32} : tensor<64x32xi8, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 4}>> -> tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %66 = tt.trans %outRHS_8 {order = array<i32: 1, 0>} : tensor<32x4xi8, #linear10> -> tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %67 = arith.extui %66 : tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> to tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %68 = arith.shli %67, %cst_4 : tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %69 = tt.bitcast %68 : tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> -> tensor<4x32xbf16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %70 = tt.expand_dims %69 {axis = 2 : i32} : tensor<4x32xbf16, #ttg.slice<{dim = 2, parent = #linear}>> -> tensor<4x32x1xbf16, #linear> loc(#loc)
    %71 = tt.broadcast %70 : tensor<4x32x1xbf16, #linear> -> tensor<4x32x32xbf16, #linear> loc(#loc)
    %72 = tt.trans %71 {order = array<i32: 0, 2, 1>} : tensor<4x32x32xbf16, #linear> -> tensor<4x32x32xbf16, #linear11> loc(#loc)
    %73 = tt.reshape %72 : tensor<4x32x32xbf16, #linear11> -> tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %74 = arith.mulf %65, %73 : tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %75 = arith.cmpi eq, %66, %cst_3 : tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %76 = tt.expand_dims %75 {axis = 2 : i32} : tensor<4x32xi1, #ttg.slice<{dim = 2, parent = #linear}>> -> tensor<4x32x1xi1, #linear> loc(#loc)
    %77 = tt.broadcast %76 : tensor<4x32x1xi1, #linear> -> tensor<4x32x32xi1, #linear> loc(#loc)
    %78 = tt.trans %77 {order = array<i32: 0, 2, 1>} : tensor<4x32x32xi1, #linear> -> tensor<4x32x32xi1, #linear11> loc(#loc)
    %79 = tt.reshape %78 : tensor<4x32x32xi1, #linear11> -> tensor<128x32xi1, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %80 = arith.select %79, %cst_2, %74 : tensor<128x32xi1, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>>, tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %81 = tt.dot %outRHS, %80, %cst_1 : tensor<32x128xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> * tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> -> tensor<32x32xf32, #mma> loc(#loc)
    %82 = arith.addf %64, %81 : tensor<32x32xf32, #mma> loc(#loc)
    %83 = arith.muli %5, %cst_0 : tensor<32x1xi32, #blocked1> loc(#loc)
    %84 = tt.splat %out : !tt.ptr<bf16> -> tensor<32x1x!tt.ptr<bf16>, #blocked1> loc(#loc)
    %85 = tt.addptr %84, %83 : tensor<32x1x!tt.ptr<bf16>, #blocked1>, tensor<32x1xi32, #blocked1> loc(#loc)
    %86 = tt.broadcast %85 : tensor<32x1x!tt.ptr<bf16>, #blocked1> -> tensor<32x32x!tt.ptr<bf16>, #blocked1> loc(#loc)
    %87 = tt.broadcast %22 : tensor<1x32xi32, #blocked1> -> tensor<32x32xi32, #blocked1> loc(#loc)
    %88 = tt.addptr %86, %87 : tensor<32x32x!tt.ptr<bf16>, #blocked1>, tensor<32x32xi32, #blocked1> loc(#loc)
    %89 = arith.truncf %82 : tensor<32x32xf32, #mma> to tensor<32x32xbf16, #mma> loc(#loc)
    %90 = ttg.convert_layout %88 : tensor<32x32x!tt.ptr<bf16>, #blocked1> -> tensor<32x32x!tt.ptr<bf16>, #mma> loc(#loc)
    tt.store %90, %89 : tensor<32x32x!tt.ptr<bf16>, #mma> loc(#loc)
    tt.return loc(#loc)
  } loc(#loc)
} loc(#loc)
#loc = loc(unknown)


// -----// IR Dump Before TritonGPUOptimizeDotOperands (tritongpu-optimize-dot-operands) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [8, 8], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [1, 4], threadsPerWarp = [8, 8], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked2 = #ttg.blocked<{sizePerThread = [1, 8], threadsPerWarp = [2, 32], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked3 = #ttg.blocked<{sizePerThread = [16, 1], threadsPerWarp = [8, 8], warpsPerCTA = [1, 4], order = [0, 1]}>
#linear = #ttg.linear<{register = [[0, 0, 1], [0, 0, 2], [0, 0, 4], [1, 0, 0], [2, 0, 0]], lane = [[0, 1, 0], [0, 2, 0], [0, 4, 0], [0, 8, 0], [0, 0, 8], [0, 0, 16]], warp = [[0, 16, 0], [0, 0, 0]], block = []}>
#linear1 = #ttg.linear<{register = [[0, 128], [0, 1], [0, 2], [0, 4], [0, 32], [0, 64]], lane = [[1, 0], [2, 0], [4, 0], [8, 0], [0, 8], [0, 16]], warp = [[0, 0], [16, 0]], block = []}>
#linear2 = #ttg.linear<{register = [[0, 1, 0], [0, 0, 1], [0, 0, 2], [0, 0, 4], [0, 0, 32], [0, 0, 64]], lane = [[1, 0, 0], [2, 0, 0], [4, 0, 0], [8, 0, 0], [0, 0, 8], [0, 0, 16]], warp = [[0, 0, 0], [16, 0, 0]], block = []}>
#linear3 = #ttg.linear<{register = [[0, 0, 1], [0, 1, 0], [0, 2, 0], [0, 4, 0], [0, 32, 0], [0, 64, 0]], lane = [[1, 0, 0], [2, 0, 0], [4, 0, 0], [8, 0, 0], [0, 8, 0], [0, 16, 0]], warp = [[0, 0, 0], [16, 0, 0]], block = []}>
#linear4 = #ttg.linear<{register = [[64, 0], [1, 0], [2, 0], [16, 0], [32, 0]], lane = [[0, 1], [0, 2], [0, 4], [0, 8], [4, 0], [8, 0]], warp = [[0, 16], [0, 0]], block = []}>
#linear5 = #ttg.linear<{register = [[1, 0, 0], [0, 1, 0], [0, 2, 0], [0, 16, 0], [0, 32, 0]], lane = [[0, 0, 1], [0, 0, 2], [0, 0, 4], [0, 0, 8], [0, 4, 0], [0, 8, 0]], warp = [[0, 0, 16], [0, 0, 0]], block = []}>
#linear6 = #ttg.linear<{register = [[0, 0, 1], [1, 0, 0], [2, 0, 0], [16, 0, 0], [32, 0, 0]], lane = [[0, 1, 0], [0, 2, 0], [0, 4, 0], [0, 8, 0], [4, 0, 0], [8, 0, 0]], warp = [[0, 16, 0], [0, 0, 0]], block = []}>
#linear7 = #ttg.linear<{register = [[0, 4], [0, 1], [0, 2]], lane = [[1, 0], [2, 0], [4, 0], [8, 0], [0, 0], [0, 0]], warp = [[16, 0], [0, 0]], block = []}>
#linear8 = #ttg.linear<{register = [[0, 1, 0], [0, 0, 1], [0, 0, 2]], lane = [[1, 0, 0], [2, 0, 0], [4, 0, 0], [8, 0, 0], [0, 0, 0], [0, 0, 0]], warp = [[16, 0, 0], [0, 0, 0]], block = []}>
#linear9 = #ttg.linear<{register = [[0, 0, 1], [0, 1, 0], [0, 2, 0]], lane = [[1, 0, 0], [2, 0, 0], [4, 0, 0], [8, 0, 0], [0, 0, 0], [0, 0, 0]], warp = [[16, 0, 0], [0, 0, 0]], block = []}>
#linear10 = #ttg.linear<{register = [[0, 1], [0, 2]], lane = [[1, 0], [2, 0], [4, 0], [8, 0], [0, 0], [0, 0]], warp = [[16, 0], [0, 0]], block = []}>
#linear11 = #ttg.linear<{register = [[0, 1, 0], [0, 2, 0], [0, 4, 0], [1, 0, 0], [2, 0, 0]], lane = [[0, 0, 1], [0, 0, 2], [0, 0, 4], [0, 0, 8], [0, 8, 0], [0, 16, 0]], warp = [[0, 0, 16], [0, 0, 0]], block = []}>
#loc1 = loc("a_base")
#loc2 = loc("stride_a0")
#loc3 = loc("b_base")
#loc4 = loc("stride_b1")
#loc5 = loc("b_scale")
#loc6 = loc("out")
#mma = #ttg.amd_mfma<{version = 4, warpsPerCTA = [2, 2], instrShape = [16, 16], isTransposed = true}>
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "hip:gfx950", "ttg.threads-per-warp" = 64 : i32} {
  tt.func public @dot_scale_kernel(%a_base: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("a_base"), %stride_a0: i32 {tt.divisibility = 16 : i32} loc("stride_a0"), %b_base: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("b_base"), %stride_b1: i32 {tt.divisibility = 16 : i32} loc("stride_b1"), %b_scale: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("b_scale"), %out: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("out")) attributes {noinline = false} {
    %cst = arith.constant dense<8> : tensor<32x1xi32, #blocked> loc(#loc)
    %cst_0 = arith.constant dense<32> : tensor<32x1xi32, #blocked1> loc(#loc)
    %cst_1 = arith.constant dense<0.000000e+00> : tensor<32x32xf32, #mma> loc(#loc)
    %cst_2 = arith.constant dense<0x7FC0> : tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %cst_3 = arith.constant dense<-1> : tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %cst_4 = arith.constant dense<7> : tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %0 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked2}>> loc(#loc)
    %1 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc)
    %2 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc)
    %3 = tt.expand_dims %0 {axis = 1 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked2}>> -> tensor<32x1xi32, #blocked2> loc(#loc)
    %4 = tt.expand_dims %1 {axis = 1 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<32x1xi32, #blocked> loc(#loc)
    %5 = tt.expand_dims %2 {axis = 1 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> -> tensor<32x1xi32, #blocked1> loc(#loc)
    %6 = tt.splat %stride_a0 : i32 -> tensor<32x1xi32, #blocked2> loc(#loc)
    %7 = arith.muli %3, %6 : tensor<32x1xi32, #blocked2> loc(#loc)
    %8 = tt.splat %a_base : !tt.ptr<bf16> -> tensor<32x1x!tt.ptr<bf16>, #blocked2> loc(#loc)
    %9 = tt.addptr %8, %7 : tensor<32x1x!tt.ptr<bf16>, #blocked2>, tensor<32x1xi32, #blocked2> loc(#loc)
    %10 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #ttg.slice<{dim = 0, parent = #blocked2}>> loc(#loc)
    %11 = tt.expand_dims %10 {axis = 0 : i32} : tensor<256xi32, #ttg.slice<{dim = 0, parent = #blocked2}>> -> tensor<1x256xi32, #blocked2> loc(#loc)
    %12 = tt.broadcast %9 : tensor<32x1x!tt.ptr<bf16>, #blocked2> -> tensor<32x256x!tt.ptr<bf16>, #blocked2> loc(#loc)
    %13 = tt.broadcast %11 : tensor<1x256xi32, #blocked2> -> tensor<32x256xi32, #blocked2> loc(#loc)
    %14 = tt.addptr %12, %13 : tensor<32x256x!tt.ptr<bf16>, #blocked2>, tensor<32x256xi32, #blocked2> loc(#loc)
    %15 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked3}>> loc(#loc)
    %16 = tt.expand_dims %15 {axis = 1 : i32} : tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked3}>> -> tensor<128x1xi32, #blocked3> loc(#loc)
    %17 = tt.splat %b_base : !tt.ptr<i8> -> tensor<128x1x!tt.ptr<i8>, #blocked3> loc(#loc)
    %18 = tt.addptr %17, %16 : tensor<128x1x!tt.ptr<i8>, #blocked3>, tensor<128x1xi32, #blocked3> loc(#loc)
    %19 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked3}>> loc(#loc)
    %20 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc)
    %21 = tt.expand_dims %19 {axis = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked3}>> -> tensor<1x32xi32, #blocked3> loc(#loc)
    %22 = tt.expand_dims %20 {axis = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x32xi32, #blocked1> loc(#loc)
    %23 = tt.splat %stride_b1 : i32 -> tensor<1x32xi32, #blocked3> loc(#loc)
    %24 = arith.muli %21, %23 : tensor<1x32xi32, #blocked3> loc(#loc)
    %25 = tt.broadcast %18 : tensor<128x1x!tt.ptr<i8>, #blocked3> -> tensor<128x32x!tt.ptr<i8>, #blocked3> loc(#loc)
    %26 = tt.broadcast %24 : tensor<1x32xi32, #blocked3> -> tensor<128x32xi32, #blocked3> loc(#loc)
    %27 = tt.addptr %25, %26 : tensor<128x32x!tt.ptr<i8>, #blocked3>, tensor<128x32xi32, #blocked3> loc(#loc)
    %28 = tt.load %14 : tensor<32x256x!tt.ptr<bf16>, #blocked2> loc(#loc)
    %29 = ttg.convert_layout %28 : tensor<32x256xbf16, #blocked2> -> tensor<32x256xbf16, #linear1> loc(#loc)
    %30 = tt.reshape %29 : tensor<32x256xbf16, #linear1> -> tensor<32x2x128xbf16, #linear2> loc(#loc)
    %31 = tt.trans %30 {order = array<i32: 0, 2, 1>} : tensor<32x2x128xbf16, #linear2> -> tensor<32x128x2xbf16, #linear3> loc(#loc)
    %outLHS, %outRHS = tt.split %31 : tensor<32x128x2xbf16, #linear3> -> tensor<32x128xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> loc(#loc)
    %32 = tt.load %27 : tensor<128x32x!tt.ptr<i8>, #blocked3> loc(#loc)
    %33 = ttg.convert_layout %32 : tensor<128x32xi8, #blocked3> -> tensor<128x32xi8, #linear4> loc(#loc)
    %34 = tt.reshape %33 : tensor<128x32xi8, #linear4> -> tensor<2x64x32xi8, #linear5> loc(#loc)
    %35 = tt.trans %34 {order = array<i32: 1, 2, 0>} : tensor<2x64x32xi8, #linear5> -> tensor<64x32x2xi8, #linear6> loc(#loc)
    %outLHS_5, %outRHS_6 = tt.split %35 : tensor<64x32x2xi8, #linear6> -> tensor<64x32xi8, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 4}>> loc(#loc)
    %36 = arith.muli %4, %cst : tensor<32x1xi32, #blocked> loc(#loc)
    %37 = tt.splat %b_scale : !tt.ptr<i8> -> tensor<32x1x!tt.ptr<i8>, #blocked> loc(#loc)
    %38 = tt.addptr %37, %36 : tensor<32x1x!tt.ptr<i8>, #blocked>, tensor<32x1xi32, #blocked> loc(#loc)
    %39 = tt.make_range {end = 8 : i32, start = 0 : i32} : tensor<8xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc)
    %40 = tt.expand_dims %39 {axis = 0 : i32} : tensor<8xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x8xi32, #blocked> loc(#loc)
    %41 = tt.broadcast %38 : tensor<32x1x!tt.ptr<i8>, #blocked> -> tensor<32x8x!tt.ptr<i8>, #blocked> loc(#loc)
    %42 = tt.broadcast %40 : tensor<1x8xi32, #blocked> -> tensor<32x8xi32, #blocked> loc(#loc)
    %43 = tt.addptr %41, %42 : tensor<32x8x!tt.ptr<i8>, #blocked>, tensor<32x8xi32, #blocked> loc(#loc)
    %44 = tt.load %43 : tensor<32x8x!tt.ptr<i8>, #blocked> loc(#loc)
    %45 = ttg.convert_layout %44 : tensor<32x8xi8, #blocked> -> tensor<32x8xi8, #linear7> loc(#loc)
    %46 = tt.reshape %45 : tensor<32x8xi8, #linear7> -> tensor<32x2x4xi8, #linear8> loc(#loc)
    %47 = tt.trans %46 {order = array<i32: 0, 2, 1>} : tensor<32x2x4xi8, #linear8> -> tensor<32x4x2xi8, #linear9> loc(#loc)
    %outLHS_7, %outRHS_8 = tt.split %47 : tensor<32x4x2xi8, #linear9> -> tensor<32x4xi8, #linear10> loc(#loc)
    %48 = ttg.fp4_to_fp %outLHS_5 {axis = 0 : i32} : tensor<64x32xi8, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 4}>> -> tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %49 = tt.trans %outLHS_7 {order = array<i32: 1, 0>} : tensor<32x4xi8, #linear10> -> tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %50 = arith.extui %49 : tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> to tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %51 = arith.shli %50, %cst_4 : tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %52 = tt.bitcast %51 : tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> -> tensor<4x32xbf16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %53 = tt.expand_dims %52 {axis = 2 : i32} : tensor<4x32xbf16, #ttg.slice<{dim = 2, parent = #linear}>> -> tensor<4x32x1xbf16, #linear> loc(#loc)
    %54 = tt.broadcast %53 : tensor<4x32x1xbf16, #linear> -> tensor<4x32x32xbf16, #linear> loc(#loc)
    %55 = tt.trans %54 {order = array<i32: 0, 2, 1>} : tensor<4x32x32xbf16, #linear> -> tensor<4x32x32xbf16, #linear11> loc(#loc)
    %56 = tt.reshape %55 : tensor<4x32x32xbf16, #linear11> -> tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %57 = arith.mulf %48, %56 : tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %58 = arith.cmpi eq, %49, %cst_3 : tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %59 = tt.expand_dims %58 {axis = 2 : i32} : tensor<4x32xi1, #ttg.slice<{dim = 2, parent = #linear}>> -> tensor<4x32x1xi1, #linear> loc(#loc)
    %60 = tt.broadcast %59 : tensor<4x32x1xi1, #linear> -> tensor<4x32x32xi1, #linear> loc(#loc)
    %61 = tt.trans %60 {order = array<i32: 0, 2, 1>} : tensor<4x32x32xi1, #linear> -> tensor<4x32x32xi1, #linear11> loc(#loc)
    %62 = tt.reshape %61 : tensor<4x32x32xi1, #linear11> -> tensor<128x32xi1, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %63 = arith.select %62, %cst_2, %57 : tensor<128x32xi1, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>>, tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %64 = tt.dot %outLHS, %63, %cst_1 : tensor<32x128xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> * tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> -> tensor<32x32xf32, #mma> loc(#loc)
    %65 = ttg.fp4_to_fp %outRHS_6 {axis = 0 : i32} : tensor<64x32xi8, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 4}>> -> tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %66 = tt.trans %outRHS_8 {order = array<i32: 1, 0>} : tensor<32x4xi8, #linear10> -> tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %67 = arith.extui %66 : tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> to tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %68 = arith.shli %67, %cst_4 : tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %69 = tt.bitcast %68 : tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> -> tensor<4x32xbf16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %70 = tt.expand_dims %69 {axis = 2 : i32} : tensor<4x32xbf16, #ttg.slice<{dim = 2, parent = #linear}>> -> tensor<4x32x1xbf16, #linear> loc(#loc)
    %71 = tt.broadcast %70 : tensor<4x32x1xbf16, #linear> -> tensor<4x32x32xbf16, #linear> loc(#loc)
    %72 = tt.trans %71 {order = array<i32: 0, 2, 1>} : tensor<4x32x32xbf16, #linear> -> tensor<4x32x32xbf16, #linear11> loc(#loc)
    %73 = tt.reshape %72 : tensor<4x32x32xbf16, #linear11> -> tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %74 = arith.mulf %65, %73 : tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %75 = arith.cmpi eq, %66, %cst_3 : tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %76 = tt.expand_dims %75 {axis = 2 : i32} : tensor<4x32xi1, #ttg.slice<{dim = 2, parent = #linear}>> -> tensor<4x32x1xi1, #linear> loc(#loc)
    %77 = tt.broadcast %76 : tensor<4x32x1xi1, #linear> -> tensor<4x32x32xi1, #linear> loc(#loc)
    %78 = tt.trans %77 {order = array<i32: 0, 2, 1>} : tensor<4x32x32xi1, #linear> -> tensor<4x32x32xi1, #linear11> loc(#loc)
    %79 = tt.reshape %78 : tensor<4x32x32xi1, #linear11> -> tensor<128x32xi1, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %80 = arith.select %79, %cst_2, %74 : tensor<128x32xi1, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>>, tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %81 = tt.dot %outRHS, %80, %cst_1 : tensor<32x128xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> * tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> -> tensor<32x32xf32, #mma> loc(#loc)
    %82 = arith.addf %64, %81 : tensor<32x32xf32, #mma> loc(#loc)
    %83 = arith.muli %5, %cst_0 : tensor<32x1xi32, #blocked1> loc(#loc)
    %84 = tt.splat %out : !tt.ptr<bf16> -> tensor<32x1x!tt.ptr<bf16>, #blocked1> loc(#loc)
    %85 = tt.addptr %84, %83 : tensor<32x1x!tt.ptr<bf16>, #blocked1>, tensor<32x1xi32, #blocked1> loc(#loc)
    %86 = tt.broadcast %85 : tensor<32x1x!tt.ptr<bf16>, #blocked1> -> tensor<32x32x!tt.ptr<bf16>, #blocked1> loc(#loc)
    %87 = tt.broadcast %22 : tensor<1x32xi32, #blocked1> -> tensor<32x32xi32, #blocked1> loc(#loc)
    %88 = tt.addptr %86, %87 : tensor<32x32x!tt.ptr<bf16>, #blocked1>, tensor<32x32xi32, #blocked1> loc(#loc)
    %89 = arith.truncf %82 : tensor<32x32xf32, #mma> to tensor<32x32xbf16, #mma> loc(#loc)
    %90 = ttg.convert_layout %88 : tensor<32x32x!tt.ptr<bf16>, #blocked1> -> tensor<32x32x!tt.ptr<bf16>, #mma> loc(#loc)
    tt.store %90, %89 : tensor<32x32x!tt.ptr<bf16>, #mma> loc(#loc)
    tt.return loc(#loc)
  } loc(#loc)
} loc(#loc)
#loc = loc(unknown)


// -----// IR Dump Before Canonicalizer (canonicalize) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [8, 8], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [1, 4], threadsPerWarp = [8, 8], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked2 = #ttg.blocked<{sizePerThread = [1, 8], threadsPerWarp = [2, 32], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked3 = #ttg.blocked<{sizePerThread = [16, 1], threadsPerWarp = [8, 8], warpsPerCTA = [1, 4], order = [0, 1]}>
#linear = #ttg.linear<{register = [[0, 0, 1], [0, 0, 2], [0, 0, 4], [1, 0, 0], [2, 0, 0]], lane = [[0, 1, 0], [0, 2, 0], [0, 4, 0], [0, 8, 0], [0, 0, 8], [0, 0, 16]], warp = [[0, 16, 0], [0, 0, 0]], block = []}>
#linear1 = #ttg.linear<{register = [[0, 128], [0, 1], [0, 2], [0, 4], [0, 32], [0, 64]], lane = [[1, 0], [2, 0], [4, 0], [8, 0], [0, 8], [0, 16]], warp = [[0, 0], [16, 0]], block = []}>
#linear2 = #ttg.linear<{register = [[0, 1, 0], [0, 0, 1], [0, 0, 2], [0, 0, 4], [0, 0, 32], [0, 0, 64]], lane = [[1, 0, 0], [2, 0, 0], [4, 0, 0], [8, 0, 0], [0, 0, 8], [0, 0, 16]], warp = [[0, 0, 0], [16, 0, 0]], block = []}>
#linear3 = #ttg.linear<{register = [[0, 0, 1], [0, 1, 0], [0, 2, 0], [0, 4, 0], [0, 32, 0], [0, 64, 0]], lane = [[1, 0, 0], [2, 0, 0], [4, 0, 0], [8, 0, 0], [0, 8, 0], [0, 16, 0]], warp = [[0, 0, 0], [16, 0, 0]], block = []}>
#linear4 = #ttg.linear<{register = [[64, 0], [1, 0], [2, 0], [16, 0], [32, 0]], lane = [[0, 1], [0, 2], [0, 4], [0, 8], [4, 0], [8, 0]], warp = [[0, 16], [0, 0]], block = []}>
#linear5 = #ttg.linear<{register = [[1, 0, 0], [0, 1, 0], [0, 2, 0], [0, 16, 0], [0, 32, 0]], lane = [[0, 0, 1], [0, 0, 2], [0, 0, 4], [0, 0, 8], [0, 4, 0], [0, 8, 0]], warp = [[0, 0, 16], [0, 0, 0]], block = []}>
#linear6 = #ttg.linear<{register = [[0, 0, 1], [1, 0, 0], [2, 0, 0], [16, 0, 0], [32, 0, 0]], lane = [[0, 1, 0], [0, 2, 0], [0, 4, 0], [0, 8, 0], [4, 0, 0], [8, 0, 0]], warp = [[0, 16, 0], [0, 0, 0]], block = []}>
#linear7 = #ttg.linear<{register = [[0, 4], [0, 1], [0, 2]], lane = [[1, 0], [2, 0], [4, 0], [8, 0], [0, 0], [0, 0]], warp = [[16, 0], [0, 0]], block = []}>
#linear8 = #ttg.linear<{register = [[0, 1, 0], [0, 0, 1], [0, 0, 2]], lane = [[1, 0, 0], [2, 0, 0], [4, 0, 0], [8, 0, 0], [0, 0, 0], [0, 0, 0]], warp = [[16, 0, 0], [0, 0, 0]], block = []}>
#linear9 = #ttg.linear<{register = [[0, 0, 1], [0, 1, 0], [0, 2, 0]], lane = [[1, 0, 0], [2, 0, 0], [4, 0, 0], [8, 0, 0], [0, 0, 0], [0, 0, 0]], warp = [[16, 0, 0], [0, 0, 0]], block = []}>
#linear10 = #ttg.linear<{register = [[0, 1], [0, 2]], lane = [[1, 0], [2, 0], [4, 0], [8, 0], [0, 0], [0, 0]], warp = [[16, 0], [0, 0]], block = []}>
#linear11 = #ttg.linear<{register = [[0, 1, 0], [0, 2, 0], [0, 4, 0], [1, 0, 0], [2, 0, 0]], lane = [[0, 0, 1], [0, 0, 2], [0, 0, 4], [0, 0, 8], [0, 8, 0], [0, 16, 0]], warp = [[0, 0, 16], [0, 0, 0]], block = []}>
#loc1 = loc("a_base")
#loc2 = loc("stride_a0")
#loc3 = loc("b_base")
#loc4 = loc("stride_b1")
#loc5 = loc("b_scale")
#loc6 = loc("out")
#mma = #ttg.amd_mfma<{version = 4, warpsPerCTA = [2, 2], instrShape = [16, 16], isTransposed = true}>
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "hip:gfx950", "ttg.threads-per-warp" = 64 : i32} {
  tt.func public @dot_scale_kernel(%a_base: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("a_base"), %stride_a0: i32 {tt.divisibility = 16 : i32} loc("stride_a0"), %b_base: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("b_base"), %stride_b1: i32 {tt.divisibility = 16 : i32} loc("stride_b1"), %b_scale: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("b_scale"), %out: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("out")) attributes {noinline = false} {
    %cst = arith.constant dense<8> : tensor<32x1xi32, #blocked> loc(#loc)
    %cst_0 = arith.constant dense<32> : tensor<32x1xi32, #blocked1> loc(#loc)
    %cst_1 = arith.constant dense<0.000000e+00> : tensor<32x32xf32, #mma> loc(#loc)
    %cst_2 = arith.constant dense<0x7FC0> : tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %cst_3 = arith.constant dense<-1> : tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %cst_4 = arith.constant dense<7> : tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %0 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked2}>> loc(#loc)
    %1 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc)
    %2 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc)
    %3 = tt.expand_dims %0 {axis = 1 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked2}>> -> tensor<32x1xi32, #blocked2> loc(#loc)
    %4 = tt.expand_dims %1 {axis = 1 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<32x1xi32, #blocked> loc(#loc)
    %5 = tt.expand_dims %2 {axis = 1 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> -> tensor<32x1xi32, #blocked1> loc(#loc)
    %6 = tt.splat %stride_a0 : i32 -> tensor<32x1xi32, #blocked2> loc(#loc)
    %7 = arith.muli %3, %6 : tensor<32x1xi32, #blocked2> loc(#loc)
    %8 = tt.splat %a_base : !tt.ptr<bf16> -> tensor<32x1x!tt.ptr<bf16>, #blocked2> loc(#loc)
    %9 = tt.addptr %8, %7 : tensor<32x1x!tt.ptr<bf16>, #blocked2>, tensor<32x1xi32, #blocked2> loc(#loc)
    %10 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #ttg.slice<{dim = 0, parent = #blocked2}>> loc(#loc)
    %11 = tt.expand_dims %10 {axis = 0 : i32} : tensor<256xi32, #ttg.slice<{dim = 0, parent = #blocked2}>> -> tensor<1x256xi32, #blocked2> loc(#loc)
    %12 = tt.broadcast %9 : tensor<32x1x!tt.ptr<bf16>, #blocked2> -> tensor<32x256x!tt.ptr<bf16>, #blocked2> loc(#loc)
    %13 = tt.broadcast %11 : tensor<1x256xi32, #blocked2> -> tensor<32x256xi32, #blocked2> loc(#loc)
    %14 = tt.addptr %12, %13 : tensor<32x256x!tt.ptr<bf16>, #blocked2>, tensor<32x256xi32, #blocked2> loc(#loc)
    %15 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked3}>> loc(#loc)
    %16 = tt.expand_dims %15 {axis = 1 : i32} : tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked3}>> -> tensor<128x1xi32, #blocked3> loc(#loc)
    %17 = tt.splat %b_base : !tt.ptr<i8> -> tensor<128x1x!tt.ptr<i8>, #blocked3> loc(#loc)
    %18 = tt.addptr %17, %16 : tensor<128x1x!tt.ptr<i8>, #blocked3>, tensor<128x1xi32, #blocked3> loc(#loc)
    %19 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked3}>> loc(#loc)
    %20 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc)
    %21 = tt.expand_dims %19 {axis = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked3}>> -> tensor<1x32xi32, #blocked3> loc(#loc)
    %22 = tt.expand_dims %20 {axis = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x32xi32, #blocked1> loc(#loc)
    %23 = tt.splat %stride_b1 : i32 -> tensor<1x32xi32, #blocked3> loc(#loc)
    %24 = arith.muli %21, %23 : tensor<1x32xi32, #blocked3> loc(#loc)
    %25 = tt.broadcast %18 : tensor<128x1x!tt.ptr<i8>, #blocked3> -> tensor<128x32x!tt.ptr<i8>, #blocked3> loc(#loc)
    %26 = tt.broadcast %24 : tensor<1x32xi32, #blocked3> -> tensor<128x32xi32, #blocked3> loc(#loc)
    %27 = tt.addptr %25, %26 : tensor<128x32x!tt.ptr<i8>, #blocked3>, tensor<128x32xi32, #blocked3> loc(#loc)
    %28 = tt.load %14 : tensor<32x256x!tt.ptr<bf16>, #blocked2> loc(#loc)
    %29 = ttg.convert_layout %28 : tensor<32x256xbf16, #blocked2> -> tensor<32x256xbf16, #linear1> loc(#loc)
    %30 = tt.reshape %29 : tensor<32x256xbf16, #linear1> -> tensor<32x2x128xbf16, #linear2> loc(#loc)
    %31 = tt.trans %30 {order = array<i32: 0, 2, 1>} : tensor<32x2x128xbf16, #linear2> -> tensor<32x128x2xbf16, #linear3> loc(#loc)
    %outLHS, %outRHS = tt.split %31 : tensor<32x128x2xbf16, #linear3> -> tensor<32x128xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> loc(#loc)
    %32 = tt.load %27 : tensor<128x32x!tt.ptr<i8>, #blocked3> loc(#loc)
    %33 = ttg.convert_layout %32 : tensor<128x32xi8, #blocked3> -> tensor<128x32xi8, #linear4> loc(#loc)
    %34 = tt.reshape %33 : tensor<128x32xi8, #linear4> -> tensor<2x64x32xi8, #linear5> loc(#loc)
    %35 = tt.trans %34 {order = array<i32: 1, 2, 0>} : tensor<2x64x32xi8, #linear5> -> tensor<64x32x2xi8, #linear6> loc(#loc)
    %outLHS_5, %outRHS_6 = tt.split %35 : tensor<64x32x2xi8, #linear6> -> tensor<64x32xi8, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 4}>> loc(#loc)
    %36 = arith.muli %4, %cst : tensor<32x1xi32, #blocked> loc(#loc)
    %37 = tt.splat %b_scale : !tt.ptr<i8> -> tensor<32x1x!tt.ptr<i8>, #blocked> loc(#loc)
    %38 = tt.addptr %37, %36 : tensor<32x1x!tt.ptr<i8>, #blocked>, tensor<32x1xi32, #blocked> loc(#loc)
    %39 = tt.make_range {end = 8 : i32, start = 0 : i32} : tensor<8xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc)
    %40 = tt.expand_dims %39 {axis = 0 : i32} : tensor<8xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x8xi32, #blocked> loc(#loc)
    %41 = tt.broadcast %38 : tensor<32x1x!tt.ptr<i8>, #blocked> -> tensor<32x8x!tt.ptr<i8>, #blocked> loc(#loc)
    %42 = tt.broadcast %40 : tensor<1x8xi32, #blocked> -> tensor<32x8xi32, #blocked> loc(#loc)
    %43 = tt.addptr %41, %42 : tensor<32x8x!tt.ptr<i8>, #blocked>, tensor<32x8xi32, #blocked> loc(#loc)
    %44 = tt.load %43 : tensor<32x8x!tt.ptr<i8>, #blocked> loc(#loc)
    %45 = ttg.convert_layout %44 : tensor<32x8xi8, #blocked> -> tensor<32x8xi8, #linear7> loc(#loc)
    %46 = tt.reshape %45 : tensor<32x8xi8, #linear7> -> tensor<32x2x4xi8, #linear8> loc(#loc)
    %47 = tt.trans %46 {order = array<i32: 0, 2, 1>} : tensor<32x2x4xi8, #linear8> -> tensor<32x4x2xi8, #linear9> loc(#loc)
    %outLHS_7, %outRHS_8 = tt.split %47 : tensor<32x4x2xi8, #linear9> -> tensor<32x4xi8, #linear10> loc(#loc)
    %48 = ttg.fp4_to_fp %outLHS_5 {axis = 0 : i32} : tensor<64x32xi8, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 4}>> -> tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %49 = tt.trans %outLHS_7 {order = array<i32: 1, 0>} : tensor<32x4xi8, #linear10> -> tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %50 = arith.extui %49 : tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> to tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %51 = arith.shli %50, %cst_4 : tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %52 = tt.bitcast %51 : tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> -> tensor<4x32xbf16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %53 = tt.expand_dims %52 {axis = 2 : i32} : tensor<4x32xbf16, #ttg.slice<{dim = 2, parent = #linear}>> -> tensor<4x32x1xbf16, #linear> loc(#loc)
    %54 = tt.broadcast %53 : tensor<4x32x1xbf16, #linear> -> tensor<4x32x32xbf16, #linear> loc(#loc)
    %55 = tt.trans %54 {order = array<i32: 0, 2, 1>} : tensor<4x32x32xbf16, #linear> -> tensor<4x32x32xbf16, #linear11> loc(#loc)
    %56 = tt.reshape %55 : tensor<4x32x32xbf16, #linear11> -> tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %57 = arith.mulf %48, %56 : tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %58 = arith.cmpi eq, %49, %cst_3 : tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %59 = tt.expand_dims %58 {axis = 2 : i32} : tensor<4x32xi1, #ttg.slice<{dim = 2, parent = #linear}>> -> tensor<4x32x1xi1, #linear> loc(#loc)
    %60 = tt.broadcast %59 : tensor<4x32x1xi1, #linear> -> tensor<4x32x32xi1, #linear> loc(#loc)
    %61 = tt.trans %60 {order = array<i32: 0, 2, 1>} : tensor<4x32x32xi1, #linear> -> tensor<4x32x32xi1, #linear11> loc(#loc)
    %62 = tt.reshape %61 : tensor<4x32x32xi1, #linear11> -> tensor<128x32xi1, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %63 = arith.select %62, %cst_2, %57 : tensor<128x32xi1, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>>, tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %64 = tt.dot %outLHS, %63, %cst_1 : tensor<32x128xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> * tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> -> tensor<32x32xf32, #mma> loc(#loc)
    %65 = ttg.fp4_to_fp %outRHS_6 {axis = 0 : i32} : tensor<64x32xi8, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 4}>> -> tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %66 = tt.trans %outRHS_8 {order = array<i32: 1, 0>} : tensor<32x4xi8, #linear10> -> tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %67 = arith.extui %66 : tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> to tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %68 = arith.shli %67, %cst_4 : tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %69 = tt.bitcast %68 : tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> -> tensor<4x32xbf16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %70 = tt.expand_dims %69 {axis = 2 : i32} : tensor<4x32xbf16, #ttg.slice<{dim = 2, parent = #linear}>> -> tensor<4x32x1xbf16, #linear> loc(#loc)
    %71 = tt.broadcast %70 : tensor<4x32x1xbf16, #linear> -> tensor<4x32x32xbf16, #linear> loc(#loc)
    %72 = tt.trans %71 {order = array<i32: 0, 2, 1>} : tensor<4x32x32xbf16, #linear> -> tensor<4x32x32xbf16, #linear11> loc(#loc)
    %73 = tt.reshape %72 : tensor<4x32x32xbf16, #linear11> -> tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %74 = arith.mulf %65, %73 : tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %75 = arith.cmpi eq, %66, %cst_3 : tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %76 = tt.expand_dims %75 {axis = 2 : i32} : tensor<4x32xi1, #ttg.slice<{dim = 2, parent = #linear}>> -> tensor<4x32x1xi1, #linear> loc(#loc)
    %77 = tt.broadcast %76 : tensor<4x32x1xi1, #linear> -> tensor<4x32x32xi1, #linear> loc(#loc)
    %78 = tt.trans %77 {order = array<i32: 0, 2, 1>} : tensor<4x32x32xi1, #linear> -> tensor<4x32x32xi1, #linear11> loc(#loc)
    %79 = tt.reshape %78 : tensor<4x32x32xi1, #linear11> -> tensor<128x32xi1, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %80 = arith.select %79, %cst_2, %74 : tensor<128x32xi1, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>>, tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %81 = tt.dot %outRHS, %80, %cst_1 : tensor<32x128xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> * tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> -> tensor<32x32xf32, #mma> loc(#loc)
    %82 = arith.addf %64, %81 : tensor<32x32xf32, #mma> loc(#loc)
    %83 = arith.muli %5, %cst_0 : tensor<32x1xi32, #blocked1> loc(#loc)
    %84 = tt.splat %out : !tt.ptr<bf16> -> tensor<32x1x!tt.ptr<bf16>, #blocked1> loc(#loc)
    %85 = tt.addptr %84, %83 : tensor<32x1x!tt.ptr<bf16>, #blocked1>, tensor<32x1xi32, #blocked1> loc(#loc)
    %86 = tt.broadcast %85 : tensor<32x1x!tt.ptr<bf16>, #blocked1> -> tensor<32x32x!tt.ptr<bf16>, #blocked1> loc(#loc)
    %87 = tt.broadcast %22 : tensor<1x32xi32, #blocked1> -> tensor<32x32xi32, #blocked1> loc(#loc)
    %88 = tt.addptr %86, %87 : tensor<32x32x!tt.ptr<bf16>, #blocked1>, tensor<32x32xi32, #blocked1> loc(#loc)
    %89 = arith.truncf %82 : tensor<32x32xf32, #mma> to tensor<32x32xbf16, #mma> loc(#loc)
    %90 = ttg.convert_layout %88 : tensor<32x32x!tt.ptr<bf16>, #blocked1> -> tensor<32x32x!tt.ptr<bf16>, #mma> loc(#loc)
    tt.store %90, %89 : tensor<32x32x!tt.ptr<bf16>, #mma> loc(#loc)
    tt.return loc(#loc)
  } loc(#loc)
} loc(#loc)
#loc = loc(unknown)


// -----// IR Dump Before TritonGPURemoveLayoutConversions (tritongpu-remove-layout-conversions) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [8, 8], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [1, 4], threadsPerWarp = [8, 8], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked2 = #ttg.blocked<{sizePerThread = [1, 8], threadsPerWarp = [2, 32], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked3 = #ttg.blocked<{sizePerThread = [16, 1], threadsPerWarp = [8, 8], warpsPerCTA = [1, 4], order = [0, 1]}>
#linear = #ttg.linear<{register = [[0, 0, 1], [0, 0, 2], [0, 0, 4], [1, 0, 0], [2, 0, 0]], lane = [[0, 1, 0], [0, 2, 0], [0, 4, 0], [0, 8, 0], [0, 0, 8], [0, 0, 16]], warp = [[0, 16, 0], [0, 0, 0]], block = []}>
#linear1 = #ttg.linear<{register = [[0, 128], [0, 1], [0, 2], [0, 4], [0, 32], [0, 64]], lane = [[1, 0], [2, 0], [4, 0], [8, 0], [0, 8], [0, 16]], warp = [[0, 0], [16, 0]], block = []}>
#linear2 = #ttg.linear<{register = [[0, 1, 0], [0, 0, 1], [0, 0, 2], [0, 0, 4], [0, 0, 32], [0, 0, 64]], lane = [[1, 0, 0], [2, 0, 0], [4, 0, 0], [8, 0, 0], [0, 0, 8], [0, 0, 16]], warp = [[0, 0, 0], [16, 0, 0]], block = []}>
#linear3 = #ttg.linear<{register = [[0, 0, 1], [0, 1, 0], [0, 2, 0], [0, 4, 0], [0, 32, 0], [0, 64, 0]], lane = [[1, 0, 0], [2, 0, 0], [4, 0, 0], [8, 0, 0], [0, 8, 0], [0, 16, 0]], warp = [[0, 0, 0], [16, 0, 0]], block = []}>
#linear4 = #ttg.linear<{register = [[64, 0], [1, 0], [2, 0], [16, 0], [32, 0]], lane = [[0, 1], [0, 2], [0, 4], [0, 8], [4, 0], [8, 0]], warp = [[0, 16], [0, 0]], block = []}>
#linear5 = #ttg.linear<{register = [[1, 0, 0], [0, 1, 0], [0, 2, 0], [0, 16, 0], [0, 32, 0]], lane = [[0, 0, 1], [0, 0, 2], [0, 0, 4], [0, 0, 8], [0, 4, 0], [0, 8, 0]], warp = [[0, 0, 16], [0, 0, 0]], block = []}>
#linear6 = #ttg.linear<{register = [[0, 0, 1], [1, 0, 0], [2, 0, 0], [16, 0, 0], [32, 0, 0]], lane = [[0, 1, 0], [0, 2, 0], [0, 4, 0], [0, 8, 0], [4, 0, 0], [8, 0, 0]], warp = [[0, 16, 0], [0, 0, 0]], block = []}>
#linear7 = #ttg.linear<{register = [[0, 4], [0, 1], [0, 2]], lane = [[1, 0], [2, 0], [4, 0], [8, 0], [0, 0], [0, 0]], warp = [[16, 0], [0, 0]], block = []}>
#linear8 = #ttg.linear<{register = [[0, 1, 0], [0, 0, 1], [0, 0, 2]], lane = [[1, 0, 0], [2, 0, 0], [4, 0, 0], [8, 0, 0], [0, 0, 0], [0, 0, 0]], warp = [[16, 0, 0], [0, 0, 0]], block = []}>
#linear9 = #ttg.linear<{register = [[0, 0, 1], [0, 1, 0], [0, 2, 0]], lane = [[1, 0, 0], [2, 0, 0], [4, 0, 0], [8, 0, 0], [0, 0, 0], [0, 0, 0]], warp = [[16, 0, 0], [0, 0, 0]], block = []}>
#linear10 = #ttg.linear<{register = [[0, 1], [0, 2]], lane = [[1, 0], [2, 0], [4, 0], [8, 0], [0, 0], [0, 0]], warp = [[16, 0], [0, 0]], block = []}>
#linear11 = #ttg.linear<{register = [[0, 1, 0], [0, 2, 0], [0, 4, 0], [1, 0, 0], [2, 0, 0]], lane = [[0, 0, 1], [0, 0, 2], [0, 0, 4], [0, 0, 8], [0, 8, 0], [0, 16, 0]], warp = [[0, 0, 16], [0, 0, 0]], block = []}>
#loc1 = loc("a_base")
#loc2 = loc("stride_a0")
#loc3 = loc("b_base")
#loc4 = loc("stride_b1")
#loc5 = loc("b_scale")
#loc6 = loc("out")
#mma = #ttg.amd_mfma<{version = 4, warpsPerCTA = [2, 2], instrShape = [16, 16], isTransposed = true}>
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "hip:gfx950", "ttg.threads-per-warp" = 64 : i32} {
  tt.func public @dot_scale_kernel(%a_base: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("a_base"), %stride_a0: i32 {tt.divisibility = 16 : i32} loc("stride_a0"), %b_base: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("b_base"), %stride_b1: i32 {tt.divisibility = 16 : i32} loc("stride_b1"), %b_scale: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("b_scale"), %out: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("out")) attributes {noinline = false} {
    %cst = arith.constant dense<8> : tensor<32x1xi32, #blocked> loc(#loc)
    %cst_0 = arith.constant dense<32> : tensor<32x1xi32, #blocked1> loc(#loc)
    %cst_1 = arith.constant dense<0.000000e+00> : tensor<32x32xf32, #mma> loc(#loc)
    %cst_2 = arith.constant dense<0x7FC0> : tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %cst_3 = arith.constant dense<-1> : tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %cst_4 = arith.constant dense<7> : tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %0 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked2}>> loc(#loc)
    %1 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc)
    %2 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc)
    %3 = tt.expand_dims %0 {axis = 1 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked2}>> -> tensor<32x1xi32, #blocked2> loc(#loc)
    %4 = tt.expand_dims %1 {axis = 1 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<32x1xi32, #blocked> loc(#loc)
    %5 = tt.expand_dims %2 {axis = 1 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> -> tensor<32x1xi32, #blocked1> loc(#loc)
    %6 = tt.splat %stride_a0 : i32 -> tensor<32x1xi32, #blocked2> loc(#loc)
    %7 = arith.muli %3, %6 : tensor<32x1xi32, #blocked2> loc(#loc)
    %8 = tt.splat %a_base : !tt.ptr<bf16> -> tensor<32x1x!tt.ptr<bf16>, #blocked2> loc(#loc)
    %9 = tt.addptr %8, %7 : tensor<32x1x!tt.ptr<bf16>, #blocked2>, tensor<32x1xi32, #blocked2> loc(#loc)
    %10 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #ttg.slice<{dim = 0, parent = #blocked2}>> loc(#loc)
    %11 = tt.expand_dims %10 {axis = 0 : i32} : tensor<256xi32, #ttg.slice<{dim = 0, parent = #blocked2}>> -> tensor<1x256xi32, #blocked2> loc(#loc)
    %12 = tt.broadcast %9 : tensor<32x1x!tt.ptr<bf16>, #blocked2> -> tensor<32x256x!tt.ptr<bf16>, #blocked2> loc(#loc)
    %13 = tt.broadcast %11 : tensor<1x256xi32, #blocked2> -> tensor<32x256xi32, #blocked2> loc(#loc)
    %14 = tt.addptr %12, %13 : tensor<32x256x!tt.ptr<bf16>, #blocked2>, tensor<32x256xi32, #blocked2> loc(#loc)
    %15 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked3}>> loc(#loc)
    %16 = tt.expand_dims %15 {axis = 1 : i32} : tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked3}>> -> tensor<128x1xi32, #blocked3> loc(#loc)
    %17 = tt.splat %b_base : !tt.ptr<i8> -> tensor<128x1x!tt.ptr<i8>, #blocked3> loc(#loc)
    %18 = tt.addptr %17, %16 : tensor<128x1x!tt.ptr<i8>, #blocked3>, tensor<128x1xi32, #blocked3> loc(#loc)
    %19 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked3}>> loc(#loc)
    %20 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc)
    %21 = tt.expand_dims %19 {axis = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked3}>> -> tensor<1x32xi32, #blocked3> loc(#loc)
    %22 = tt.expand_dims %20 {axis = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x32xi32, #blocked1> loc(#loc)
    %23 = tt.splat %stride_b1 : i32 -> tensor<1x32xi32, #blocked3> loc(#loc)
    %24 = arith.muli %21, %23 : tensor<1x32xi32, #blocked3> loc(#loc)
    %25 = tt.broadcast %18 : tensor<128x1x!tt.ptr<i8>, #blocked3> -> tensor<128x32x!tt.ptr<i8>, #blocked3> loc(#loc)
    %26 = tt.broadcast %24 : tensor<1x32xi32, #blocked3> -> tensor<128x32xi32, #blocked3> loc(#loc)
    %27 = tt.addptr %25, %26 : tensor<128x32x!tt.ptr<i8>, #blocked3>, tensor<128x32xi32, #blocked3> loc(#loc)
    %28 = tt.load %14 : tensor<32x256x!tt.ptr<bf16>, #blocked2> loc(#loc)
    %29 = ttg.convert_layout %28 : tensor<32x256xbf16, #blocked2> -> tensor<32x256xbf16, #linear1> loc(#loc)
    %30 = tt.reshape %29 : tensor<32x256xbf16, #linear1> -> tensor<32x2x128xbf16, #linear2> loc(#loc)
    %31 = tt.trans %30 {order = array<i32: 0, 2, 1>} : tensor<32x2x128xbf16, #linear2> -> tensor<32x128x2xbf16, #linear3> loc(#loc)
    %outLHS, %outRHS = tt.split %31 : tensor<32x128x2xbf16, #linear3> -> tensor<32x128xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> loc(#loc)
    %32 = tt.load %27 : tensor<128x32x!tt.ptr<i8>, #blocked3> loc(#loc)
    %33 = ttg.convert_layout %32 : tensor<128x32xi8, #blocked3> -> tensor<128x32xi8, #linear4> loc(#loc)
    %34 = tt.reshape %33 : tensor<128x32xi8, #linear4> -> tensor<2x64x32xi8, #linear5> loc(#loc)
    %35 = tt.trans %34 {order = array<i32: 1, 2, 0>} : tensor<2x64x32xi8, #linear5> -> tensor<64x32x2xi8, #linear6> loc(#loc)
    %outLHS_5, %outRHS_6 = tt.split %35 : tensor<64x32x2xi8, #linear6> -> tensor<64x32xi8, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 4}>> loc(#loc)
    %36 = arith.muli %4, %cst : tensor<32x1xi32, #blocked> loc(#loc)
    %37 = tt.splat %b_scale : !tt.ptr<i8> -> tensor<32x1x!tt.ptr<i8>, #blocked> loc(#loc)
    %38 = tt.addptr %37, %36 : tensor<32x1x!tt.ptr<i8>, #blocked>, tensor<32x1xi32, #blocked> loc(#loc)
    %39 = tt.make_range {end = 8 : i32, start = 0 : i32} : tensor<8xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc)
    %40 = tt.expand_dims %39 {axis = 0 : i32} : tensor<8xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x8xi32, #blocked> loc(#loc)
    %41 = tt.broadcast %38 : tensor<32x1x!tt.ptr<i8>, #blocked> -> tensor<32x8x!tt.ptr<i8>, #blocked> loc(#loc)
    %42 = tt.broadcast %40 : tensor<1x8xi32, #blocked> -> tensor<32x8xi32, #blocked> loc(#loc)
    %43 = tt.addptr %41, %42 : tensor<32x8x!tt.ptr<i8>, #blocked>, tensor<32x8xi32, #blocked> loc(#loc)
    %44 = tt.load %43 : tensor<32x8x!tt.ptr<i8>, #blocked> loc(#loc)
    %45 = ttg.convert_layout %44 : tensor<32x8xi8, #blocked> -> tensor<32x8xi8, #linear7> loc(#loc)
    %46 = tt.reshape %45 : tensor<32x8xi8, #linear7> -> tensor<32x2x4xi8, #linear8> loc(#loc)
    %47 = tt.trans %46 {order = array<i32: 0, 2, 1>} : tensor<32x2x4xi8, #linear8> -> tensor<32x4x2xi8, #linear9> loc(#loc)
    %outLHS_7, %outRHS_8 = tt.split %47 : tensor<32x4x2xi8, #linear9> -> tensor<32x4xi8, #linear10> loc(#loc)
    %48 = ttg.fp4_to_fp %outLHS_5 {axis = 0 : i32} : tensor<64x32xi8, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 4}>> -> tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %49 = tt.trans %outLHS_7 {order = array<i32: 1, 0>} : tensor<32x4xi8, #linear10> -> tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %50 = arith.extui %49 : tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> to tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %51 = arith.shli %50, %cst_4 : tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %52 = tt.bitcast %51 : tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> -> tensor<4x32xbf16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %53 = tt.expand_dims %52 {axis = 2 : i32} : tensor<4x32xbf16, #ttg.slice<{dim = 2, parent = #linear}>> -> tensor<4x32x1xbf16, #linear> loc(#loc)
    %54 = tt.broadcast %53 : tensor<4x32x1xbf16, #linear> -> tensor<4x32x32xbf16, #linear> loc(#loc)
    %55 = tt.trans %54 {order = array<i32: 0, 2, 1>} : tensor<4x32x32xbf16, #linear> -> tensor<4x32x32xbf16, #linear11> loc(#loc)
    %56 = tt.reshape %55 : tensor<4x32x32xbf16, #linear11> -> tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %57 = arith.mulf %48, %56 : tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %58 = arith.cmpi eq, %49, %cst_3 : tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %59 = tt.expand_dims %58 {axis = 2 : i32} : tensor<4x32xi1, #ttg.slice<{dim = 2, parent = #linear}>> -> tensor<4x32x1xi1, #linear> loc(#loc)
    %60 = tt.broadcast %59 : tensor<4x32x1xi1, #linear> -> tensor<4x32x32xi1, #linear> loc(#loc)
    %61 = tt.trans %60 {order = array<i32: 0, 2, 1>} : tensor<4x32x32xi1, #linear> -> tensor<4x32x32xi1, #linear11> loc(#loc)
    %62 = tt.reshape %61 : tensor<4x32x32xi1, #linear11> -> tensor<128x32xi1, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %63 = arith.select %62, %cst_2, %57 : tensor<128x32xi1, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>>, tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %64 = tt.dot %outLHS, %63, %cst_1 : tensor<32x128xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> * tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> -> tensor<32x32xf32, #mma> loc(#loc)
    %65 = ttg.fp4_to_fp %outRHS_6 {axis = 0 : i32} : tensor<64x32xi8, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 4}>> -> tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %66 = tt.trans %outRHS_8 {order = array<i32: 1, 0>} : tensor<32x4xi8, #linear10> -> tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %67 = arith.extui %66 : tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> to tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %68 = arith.shli %67, %cst_4 : tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %69 = tt.bitcast %68 : tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> -> tensor<4x32xbf16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %70 = tt.expand_dims %69 {axis = 2 : i32} : tensor<4x32xbf16, #ttg.slice<{dim = 2, parent = #linear}>> -> tensor<4x32x1xbf16, #linear> loc(#loc)
    %71 = tt.broadcast %70 : tensor<4x32x1xbf16, #linear> -> tensor<4x32x32xbf16, #linear> loc(#loc)
    %72 = tt.trans %71 {order = array<i32: 0, 2, 1>} : tensor<4x32x32xbf16, #linear> -> tensor<4x32x32xbf16, #linear11> loc(#loc)
    %73 = tt.reshape %72 : tensor<4x32x32xbf16, #linear11> -> tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %74 = arith.mulf %65, %73 : tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %75 = arith.cmpi eq, %66, %cst_3 : tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %76 = tt.expand_dims %75 {axis = 2 : i32} : tensor<4x32xi1, #ttg.slice<{dim = 2, parent = #linear}>> -> tensor<4x32x1xi1, #linear> loc(#loc)
    %77 = tt.broadcast %76 : tensor<4x32x1xi1, #linear> -> tensor<4x32x32xi1, #linear> loc(#loc)
    %78 = tt.trans %77 {order = array<i32: 0, 2, 1>} : tensor<4x32x32xi1, #linear> -> tensor<4x32x32xi1, #linear11> loc(#loc)
    %79 = tt.reshape %78 : tensor<4x32x32xi1, #linear11> -> tensor<128x32xi1, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %80 = arith.select %79, %cst_2, %74 : tensor<128x32xi1, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>>, tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %81 = tt.dot %outRHS, %80, %cst_1 : tensor<32x128xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> * tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> -> tensor<32x32xf32, #mma> loc(#loc)
    %82 = arith.addf %64, %81 : tensor<32x32xf32, #mma> loc(#loc)
    %83 = arith.muli %5, %cst_0 : tensor<32x1xi32, #blocked1> loc(#loc)
    %84 = tt.splat %out : !tt.ptr<bf16> -> tensor<32x1x!tt.ptr<bf16>, #blocked1> loc(#loc)
    %85 = tt.addptr %84, %83 : tensor<32x1x!tt.ptr<bf16>, #blocked1>, tensor<32x1xi32, #blocked1> loc(#loc)
    %86 = tt.broadcast %85 : tensor<32x1x!tt.ptr<bf16>, #blocked1> -> tensor<32x32x!tt.ptr<bf16>, #blocked1> loc(#loc)
    %87 = tt.broadcast %22 : tensor<1x32xi32, #blocked1> -> tensor<32x32xi32, #blocked1> loc(#loc)
    %88 = tt.addptr %86, %87 : tensor<32x32x!tt.ptr<bf16>, #blocked1>, tensor<32x32xi32, #blocked1> loc(#loc)
    %89 = arith.truncf %82 : tensor<32x32xf32, #mma> to tensor<32x32xbf16, #mma> loc(#loc)
    %90 = ttg.convert_layout %88 : tensor<32x32x!tt.ptr<bf16>, #blocked1> -> tensor<32x32x!tt.ptr<bf16>, #mma> loc(#loc)
    tt.store %90, %89 : tensor<32x32x!tt.ptr<bf16>, #mma> loc(#loc)
    tt.return loc(#loc)
  } loc(#loc)
} loc(#loc)
#loc = loc(unknown)


// -----// IR Dump Before TritonGPUReduceDataDuplication (tritongpu-reduce-data-duplication) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [8, 8], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [1, 8], threadsPerWarp = [2, 32], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked2 = #ttg.blocked<{sizePerThread = [16, 1], threadsPerWarp = [8, 8], warpsPerCTA = [1, 4], order = [0, 1]}>
#linear = #ttg.linear<{register = [[0, 0, 1], [0, 0, 2], [0, 0, 4], [1, 0, 0], [2, 0, 0]], lane = [[0, 1, 0], [0, 2, 0], [0, 4, 0], [0, 8, 0], [0, 0, 8], [0, 0, 16]], warp = [[0, 16, 0], [0, 0, 0]], block = []}>
#linear1 = #ttg.linear<{register = [[0, 128], [0, 1], [0, 2], [0, 4], [0, 32], [0, 64]], lane = [[1, 0], [2, 0], [4, 0], [8, 0], [0, 8], [0, 16]], warp = [[0, 0], [16, 0]], block = []}>
#linear2 = #ttg.linear<{register = [[0, 1, 0], [0, 0, 1], [0, 0, 2], [0, 0, 4], [0, 0, 32], [0, 0, 64]], lane = [[1, 0, 0], [2, 0, 0], [4, 0, 0], [8, 0, 0], [0, 0, 8], [0, 0, 16]], warp = [[0, 0, 0], [16, 0, 0]], block = []}>
#linear3 = #ttg.linear<{register = [[0, 0, 1], [0, 1, 0], [0, 2, 0], [0, 4, 0], [0, 32, 0], [0, 64, 0]], lane = [[1, 0, 0], [2, 0, 0], [4, 0, 0], [8, 0, 0], [0, 8, 0], [0, 16, 0]], warp = [[0, 0, 0], [16, 0, 0]], block = []}>
#linear4 = #ttg.linear<{register = [[64, 0], [1, 0], [2, 0], [16, 0], [32, 0]], lane = [[0, 1], [0, 2], [0, 4], [0, 8], [4, 0], [8, 0]], warp = [[0, 16], [0, 0]], block = []}>
#linear5 = #ttg.linear<{register = [[1, 0, 0], [0, 1, 0], [0, 2, 0], [0, 16, 0], [0, 32, 0]], lane = [[0, 0, 1], [0, 0, 2], [0, 0, 4], [0, 0, 8], [0, 4, 0], [0, 8, 0]], warp = [[0, 0, 16], [0, 0, 0]], block = []}>
#linear6 = #ttg.linear<{register = [[0, 0, 1], [1, 0, 0], [2, 0, 0], [16, 0, 0], [32, 0, 0]], lane = [[0, 1, 0], [0, 2, 0], [0, 4, 0], [0, 8, 0], [4, 0, 0], [8, 0, 0]], warp = [[0, 16, 0], [0, 0, 0]], block = []}>
#linear7 = #ttg.linear<{register = [[0, 4], [0, 1], [0, 2]], lane = [[1, 0], [2, 0], [4, 0], [8, 0], [0, 0], [0, 0]], warp = [[16, 0], [0, 0]], block = []}>
#linear8 = #ttg.linear<{register = [[0, 1, 0], [0, 0, 1], [0, 0, 2]], lane = [[1, 0, 0], [2, 0, 0], [4, 0, 0], [8, 0, 0], [0, 0, 0], [0, 0, 0]], warp = [[16, 0, 0], [0, 0, 0]], block = []}>
#linear9 = #ttg.linear<{register = [[0, 0, 1], [0, 1, 0], [0, 2, 0]], lane = [[1, 0, 0], [2, 0, 0], [4, 0, 0], [8, 0, 0], [0, 0, 0], [0, 0, 0]], warp = [[16, 0, 0], [0, 0, 0]], block = []}>
#linear10 = #ttg.linear<{register = [[0, 1], [0, 2]], lane = [[1, 0], [2, 0], [4, 0], [8, 0], [0, 0], [0, 0]], warp = [[16, 0], [0, 0]], block = []}>
#linear11 = #ttg.linear<{register = [[0, 1, 0], [0, 2, 0], [0, 4, 0], [1, 0, 0], [2, 0, 0]], lane = [[0, 0, 1], [0, 0, 2], [0, 0, 4], [0, 0, 8], [0, 8, 0], [0, 16, 0]], warp = [[0, 0, 16], [0, 0, 0]], block = []}>
#loc1 = loc("a_base")
#loc2 = loc("stride_a0")
#loc3 = loc("b_base")
#loc4 = loc("stride_b1")
#loc5 = loc("b_scale")
#loc6 = loc("out")
#mma = #ttg.amd_mfma<{version = 4, warpsPerCTA = [2, 2], instrShape = [16, 16], isTransposed = true}>
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "hip:gfx950", "ttg.threads-per-warp" = 64 : i32} {
  tt.func public @dot_scale_kernel(%a_base: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("a_base"), %stride_a0: i32 {tt.divisibility = 16 : i32} loc("stride_a0"), %b_base: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("b_base"), %stride_b1: i32 {tt.divisibility = 16 : i32} loc("stride_b1"), %b_scale: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("b_scale"), %out: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("out")) attributes {noinline = false} {
    %cst = arith.constant dense<7> : tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %cst_0 = arith.constant dense<-1> : tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %cst_1 = arith.constant dense<0x7FC0> : tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %cst_2 = arith.constant dense<0.000000e+00> : tensor<32x32xf32, #mma> loc(#loc)
    %cst_3 = arith.constant dense<8> : tensor<32x1xi32, #blocked> loc(#loc)
    %cst_4 = arith.constant dense<32> : tensor<32x1xi32, #mma> loc(#loc)
    %0 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc)
    %1 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc)
    %2 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc)
    %3 = tt.expand_dims %0 {axis = 1 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> -> tensor<32x1xi32, #blocked1> loc(#loc)
    %4 = tt.expand_dims %1 {axis = 1 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<32x1xi32, #blocked> loc(#loc)
    %5 = tt.expand_dims %2 {axis = 1 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #mma}>> -> tensor<32x1xi32, #mma> loc(#loc)
    %6 = tt.splat %stride_a0 : i32 -> tensor<32x1xi32, #blocked1> loc(#loc)
    %7 = arith.muli %3, %6 : tensor<32x1xi32, #blocked1> loc(#loc)
    %8 = tt.splat %a_base : !tt.ptr<bf16> -> tensor<32x1x!tt.ptr<bf16>, #blocked1> loc(#loc)
    %9 = tt.addptr %8, %7 : tensor<32x1x!tt.ptr<bf16>, #blocked1>, tensor<32x1xi32, #blocked1> loc(#loc)
    %10 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc)
    %11 = tt.expand_dims %10 {axis = 0 : i32} : tensor<256xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x256xi32, #blocked1> loc(#loc)
    %12 = tt.broadcast %9 : tensor<32x1x!tt.ptr<bf16>, #blocked1> -> tensor<32x256x!tt.ptr<bf16>, #blocked1> loc(#loc)
    %13 = tt.broadcast %11 : tensor<1x256xi32, #blocked1> -> tensor<32x256xi32, #blocked1> loc(#loc)
    %14 = tt.addptr %12, %13 : tensor<32x256x!tt.ptr<bf16>, #blocked1>, tensor<32x256xi32, #blocked1> loc(#loc)
    %15 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked2}>> loc(#loc)
    %16 = tt.expand_dims %15 {axis = 1 : i32} : tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked2}>> -> tensor<128x1xi32, #blocked2> loc(#loc)
    %17 = tt.splat %b_base : !tt.ptr<i8> -> tensor<128x1x!tt.ptr<i8>, #blocked2> loc(#loc)
    %18 = tt.addptr %17, %16 : tensor<128x1x!tt.ptr<i8>, #blocked2>, tensor<128x1xi32, #blocked2> loc(#loc)
    %19 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked2}>> loc(#loc)
    %20 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #mma}>> loc(#loc)
    %21 = tt.expand_dims %19 {axis = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked2}>> -> tensor<1x32xi32, #blocked2> loc(#loc)
    %22 = tt.expand_dims %20 {axis = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #mma}>> -> tensor<1x32xi32, #mma> loc(#loc)
    %23 = tt.splat %stride_b1 : i32 -> tensor<1x32xi32, #blocked2> loc(#loc)
    %24 = arith.muli %21, %23 : tensor<1x32xi32, #blocked2> loc(#loc)
    %25 = tt.broadcast %18 : tensor<128x1x!tt.ptr<i8>, #blocked2> -> tensor<128x32x!tt.ptr<i8>, #blocked2> loc(#loc)
    %26 = tt.broadcast %24 : tensor<1x32xi32, #blocked2> -> tensor<128x32xi32, #blocked2> loc(#loc)
    %27 = tt.addptr %25, %26 : tensor<128x32x!tt.ptr<i8>, #blocked2>, tensor<128x32xi32, #blocked2> loc(#loc)
    %28 = tt.load %14 : tensor<32x256x!tt.ptr<bf16>, #blocked1> loc(#loc)
    %29 = ttg.convert_layout %28 : tensor<32x256xbf16, #blocked1> -> tensor<32x256xbf16, #linear1> loc(#loc)
    %30 = tt.reshape %29 : tensor<32x256xbf16, #linear1> -> tensor<32x2x128xbf16, #linear2> loc(#loc)
    %31 = tt.trans %30 {order = array<i32: 0, 2, 1>} : tensor<32x2x128xbf16, #linear2> -> tensor<32x128x2xbf16, #linear3> loc(#loc)
    %outLHS, %outRHS = tt.split %31 : tensor<32x128x2xbf16, #linear3> -> tensor<32x128xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> loc(#loc)
    %32 = tt.load %27 : tensor<128x32x!tt.ptr<i8>, #blocked2> loc(#loc)
    %33 = ttg.convert_layout %32 : tensor<128x32xi8, #blocked2> -> tensor<128x32xi8, #linear4> loc(#loc)
    %34 = tt.reshape %33 : tensor<128x32xi8, #linear4> -> tensor<2x64x32xi8, #linear5> loc(#loc)
    %35 = tt.trans %34 {order = array<i32: 1, 2, 0>} : tensor<2x64x32xi8, #linear5> -> tensor<64x32x2xi8, #linear6> loc(#loc)
    %outLHS_5, %outRHS_6 = tt.split %35 : tensor<64x32x2xi8, #linear6> -> tensor<64x32xi8, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 4}>> loc(#loc)
    %36 = arith.muli %4, %cst_3 : tensor<32x1xi32, #blocked> loc(#loc)
    %37 = tt.splat %b_scale : !tt.ptr<i8> -> tensor<32x1x!tt.ptr<i8>, #blocked> loc(#loc)
    %38 = tt.addptr %37, %36 : tensor<32x1x!tt.ptr<i8>, #blocked>, tensor<32x1xi32, #blocked> loc(#loc)
    %39 = tt.make_range {end = 8 : i32, start = 0 : i32} : tensor<8xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc)
    %40 = tt.expand_dims %39 {axis = 0 : i32} : tensor<8xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x8xi32, #blocked> loc(#loc)
    %41 = tt.broadcast %38 : tensor<32x1x!tt.ptr<i8>, #blocked> -> tensor<32x8x!tt.ptr<i8>, #blocked> loc(#loc)
    %42 = tt.broadcast %40 : tensor<1x8xi32, #blocked> -> tensor<32x8xi32, #blocked> loc(#loc)
    %43 = tt.addptr %41, %42 : tensor<32x8x!tt.ptr<i8>, #blocked>, tensor<32x8xi32, #blocked> loc(#loc)
    %44 = tt.load %43 : tensor<32x8x!tt.ptr<i8>, #blocked> loc(#loc)
    %45 = ttg.convert_layout %44 : tensor<32x8xi8, #blocked> -> tensor<32x8xi8, #linear7> loc(#loc)
    %46 = tt.reshape %45 : tensor<32x8xi8, #linear7> -> tensor<32x2x4xi8, #linear8> loc(#loc)
    %47 = tt.trans %46 {order = array<i32: 0, 2, 1>} : tensor<32x2x4xi8, #linear8> -> tensor<32x4x2xi8, #linear9> loc(#loc)
    %outLHS_7, %outRHS_8 = tt.split %47 : tensor<32x4x2xi8, #linear9> -> tensor<32x4xi8, #linear10> loc(#loc)
    %48 = ttg.fp4_to_fp %outLHS_5 {axis = 0 : i32} : tensor<64x32xi8, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 4}>> -> tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %49 = tt.trans %outLHS_7 {order = array<i32: 1, 0>} : tensor<32x4xi8, #linear10> -> tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %50 = arith.extui %49 : tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> to tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %51 = arith.shli %50, %cst : tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %52 = tt.bitcast %51 : tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> -> tensor<4x32xbf16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %53 = tt.expand_dims %52 {axis = 2 : i32} : tensor<4x32xbf16, #ttg.slice<{dim = 2, parent = #linear}>> -> tensor<4x32x1xbf16, #linear> loc(#loc)
    %54 = tt.broadcast %53 : tensor<4x32x1xbf16, #linear> -> tensor<4x32x32xbf16, #linear> loc(#loc)
    %55 = tt.trans %54 {order = array<i32: 0, 2, 1>} : tensor<4x32x32xbf16, #linear> -> tensor<4x32x32xbf16, #linear11> loc(#loc)
    %56 = tt.reshape %55 : tensor<4x32x32xbf16, #linear11> -> tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %57 = arith.mulf %48, %56 : tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %58 = arith.cmpi eq, %49, %cst_0 : tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %59 = tt.expand_dims %58 {axis = 2 : i32} : tensor<4x32xi1, #ttg.slice<{dim = 2, parent = #linear}>> -> tensor<4x32x1xi1, #linear> loc(#loc)
    %60 = tt.broadcast %59 : tensor<4x32x1xi1, #linear> -> tensor<4x32x32xi1, #linear> loc(#loc)
    %61 = tt.trans %60 {order = array<i32: 0, 2, 1>} : tensor<4x32x32xi1, #linear> -> tensor<4x32x32xi1, #linear11> loc(#loc)
    %62 = tt.reshape %61 : tensor<4x32x32xi1, #linear11> -> tensor<128x32xi1, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %63 = arith.select %62, %cst_1, %57 : tensor<128x32xi1, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>>, tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %64 = tt.dot %outLHS, %63, %cst_2 : tensor<32x128xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> * tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> -> tensor<32x32xf32, #mma> loc(#loc)
    %65 = ttg.fp4_to_fp %outRHS_6 {axis = 0 : i32} : tensor<64x32xi8, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 4}>> -> tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %66 = tt.trans %outRHS_8 {order = array<i32: 1, 0>} : tensor<32x4xi8, #linear10> -> tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %67 = arith.extui %66 : tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> to tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %68 = arith.shli %67, %cst : tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %69 = tt.bitcast %68 : tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> -> tensor<4x32xbf16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %70 = tt.expand_dims %69 {axis = 2 : i32} : tensor<4x32xbf16, #ttg.slice<{dim = 2, parent = #linear}>> -> tensor<4x32x1xbf16, #linear> loc(#loc)
    %71 = tt.broadcast %70 : tensor<4x32x1xbf16, #linear> -> tensor<4x32x32xbf16, #linear> loc(#loc)
    %72 = tt.trans %71 {order = array<i32: 0, 2, 1>} : tensor<4x32x32xbf16, #linear> -> tensor<4x32x32xbf16, #linear11> loc(#loc)
    %73 = tt.reshape %72 : tensor<4x32x32xbf16, #linear11> -> tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %74 = arith.mulf %65, %73 : tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %75 = arith.cmpi eq, %66, %cst_0 : tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %76 = tt.expand_dims %75 {axis = 2 : i32} : tensor<4x32xi1, #ttg.slice<{dim = 2, parent = #linear}>> -> tensor<4x32x1xi1, #linear> loc(#loc)
    %77 = tt.broadcast %76 : tensor<4x32x1xi1, #linear> -> tensor<4x32x32xi1, #linear> loc(#loc)
    %78 = tt.trans %77 {order = array<i32: 0, 2, 1>} : tensor<4x32x32xi1, #linear> -> tensor<4x32x32xi1, #linear11> loc(#loc)
    %79 = tt.reshape %78 : tensor<4x32x32xi1, #linear11> -> tensor<128x32xi1, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %80 = arith.select %79, %cst_1, %74 : tensor<128x32xi1, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>>, tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %81 = tt.dot %outRHS, %80, %cst_2 : tensor<32x128xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> * tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> -> tensor<32x32xf32, #mma> loc(#loc)
    %82 = arith.addf %64, %81 : tensor<32x32xf32, #mma> loc(#loc)
    %83 = arith.muli %5, %cst_4 : tensor<32x1xi32, #mma> loc(#loc)
    %84 = tt.splat %out : !tt.ptr<bf16> -> tensor<32x1x!tt.ptr<bf16>, #mma> loc(#loc)
    %85 = tt.addptr %84, %83 : tensor<32x1x!tt.ptr<bf16>, #mma>, tensor<32x1xi32, #mma> loc(#loc)
    %86 = tt.broadcast %85 : tensor<32x1x!tt.ptr<bf16>, #mma> -> tensor<32x32x!tt.ptr<bf16>, #mma> loc(#loc)
    %87 = tt.broadcast %22 : tensor<1x32xi32, #mma> -> tensor<32x32xi32, #mma> loc(#loc)
    %88 = tt.addptr %86, %87 : tensor<32x32x!tt.ptr<bf16>, #mma>, tensor<32x32xi32, #mma> loc(#loc)
    %89 = arith.truncf %82 : tensor<32x32xf32, #mma> to tensor<32x32xbf16, #mma> loc(#loc)
    tt.store %88, %89 : tensor<32x32x!tt.ptr<bf16>, #mma> loc(#loc)
    tt.return loc(#loc)
  } loc(#loc)
} loc(#loc)
#loc = loc(unknown)


// -----// IR Dump Before TritonAMDGPUReorderInstructions (tritonamdgpu-reorder-instructions) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [8, 8], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [1, 8], threadsPerWarp = [2, 32], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked2 = #ttg.blocked<{sizePerThread = [16, 1], threadsPerWarp = [8, 8], warpsPerCTA = [1, 4], order = [0, 1]}>
#linear = #ttg.linear<{register = [[0, 0, 1], [0, 0, 2], [0, 0, 4], [1, 0, 0], [2, 0, 0]], lane = [[0, 1, 0], [0, 2, 0], [0, 4, 0], [0, 8, 0], [0, 0, 8], [0, 0, 16]], warp = [[0, 16, 0], [0, 0, 0]], block = []}>
#linear1 = #ttg.linear<{register = [[0, 128], [0, 1], [0, 2], [0, 4], [0, 32], [0, 64]], lane = [[1, 0], [2, 0], [4, 0], [8, 0], [0, 8], [0, 16]], warp = [[0, 0], [16, 0]], block = []}>
#linear2 = #ttg.linear<{register = [[0, 1, 0], [0, 0, 1], [0, 0, 2], [0, 0, 4], [0, 0, 32], [0, 0, 64]], lane = [[1, 0, 0], [2, 0, 0], [4, 0, 0], [8, 0, 0], [0, 0, 8], [0, 0, 16]], warp = [[0, 0, 0], [16, 0, 0]], block = []}>
#linear3 = #ttg.linear<{register = [[0, 0, 1], [0, 1, 0], [0, 2, 0], [0, 4, 0], [0, 32, 0], [0, 64, 0]], lane = [[1, 0, 0], [2, 0, 0], [4, 0, 0], [8, 0, 0], [0, 8, 0], [0, 16, 0]], warp = [[0, 0, 0], [16, 0, 0]], block = []}>
#linear4 = #ttg.linear<{register = [[64, 0], [1, 0], [2, 0], [16, 0], [32, 0]], lane = [[0, 1], [0, 2], [0, 4], [0, 8], [4, 0], [8, 0]], warp = [[0, 16], [0, 0]], block = []}>
#linear5 = #ttg.linear<{register = [[1, 0, 0], [0, 1, 0], [0, 2, 0], [0, 16, 0], [0, 32, 0]], lane = [[0, 0, 1], [0, 0, 2], [0, 0, 4], [0, 0, 8], [0, 4, 0], [0, 8, 0]], warp = [[0, 0, 16], [0, 0, 0]], block = []}>
#linear6 = #ttg.linear<{register = [[0, 0, 1], [1, 0, 0], [2, 0, 0], [16, 0, 0], [32, 0, 0]], lane = [[0, 1, 0], [0, 2, 0], [0, 4, 0], [0, 8, 0], [4, 0, 0], [8, 0, 0]], warp = [[0, 16, 0], [0, 0, 0]], block = []}>
#linear7 = #ttg.linear<{register = [[0, 4], [0, 1], [0, 2]], lane = [[1, 0], [2, 0], [4, 0], [8, 0], [0, 0], [0, 0]], warp = [[16, 0], [0, 0]], block = []}>
#linear8 = #ttg.linear<{register = [[0, 1, 0], [0, 0, 1], [0, 0, 2]], lane = [[1, 0, 0], [2, 0, 0], [4, 0, 0], [8, 0, 0], [0, 0, 0], [0, 0, 0]], warp = [[16, 0, 0], [0, 0, 0]], block = []}>
#linear9 = #ttg.linear<{register = [[0, 0, 1], [0, 1, 0], [0, 2, 0]], lane = [[1, 0, 0], [2, 0, 0], [4, 0, 0], [8, 0, 0], [0, 0, 0], [0, 0, 0]], warp = [[16, 0, 0], [0, 0, 0]], block = []}>
#linear10 = #ttg.linear<{register = [[0, 1], [0, 2]], lane = [[1, 0], [2, 0], [4, 0], [8, 0], [0, 0], [0, 0]], warp = [[16, 0], [0, 0]], block = []}>
#linear11 = #ttg.linear<{register = [[0, 1, 0], [0, 2, 0], [0, 4, 0], [1, 0, 0], [2, 0, 0]], lane = [[0, 0, 1], [0, 0, 2], [0, 0, 4], [0, 0, 8], [0, 8, 0], [0, 16, 0]], warp = [[0, 0, 16], [0, 0, 0]], block = []}>
#loc1 = loc("a_base")
#loc2 = loc("stride_a0")
#loc3 = loc("b_base")
#loc4 = loc("stride_b1")
#loc5 = loc("b_scale")
#loc6 = loc("out")
#mma = #ttg.amd_mfma<{version = 4, warpsPerCTA = [2, 2], instrShape = [16, 16], isTransposed = true}>
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "hip:gfx950", "ttg.threads-per-warp" = 64 : i32} {
  tt.func public @dot_scale_kernel(%a_base: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("a_base"), %stride_a0: i32 {tt.divisibility = 16 : i32} loc("stride_a0"), %b_base: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("b_base"), %stride_b1: i32 {tt.divisibility = 16 : i32} loc("stride_b1"), %b_scale: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("b_scale"), %out: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("out")) attributes {noinline = false} {
    %cst = arith.constant dense<7> : tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %cst_0 = arith.constant dense<-1> : tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %cst_1 = arith.constant dense<0x7FC0> : tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %cst_2 = arith.constant dense<0.000000e+00> : tensor<32x32xf32, #mma> loc(#loc)
    %cst_3 = arith.constant dense<8> : tensor<32x1xi32, #blocked> loc(#loc)
    %cst_4 = arith.constant dense<32> : tensor<32x1xi32, #mma> loc(#loc)
    %0 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc)
    %1 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc)
    %2 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc)
    %3 = tt.expand_dims %0 {axis = 1 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> -> tensor<32x1xi32, #blocked1> loc(#loc)
    %4 = tt.expand_dims %1 {axis = 1 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<32x1xi32, #blocked> loc(#loc)
    %5 = tt.expand_dims %2 {axis = 1 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #mma}>> -> tensor<32x1xi32, #mma> loc(#loc)
    %6 = tt.splat %stride_a0 : i32 -> tensor<32x1xi32, #blocked1> loc(#loc)
    %7 = arith.muli %3, %6 : tensor<32x1xi32, #blocked1> loc(#loc)
    %8 = tt.splat %a_base : !tt.ptr<bf16> -> tensor<32x1x!tt.ptr<bf16>, #blocked1> loc(#loc)
    %9 = tt.addptr %8, %7 : tensor<32x1x!tt.ptr<bf16>, #blocked1>, tensor<32x1xi32, #blocked1> loc(#loc)
    %10 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc)
    %11 = tt.expand_dims %10 {axis = 0 : i32} : tensor<256xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x256xi32, #blocked1> loc(#loc)
    %12 = tt.broadcast %9 : tensor<32x1x!tt.ptr<bf16>, #blocked1> -> tensor<32x256x!tt.ptr<bf16>, #blocked1> loc(#loc)
    %13 = tt.broadcast %11 : tensor<1x256xi32, #blocked1> -> tensor<32x256xi32, #blocked1> loc(#loc)
    %14 = tt.addptr %12, %13 : tensor<32x256x!tt.ptr<bf16>, #blocked1>, tensor<32x256xi32, #blocked1> loc(#loc)
    %15 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked2}>> loc(#loc)
    %16 = tt.expand_dims %15 {axis = 1 : i32} : tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked2}>> -> tensor<128x1xi32, #blocked2> loc(#loc)
    %17 = tt.splat %b_base : !tt.ptr<i8> -> tensor<128x1x!tt.ptr<i8>, #blocked2> loc(#loc)
    %18 = tt.addptr %17, %16 : tensor<128x1x!tt.ptr<i8>, #blocked2>, tensor<128x1xi32, #blocked2> loc(#loc)
    %19 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked2}>> loc(#loc)
    %20 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #mma}>> loc(#loc)
    %21 = tt.expand_dims %19 {axis = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked2}>> -> tensor<1x32xi32, #blocked2> loc(#loc)
    %22 = tt.expand_dims %20 {axis = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #mma}>> -> tensor<1x32xi32, #mma> loc(#loc)
    %23 = tt.splat %stride_b1 : i32 -> tensor<1x32xi32, #blocked2> loc(#loc)
    %24 = arith.muli %21, %23 : tensor<1x32xi32, #blocked2> loc(#loc)
    %25 = tt.broadcast %18 : tensor<128x1x!tt.ptr<i8>, #blocked2> -> tensor<128x32x!tt.ptr<i8>, #blocked2> loc(#loc)
    %26 = tt.broadcast %24 : tensor<1x32xi32, #blocked2> -> tensor<128x32xi32, #blocked2> loc(#loc)
    %27 = tt.addptr %25, %26 : tensor<128x32x!tt.ptr<i8>, #blocked2>, tensor<128x32xi32, #blocked2> loc(#loc)
    %28 = tt.load %14 : tensor<32x256x!tt.ptr<bf16>, #blocked1> loc(#loc)
    %29 = ttg.convert_layout %28 : tensor<32x256xbf16, #blocked1> -> tensor<32x256xbf16, #linear1> loc(#loc)
    %30 = tt.reshape %29 : tensor<32x256xbf16, #linear1> -> tensor<32x2x128xbf16, #linear2> loc(#loc)
    %31 = tt.trans %30 {order = array<i32: 0, 2, 1>} : tensor<32x2x128xbf16, #linear2> -> tensor<32x128x2xbf16, #linear3> loc(#loc)
    %outLHS, %outRHS = tt.split %31 : tensor<32x128x2xbf16, #linear3> -> tensor<32x128xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> loc(#loc)
    %32 = tt.load %27 : tensor<128x32x!tt.ptr<i8>, #blocked2> loc(#loc)
    %33 = ttg.convert_layout %32 : tensor<128x32xi8, #blocked2> -> tensor<128x32xi8, #linear4> loc(#loc)
    %34 = tt.reshape %33 : tensor<128x32xi8, #linear4> -> tensor<2x64x32xi8, #linear5> loc(#loc)
    %35 = tt.trans %34 {order = array<i32: 1, 2, 0>} : tensor<2x64x32xi8, #linear5> -> tensor<64x32x2xi8, #linear6> loc(#loc)
    %outLHS_5, %outRHS_6 = tt.split %35 : tensor<64x32x2xi8, #linear6> -> tensor<64x32xi8, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 4}>> loc(#loc)
    %36 = arith.muli %4, %cst_3 : tensor<32x1xi32, #blocked> loc(#loc)
    %37 = tt.splat %b_scale : !tt.ptr<i8> -> tensor<32x1x!tt.ptr<i8>, #blocked> loc(#loc)
    %38 = tt.addptr %37, %36 : tensor<32x1x!tt.ptr<i8>, #blocked>, tensor<32x1xi32, #blocked> loc(#loc)
    %39 = tt.make_range {end = 8 : i32, start = 0 : i32} : tensor<8xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc)
    %40 = tt.expand_dims %39 {axis = 0 : i32} : tensor<8xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x8xi32, #blocked> loc(#loc)
    %41 = tt.broadcast %38 : tensor<32x1x!tt.ptr<i8>, #blocked> -> tensor<32x8x!tt.ptr<i8>, #blocked> loc(#loc)
    %42 = tt.broadcast %40 : tensor<1x8xi32, #blocked> -> tensor<32x8xi32, #blocked> loc(#loc)
    %43 = tt.addptr %41, %42 : tensor<32x8x!tt.ptr<i8>, #blocked>, tensor<32x8xi32, #blocked> loc(#loc)
    %44 = tt.load %43 : tensor<32x8x!tt.ptr<i8>, #blocked> loc(#loc)
    %45 = ttg.convert_layout %44 : tensor<32x8xi8, #blocked> -> tensor<32x8xi8, #linear7> loc(#loc)
    %46 = tt.reshape %45 : tensor<32x8xi8, #linear7> -> tensor<32x2x4xi8, #linear8> loc(#loc)
    %47 = tt.trans %46 {order = array<i32: 0, 2, 1>} : tensor<32x2x4xi8, #linear8> -> tensor<32x4x2xi8, #linear9> loc(#loc)
    %outLHS_7, %outRHS_8 = tt.split %47 : tensor<32x4x2xi8, #linear9> -> tensor<32x4xi8, #linear10> loc(#loc)
    %48 = ttg.fp4_to_fp %outLHS_5 {axis = 0 : i32} : tensor<64x32xi8, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 4}>> -> tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %49 = tt.trans %outLHS_7 {order = array<i32: 1, 0>} : tensor<32x4xi8, #linear10> -> tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %50 = arith.extui %49 : tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> to tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %51 = arith.shli %50, %cst : tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %52 = tt.bitcast %51 : tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> -> tensor<4x32xbf16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %53 = tt.expand_dims %52 {axis = 2 : i32} : tensor<4x32xbf16, #ttg.slice<{dim = 2, parent = #linear}>> -> tensor<4x32x1xbf16, #linear> loc(#loc)
    %54 = tt.broadcast %53 : tensor<4x32x1xbf16, #linear> -> tensor<4x32x32xbf16, #linear> loc(#loc)
    %55 = tt.trans %54 {order = array<i32: 0, 2, 1>} : tensor<4x32x32xbf16, #linear> -> tensor<4x32x32xbf16, #linear11> loc(#loc)
    %56 = tt.reshape %55 : tensor<4x32x32xbf16, #linear11> -> tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %57 = arith.mulf %48, %56 : tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %58 = arith.cmpi eq, %49, %cst_0 : tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %59 = tt.expand_dims %58 {axis = 2 : i32} : tensor<4x32xi1, #ttg.slice<{dim = 2, parent = #linear}>> -> tensor<4x32x1xi1, #linear> loc(#loc)
    %60 = tt.broadcast %59 : tensor<4x32x1xi1, #linear> -> tensor<4x32x32xi1, #linear> loc(#loc)
    %61 = tt.trans %60 {order = array<i32: 0, 2, 1>} : tensor<4x32x32xi1, #linear> -> tensor<4x32x32xi1, #linear11> loc(#loc)
    %62 = tt.reshape %61 : tensor<4x32x32xi1, #linear11> -> tensor<128x32xi1, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %63 = arith.select %62, %cst_1, %57 : tensor<128x32xi1, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>>, tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %64 = tt.dot %outLHS, %63, %cst_2 : tensor<32x128xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> * tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> -> tensor<32x32xf32, #mma> loc(#loc)
    %65 = ttg.fp4_to_fp %outRHS_6 {axis = 0 : i32} : tensor<64x32xi8, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 4}>> -> tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %66 = tt.trans %outRHS_8 {order = array<i32: 1, 0>} : tensor<32x4xi8, #linear10> -> tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %67 = arith.extui %66 : tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> to tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %68 = arith.shli %67, %cst : tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %69 = tt.bitcast %68 : tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> -> tensor<4x32xbf16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %70 = tt.expand_dims %69 {axis = 2 : i32} : tensor<4x32xbf16, #ttg.slice<{dim = 2, parent = #linear}>> -> tensor<4x32x1xbf16, #linear> loc(#loc)
    %71 = tt.broadcast %70 : tensor<4x32x1xbf16, #linear> -> tensor<4x32x32xbf16, #linear> loc(#loc)
    %72 = tt.trans %71 {order = array<i32: 0, 2, 1>} : tensor<4x32x32xbf16, #linear> -> tensor<4x32x32xbf16, #linear11> loc(#loc)
    %73 = tt.reshape %72 : tensor<4x32x32xbf16, #linear11> -> tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %74 = arith.mulf %65, %73 : tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %75 = arith.cmpi eq, %66, %cst_0 : tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %76 = tt.expand_dims %75 {axis = 2 : i32} : tensor<4x32xi1, #ttg.slice<{dim = 2, parent = #linear}>> -> tensor<4x32x1xi1, #linear> loc(#loc)
    %77 = tt.broadcast %76 : tensor<4x32x1xi1, #linear> -> tensor<4x32x32xi1, #linear> loc(#loc)
    %78 = tt.trans %77 {order = array<i32: 0, 2, 1>} : tensor<4x32x32xi1, #linear> -> tensor<4x32x32xi1, #linear11> loc(#loc)
    %79 = tt.reshape %78 : tensor<4x32x32xi1, #linear11> -> tensor<128x32xi1, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %80 = arith.select %79, %cst_1, %74 : tensor<128x32xi1, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>>, tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %81 = tt.dot %outRHS, %80, %cst_2 : tensor<32x128xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> * tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> -> tensor<32x32xf32, #mma> loc(#loc)
    %82 = arith.addf %64, %81 : tensor<32x32xf32, #mma> loc(#loc)
    %83 = arith.muli %5, %cst_4 : tensor<32x1xi32, #mma> loc(#loc)
    %84 = tt.splat %out : !tt.ptr<bf16> -> tensor<32x1x!tt.ptr<bf16>, #mma> loc(#loc)
    %85 = tt.addptr %84, %83 : tensor<32x1x!tt.ptr<bf16>, #mma>, tensor<32x1xi32, #mma> loc(#loc)
    %86 = tt.broadcast %85 : tensor<32x1x!tt.ptr<bf16>, #mma> -> tensor<32x32x!tt.ptr<bf16>, #mma> loc(#loc)
    %87 = tt.broadcast %22 : tensor<1x32xi32, #mma> -> tensor<32x32xi32, #mma> loc(#loc)
    %88 = tt.addptr %86, %87 : tensor<32x32x!tt.ptr<bf16>, #mma>, tensor<32x32xi32, #mma> loc(#loc)
    %89 = arith.truncf %82 : tensor<32x32xf32, #mma> to tensor<32x32xbf16, #mma> loc(#loc)
    tt.store %88, %89 : tensor<32x32x!tt.ptr<bf16>, #mma> loc(#loc)
    tt.return loc(#loc)
  } loc(#loc)
} loc(#loc)
#loc = loc(unknown)


// -----// IR Dump Before TritonAMDGPUCanonicalizePointers (tritonamdgpu-canonicalize-pointers) ('tt.func' operation: @dot_scale_kernel) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [8, 8], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [1, 8], threadsPerWarp = [2, 32], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked2 = #ttg.blocked<{sizePerThread = [16, 1], threadsPerWarp = [8, 8], warpsPerCTA = [1, 4], order = [0, 1]}>
#linear = #ttg.linear<{register = [[0, 0, 1], [0, 0, 2], [0, 0, 4], [1, 0, 0], [2, 0, 0]], lane = [[0, 1, 0], [0, 2, 0], [0, 4, 0], [0, 8, 0], [0, 0, 8], [0, 0, 16]], warp = [[0, 16, 0], [0, 0, 0]], block = []}>
#linear1 = #ttg.linear<{register = [[0, 128], [0, 1], [0, 2], [0, 4], [0, 32], [0, 64]], lane = [[1, 0], [2, 0], [4, 0], [8, 0], [0, 8], [0, 16]], warp = [[0, 0], [16, 0]], block = []}>
#linear2 = #ttg.linear<{register = [[0, 1, 0], [0, 0, 1], [0, 0, 2], [0, 0, 4], [0, 0, 32], [0, 0, 64]], lane = [[1, 0, 0], [2, 0, 0], [4, 0, 0], [8, 0, 0], [0, 0, 8], [0, 0, 16]], warp = [[0, 0, 0], [16, 0, 0]], block = []}>
#linear3 = #ttg.linear<{register = [[0, 0, 1], [0, 1, 0], [0, 2, 0], [0, 4, 0], [0, 32, 0], [0, 64, 0]], lane = [[1, 0, 0], [2, 0, 0], [4, 0, 0], [8, 0, 0], [0, 8, 0], [0, 16, 0]], warp = [[0, 0, 0], [16, 0, 0]], block = []}>
#linear4 = #ttg.linear<{register = [[64, 0], [1, 0], [2, 0], [16, 0], [32, 0]], lane = [[0, 1], [0, 2], [0, 4], [0, 8], [4, 0], [8, 0]], warp = [[0, 16], [0, 0]], block = []}>
#linear5 = #ttg.linear<{register = [[1, 0, 0], [0, 1, 0], [0, 2, 0], [0, 16, 0], [0, 32, 0]], lane = [[0, 0, 1], [0, 0, 2], [0, 0, 4], [0, 0, 8], [0, 4, 0], [0, 8, 0]], warp = [[0, 0, 16], [0, 0, 0]], block = []}>
#linear6 = #ttg.linear<{register = [[0, 0, 1], [1, 0, 0], [2, 0, 0], [16, 0, 0], [32, 0, 0]], lane = [[0, 1, 0], [0, 2, 0], [0, 4, 0], [0, 8, 0], [4, 0, 0], [8, 0, 0]], warp = [[0, 16, 0], [0, 0, 0]], block = []}>
#linear7 = #ttg.linear<{register = [[0, 4], [0, 1], [0, 2]], lane = [[1, 0], [2, 0], [4, 0], [8, 0], [0, 0], [0, 0]], warp = [[16, 0], [0, 0]], block = []}>
#linear8 = #ttg.linear<{register = [[0, 1, 0], [0, 0, 1], [0, 0, 2]], lane = [[1, 0, 0], [2, 0, 0], [4, 0, 0], [8, 0, 0], [0, 0, 0], [0, 0, 0]], warp = [[16, 0, 0], [0, 0, 0]], block = []}>
#linear9 = #ttg.linear<{register = [[0, 0, 1], [0, 1, 0], [0, 2, 0]], lane = [[1, 0, 0], [2, 0, 0], [4, 0, 0], [8, 0, 0], [0, 0, 0], [0, 0, 0]], warp = [[16, 0, 0], [0, 0, 0]], block = []}>
#linear10 = #ttg.linear<{register = [[0, 1], [0, 2]], lane = [[1, 0], [2, 0], [4, 0], [8, 0], [0, 0], [0, 0]], warp = [[16, 0], [0, 0]], block = []}>
#linear11 = #ttg.linear<{register = [[0, 1, 0], [0, 2, 0], [0, 4, 0], [1, 0, 0], [2, 0, 0]], lane = [[0, 0, 1], [0, 0, 2], [0, 0, 4], [0, 0, 8], [0, 8, 0], [0, 16, 0]], warp = [[0, 0, 16], [0, 0, 0]], block = []}>
#loc1 = loc("a_base")
#loc2 = loc("stride_a0")
#loc3 = loc("b_base")
#loc4 = loc("stride_b1")
#loc5 = loc("b_scale")
#loc6 = loc("out")
#mma = #ttg.amd_mfma<{version = 4, warpsPerCTA = [2, 2], instrShape = [16, 16], isTransposed = true}>
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "hip:gfx950", "ttg.threads-per-warp" = 64 : i32} {
  tt.func public @dot_scale_kernel(%a_base: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("a_base"), %stride_a0: i32 {tt.divisibility = 16 : i32} loc("stride_a0"), %b_base: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("b_base"), %stride_b1: i32 {tt.divisibility = 16 : i32} loc("stride_b1"), %b_scale: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("b_scale"), %out: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("out")) attributes {noinline = false} {
    %cst = arith.constant dense<7> : tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %cst_0 = arith.constant dense<-1> : tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %cst_1 = arith.constant dense<0x7FC0> : tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %cst_2 = arith.constant dense<0.000000e+00> : tensor<32x32xf32, #mma> loc(#loc)
    %cst_3 = arith.constant dense<8> : tensor<32x1xi32, #blocked> loc(#loc)
    %cst_4 = arith.constant dense<32> : tensor<32x1xi32, #mma> loc(#loc)
    %0 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc)
    %1 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc)
    %2 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc)
    %3 = tt.expand_dims %0 {axis = 1 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> -> tensor<32x1xi32, #blocked1> loc(#loc)
    %4 = tt.expand_dims %1 {axis = 1 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<32x1xi32, #blocked> loc(#loc)
    %5 = tt.expand_dims %2 {axis = 1 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #mma}>> -> tensor<32x1xi32, #mma> loc(#loc)
    %6 = tt.splat %stride_a0 : i32 -> tensor<32x1xi32, #blocked1> loc(#loc)
    %7 = arith.muli %3, %6 : tensor<32x1xi32, #blocked1> loc(#loc)
    %8 = tt.splat %a_base : !tt.ptr<bf16> -> tensor<32x1x!tt.ptr<bf16>, #blocked1> loc(#loc)
    %9 = tt.addptr %8, %7 : tensor<32x1x!tt.ptr<bf16>, #blocked1>, tensor<32x1xi32, #blocked1> loc(#loc)
    %10 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc)
    %11 = tt.expand_dims %10 {axis = 0 : i32} : tensor<256xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x256xi32, #blocked1> loc(#loc)
    %12 = tt.broadcast %9 : tensor<32x1x!tt.ptr<bf16>, #blocked1> -> tensor<32x256x!tt.ptr<bf16>, #blocked1> loc(#loc)
    %13 = tt.broadcast %11 : tensor<1x256xi32, #blocked1> -> tensor<32x256xi32, #blocked1> loc(#loc)
    %14 = tt.addptr %12, %13 : tensor<32x256x!tt.ptr<bf16>, #blocked1>, tensor<32x256xi32, #blocked1> loc(#loc)
    %15 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked2}>> loc(#loc)
    %16 = tt.expand_dims %15 {axis = 1 : i32} : tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked2}>> -> tensor<128x1xi32, #blocked2> loc(#loc)
    %17 = tt.splat %b_base : !tt.ptr<i8> -> tensor<128x1x!tt.ptr<i8>, #blocked2> loc(#loc)
    %18 = tt.addptr %17, %16 : tensor<128x1x!tt.ptr<i8>, #blocked2>, tensor<128x1xi32, #blocked2> loc(#loc)
    %19 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked2}>> loc(#loc)
    %20 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #mma}>> loc(#loc)
    %21 = tt.expand_dims %19 {axis = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked2}>> -> tensor<1x32xi32, #blocked2> loc(#loc)
    %22 = tt.expand_dims %20 {axis = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #mma}>> -> tensor<1x32xi32, #mma> loc(#loc)
    %23 = tt.splat %stride_b1 : i32 -> tensor<1x32xi32, #blocked2> loc(#loc)
    %24 = arith.muli %21, %23 : tensor<1x32xi32, #blocked2> loc(#loc)
    %25 = tt.broadcast %18 : tensor<128x1x!tt.ptr<i8>, #blocked2> -> tensor<128x32x!tt.ptr<i8>, #blocked2> loc(#loc)
    %26 = tt.broadcast %24 : tensor<1x32xi32, #blocked2> -> tensor<128x32xi32, #blocked2> loc(#loc)
    %27 = tt.addptr %25, %26 : tensor<128x32x!tt.ptr<i8>, #blocked2>, tensor<128x32xi32, #blocked2> loc(#loc)
    %28 = tt.load %14 : tensor<32x256x!tt.ptr<bf16>, #blocked1> loc(#loc)
    %29 = ttg.convert_layout %28 : tensor<32x256xbf16, #blocked1> -> tensor<32x256xbf16, #linear1> loc(#loc)
    %30 = tt.reshape %29 : tensor<32x256xbf16, #linear1> -> tensor<32x2x128xbf16, #linear2> loc(#loc)
    %31 = tt.trans %30 {order = array<i32: 0, 2, 1>} : tensor<32x2x128xbf16, #linear2> -> tensor<32x128x2xbf16, #linear3> loc(#loc)
    %outLHS, %outRHS = tt.split %31 : tensor<32x128x2xbf16, #linear3> -> tensor<32x128xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> loc(#loc)
    %32 = tt.load %27 : tensor<128x32x!tt.ptr<i8>, #blocked2> loc(#loc)
    %33 = ttg.convert_layout %32 : tensor<128x32xi8, #blocked2> -> tensor<128x32xi8, #linear4> loc(#loc)
    %34 = tt.reshape %33 : tensor<128x32xi8, #linear4> -> tensor<2x64x32xi8, #linear5> loc(#loc)
    %35 = tt.trans %34 {order = array<i32: 1, 2, 0>} : tensor<2x64x32xi8, #linear5> -> tensor<64x32x2xi8, #linear6> loc(#loc)
    %outLHS_5, %outRHS_6 = tt.split %35 : tensor<64x32x2xi8, #linear6> -> tensor<64x32xi8, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 4}>> loc(#loc)
    %36 = arith.muli %4, %cst_3 : tensor<32x1xi32, #blocked> loc(#loc)
    %37 = tt.splat %b_scale : !tt.ptr<i8> -> tensor<32x1x!tt.ptr<i8>, #blocked> loc(#loc)
    %38 = tt.addptr %37, %36 : tensor<32x1x!tt.ptr<i8>, #blocked>, tensor<32x1xi32, #blocked> loc(#loc)
    %39 = tt.make_range {end = 8 : i32, start = 0 : i32} : tensor<8xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc)
    %40 = tt.expand_dims %39 {axis = 0 : i32} : tensor<8xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x8xi32, #blocked> loc(#loc)
    %41 = tt.broadcast %38 : tensor<32x1x!tt.ptr<i8>, #blocked> -> tensor<32x8x!tt.ptr<i8>, #blocked> loc(#loc)
    %42 = tt.broadcast %40 : tensor<1x8xi32, #blocked> -> tensor<32x8xi32, #blocked> loc(#loc)
    %43 = tt.addptr %41, %42 : tensor<32x8x!tt.ptr<i8>, #blocked>, tensor<32x8xi32, #blocked> loc(#loc)
    %44 = tt.load %43 : tensor<32x8x!tt.ptr<i8>, #blocked> loc(#loc)
    %45 = ttg.convert_layout %44 : tensor<32x8xi8, #blocked> -> tensor<32x8xi8, #linear7> loc(#loc)
    %46 = tt.reshape %45 : tensor<32x8xi8, #linear7> -> tensor<32x2x4xi8, #linear8> loc(#loc)
    %47 = tt.trans %46 {order = array<i32: 0, 2, 1>} : tensor<32x2x4xi8, #linear8> -> tensor<32x4x2xi8, #linear9> loc(#loc)
    %outLHS_7, %outRHS_8 = tt.split %47 : tensor<32x4x2xi8, #linear9> -> tensor<32x4xi8, #linear10> loc(#loc)
    %48 = tt.trans %outRHS_8 {order = array<i32: 1, 0>} : tensor<32x4xi8, #linear10> -> tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %49 = tt.trans %outLHS_7 {order = array<i32: 1, 0>} : tensor<32x4xi8, #linear10> -> tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %50 = ttg.fp4_to_fp %outLHS_5 {axis = 0 : i32} : tensor<64x32xi8, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 4}>> -> tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %51 = arith.extui %49 : tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> to tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %52 = arith.shli %51, %cst : tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %53 = tt.bitcast %52 : tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> -> tensor<4x32xbf16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %54 = tt.expand_dims %53 {axis = 2 : i32} : tensor<4x32xbf16, #ttg.slice<{dim = 2, parent = #linear}>> -> tensor<4x32x1xbf16, #linear> loc(#loc)
    %55 = tt.broadcast %54 : tensor<4x32x1xbf16, #linear> -> tensor<4x32x32xbf16, #linear> loc(#loc)
    %56 = tt.trans %55 {order = array<i32: 0, 2, 1>} : tensor<4x32x32xbf16, #linear> -> tensor<4x32x32xbf16, #linear11> loc(#loc)
    %57 = tt.reshape %56 : tensor<4x32x32xbf16, #linear11> -> tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %58 = arith.mulf %50, %57 : tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %59 = arith.cmpi eq, %49, %cst_0 : tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %60 = tt.expand_dims %59 {axis = 2 : i32} : tensor<4x32xi1, #ttg.slice<{dim = 2, parent = #linear}>> -> tensor<4x32x1xi1, #linear> loc(#loc)
    %61 = tt.broadcast %60 : tensor<4x32x1xi1, #linear> -> tensor<4x32x32xi1, #linear> loc(#loc)
    %62 = tt.trans %61 {order = array<i32: 0, 2, 1>} : tensor<4x32x32xi1, #linear> -> tensor<4x32x32xi1, #linear11> loc(#loc)
    %63 = tt.reshape %62 : tensor<4x32x32xi1, #linear11> -> tensor<128x32xi1, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %64 = arith.select %63, %cst_1, %58 : tensor<128x32xi1, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>>, tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %65 = tt.dot %outLHS, %64, %cst_2 : tensor<32x128xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> * tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> -> tensor<32x32xf32, #mma> loc(#loc)
    %66 = ttg.fp4_to_fp %outRHS_6 {axis = 0 : i32} : tensor<64x32xi8, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 4}>> -> tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %67 = arith.extui %48 : tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> to tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %68 = arith.shli %67, %cst : tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %69 = tt.bitcast %68 : tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> -> tensor<4x32xbf16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %70 = tt.expand_dims %69 {axis = 2 : i32} : tensor<4x32xbf16, #ttg.slice<{dim = 2, parent = #linear}>> -> tensor<4x32x1xbf16, #linear> loc(#loc)
    %71 = tt.broadcast %70 : tensor<4x32x1xbf16, #linear> -> tensor<4x32x32xbf16, #linear> loc(#loc)
    %72 = tt.trans %71 {order = array<i32: 0, 2, 1>} : tensor<4x32x32xbf16, #linear> -> tensor<4x32x32xbf16, #linear11> loc(#loc)
    %73 = tt.reshape %72 : tensor<4x32x32xbf16, #linear11> -> tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %74 = arith.mulf %66, %73 : tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %75 = arith.cmpi eq, %48, %cst_0 : tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %76 = tt.expand_dims %75 {axis = 2 : i32} : tensor<4x32xi1, #ttg.slice<{dim = 2, parent = #linear}>> -> tensor<4x32x1xi1, #linear> loc(#loc)
    %77 = tt.broadcast %76 : tensor<4x32x1xi1, #linear> -> tensor<4x32x32xi1, #linear> loc(#loc)
    %78 = tt.trans %77 {order = array<i32: 0, 2, 1>} : tensor<4x32x32xi1, #linear> -> tensor<4x32x32xi1, #linear11> loc(#loc)
    %79 = tt.reshape %78 : tensor<4x32x32xi1, #linear11> -> tensor<128x32xi1, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %80 = arith.select %79, %cst_1, %74 : tensor<128x32xi1, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>>, tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %81 = tt.dot %outRHS, %80, %cst_2 : tensor<32x128xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> * tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> -> tensor<32x32xf32, #mma> loc(#loc)
    %82 = arith.addf %65, %81 : tensor<32x32xf32, #mma> loc(#loc)
    %83 = arith.muli %5, %cst_4 : tensor<32x1xi32, #mma> loc(#loc)
    %84 = tt.splat %out : !tt.ptr<bf16> -> tensor<32x1x!tt.ptr<bf16>, #mma> loc(#loc)
    %85 = tt.addptr %84, %83 : tensor<32x1x!tt.ptr<bf16>, #mma>, tensor<32x1xi32, #mma> loc(#loc)
    %86 = tt.broadcast %85 : tensor<32x1x!tt.ptr<bf16>, #mma> -> tensor<32x32x!tt.ptr<bf16>, #mma> loc(#loc)
    %87 = tt.broadcast %22 : tensor<1x32xi32, #mma> -> tensor<32x32xi32, #mma> loc(#loc)
    %88 = tt.addptr %86, %87 : tensor<32x32x!tt.ptr<bf16>, #mma>, tensor<32x32xi32, #mma> loc(#loc)
    %89 = arith.truncf %82 : tensor<32x32xf32, #mma> to tensor<32x32xbf16, #mma> loc(#loc)
    tt.store %88, %89 : tensor<32x32x!tt.ptr<bf16>, #mma> loc(#loc)
    tt.return loc(#loc)
  } loc(#loc)
} loc(#loc)
#loc = loc(unknown)


// -----// IR Dump Before Canonicalizer (canonicalize) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [8, 8], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [1, 8], threadsPerWarp = [2, 32], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked2 = #ttg.blocked<{sizePerThread = [16, 1], threadsPerWarp = [8, 8], warpsPerCTA = [1, 4], order = [0, 1]}>
#linear = #ttg.linear<{register = [[0, 0, 1], [0, 0, 2], [0, 0, 4], [1, 0, 0], [2, 0, 0]], lane = [[0, 1, 0], [0, 2, 0], [0, 4, 0], [0, 8, 0], [0, 0, 8], [0, 0, 16]], warp = [[0, 16, 0], [0, 0, 0]], block = []}>
#linear1 = #ttg.linear<{register = [[0, 128], [0, 1], [0, 2], [0, 4], [0, 32], [0, 64]], lane = [[1, 0], [2, 0], [4, 0], [8, 0], [0, 8], [0, 16]], warp = [[0, 0], [16, 0]], block = []}>
#linear2 = #ttg.linear<{register = [[0, 1, 0], [0, 0, 1], [0, 0, 2], [0, 0, 4], [0, 0, 32], [0, 0, 64]], lane = [[1, 0, 0], [2, 0, 0], [4, 0, 0], [8, 0, 0], [0, 0, 8], [0, 0, 16]], warp = [[0, 0, 0], [16, 0, 0]], block = []}>
#linear3 = #ttg.linear<{register = [[0, 0, 1], [0, 1, 0], [0, 2, 0], [0, 4, 0], [0, 32, 0], [0, 64, 0]], lane = [[1, 0, 0], [2, 0, 0], [4, 0, 0], [8, 0, 0], [0, 8, 0], [0, 16, 0]], warp = [[0, 0, 0], [16, 0, 0]], block = []}>
#linear4 = #ttg.linear<{register = [[64, 0], [1, 0], [2, 0], [16, 0], [32, 0]], lane = [[0, 1], [0, 2], [0, 4], [0, 8], [4, 0], [8, 0]], warp = [[0, 16], [0, 0]], block = []}>
#linear5 = #ttg.linear<{register = [[1, 0, 0], [0, 1, 0], [0, 2, 0], [0, 16, 0], [0, 32, 0]], lane = [[0, 0, 1], [0, 0, 2], [0, 0, 4], [0, 0, 8], [0, 4, 0], [0, 8, 0]], warp = [[0, 0, 16], [0, 0, 0]], block = []}>
#linear6 = #ttg.linear<{register = [[0, 0, 1], [1, 0, 0], [2, 0, 0], [16, 0, 0], [32, 0, 0]], lane = [[0, 1, 0], [0, 2, 0], [0, 4, 0], [0, 8, 0], [4, 0, 0], [8, 0, 0]], warp = [[0, 16, 0], [0, 0, 0]], block = []}>
#linear7 = #ttg.linear<{register = [[0, 4], [0, 1], [0, 2]], lane = [[1, 0], [2, 0], [4, 0], [8, 0], [0, 0], [0, 0]], warp = [[16, 0], [0, 0]], block = []}>
#linear8 = #ttg.linear<{register = [[0, 1, 0], [0, 0, 1], [0, 0, 2]], lane = [[1, 0, 0], [2, 0, 0], [4, 0, 0], [8, 0, 0], [0, 0, 0], [0, 0, 0]], warp = [[16, 0, 0], [0, 0, 0]], block = []}>
#linear9 = #ttg.linear<{register = [[0, 0, 1], [0, 1, 0], [0, 2, 0]], lane = [[1, 0, 0], [2, 0, 0], [4, 0, 0], [8, 0, 0], [0, 0, 0], [0, 0, 0]], warp = [[16, 0, 0], [0, 0, 0]], block = []}>
#linear10 = #ttg.linear<{register = [[0, 1], [0, 2]], lane = [[1, 0], [2, 0], [4, 0], [8, 0], [0, 0], [0, 0]], warp = [[16, 0], [0, 0]], block = []}>
#linear11 = #ttg.linear<{register = [[0, 1, 0], [0, 2, 0], [0, 4, 0], [1, 0, 0], [2, 0, 0]], lane = [[0, 0, 1], [0, 0, 2], [0, 0, 4], [0, 0, 8], [0, 8, 0], [0, 16, 0]], warp = [[0, 0, 16], [0, 0, 0]], block = []}>
#loc1 = loc("a_base")
#loc2 = loc("stride_a0")
#loc3 = loc("b_base")
#loc4 = loc("stride_b1")
#loc5 = loc("b_scale")
#loc6 = loc("out")
#mma = #ttg.amd_mfma<{version = 4, warpsPerCTA = [2, 2], instrShape = [16, 16], isTransposed = true}>
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "hip:gfx950", "ttg.threads-per-warp" = 64 : i32} {
  tt.func public @dot_scale_kernel(%a_base: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("a_base"), %stride_a0: i32 {tt.divisibility = 16 : i32} loc("stride_a0"), %b_base: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("b_base"), %stride_b1: i32 {tt.divisibility = 16 : i32} loc("stride_b1"), %b_scale: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("b_scale"), %out: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("out")) attributes {noinline = false} {
    %c0_i32 = arith.constant 0 : i32 loc(#loc)
    %c0_i32_0 = arith.constant 0 : i32 loc(#loc)
    %c0_i32_1 = arith.constant 0 : i32 loc(#loc)
    %c0_i32_2 = arith.constant 0 : i32 loc(#loc)
    %cst = arith.constant dense<7> : tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %cst_3 = arith.constant dense<-1> : tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %cst_4 = arith.constant dense<0x7FC0> : tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %cst_5 = arith.constant dense<0.000000e+00> : tensor<32x32xf32, #mma> loc(#loc)
    %cst_6 = arith.constant dense<8> : tensor<32x1xi32, #blocked> loc(#loc)
    %cst_7 = arith.constant dense<32> : tensor<32x1xi32, #mma> loc(#loc)
    %0 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc)
    %1 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc)
    %2 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc)
    %3 = tt.expand_dims %0 {axis = 1 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> -> tensor<32x1xi32, #blocked1> loc(#loc)
    %4 = tt.expand_dims %1 {axis = 1 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<32x1xi32, #blocked> loc(#loc)
    %5 = tt.expand_dims %2 {axis = 1 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #mma}>> -> tensor<32x1xi32, #mma> loc(#loc)
    %6 = tt.splat %stride_a0 : i32 -> tensor<32x1xi32, #blocked1> loc(#loc)
    %7 = arith.muli %3, %6 : tensor<32x1xi32, #blocked1> loc(#loc)
    %8 = tt.splat %c0_i32 : i32 -> tensor<32x1xi32, #blocked1> loc(#loc)
    %c0_i32_8 = arith.constant 0 : i32 loc(#loc)
    %9 = tt.expand_dims %0 {axis = 1 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> -> tensor<32x1xi32, #blocked1> loc(#loc)
    %cst_9 = arith.constant dense<0> : tensor<32x1xi32, #blocked1> loc(#loc)
    %10 = arith.muli %c0_i32_8, %stride_a0 : i32 loc(#loc)
    %11 = tt.splat %c0_i32_8 : i32 -> tensor<32x1xi32, #blocked1> loc(#loc)
    %12 = tt.splat %stride_a0 : i32 -> tensor<32x1xi32, #blocked1> loc(#loc)
    %13 = arith.muli %9, %cst_9 : tensor<32x1xi32, #blocked1> loc(#loc)
    %14 = arith.muli %11, %cst_9 : tensor<32x1xi32, #blocked1> loc(#loc)
    %15 = arith.muli %9, %12 : tensor<32x1xi32, #blocked1> loc(#loc)
    %16 = arith.addi %13, %14 : tensor<32x1xi32, #blocked1> loc(#loc)
    %17 = arith.addi %16, %15 : tensor<32x1xi32, #blocked1> loc(#loc)
    %18 = tt.addptr %a_base, %10 : !tt.ptr<bf16>, i32 loc(#loc)
    %19 = arith.addi %17, %8 : tensor<32x1xi32, #blocked1> loc(#loc)
    %20 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc)
    %21 = tt.expand_dims %20 {axis = 0 : i32} : tensor<256xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x256xi32, #blocked1> loc(#loc)
    %22 = tt.broadcast %19 : tensor<32x1xi32, #blocked1> -> tensor<32x256xi32, #blocked1> loc(#loc)
    %23 = tt.broadcast %21 : tensor<1x256xi32, #blocked1> -> tensor<32x256xi32, #blocked1> loc(#loc)
    %c0_i32_10 = arith.constant 0 : i32 loc(#loc)
    %24 = tt.expand_dims %20 {axis = 0 : i32} : tensor<256xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x256xi32, #blocked1> loc(#loc)
    %25 = tt.broadcast %24 : tensor<1x256xi32, #blocked1> -> tensor<32x256xi32, #blocked1> loc(#loc)
    %26 = tt.addptr %18, %c0_i32_10 : !tt.ptr<bf16>, i32 loc(#loc)
    %27 = arith.addi %25, %22 : tensor<32x256xi32, #blocked1> loc(#loc)
    %28 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked2}>> loc(#loc)
    %29 = tt.expand_dims %28 {axis = 1 : i32} : tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked2}>> -> tensor<128x1xi32, #blocked2> loc(#loc)
    %30 = tt.splat %c0_i32_0 : i32 -> tensor<128x1xi32, #blocked2> loc(#loc)
    %c0_i32_11 = arith.constant 0 : i32 loc(#loc)
    %31 = tt.expand_dims %28 {axis = 1 : i32} : tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked2}>> -> tensor<128x1xi32, #blocked2> loc(#loc)
    %32 = tt.addptr %b_base, %c0_i32_11 : !tt.ptr<i8>, i32 loc(#loc)
    %33 = arith.addi %31, %30 : tensor<128x1xi32, #blocked2> loc(#loc)
    %34 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked2}>> loc(#loc)
    %35 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #mma}>> loc(#loc)
    %36 = tt.expand_dims %34 {axis = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked2}>> -> tensor<1x32xi32, #blocked2> loc(#loc)
    %37 = tt.expand_dims %35 {axis = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #mma}>> -> tensor<1x32xi32, #mma> loc(#loc)
    %38 = tt.splat %stride_b1 : i32 -> tensor<1x32xi32, #blocked2> loc(#loc)
    %39 = arith.muli %36, %38 : tensor<1x32xi32, #blocked2> loc(#loc)
    %40 = tt.broadcast %33 : tensor<128x1xi32, #blocked2> -> tensor<128x32xi32, #blocked2> loc(#loc)
    %41 = tt.broadcast %39 : tensor<1x32xi32, #blocked2> -> tensor<128x32xi32, #blocked2> loc(#loc)
    %c0_i32_12 = arith.constant 0 : i32 loc(#loc)
    %42 = tt.expand_dims %34 {axis = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked2}>> -> tensor<1x32xi32, #blocked2> loc(#loc)
    %cst_13 = arith.constant dense<0> : tensor<1x32xi32, #blocked2> loc(#loc)
    %43 = arith.muli %c0_i32_12, %stride_b1 : i32 loc(#loc)
    %44 = tt.splat %c0_i32_12 : i32 -> tensor<1x32xi32, #blocked2> loc(#loc)
    %45 = tt.splat %stride_b1 : i32 -> tensor<1x32xi32, #blocked2> loc(#loc)
    %46 = arith.muli %42, %cst_13 : tensor<1x32xi32, #blocked2> loc(#loc)
    %47 = arith.muli %44, %cst_13 : tensor<1x32xi32, #blocked2> loc(#loc)
    %48 = arith.muli %42, %45 : tensor<1x32xi32, #blocked2> loc(#loc)
    %49 = arith.addi %46, %47 : tensor<1x32xi32, #blocked2> loc(#loc)
    %50 = arith.addi %49, %48 : tensor<1x32xi32, #blocked2> loc(#loc)
    %51 = tt.broadcast %50 : tensor<1x32xi32, #blocked2> -> tensor<128x32xi32, #blocked2> loc(#loc)
    %52 = tt.addptr %32, %43 : !tt.ptr<i8>, i32 loc(#loc)
    %53 = arith.addi %51, %40 : tensor<128x32xi32, #blocked2> loc(#loc)
    %54 = tt.splat %26 : !tt.ptr<bf16> -> tensor<32x256x!tt.ptr<bf16>, #blocked1> loc(#loc)
    %55 = tt.addptr %54, %27 : tensor<32x256x!tt.ptr<bf16>, #blocked1>, tensor<32x256xi32, #blocked1> loc(#loc)
    %56 = tt.load %55 : tensor<32x256x!tt.ptr<bf16>, #blocked1> loc(#loc)
    %57 = ttg.convert_layout %56 : tensor<32x256xbf16, #blocked1> -> tensor<32x256xbf16, #linear1> loc(#loc)
    %58 = tt.reshape %57 : tensor<32x256xbf16, #linear1> -> tensor<32x2x128xbf16, #linear2> loc(#loc)
    %59 = tt.trans %58 {order = array<i32: 0, 2, 1>} : tensor<32x2x128xbf16, #linear2> -> tensor<32x128x2xbf16, #linear3> loc(#loc)
    %outLHS, %outRHS = tt.split %59 : tensor<32x128x2xbf16, #linear3> -> tensor<32x128xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> loc(#loc)
    %60 = tt.splat %52 : !tt.ptr<i8> -> tensor<128x32x!tt.ptr<i8>, #blocked2> loc(#loc)
    %61 = tt.addptr %60, %53 : tensor<128x32x!tt.ptr<i8>, #blocked2>, tensor<128x32xi32, #blocked2> loc(#loc)
    %62 = tt.load %61 : tensor<128x32x!tt.ptr<i8>, #blocked2> loc(#loc)
    %63 = ttg.convert_layout %62 : tensor<128x32xi8, #blocked2> -> tensor<128x32xi8, #linear4> loc(#loc)
    %64 = tt.reshape %63 : tensor<128x32xi8, #linear4> -> tensor<2x64x32xi8, #linear5> loc(#loc)
    %65 = tt.trans %64 {order = array<i32: 1, 2, 0>} : tensor<2x64x32xi8, #linear5> -> tensor<64x32x2xi8, #linear6> loc(#loc)
    %outLHS_14, %outRHS_15 = tt.split %65 : tensor<64x32x2xi8, #linear6> -> tensor<64x32xi8, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 4}>> loc(#loc)
    %66 = arith.muli %4, %cst_6 : tensor<32x1xi32, #blocked> loc(#loc)
    %67 = tt.splat %c0_i32_1 : i32 -> tensor<32x1xi32, #blocked> loc(#loc)
    %c0_i32_16 = arith.constant 0 : i32 loc(#loc)
    %68 = tt.expand_dims %1 {axis = 1 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<32x1xi32, #blocked> loc(#loc)
    %c8_i32 = arith.constant 8 : i32 loc(#loc)
    %cst_17 = arith.constant dense<0> : tensor<32x1xi32, #blocked> loc(#loc)
    %69 = arith.muli %c0_i32_16, %c8_i32 : i32 loc(#loc)
    %70 = tt.splat %c0_i32_16 : i32 -> tensor<32x1xi32, #blocked> loc(#loc)
    %71 = tt.splat %c8_i32 : i32 -> tensor<32x1xi32, #blocked> loc(#loc)
    %72 = arith.muli %68, %cst_17 : tensor<32x1xi32, #blocked> loc(#loc)
    %73 = arith.muli %70, %cst_17 : tensor<32x1xi32, #blocked> loc(#loc)
    %74 = arith.muli %68, %71 : tensor<32x1xi32, #blocked> loc(#loc)
    %75 = arith.addi %72, %73 : tensor<32x1xi32, #blocked> loc(#loc)
    %76 = arith.addi %75, %74 : tensor<32x1xi32, #blocked> loc(#loc)
    %77 = tt.addptr %b_scale, %69 : !tt.ptr<i8>, i32 loc(#loc)
    %78 = arith.addi %76, %67 : tensor<32x1xi32, #blocked> loc(#loc)
    %79 = tt.make_range {end = 8 : i32, start = 0 : i32} : tensor<8xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc)
    %80 = tt.expand_dims %79 {axis = 0 : i32} : tensor<8xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x8xi32, #blocked> loc(#loc)
    %81 = tt.broadcast %78 : tensor<32x1xi32, #blocked> -> tensor<32x8xi32, #blocked> loc(#loc)
    %82 = tt.broadcast %80 : tensor<1x8xi32, #blocked> -> tensor<32x8xi32, #blocked> loc(#loc)
    %c0_i32_18 = arith.constant 0 : i32 loc(#loc)
    %83 = tt.expand_dims %79 {axis = 0 : i32} : tensor<8xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x8xi32, #blocked> loc(#loc)
    %84 = tt.broadcast %83 : tensor<1x8xi32, #blocked> -> tensor<32x8xi32, #blocked> loc(#loc)
    %85 = tt.addptr %77, %c0_i32_18 : !tt.ptr<i8>, i32 loc(#loc)
    %86 = arith.addi %84, %81 : tensor<32x8xi32, #blocked> loc(#loc)
    %87 = tt.splat %85 : !tt.ptr<i8> -> tensor<32x8x!tt.ptr<i8>, #blocked> loc(#loc)
    %88 = tt.addptr %87, %86 : tensor<32x8x!tt.ptr<i8>, #blocked>, tensor<32x8xi32, #blocked> loc(#loc)
    %89 = tt.load %88 : tensor<32x8x!tt.ptr<i8>, #blocked> loc(#loc)
    %90 = ttg.convert_layout %89 : tensor<32x8xi8, #blocked> -> tensor<32x8xi8, #linear7> loc(#loc)
    %91 = tt.reshape %90 : tensor<32x8xi8, #linear7> -> tensor<32x2x4xi8, #linear8> loc(#loc)
    %92 = tt.trans %91 {order = array<i32: 0, 2, 1>} : tensor<32x2x4xi8, #linear8> -> tensor<32x4x2xi8, #linear9> loc(#loc)
    %outLHS_19, %outRHS_20 = tt.split %92 : tensor<32x4x2xi8, #linear9> -> tensor<32x4xi8, #linear10> loc(#loc)
    %93 = tt.trans %outRHS_20 {order = array<i32: 1, 0>} : tensor<32x4xi8, #linear10> -> tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %94 = tt.trans %outLHS_19 {order = array<i32: 1, 0>} : tensor<32x4xi8, #linear10> -> tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %95 = ttg.fp4_to_fp %outLHS_14 {axis = 0 : i32} : tensor<64x32xi8, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 4}>> -> tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %96 = arith.extui %94 : tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> to tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %97 = arith.shli %96, %cst : tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %98 = tt.bitcast %97 : tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> -> tensor<4x32xbf16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %99 = tt.expand_dims %98 {axis = 2 : i32} : tensor<4x32xbf16, #ttg.slice<{dim = 2, parent = #linear}>> -> tensor<4x32x1xbf16, #linear> loc(#loc)
    %100 = tt.broadcast %99 : tensor<4x32x1xbf16, #linear> -> tensor<4x32x32xbf16, #linear> loc(#loc)
    %101 = tt.trans %100 {order = array<i32: 0, 2, 1>} : tensor<4x32x32xbf16, #linear> -> tensor<4x32x32xbf16, #linear11> loc(#loc)
    %102 = tt.reshape %101 : tensor<4x32x32xbf16, #linear11> -> tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %103 = arith.mulf %95, %102 : tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %104 = arith.cmpi eq, %94, %cst_3 : tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %105 = tt.expand_dims %104 {axis = 2 : i32} : tensor<4x32xi1, #ttg.slice<{dim = 2, parent = #linear}>> -> tensor<4x32x1xi1, #linear> loc(#loc)
    %106 = tt.broadcast %105 : tensor<4x32x1xi1, #linear> -> tensor<4x32x32xi1, #linear> loc(#loc)
    %107 = tt.trans %106 {order = array<i32: 0, 2, 1>} : tensor<4x32x32xi1, #linear> -> tensor<4x32x32xi1, #linear11> loc(#loc)
    %108 = tt.reshape %107 : tensor<4x32x32xi1, #linear11> -> tensor<128x32xi1, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %109 = arith.select %108, %cst_4, %103 : tensor<128x32xi1, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>>, tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %110 = tt.dot %outLHS, %109, %cst_5 : tensor<32x128xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> * tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> -> tensor<32x32xf32, #mma> loc(#loc)
    %111 = ttg.fp4_to_fp %outRHS_15 {axis = 0 : i32} : tensor<64x32xi8, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 4}>> -> tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %112 = arith.extui %93 : tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> to tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %113 = arith.shli %112, %cst : tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %114 = tt.bitcast %113 : tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> -> tensor<4x32xbf16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %115 = tt.expand_dims %114 {axis = 2 : i32} : tensor<4x32xbf16, #ttg.slice<{dim = 2, parent = #linear}>> -> tensor<4x32x1xbf16, #linear> loc(#loc)
    %116 = tt.broadcast %115 : tensor<4x32x1xbf16, #linear> -> tensor<4x32x32xbf16, #linear> loc(#loc)
    %117 = tt.trans %116 {order = array<i32: 0, 2, 1>} : tensor<4x32x32xbf16, #linear> -> tensor<4x32x32xbf16, #linear11> loc(#loc)
    %118 = tt.reshape %117 : tensor<4x32x32xbf16, #linear11> -> tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %119 = arith.mulf %111, %118 : tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %120 = arith.cmpi eq, %93, %cst_3 : tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %121 = tt.expand_dims %120 {axis = 2 : i32} : tensor<4x32xi1, #ttg.slice<{dim = 2, parent = #linear}>> -> tensor<4x32x1xi1, #linear> loc(#loc)
    %122 = tt.broadcast %121 : tensor<4x32x1xi1, #linear> -> tensor<4x32x32xi1, #linear> loc(#loc)
    %123 = tt.trans %122 {order = array<i32: 0, 2, 1>} : tensor<4x32x32xi1, #linear> -> tensor<4x32x32xi1, #linear11> loc(#loc)
    %124 = tt.reshape %123 : tensor<4x32x32xi1, #linear11> -> tensor<128x32xi1, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %125 = arith.select %124, %cst_4, %119 : tensor<128x32xi1, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>>, tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %126 = tt.dot %outRHS, %125, %cst_5 : tensor<32x128xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> * tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> -> tensor<32x32xf32, #mma> loc(#loc)
    %127 = arith.addf %110, %126 : tensor<32x32xf32, #mma> loc(#loc)
    %128 = arith.muli %5, %cst_7 : tensor<32x1xi32, #mma> loc(#loc)
    %129 = tt.splat %c0_i32_2 : i32 -> tensor<32x1xi32, #mma> loc(#loc)
    %c0_i32_21 = arith.constant 0 : i32 loc(#loc)
    %130 = tt.expand_dims %2 {axis = 1 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #mma}>> -> tensor<32x1xi32, #mma> loc(#loc)
    %c32_i32 = arith.constant 32 : i32 loc(#loc)
    %cst_22 = arith.constant dense<0> : tensor<32x1xi32, #mma> loc(#loc)
    %131 = arith.muli %c0_i32_21, %c32_i32 : i32 loc(#loc)
    %132 = tt.splat %c0_i32_21 : i32 -> tensor<32x1xi32, #mma> loc(#loc)
    %133 = tt.splat %c32_i32 : i32 -> tensor<32x1xi32, #mma> loc(#loc)
    %134 = arith.muli %130, %cst_22 : tensor<32x1xi32, #mma> loc(#loc)
    %135 = arith.muli %132, %cst_22 : tensor<32x1xi32, #mma> loc(#loc)
    %136 = arith.muli %130, %133 : tensor<32x1xi32, #mma> loc(#loc)
    %137 = arith.addi %134, %135 : tensor<32x1xi32, #mma> loc(#loc)
    %138 = arith.addi %137, %136 : tensor<32x1xi32, #mma> loc(#loc)
    %139 = tt.addptr %out, %131 : !tt.ptr<bf16>, i32 loc(#loc)
    %140 = arith.addi %138, %129 : tensor<32x1xi32, #mma> loc(#loc)
    %141 = tt.broadcast %140 : tensor<32x1xi32, #mma> -> tensor<32x32xi32, #mma> loc(#loc)
    %142 = tt.broadcast %37 : tensor<1x32xi32, #mma> -> tensor<32x32xi32, #mma> loc(#loc)
    %c0_i32_23 = arith.constant 0 : i32 loc(#loc)
    %143 = tt.expand_dims %35 {axis = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #mma}>> -> tensor<1x32xi32, #mma> loc(#loc)
    %144 = tt.broadcast %143 : tensor<1x32xi32, #mma> -> tensor<32x32xi32, #mma> loc(#loc)
    %145 = tt.addptr %139, %c0_i32_23 : !tt.ptr<bf16>, i32 loc(#loc)
    %146 = arith.addi %144, %141 : tensor<32x32xi32, #mma> loc(#loc)
    %147 = arith.truncf %127 : tensor<32x32xf32, #mma> to tensor<32x32xbf16, #mma> loc(#loc)
    %148 = tt.splat %145 : !tt.ptr<bf16> -> tensor<32x32x!tt.ptr<bf16>, #mma> loc(#loc)
    %149 = tt.addptr %148, %146 : tensor<32x32x!tt.ptr<bf16>, #mma>, tensor<32x32xi32, #mma> loc(#loc)
    tt.store %149, %147 : tensor<32x32x!tt.ptr<bf16>, #mma> loc(#loc)
    tt.return loc(#loc)
  } loc(#loc)
} loc(#loc)
#loc = loc(unknown)


// -----// IR Dump Before TritonAMDGPUConvertToBufferOps (tritonamdgpu-convert-buffer-ops) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [8, 8], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [1, 8], threadsPerWarp = [2, 32], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked2 = #ttg.blocked<{sizePerThread = [16, 1], threadsPerWarp = [8, 8], warpsPerCTA = [1, 4], order = [0, 1]}>
#linear = #ttg.linear<{register = [[0, 0, 1], [0, 0, 2], [0, 0, 4], [1, 0, 0], [2, 0, 0]], lane = [[0, 1, 0], [0, 2, 0], [0, 4, 0], [0, 8, 0], [0, 0, 8], [0, 0, 16]], warp = [[0, 16, 0], [0, 0, 0]], block = []}>
#linear1 = #ttg.linear<{register = [[0, 128], [0, 1], [0, 2], [0, 4], [0, 32], [0, 64]], lane = [[1, 0], [2, 0], [4, 0], [8, 0], [0, 8], [0, 16]], warp = [[0, 0], [16, 0]], block = []}>
#linear2 = #ttg.linear<{register = [[0, 1, 0], [0, 0, 1], [0, 0, 2], [0, 0, 4], [0, 0, 32], [0, 0, 64]], lane = [[1, 0, 0], [2, 0, 0], [4, 0, 0], [8, 0, 0], [0, 0, 8], [0, 0, 16]], warp = [[0, 0, 0], [16, 0, 0]], block = []}>
#linear3 = #ttg.linear<{register = [[0, 0, 1], [0, 1, 0], [0, 2, 0], [0, 4, 0], [0, 32, 0], [0, 64, 0]], lane = [[1, 0, 0], [2, 0, 0], [4, 0, 0], [8, 0, 0], [0, 8, 0], [0, 16, 0]], warp = [[0, 0, 0], [16, 0, 0]], block = []}>
#linear4 = #ttg.linear<{register = [[64, 0], [1, 0], [2, 0], [16, 0], [32, 0]], lane = [[0, 1], [0, 2], [0, 4], [0, 8], [4, 0], [8, 0]], warp = [[0, 16], [0, 0]], block = []}>
#linear5 = #ttg.linear<{register = [[1, 0, 0], [0, 1, 0], [0, 2, 0], [0, 16, 0], [0, 32, 0]], lane = [[0, 0, 1], [0, 0, 2], [0, 0, 4], [0, 0, 8], [0, 4, 0], [0, 8, 0]], warp = [[0, 0, 16], [0, 0, 0]], block = []}>
#linear6 = #ttg.linear<{register = [[0, 0, 1], [1, 0, 0], [2, 0, 0], [16, 0, 0], [32, 0, 0]], lane = [[0, 1, 0], [0, 2, 0], [0, 4, 0], [0, 8, 0], [4, 0, 0], [8, 0, 0]], warp = [[0, 16, 0], [0, 0, 0]], block = []}>
#linear7 = #ttg.linear<{register = [[0, 4], [0, 1], [0, 2]], lane = [[1, 0], [2, 0], [4, 0], [8, 0], [0, 0], [0, 0]], warp = [[16, 0], [0, 0]], block = []}>
#linear8 = #ttg.linear<{register = [[0, 1, 0], [0, 0, 1], [0, 0, 2]], lane = [[1, 0, 0], [2, 0, 0], [4, 0, 0], [8, 0, 0], [0, 0, 0], [0, 0, 0]], warp = [[16, 0, 0], [0, 0, 0]], block = []}>
#linear9 = #ttg.linear<{register = [[0, 0, 1], [0, 1, 0], [0, 2, 0]], lane = [[1, 0, 0], [2, 0, 0], [4, 0, 0], [8, 0, 0], [0, 0, 0], [0, 0, 0]], warp = [[16, 0, 0], [0, 0, 0]], block = []}>
#linear10 = #ttg.linear<{register = [[0, 1], [0, 2]], lane = [[1, 0], [2, 0], [4, 0], [8, 0], [0, 0], [0, 0]], warp = [[16, 0], [0, 0]], block = []}>
#linear11 = #ttg.linear<{register = [[0, 1, 0], [0, 2, 0], [0, 4, 0], [1, 0, 0], [2, 0, 0]], lane = [[0, 0, 1], [0, 0, 2], [0, 0, 4], [0, 0, 8], [0, 8, 0], [0, 16, 0]], warp = [[0, 0, 16], [0, 0, 0]], block = []}>
#loc1 = loc("a_base")
#loc2 = loc("stride_a0")
#loc3 = loc("b_base")
#loc4 = loc("stride_b1")
#loc5 = loc("b_scale")
#loc6 = loc("out")
#mma = #ttg.amd_mfma<{version = 4, warpsPerCTA = [2, 2], instrShape = [16, 16], isTransposed = true}>
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "hip:gfx950", "ttg.threads-per-warp" = 64 : i32} {
  tt.func public @dot_scale_kernel(%a_base: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("a_base"), %stride_a0: i32 {tt.divisibility = 16 : i32} loc("stride_a0"), %b_base: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("b_base"), %stride_b1: i32 {tt.divisibility = 16 : i32} loc("stride_b1"), %b_scale: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("b_scale"), %out: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("out")) attributes {noinline = false} {
    %cst = arith.constant dense<32> : tensor<32x1xi32, #mma> loc(#loc)
    %cst_0 = arith.constant dense<8> : tensor<32x1xi32, #blocked> loc(#loc)
    %cst_1 = arith.constant dense<7> : tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %cst_2 = arith.constant dense<-1> : tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %cst_3 = arith.constant dense<0x7FC0> : tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %cst_4 = arith.constant dense<0.000000e+00> : tensor<32x32xf32, #mma> loc(#loc)
    %0 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc)
    %1 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc)
    %2 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc)
    %3 = tt.expand_dims %0 {axis = 1 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> -> tensor<32x1xi32, #blocked1> loc(#loc)
    %4 = tt.splat %stride_a0 : i32 -> tensor<32x1xi32, #blocked1> loc(#loc)
    %5 = arith.muli %3, %4 : tensor<32x1xi32, #blocked1> loc(#loc)
    %6 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc)
    %7 = tt.broadcast %5 : tensor<32x1xi32, #blocked1> -> tensor<32x256xi32, #blocked1> loc(#loc)
    %8 = tt.expand_dims %6 {axis = 0 : i32} : tensor<256xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x256xi32, #blocked1> loc(#loc)
    %9 = tt.broadcast %8 : tensor<1x256xi32, #blocked1> -> tensor<32x256xi32, #blocked1> loc(#loc)
    %10 = arith.addi %9, %7 : tensor<32x256xi32, #blocked1> loc(#loc)
    %11 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked2}>> loc(#loc)
    %12 = tt.expand_dims %11 {axis = 1 : i32} : tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked2}>> -> tensor<128x1xi32, #blocked2> loc(#loc)
    %13 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked2}>> loc(#loc)
    %14 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #mma}>> loc(#loc)
    %15 = tt.broadcast %12 : tensor<128x1xi32, #blocked2> -> tensor<128x32xi32, #blocked2> loc(#loc)
    %16 = tt.expand_dims %13 {axis = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked2}>> -> tensor<1x32xi32, #blocked2> loc(#loc)
    %17 = tt.splat %stride_b1 : i32 -> tensor<1x32xi32, #blocked2> loc(#loc)
    %18 = arith.muli %16, %17 : tensor<1x32xi32, #blocked2> loc(#loc)
    %19 = tt.broadcast %18 : tensor<1x32xi32, #blocked2> -> tensor<128x32xi32, #blocked2> loc(#loc)
    %20 = arith.addi %19, %15 : tensor<128x32xi32, #blocked2> loc(#loc)
    %21 = tt.splat %a_base : !tt.ptr<bf16> -> tensor<32x256x!tt.ptr<bf16>, #blocked1> loc(#loc)
    %22 = tt.addptr %21, %10 : tensor<32x256x!tt.ptr<bf16>, #blocked1>, tensor<32x256xi32, #blocked1> loc(#loc)
    %23 = tt.load %22 : tensor<32x256x!tt.ptr<bf16>, #blocked1> loc(#loc)
    %24 = ttg.convert_layout %23 : tensor<32x256xbf16, #blocked1> -> tensor<32x256xbf16, #linear1> loc(#loc)
    %25 = tt.reshape %24 : tensor<32x256xbf16, #linear1> -> tensor<32x2x128xbf16, #linear2> loc(#loc)
    %26 = tt.trans %25 {order = array<i32: 0, 2, 1>} : tensor<32x2x128xbf16, #linear2> -> tensor<32x128x2xbf16, #linear3> loc(#loc)
    %outLHS, %outRHS = tt.split %26 : tensor<32x128x2xbf16, #linear3> -> tensor<32x128xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> loc(#loc)
    %27 = tt.splat %b_base : !tt.ptr<i8> -> tensor<128x32x!tt.ptr<i8>, #blocked2> loc(#loc)
    %28 = tt.addptr %27, %20 : tensor<128x32x!tt.ptr<i8>, #blocked2>, tensor<128x32xi32, #blocked2> loc(#loc)
    %29 = tt.load %28 : tensor<128x32x!tt.ptr<i8>, #blocked2> loc(#loc)
    %30 = ttg.convert_layout %29 : tensor<128x32xi8, #blocked2> -> tensor<128x32xi8, #linear4> loc(#loc)
    %31 = tt.reshape %30 : tensor<128x32xi8, #linear4> -> tensor<2x64x32xi8, #linear5> loc(#loc)
    %32 = tt.trans %31 {order = array<i32: 1, 2, 0>} : tensor<2x64x32xi8, #linear5> -> tensor<64x32x2xi8, #linear6> loc(#loc)
    %outLHS_5, %outRHS_6 = tt.split %32 : tensor<64x32x2xi8, #linear6> -> tensor<64x32xi8, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 4}>> loc(#loc)
    %33 = tt.expand_dims %1 {axis = 1 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<32x1xi32, #blocked> loc(#loc)
    %34 = arith.muli %33, %cst_0 : tensor<32x1xi32, #blocked> loc(#loc)
    %35 = tt.make_range {end = 8 : i32, start = 0 : i32} : tensor<8xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc)
    %36 = tt.broadcast %34 : tensor<32x1xi32, #blocked> -> tensor<32x8xi32, #blocked> loc(#loc)
    %37 = tt.expand_dims %35 {axis = 0 : i32} : tensor<8xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x8xi32, #blocked> loc(#loc)
    %38 = tt.broadcast %37 : tensor<1x8xi32, #blocked> -> tensor<32x8xi32, #blocked> loc(#loc)
    %39 = arith.addi %38, %36 : tensor<32x8xi32, #blocked> loc(#loc)
    %40 = tt.splat %b_scale : !tt.ptr<i8> -> tensor<32x8x!tt.ptr<i8>, #blocked> loc(#loc)
    %41 = tt.addptr %40, %39 : tensor<32x8x!tt.ptr<i8>, #blocked>, tensor<32x8xi32, #blocked> loc(#loc)
    %42 = tt.load %41 : tensor<32x8x!tt.ptr<i8>, #blocked> loc(#loc)
    %43 = ttg.convert_layout %42 : tensor<32x8xi8, #blocked> -> tensor<32x8xi8, #linear7> loc(#loc)
    %44 = tt.reshape %43 : tensor<32x8xi8, #linear7> -> tensor<32x2x4xi8, #linear8> loc(#loc)
    %45 = tt.trans %44 {order = array<i32: 0, 2, 1>} : tensor<32x2x4xi8, #linear8> -> tensor<32x4x2xi8, #linear9> loc(#loc)
    %outLHS_7, %outRHS_8 = tt.split %45 : tensor<32x4x2xi8, #linear9> -> tensor<32x4xi8, #linear10> loc(#loc)
    %46 = tt.trans %outRHS_8 {order = array<i32: 1, 0>} : tensor<32x4xi8, #linear10> -> tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %47 = tt.trans %outLHS_7 {order = array<i32: 1, 0>} : tensor<32x4xi8, #linear10> -> tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %48 = ttg.fp4_to_fp %outLHS_5 {axis = 0 : i32} : tensor<64x32xi8, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 4}>> -> tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %49 = arith.extui %47 : tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> to tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %50 = arith.shli %49, %cst_1 : tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %51 = tt.bitcast %50 : tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> -> tensor<4x32xbf16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %52 = tt.expand_dims %51 {axis = 2 : i32} : tensor<4x32xbf16, #ttg.slice<{dim = 2, parent = #linear}>> -> tensor<4x32x1xbf16, #linear> loc(#loc)
    %53 = tt.broadcast %52 : tensor<4x32x1xbf16, #linear> -> tensor<4x32x32xbf16, #linear> loc(#loc)
    %54 = tt.trans %53 {order = array<i32: 0, 2, 1>} : tensor<4x32x32xbf16, #linear> -> tensor<4x32x32xbf16, #linear11> loc(#loc)
    %55 = tt.reshape %54 : tensor<4x32x32xbf16, #linear11> -> tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %56 = arith.mulf %48, %55 : tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %57 = arith.cmpi eq, %47, %cst_2 : tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %58 = tt.expand_dims %57 {axis = 2 : i32} : tensor<4x32xi1, #ttg.slice<{dim = 2, parent = #linear}>> -> tensor<4x32x1xi1, #linear> loc(#loc)
    %59 = tt.broadcast %58 : tensor<4x32x1xi1, #linear> -> tensor<4x32x32xi1, #linear> loc(#loc)
    %60 = tt.trans %59 {order = array<i32: 0, 2, 1>} : tensor<4x32x32xi1, #linear> -> tensor<4x32x32xi1, #linear11> loc(#loc)
    %61 = tt.reshape %60 : tensor<4x32x32xi1, #linear11> -> tensor<128x32xi1, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %62 = arith.select %61, %cst_3, %56 : tensor<128x32xi1, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>>, tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %63 = tt.dot %outLHS, %62, %cst_4 : tensor<32x128xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> * tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> -> tensor<32x32xf32, #mma> loc(#loc)
    %64 = ttg.fp4_to_fp %outRHS_6 {axis = 0 : i32} : tensor<64x32xi8, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 4}>> -> tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %65 = arith.extui %46 : tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> to tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %66 = arith.shli %65, %cst_1 : tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %67 = tt.bitcast %66 : tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> -> tensor<4x32xbf16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %68 = tt.expand_dims %67 {axis = 2 : i32} : tensor<4x32xbf16, #ttg.slice<{dim = 2, parent = #linear}>> -> tensor<4x32x1xbf16, #linear> loc(#loc)
    %69 = tt.broadcast %68 : tensor<4x32x1xbf16, #linear> -> tensor<4x32x32xbf16, #linear> loc(#loc)
    %70 = tt.trans %69 {order = array<i32: 0, 2, 1>} : tensor<4x32x32xbf16, #linear> -> tensor<4x32x32xbf16, #linear11> loc(#loc)
    %71 = tt.reshape %70 : tensor<4x32x32xbf16, #linear11> -> tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %72 = arith.mulf %64, %71 : tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %73 = arith.cmpi eq, %46, %cst_2 : tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %74 = tt.expand_dims %73 {axis = 2 : i32} : tensor<4x32xi1, #ttg.slice<{dim = 2, parent = #linear}>> -> tensor<4x32x1xi1, #linear> loc(#loc)
    %75 = tt.broadcast %74 : tensor<4x32x1xi1, #linear> -> tensor<4x32x32xi1, #linear> loc(#loc)
    %76 = tt.trans %75 {order = array<i32: 0, 2, 1>} : tensor<4x32x32xi1, #linear> -> tensor<4x32x32xi1, #linear11> loc(#loc)
    %77 = tt.reshape %76 : tensor<4x32x32xi1, #linear11> -> tensor<128x32xi1, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %78 = arith.select %77, %cst_3, %72 : tensor<128x32xi1, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>>, tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %79 = tt.dot %outRHS, %78, %cst_4 : tensor<32x128xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> * tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> -> tensor<32x32xf32, #mma> loc(#loc)
    %80 = arith.addf %63, %79 : tensor<32x32xf32, #mma> loc(#loc)
    %81 = tt.expand_dims %2 {axis = 1 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #mma}>> -> tensor<32x1xi32, #mma> loc(#loc)
    %82 = arith.muli %81, %cst : tensor<32x1xi32, #mma> loc(#loc)
    %83 = tt.broadcast %82 : tensor<32x1xi32, #mma> -> tensor<32x32xi32, #mma> loc(#loc)
    %84 = tt.expand_dims %14 {axis = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #mma}>> -> tensor<1x32xi32, #mma> loc(#loc)
    %85 = tt.broadcast %84 : tensor<1x32xi32, #mma> -> tensor<32x32xi32, #mma> loc(#loc)
    %86 = arith.addi %85, %83 : tensor<32x32xi32, #mma> loc(#loc)
    %87 = arith.truncf %80 : tensor<32x32xf32, #mma> to tensor<32x32xbf16, #mma> loc(#loc)
    %88 = tt.splat %out : !tt.ptr<bf16> -> tensor<32x32x!tt.ptr<bf16>, #mma> loc(#loc)
    %89 = tt.addptr %88, %86 : tensor<32x32x!tt.ptr<bf16>, #mma>, tensor<32x32xi32, #mma> loc(#loc)
    tt.store %89, %87 : tensor<32x32x!tt.ptr<bf16>, #mma> loc(#loc)
    tt.return loc(#loc)
  } loc(#loc)
} loc(#loc)
#loc = loc(unknown)


// -----// IR Dump Before TritonAMDFoldTrueCmpI (tritonamdgpu-fold-true-cmpi) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [8, 8], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [1, 8], threadsPerWarp = [2, 32], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked2 = #ttg.blocked<{sizePerThread = [16, 1], threadsPerWarp = [8, 8], warpsPerCTA = [1, 4], order = [0, 1]}>
#linear = #ttg.linear<{register = [[0, 0, 1], [0, 0, 2], [0, 0, 4], [1, 0, 0], [2, 0, 0]], lane = [[0, 1, 0], [0, 2, 0], [0, 4, 0], [0, 8, 0], [0, 0, 8], [0, 0, 16]], warp = [[0, 16, 0], [0, 0, 0]], block = []}>
#linear1 = #ttg.linear<{register = [[0, 128], [0, 1], [0, 2], [0, 4], [0, 32], [0, 64]], lane = [[1, 0], [2, 0], [4, 0], [8, 0], [0, 8], [0, 16]], warp = [[0, 0], [16, 0]], block = []}>
#linear2 = #ttg.linear<{register = [[0, 1, 0], [0, 0, 1], [0, 0, 2], [0, 0, 4], [0, 0, 32], [0, 0, 64]], lane = [[1, 0, 0], [2, 0, 0], [4, 0, 0], [8, 0, 0], [0, 0, 8], [0, 0, 16]], warp = [[0, 0, 0], [16, 0, 0]], block = []}>
#linear3 = #ttg.linear<{register = [[0, 0, 1], [0, 1, 0], [0, 2, 0], [0, 4, 0], [0, 32, 0], [0, 64, 0]], lane = [[1, 0, 0], [2, 0, 0], [4, 0, 0], [8, 0, 0], [0, 8, 0], [0, 16, 0]], warp = [[0, 0, 0], [16, 0, 0]], block = []}>
#linear4 = #ttg.linear<{register = [[64, 0], [1, 0], [2, 0], [16, 0], [32, 0]], lane = [[0, 1], [0, 2], [0, 4], [0, 8], [4, 0], [8, 0]], warp = [[0, 16], [0, 0]], block = []}>
#linear5 = #ttg.linear<{register = [[1, 0, 0], [0, 1, 0], [0, 2, 0], [0, 16, 0], [0, 32, 0]], lane = [[0, 0, 1], [0, 0, 2], [0, 0, 4], [0, 0, 8], [0, 4, 0], [0, 8, 0]], warp = [[0, 0, 16], [0, 0, 0]], block = []}>
#linear6 = #ttg.linear<{register = [[0, 0, 1], [1, 0, 0], [2, 0, 0], [16, 0, 0], [32, 0, 0]], lane = [[0, 1, 0], [0, 2, 0], [0, 4, 0], [0, 8, 0], [4, 0, 0], [8, 0, 0]], warp = [[0, 16, 0], [0, 0, 0]], block = []}>
#linear7 = #ttg.linear<{register = [[0, 4], [0, 1], [0, 2]], lane = [[1, 0], [2, 0], [4, 0], [8, 0], [0, 0], [0, 0]], warp = [[16, 0], [0, 0]], block = []}>
#linear8 = #ttg.linear<{register = [[0, 1, 0], [0, 0, 1], [0, 0, 2]], lane = [[1, 0, 0], [2, 0, 0], [4, 0, 0], [8, 0, 0], [0, 0, 0], [0, 0, 0]], warp = [[16, 0, 0], [0, 0, 0]], block = []}>
#linear9 = #ttg.linear<{register = [[0, 0, 1], [0, 1, 0], [0, 2, 0]], lane = [[1, 0, 0], [2, 0, 0], [4, 0, 0], [8, 0, 0], [0, 0, 0], [0, 0, 0]], warp = [[16, 0, 0], [0, 0, 0]], block = []}>
#linear10 = #ttg.linear<{register = [[0, 1], [0, 2]], lane = [[1, 0], [2, 0], [4, 0], [8, 0], [0, 0], [0, 0]], warp = [[16, 0], [0, 0]], block = []}>
#linear11 = #ttg.linear<{register = [[0, 1, 0], [0, 2, 0], [0, 4, 0], [1, 0, 0], [2, 0, 0]], lane = [[0, 0, 1], [0, 0, 2], [0, 0, 4], [0, 0, 8], [0, 8, 0], [0, 16, 0]], warp = [[0, 0, 16], [0, 0, 0]], block = []}>
#loc1 = loc("a_base")
#loc2 = loc("stride_a0")
#loc3 = loc("b_base")
#loc4 = loc("stride_b1")
#loc5 = loc("b_scale")
#loc6 = loc("out")
#mma = #ttg.amd_mfma<{version = 4, warpsPerCTA = [2, 2], instrShape = [16, 16], isTransposed = true}>
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "hip:gfx950", "ttg.threads-per-warp" = 64 : i32} {
  tt.func public @dot_scale_kernel(%a_base: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("a_base"), %stride_a0: i32 {tt.divisibility = 16 : i32} loc("stride_a0"), %b_base: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("b_base"), %stride_b1: i32 {tt.divisibility = 16 : i32} loc("stride_b1"), %b_scale: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("b_scale"), %out: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("out")) attributes {noinline = false} {
    %cst = arith.constant dense<32> : tensor<32x1xi32, #mma> loc(#loc)
    %cst_0 = arith.constant dense<8> : tensor<32x1xi32, #blocked> loc(#loc)
    %cst_1 = arith.constant dense<7> : tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %cst_2 = arith.constant dense<-1> : tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %cst_3 = arith.constant dense<0x7FC0> : tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %cst_4 = arith.constant dense<0.000000e+00> : tensor<32x32xf32, #mma> loc(#loc)
    %0 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc)
    %1 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc)
    %2 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc)
    %3 = tt.expand_dims %0 {axis = 1 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> -> tensor<32x1xi32, #blocked1> loc(#loc)
    %4 = tt.splat %stride_a0 : i32 -> tensor<32x1xi32, #blocked1> loc(#loc)
    %5 = arith.muli %3, %4 : tensor<32x1xi32, #blocked1> loc(#loc)
    %6 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc)
    %7 = tt.broadcast %5 : tensor<32x1xi32, #blocked1> -> tensor<32x256xi32, #blocked1> loc(#loc)
    %8 = tt.expand_dims %6 {axis = 0 : i32} : tensor<256xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x256xi32, #blocked1> loc(#loc)
    %9 = tt.broadcast %8 : tensor<1x256xi32, #blocked1> -> tensor<32x256xi32, #blocked1> loc(#loc)
    %10 = arith.addi %9, %7 : tensor<32x256xi32, #blocked1> loc(#loc)
    %11 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked2}>> loc(#loc)
    %12 = tt.expand_dims %11 {axis = 1 : i32} : tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked2}>> -> tensor<128x1xi32, #blocked2> loc(#loc)
    %13 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked2}>> loc(#loc)
    %14 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #mma}>> loc(#loc)
    %15 = tt.broadcast %12 : tensor<128x1xi32, #blocked2> -> tensor<128x32xi32, #blocked2> loc(#loc)
    %16 = tt.expand_dims %13 {axis = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked2}>> -> tensor<1x32xi32, #blocked2> loc(#loc)
    %17 = tt.splat %stride_b1 : i32 -> tensor<1x32xi32, #blocked2> loc(#loc)
    %18 = arith.muli %16, %17 : tensor<1x32xi32, #blocked2> loc(#loc)
    %19 = tt.broadcast %18 : tensor<1x32xi32, #blocked2> -> tensor<128x32xi32, #blocked2> loc(#loc)
    %20 = arith.addi %19, %15 : tensor<128x32xi32, #blocked2> loc(#loc)
    %21 = tt.splat %a_base : !tt.ptr<bf16> -> tensor<32x256x!tt.ptr<bf16>, #blocked1> loc(#loc)
    %22 = tt.addptr %21, %10 : tensor<32x256x!tt.ptr<bf16>, #blocked1>, tensor<32x256xi32, #blocked1> loc(#loc)
    %23 = tt.load %22 : tensor<32x256x!tt.ptr<bf16>, #blocked1> loc(#loc)
    %24 = ttg.convert_layout %23 : tensor<32x256xbf16, #blocked1> -> tensor<32x256xbf16, #linear1> loc(#loc)
    %25 = tt.reshape %24 : tensor<32x256xbf16, #linear1> -> tensor<32x2x128xbf16, #linear2> loc(#loc)
    %26 = tt.trans %25 {order = array<i32: 0, 2, 1>} : tensor<32x2x128xbf16, #linear2> -> tensor<32x128x2xbf16, #linear3> loc(#loc)
    %outLHS, %outRHS = tt.split %26 : tensor<32x128x2xbf16, #linear3> -> tensor<32x128xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> loc(#loc)
    %27 = tt.splat %b_base : !tt.ptr<i8> -> tensor<128x32x!tt.ptr<i8>, #blocked2> loc(#loc)
    %28 = tt.addptr %27, %20 : tensor<128x32x!tt.ptr<i8>, #blocked2>, tensor<128x32xi32, #blocked2> loc(#loc)
    %29 = tt.load %28 : tensor<128x32x!tt.ptr<i8>, #blocked2> loc(#loc)
    %30 = ttg.convert_layout %29 : tensor<128x32xi8, #blocked2> -> tensor<128x32xi8, #linear4> loc(#loc)
    %31 = tt.reshape %30 : tensor<128x32xi8, #linear4> -> tensor<2x64x32xi8, #linear5> loc(#loc)
    %32 = tt.trans %31 {order = array<i32: 1, 2, 0>} : tensor<2x64x32xi8, #linear5> -> tensor<64x32x2xi8, #linear6> loc(#loc)
    %outLHS_5, %outRHS_6 = tt.split %32 : tensor<64x32x2xi8, #linear6> -> tensor<64x32xi8, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 4}>> loc(#loc)
    %33 = tt.expand_dims %1 {axis = 1 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<32x1xi32, #blocked> loc(#loc)
    %34 = arith.muli %33, %cst_0 : tensor<32x1xi32, #blocked> loc(#loc)
    %35 = tt.make_range {end = 8 : i32, start = 0 : i32} : tensor<8xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc)
    %36 = tt.broadcast %34 : tensor<32x1xi32, #blocked> -> tensor<32x8xi32, #blocked> loc(#loc)
    %37 = tt.expand_dims %35 {axis = 0 : i32} : tensor<8xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x8xi32, #blocked> loc(#loc)
    %38 = tt.broadcast %37 : tensor<1x8xi32, #blocked> -> tensor<32x8xi32, #blocked> loc(#loc)
    %39 = arith.addi %38, %36 : tensor<32x8xi32, #blocked> loc(#loc)
    %40 = amdgpu.buffer_load %b_scale[%39] : tensor<32x8xi8, #blocked> loc(#loc)
    %41 = ttg.convert_layout %40 : tensor<32x8xi8, #blocked> -> tensor<32x8xi8, #linear7> loc(#loc)
    %42 = tt.reshape %41 : tensor<32x8xi8, #linear7> -> tensor<32x2x4xi8, #linear8> loc(#loc)
    %43 = tt.trans %42 {order = array<i32: 0, 2, 1>} : tensor<32x2x4xi8, #linear8> -> tensor<32x4x2xi8, #linear9> loc(#loc)
    %outLHS_7, %outRHS_8 = tt.split %43 : tensor<32x4x2xi8, #linear9> -> tensor<32x4xi8, #linear10> loc(#loc)
    %44 = tt.trans %outRHS_8 {order = array<i32: 1, 0>} : tensor<32x4xi8, #linear10> -> tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %45 = tt.trans %outLHS_7 {order = array<i32: 1, 0>} : tensor<32x4xi8, #linear10> -> tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %46 = ttg.fp4_to_fp %outLHS_5 {axis = 0 : i32} : tensor<64x32xi8, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 4}>> -> tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %47 = arith.extui %45 : tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> to tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %48 = arith.shli %47, %cst_1 : tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %49 = tt.bitcast %48 : tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> -> tensor<4x32xbf16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %50 = tt.expand_dims %49 {axis = 2 : i32} : tensor<4x32xbf16, #ttg.slice<{dim = 2, parent = #linear}>> -> tensor<4x32x1xbf16, #linear> loc(#loc)
    %51 = tt.broadcast %50 : tensor<4x32x1xbf16, #linear> -> tensor<4x32x32xbf16, #linear> loc(#loc)
    %52 = tt.trans %51 {order = array<i32: 0, 2, 1>} : tensor<4x32x32xbf16, #linear> -> tensor<4x32x32xbf16, #linear11> loc(#loc)
    %53 = tt.reshape %52 : tensor<4x32x32xbf16, #linear11> -> tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %54 = arith.mulf %46, %53 : tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %55 = arith.cmpi eq, %45, %cst_2 : tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %56 = tt.expand_dims %55 {axis = 2 : i32} : tensor<4x32xi1, #ttg.slice<{dim = 2, parent = #linear}>> -> tensor<4x32x1xi1, #linear> loc(#loc)
    %57 = tt.broadcast %56 : tensor<4x32x1xi1, #linear> -> tensor<4x32x32xi1, #linear> loc(#loc)
    %58 = tt.trans %57 {order = array<i32: 0, 2, 1>} : tensor<4x32x32xi1, #linear> -> tensor<4x32x32xi1, #linear11> loc(#loc)
    %59 = tt.reshape %58 : tensor<4x32x32xi1, #linear11> -> tensor<128x32xi1, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %60 = arith.select %59, %cst_3, %54 : tensor<128x32xi1, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>>, tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %61 = tt.dot %outLHS, %60, %cst_4 : tensor<32x128xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> * tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> -> tensor<32x32xf32, #mma> loc(#loc)
    %62 = ttg.fp4_to_fp %outRHS_6 {axis = 0 : i32} : tensor<64x32xi8, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 4}>> -> tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %63 = arith.extui %44 : tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> to tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %64 = arith.shli %63, %cst_1 : tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %65 = tt.bitcast %64 : tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> -> tensor<4x32xbf16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %66 = tt.expand_dims %65 {axis = 2 : i32} : tensor<4x32xbf16, #ttg.slice<{dim = 2, parent = #linear}>> -> tensor<4x32x1xbf16, #linear> loc(#loc)
    %67 = tt.broadcast %66 : tensor<4x32x1xbf16, #linear> -> tensor<4x32x32xbf16, #linear> loc(#loc)
    %68 = tt.trans %67 {order = array<i32: 0, 2, 1>} : tensor<4x32x32xbf16, #linear> -> tensor<4x32x32xbf16, #linear11> loc(#loc)
    %69 = tt.reshape %68 : tensor<4x32x32xbf16, #linear11> -> tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %70 = arith.mulf %62, %69 : tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %71 = arith.cmpi eq, %44, %cst_2 : tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %72 = tt.expand_dims %71 {axis = 2 : i32} : tensor<4x32xi1, #ttg.slice<{dim = 2, parent = #linear}>> -> tensor<4x32x1xi1, #linear> loc(#loc)
    %73 = tt.broadcast %72 : tensor<4x32x1xi1, #linear> -> tensor<4x32x32xi1, #linear> loc(#loc)
    %74 = tt.trans %73 {order = array<i32: 0, 2, 1>} : tensor<4x32x32xi1, #linear> -> tensor<4x32x32xi1, #linear11> loc(#loc)
    %75 = tt.reshape %74 : tensor<4x32x32xi1, #linear11> -> tensor<128x32xi1, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %76 = arith.select %75, %cst_3, %70 : tensor<128x32xi1, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>>, tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %77 = tt.dot %outRHS, %76, %cst_4 : tensor<32x128xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> * tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> -> tensor<32x32xf32, #mma> loc(#loc)
    %78 = arith.addf %61, %77 : tensor<32x32xf32, #mma> loc(#loc)
    %79 = tt.expand_dims %2 {axis = 1 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #mma}>> -> tensor<32x1xi32, #mma> loc(#loc)
    %80 = arith.muli %79, %cst : tensor<32x1xi32, #mma> loc(#loc)
    %81 = tt.broadcast %80 : tensor<32x1xi32, #mma> -> tensor<32x32xi32, #mma> loc(#loc)
    %82 = tt.expand_dims %14 {axis = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #mma}>> -> tensor<1x32xi32, #mma> loc(#loc)
    %83 = tt.broadcast %82 : tensor<1x32xi32, #mma> -> tensor<32x32xi32, #mma> loc(#loc)
    %84 = arith.addi %83, %81 : tensor<32x32xi32, #mma> loc(#loc)
    %85 = arith.truncf %78 : tensor<32x32xf32, #mma> to tensor<32x32xbf16, #mma> loc(#loc)
    amdgpu.buffer_store %85, %out[%84] : tensor<32x32xbf16, #mma> loc(#loc)
    tt.return loc(#loc)
  } loc(#loc)
} loc(#loc)
#loc = loc(unknown)


// -----// IR Dump Before Canonicalizer (canonicalize) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [8, 8], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [1, 8], threadsPerWarp = [2, 32], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked2 = #ttg.blocked<{sizePerThread = [16, 1], threadsPerWarp = [8, 8], warpsPerCTA = [1, 4], order = [0, 1]}>
#linear = #ttg.linear<{register = [[0, 0, 1], [0, 0, 2], [0, 0, 4], [1, 0, 0], [2, 0, 0]], lane = [[0, 1, 0], [0, 2, 0], [0, 4, 0], [0, 8, 0], [0, 0, 8], [0, 0, 16]], warp = [[0, 16, 0], [0, 0, 0]], block = []}>
#linear1 = #ttg.linear<{register = [[0, 128], [0, 1], [0, 2], [0, 4], [0, 32], [0, 64]], lane = [[1, 0], [2, 0], [4, 0], [8, 0], [0, 8], [0, 16]], warp = [[0, 0], [16, 0]], block = []}>
#linear2 = #ttg.linear<{register = [[0, 1, 0], [0, 0, 1], [0, 0, 2], [0, 0, 4], [0, 0, 32], [0, 0, 64]], lane = [[1, 0, 0], [2, 0, 0], [4, 0, 0], [8, 0, 0], [0, 0, 8], [0, 0, 16]], warp = [[0, 0, 0], [16, 0, 0]], block = []}>
#linear3 = #ttg.linear<{register = [[0, 0, 1], [0, 1, 0], [0, 2, 0], [0, 4, 0], [0, 32, 0], [0, 64, 0]], lane = [[1, 0, 0], [2, 0, 0], [4, 0, 0], [8, 0, 0], [0, 8, 0], [0, 16, 0]], warp = [[0, 0, 0], [16, 0, 0]], block = []}>
#linear4 = #ttg.linear<{register = [[64, 0], [1, 0], [2, 0], [16, 0], [32, 0]], lane = [[0, 1], [0, 2], [0, 4], [0, 8], [4, 0], [8, 0]], warp = [[0, 16], [0, 0]], block = []}>
#linear5 = #ttg.linear<{register = [[1, 0, 0], [0, 1, 0], [0, 2, 0], [0, 16, 0], [0, 32, 0]], lane = [[0, 0, 1], [0, 0, 2], [0, 0, 4], [0, 0, 8], [0, 4, 0], [0, 8, 0]], warp = [[0, 0, 16], [0, 0, 0]], block = []}>
#linear6 = #ttg.linear<{register = [[0, 0, 1], [1, 0, 0], [2, 0, 0], [16, 0, 0], [32, 0, 0]], lane = [[0, 1, 0], [0, 2, 0], [0, 4, 0], [0, 8, 0], [4, 0, 0], [8, 0, 0]], warp = [[0, 16, 0], [0, 0, 0]], block = []}>
#linear7 = #ttg.linear<{register = [[0, 4], [0, 1], [0, 2]], lane = [[1, 0], [2, 0], [4, 0], [8, 0], [0, 0], [0, 0]], warp = [[16, 0], [0, 0]], block = []}>
#linear8 = #ttg.linear<{register = [[0, 1, 0], [0, 0, 1], [0, 0, 2]], lane = [[1, 0, 0], [2, 0, 0], [4, 0, 0], [8, 0, 0], [0, 0, 0], [0, 0, 0]], warp = [[16, 0, 0], [0, 0, 0]], block = []}>
#linear9 = #ttg.linear<{register = [[0, 0, 1], [0, 1, 0], [0, 2, 0]], lane = [[1, 0, 0], [2, 0, 0], [4, 0, 0], [8, 0, 0], [0, 0, 0], [0, 0, 0]], warp = [[16, 0, 0], [0, 0, 0]], block = []}>
#linear10 = #ttg.linear<{register = [[0, 1], [0, 2]], lane = [[1, 0], [2, 0], [4, 0], [8, 0], [0, 0], [0, 0]], warp = [[16, 0], [0, 0]], block = []}>
#linear11 = #ttg.linear<{register = [[0, 1, 0], [0, 2, 0], [0, 4, 0], [1, 0, 0], [2, 0, 0]], lane = [[0, 0, 1], [0, 0, 2], [0, 0, 4], [0, 0, 8], [0, 8, 0], [0, 16, 0]], warp = [[0, 0, 16], [0, 0, 0]], block = []}>
#loc1 = loc("a_base")
#loc2 = loc("stride_a0")
#loc3 = loc("b_base")
#loc4 = loc("stride_b1")
#loc5 = loc("b_scale")
#loc6 = loc("out")
#mma = #ttg.amd_mfma<{version = 4, warpsPerCTA = [2, 2], instrShape = [16, 16], isTransposed = true}>
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "hip:gfx950", "ttg.threads-per-warp" = 64 : i32} {
  tt.func public @dot_scale_kernel(%a_base: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("a_base"), %stride_a0: i32 {tt.divisibility = 16 : i32} loc("stride_a0"), %b_base: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("b_base"), %stride_b1: i32 {tt.divisibility = 16 : i32} loc("stride_b1"), %b_scale: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("b_scale"), %out: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("out")) attributes {noinline = false} {
    %cst = arith.constant dense<32> : tensor<32x1xi32, #mma> loc(#loc)
    %cst_0 = arith.constant dense<8> : tensor<32x1xi32, #blocked> loc(#loc)
    %cst_1 = arith.constant dense<7> : tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %cst_2 = arith.constant dense<-1> : tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %cst_3 = arith.constant dense<0x7FC0> : tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %cst_4 = arith.constant dense<0.000000e+00> : tensor<32x32xf32, #mma> loc(#loc)
    %0 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc)
    %1 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc)
    %2 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc)
    %3 = tt.expand_dims %0 {axis = 1 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> -> tensor<32x1xi32, #blocked1> loc(#loc)
    %4 = tt.splat %stride_a0 : i32 -> tensor<32x1xi32, #blocked1> loc(#loc)
    %5 = arith.muli %3, %4 : tensor<32x1xi32, #blocked1> loc(#loc)
    %6 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc)
    %7 = tt.broadcast %5 : tensor<32x1xi32, #blocked1> -> tensor<32x256xi32, #blocked1> loc(#loc)
    %8 = tt.expand_dims %6 {axis = 0 : i32} : tensor<256xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x256xi32, #blocked1> loc(#loc)
    %9 = tt.broadcast %8 : tensor<1x256xi32, #blocked1> -> tensor<32x256xi32, #blocked1> loc(#loc)
    %10 = arith.addi %9, %7 : tensor<32x256xi32, #blocked1> loc(#loc)
    %11 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked2}>> loc(#loc)
    %12 = tt.expand_dims %11 {axis = 1 : i32} : tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked2}>> -> tensor<128x1xi32, #blocked2> loc(#loc)
    %13 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked2}>> loc(#loc)
    %14 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #mma}>> loc(#loc)
    %15 = tt.broadcast %12 : tensor<128x1xi32, #blocked2> -> tensor<128x32xi32, #blocked2> loc(#loc)
    %16 = tt.expand_dims %13 {axis = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked2}>> -> tensor<1x32xi32, #blocked2> loc(#loc)
    %17 = tt.splat %stride_b1 : i32 -> tensor<1x32xi32, #blocked2> loc(#loc)
    %18 = arith.muli %16, %17 : tensor<1x32xi32, #blocked2> loc(#loc)
    %19 = tt.broadcast %18 : tensor<1x32xi32, #blocked2> -> tensor<128x32xi32, #blocked2> loc(#loc)
    %20 = arith.addi %19, %15 : tensor<128x32xi32, #blocked2> loc(#loc)
    %21 = tt.splat %a_base : !tt.ptr<bf16> -> tensor<32x256x!tt.ptr<bf16>, #blocked1> loc(#loc)
    %22 = tt.addptr %21, %10 : tensor<32x256x!tt.ptr<bf16>, #blocked1>, tensor<32x256xi32, #blocked1> loc(#loc)
    %23 = tt.load %22 : tensor<32x256x!tt.ptr<bf16>, #blocked1> loc(#loc)
    %24 = ttg.convert_layout %23 : tensor<32x256xbf16, #blocked1> -> tensor<32x256xbf16, #linear1> loc(#loc)
    %25 = tt.reshape %24 : tensor<32x256xbf16, #linear1> -> tensor<32x2x128xbf16, #linear2> loc(#loc)
    %26 = tt.trans %25 {order = array<i32: 0, 2, 1>} : tensor<32x2x128xbf16, #linear2> -> tensor<32x128x2xbf16, #linear3> loc(#loc)
    %outLHS, %outRHS = tt.split %26 : tensor<32x128x2xbf16, #linear3> -> tensor<32x128xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> loc(#loc)
    %27 = tt.splat %b_base : !tt.ptr<i8> -> tensor<128x32x!tt.ptr<i8>, #blocked2> loc(#loc)
    %28 = tt.addptr %27, %20 : tensor<128x32x!tt.ptr<i8>, #blocked2>, tensor<128x32xi32, #blocked2> loc(#loc)
    %29 = tt.load %28 : tensor<128x32x!tt.ptr<i8>, #blocked2> loc(#loc)
    %30 = ttg.convert_layout %29 : tensor<128x32xi8, #blocked2> -> tensor<128x32xi8, #linear4> loc(#loc)
    %31 = tt.reshape %30 : tensor<128x32xi8, #linear4> -> tensor<2x64x32xi8, #linear5> loc(#loc)
    %32 = tt.trans %31 {order = array<i32: 1, 2, 0>} : tensor<2x64x32xi8, #linear5> -> tensor<64x32x2xi8, #linear6> loc(#loc)
    %outLHS_5, %outRHS_6 = tt.split %32 : tensor<64x32x2xi8, #linear6> -> tensor<64x32xi8, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 4}>> loc(#loc)
    %33 = tt.expand_dims %1 {axis = 1 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<32x1xi32, #blocked> loc(#loc)
    %34 = arith.muli %33, %cst_0 : tensor<32x1xi32, #blocked> loc(#loc)
    %35 = tt.make_range {end = 8 : i32, start = 0 : i32} : tensor<8xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc)
    %36 = tt.broadcast %34 : tensor<32x1xi32, #blocked> -> tensor<32x8xi32, #blocked> loc(#loc)
    %37 = tt.expand_dims %35 {axis = 0 : i32} : tensor<8xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x8xi32, #blocked> loc(#loc)
    %38 = tt.broadcast %37 : tensor<1x8xi32, #blocked> -> tensor<32x8xi32, #blocked> loc(#loc)
    %39 = arith.addi %38, %36 : tensor<32x8xi32, #blocked> loc(#loc)
    %40 = amdgpu.buffer_load %b_scale[%39] : tensor<32x8xi8, #blocked> loc(#loc)
    %41 = ttg.convert_layout %40 : tensor<32x8xi8, #blocked> -> tensor<32x8xi8, #linear7> loc(#loc)
    %42 = tt.reshape %41 : tensor<32x8xi8, #linear7> -> tensor<32x2x4xi8, #linear8> loc(#loc)
    %43 = tt.trans %42 {order = array<i32: 0, 2, 1>} : tensor<32x2x4xi8, #linear8> -> tensor<32x4x2xi8, #linear9> loc(#loc)
    %outLHS_7, %outRHS_8 = tt.split %43 : tensor<32x4x2xi8, #linear9> -> tensor<32x4xi8, #linear10> loc(#loc)
    %44 = tt.trans %outRHS_8 {order = array<i32: 1, 0>} : tensor<32x4xi8, #linear10> -> tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %45 = tt.trans %outLHS_7 {order = array<i32: 1, 0>} : tensor<32x4xi8, #linear10> -> tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %46 = ttg.fp4_to_fp %outLHS_5 {axis = 0 : i32} : tensor<64x32xi8, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 4}>> -> tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %47 = arith.extui %45 : tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> to tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %48 = arith.shli %47, %cst_1 : tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %49 = tt.bitcast %48 : tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> -> tensor<4x32xbf16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %50 = tt.expand_dims %49 {axis = 2 : i32} : tensor<4x32xbf16, #ttg.slice<{dim = 2, parent = #linear}>> -> tensor<4x32x1xbf16, #linear> loc(#loc)
    %51 = tt.broadcast %50 : tensor<4x32x1xbf16, #linear> -> tensor<4x32x32xbf16, #linear> loc(#loc)
    %52 = tt.trans %51 {order = array<i32: 0, 2, 1>} : tensor<4x32x32xbf16, #linear> -> tensor<4x32x32xbf16, #linear11> loc(#loc)
    %53 = tt.reshape %52 : tensor<4x32x32xbf16, #linear11> -> tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %54 = arith.mulf %46, %53 : tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %55 = arith.cmpi eq, %45, %cst_2 : tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %56 = tt.expand_dims %55 {axis = 2 : i32} : tensor<4x32xi1, #ttg.slice<{dim = 2, parent = #linear}>> -> tensor<4x32x1xi1, #linear> loc(#loc)
    %57 = tt.broadcast %56 : tensor<4x32x1xi1, #linear> -> tensor<4x32x32xi1, #linear> loc(#loc)
    %58 = tt.trans %57 {order = array<i32: 0, 2, 1>} : tensor<4x32x32xi1, #linear> -> tensor<4x32x32xi1, #linear11> loc(#loc)
    %59 = tt.reshape %58 : tensor<4x32x32xi1, #linear11> -> tensor<128x32xi1, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %60 = arith.select %59, %cst_3, %54 : tensor<128x32xi1, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>>, tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %61 = tt.dot %outLHS, %60, %cst_4 : tensor<32x128xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> * tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> -> tensor<32x32xf32, #mma> loc(#loc)
    %62 = ttg.fp4_to_fp %outRHS_6 {axis = 0 : i32} : tensor<64x32xi8, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 4}>> -> tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %63 = arith.extui %44 : tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> to tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %64 = arith.shli %63, %cst_1 : tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %65 = tt.bitcast %64 : tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> -> tensor<4x32xbf16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %66 = tt.expand_dims %65 {axis = 2 : i32} : tensor<4x32xbf16, #ttg.slice<{dim = 2, parent = #linear}>> -> tensor<4x32x1xbf16, #linear> loc(#loc)
    %67 = tt.broadcast %66 : tensor<4x32x1xbf16, #linear> -> tensor<4x32x32xbf16, #linear> loc(#loc)
    %68 = tt.trans %67 {order = array<i32: 0, 2, 1>} : tensor<4x32x32xbf16, #linear> -> tensor<4x32x32xbf16, #linear11> loc(#loc)
    %69 = tt.reshape %68 : tensor<4x32x32xbf16, #linear11> -> tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %70 = arith.mulf %62, %69 : tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %71 = arith.cmpi eq, %44, %cst_2 : tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %72 = tt.expand_dims %71 {axis = 2 : i32} : tensor<4x32xi1, #ttg.slice<{dim = 2, parent = #linear}>> -> tensor<4x32x1xi1, #linear> loc(#loc)
    %73 = tt.broadcast %72 : tensor<4x32x1xi1, #linear> -> tensor<4x32x32xi1, #linear> loc(#loc)
    %74 = tt.trans %73 {order = array<i32: 0, 2, 1>} : tensor<4x32x32xi1, #linear> -> tensor<4x32x32xi1, #linear11> loc(#loc)
    %75 = tt.reshape %74 : tensor<4x32x32xi1, #linear11> -> tensor<128x32xi1, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %76 = arith.select %75, %cst_3, %70 : tensor<128x32xi1, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>>, tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %77 = tt.dot %outRHS, %76, %cst_4 : tensor<32x128xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> * tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> -> tensor<32x32xf32, #mma> loc(#loc)
    %78 = arith.addf %61, %77 : tensor<32x32xf32, #mma> loc(#loc)
    %79 = tt.expand_dims %2 {axis = 1 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #mma}>> -> tensor<32x1xi32, #mma> loc(#loc)
    %80 = arith.muli %79, %cst : tensor<32x1xi32, #mma> loc(#loc)
    %81 = tt.broadcast %80 : tensor<32x1xi32, #mma> -> tensor<32x32xi32, #mma> loc(#loc)
    %82 = tt.expand_dims %14 {axis = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #mma}>> -> tensor<1x32xi32, #mma> loc(#loc)
    %83 = tt.broadcast %82 : tensor<1x32xi32, #mma> -> tensor<32x32xi32, #mma> loc(#loc)
    %84 = arith.addi %83, %81 : tensor<32x32xi32, #mma> loc(#loc)
    %85 = arith.truncf %78 : tensor<32x32xf32, #mma> to tensor<32x32xbf16, #mma> loc(#loc)
    amdgpu.buffer_store %85, %out[%84] : tensor<32x32xbf16, #mma> loc(#loc)
    tt.return loc(#loc)
  } loc(#loc)
} loc(#loc)
#loc = loc(unknown)


// -----// IR Dump Before CSE (cse) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [8, 8], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [1, 8], threadsPerWarp = [2, 32], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked2 = #ttg.blocked<{sizePerThread = [16, 1], threadsPerWarp = [8, 8], warpsPerCTA = [1, 4], order = [0, 1]}>
#linear = #ttg.linear<{register = [[0, 0, 1], [0, 0, 2], [0, 0, 4], [1, 0, 0], [2, 0, 0]], lane = [[0, 1, 0], [0, 2, 0], [0, 4, 0], [0, 8, 0], [0, 0, 8], [0, 0, 16]], warp = [[0, 16, 0], [0, 0, 0]], block = []}>
#linear1 = #ttg.linear<{register = [[0, 128], [0, 1], [0, 2], [0, 4], [0, 32], [0, 64]], lane = [[1, 0], [2, 0], [4, 0], [8, 0], [0, 8], [0, 16]], warp = [[0, 0], [16, 0]], block = []}>
#linear2 = #ttg.linear<{register = [[0, 1, 0], [0, 0, 1], [0, 0, 2], [0, 0, 4], [0, 0, 32], [0, 0, 64]], lane = [[1, 0, 0], [2, 0, 0], [4, 0, 0], [8, 0, 0], [0, 0, 8], [0, 0, 16]], warp = [[0, 0, 0], [16, 0, 0]], block = []}>
#linear3 = #ttg.linear<{register = [[0, 0, 1], [0, 1, 0], [0, 2, 0], [0, 4, 0], [0, 32, 0], [0, 64, 0]], lane = [[1, 0, 0], [2, 0, 0], [4, 0, 0], [8, 0, 0], [0, 8, 0], [0, 16, 0]], warp = [[0, 0, 0], [16, 0, 0]], block = []}>
#linear4 = #ttg.linear<{register = [[64, 0], [1, 0], [2, 0], [16, 0], [32, 0]], lane = [[0, 1], [0, 2], [0, 4], [0, 8], [4, 0], [8, 0]], warp = [[0, 16], [0, 0]], block = []}>
#linear5 = #ttg.linear<{register = [[1, 0, 0], [0, 1, 0], [0, 2, 0], [0, 16, 0], [0, 32, 0]], lane = [[0, 0, 1], [0, 0, 2], [0, 0, 4], [0, 0, 8], [0, 4, 0], [0, 8, 0]], warp = [[0, 0, 16], [0, 0, 0]], block = []}>
#linear6 = #ttg.linear<{register = [[0, 0, 1], [1, 0, 0], [2, 0, 0], [16, 0, 0], [32, 0, 0]], lane = [[0, 1, 0], [0, 2, 0], [0, 4, 0], [0, 8, 0], [4, 0, 0], [8, 0, 0]], warp = [[0, 16, 0], [0, 0, 0]], block = []}>
#linear7 = #ttg.linear<{register = [[0, 4], [0, 1], [0, 2]], lane = [[1, 0], [2, 0], [4, 0], [8, 0], [0, 0], [0, 0]], warp = [[16, 0], [0, 0]], block = []}>
#linear8 = #ttg.linear<{register = [[0, 1, 0], [0, 0, 1], [0, 0, 2]], lane = [[1, 0, 0], [2, 0, 0], [4, 0, 0], [8, 0, 0], [0, 0, 0], [0, 0, 0]], warp = [[16, 0, 0], [0, 0, 0]], block = []}>
#linear9 = #ttg.linear<{register = [[0, 0, 1], [0, 1, 0], [0, 2, 0]], lane = [[1, 0, 0], [2, 0, 0], [4, 0, 0], [8, 0, 0], [0, 0, 0], [0, 0, 0]], warp = [[16, 0, 0], [0, 0, 0]], block = []}>
#linear10 = #ttg.linear<{register = [[0, 1], [0, 2]], lane = [[1, 0], [2, 0], [4, 0], [8, 0], [0, 0], [0, 0]], warp = [[16, 0], [0, 0]], block = []}>
#linear11 = #ttg.linear<{register = [[0, 1, 0], [0, 2, 0], [0, 4, 0], [1, 0, 0], [2, 0, 0]], lane = [[0, 0, 1], [0, 0, 2], [0, 0, 4], [0, 0, 8], [0, 8, 0], [0, 16, 0]], warp = [[0, 0, 16], [0, 0, 0]], block = []}>
#loc1 = loc("a_base")
#loc2 = loc("stride_a0")
#loc3 = loc("b_base")
#loc4 = loc("stride_b1")
#loc5 = loc("b_scale")
#loc6 = loc("out")
#mma = #ttg.amd_mfma<{version = 4, warpsPerCTA = [2, 2], instrShape = [16, 16], isTransposed = true}>
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "hip:gfx950", "ttg.threads-per-warp" = 64 : i32} {
  tt.func public @dot_scale_kernel(%a_base: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("a_base"), %stride_a0: i32 {tt.divisibility = 16 : i32} loc("stride_a0"), %b_base: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("b_base"), %stride_b1: i32 {tt.divisibility = 16 : i32} loc("stride_b1"), %b_scale: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("b_scale"), %out: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("out")) attributes {noinline = false} {
    %cst = arith.constant dense<32> : tensor<32x1xi32, #mma> loc(#loc)
    %cst_0 = arith.constant dense<8> : tensor<32x1xi32, #blocked> loc(#loc)
    %cst_1 = arith.constant dense<7> : tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %cst_2 = arith.constant dense<-1> : tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %cst_3 = arith.constant dense<0x7FC0> : tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %cst_4 = arith.constant dense<0.000000e+00> : tensor<32x32xf32, #mma> loc(#loc)
    %0 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc)
    %1 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc)
    %2 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc)
    %3 = tt.expand_dims %0 {axis = 1 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> -> tensor<32x1xi32, #blocked1> loc(#loc)
    %4 = tt.splat %stride_a0 : i32 -> tensor<32x1xi32, #blocked1> loc(#loc)
    %5 = arith.muli %3, %4 : tensor<32x1xi32, #blocked1> loc(#loc)
    %6 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc)
    %7 = tt.broadcast %5 : tensor<32x1xi32, #blocked1> -> tensor<32x256xi32, #blocked1> loc(#loc)
    %8 = tt.expand_dims %6 {axis = 0 : i32} : tensor<256xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x256xi32, #blocked1> loc(#loc)
    %9 = tt.broadcast %8 : tensor<1x256xi32, #blocked1> -> tensor<32x256xi32, #blocked1> loc(#loc)
    %10 = arith.addi %9, %7 : tensor<32x256xi32, #blocked1> loc(#loc)
    %11 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked2}>> loc(#loc)
    %12 = tt.expand_dims %11 {axis = 1 : i32} : tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked2}>> -> tensor<128x1xi32, #blocked2> loc(#loc)
    %13 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked2}>> loc(#loc)
    %14 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #mma}>> loc(#loc)
    %15 = tt.broadcast %12 : tensor<128x1xi32, #blocked2> -> tensor<128x32xi32, #blocked2> loc(#loc)
    %16 = tt.expand_dims %13 {axis = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked2}>> -> tensor<1x32xi32, #blocked2> loc(#loc)
    %17 = tt.splat %stride_b1 : i32 -> tensor<1x32xi32, #blocked2> loc(#loc)
    %18 = arith.muli %16, %17 : tensor<1x32xi32, #blocked2> loc(#loc)
    %19 = tt.broadcast %18 : tensor<1x32xi32, #blocked2> -> tensor<128x32xi32, #blocked2> loc(#loc)
    %20 = arith.addi %19, %15 : tensor<128x32xi32, #blocked2> loc(#loc)
    %21 = tt.splat %a_base : !tt.ptr<bf16> -> tensor<32x256x!tt.ptr<bf16>, #blocked1> loc(#loc)
    %22 = tt.addptr %21, %10 : tensor<32x256x!tt.ptr<bf16>, #blocked1>, tensor<32x256xi32, #blocked1> loc(#loc)
    %23 = tt.load %22 : tensor<32x256x!tt.ptr<bf16>, #blocked1> loc(#loc)
    %24 = ttg.convert_layout %23 : tensor<32x256xbf16, #blocked1> -> tensor<32x256xbf16, #linear1> loc(#loc)
    %25 = tt.reshape %24 : tensor<32x256xbf16, #linear1> -> tensor<32x2x128xbf16, #linear2> loc(#loc)
    %26 = tt.trans %25 {order = array<i32: 0, 2, 1>} : tensor<32x2x128xbf16, #linear2> -> tensor<32x128x2xbf16, #linear3> loc(#loc)
    %outLHS, %outRHS = tt.split %26 : tensor<32x128x2xbf16, #linear3> -> tensor<32x128xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> loc(#loc)
    %27 = tt.splat %b_base : !tt.ptr<i8> -> tensor<128x32x!tt.ptr<i8>, #blocked2> loc(#loc)
    %28 = tt.addptr %27, %20 : tensor<128x32x!tt.ptr<i8>, #blocked2>, tensor<128x32xi32, #blocked2> loc(#loc)
    %29 = tt.load %28 : tensor<128x32x!tt.ptr<i8>, #blocked2> loc(#loc)
    %30 = ttg.convert_layout %29 : tensor<128x32xi8, #blocked2> -> tensor<128x32xi8, #linear4> loc(#loc)
    %31 = tt.reshape %30 : tensor<128x32xi8, #linear4> -> tensor<2x64x32xi8, #linear5> loc(#loc)
    %32 = tt.trans %31 {order = array<i32: 1, 2, 0>} : tensor<2x64x32xi8, #linear5> -> tensor<64x32x2xi8, #linear6> loc(#loc)
    %outLHS_5, %outRHS_6 = tt.split %32 : tensor<64x32x2xi8, #linear6> -> tensor<64x32xi8, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 4}>> loc(#loc)
    %33 = tt.expand_dims %1 {axis = 1 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<32x1xi32, #blocked> loc(#loc)
    %34 = arith.muli %33, %cst_0 : tensor<32x1xi32, #blocked> loc(#loc)
    %35 = tt.make_range {end = 8 : i32, start = 0 : i32} : tensor<8xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc)
    %36 = tt.broadcast %34 : tensor<32x1xi32, #blocked> -> tensor<32x8xi32, #blocked> loc(#loc)
    %37 = tt.expand_dims %35 {axis = 0 : i32} : tensor<8xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x8xi32, #blocked> loc(#loc)
    %38 = tt.broadcast %37 : tensor<1x8xi32, #blocked> -> tensor<32x8xi32, #blocked> loc(#loc)
    %39 = arith.addi %38, %36 : tensor<32x8xi32, #blocked> loc(#loc)
    %40 = amdgpu.buffer_load %b_scale[%39] : tensor<32x8xi8, #blocked> loc(#loc)
    %41 = ttg.convert_layout %40 : tensor<32x8xi8, #blocked> -> tensor<32x8xi8, #linear7> loc(#loc)
    %42 = tt.reshape %41 : tensor<32x8xi8, #linear7> -> tensor<32x2x4xi8, #linear8> loc(#loc)
    %43 = tt.trans %42 {order = array<i32: 0, 2, 1>} : tensor<32x2x4xi8, #linear8> -> tensor<32x4x2xi8, #linear9> loc(#loc)
    %outLHS_7, %outRHS_8 = tt.split %43 : tensor<32x4x2xi8, #linear9> -> tensor<32x4xi8, #linear10> loc(#loc)
    %44 = tt.trans %outRHS_8 {order = array<i32: 1, 0>} : tensor<32x4xi8, #linear10> -> tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %45 = tt.trans %outLHS_7 {order = array<i32: 1, 0>} : tensor<32x4xi8, #linear10> -> tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %46 = ttg.fp4_to_fp %outLHS_5 {axis = 0 : i32} : tensor<64x32xi8, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 4}>> -> tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %47 = arith.extui %45 : tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> to tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %48 = arith.shli %47, %cst_1 : tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %49 = tt.bitcast %48 : tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> -> tensor<4x32xbf16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %50 = tt.expand_dims %49 {axis = 2 : i32} : tensor<4x32xbf16, #ttg.slice<{dim = 2, parent = #linear}>> -> tensor<4x32x1xbf16, #linear> loc(#loc)
    %51 = tt.broadcast %50 : tensor<4x32x1xbf16, #linear> -> tensor<4x32x32xbf16, #linear> loc(#loc)
    %52 = tt.trans %51 {order = array<i32: 0, 2, 1>} : tensor<4x32x32xbf16, #linear> -> tensor<4x32x32xbf16, #linear11> loc(#loc)
    %53 = tt.reshape %52 : tensor<4x32x32xbf16, #linear11> -> tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %54 = arith.mulf %46, %53 : tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %55 = arith.cmpi eq, %45, %cst_2 : tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %56 = tt.expand_dims %55 {axis = 2 : i32} : tensor<4x32xi1, #ttg.slice<{dim = 2, parent = #linear}>> -> tensor<4x32x1xi1, #linear> loc(#loc)
    %57 = tt.broadcast %56 : tensor<4x32x1xi1, #linear> -> tensor<4x32x32xi1, #linear> loc(#loc)
    %58 = tt.trans %57 {order = array<i32: 0, 2, 1>} : tensor<4x32x32xi1, #linear> -> tensor<4x32x32xi1, #linear11> loc(#loc)
    %59 = tt.reshape %58 : tensor<4x32x32xi1, #linear11> -> tensor<128x32xi1, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %60 = arith.select %59, %cst_3, %54 : tensor<128x32xi1, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>>, tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %61 = tt.dot %outLHS, %60, %cst_4 : tensor<32x128xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> * tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> -> tensor<32x32xf32, #mma> loc(#loc)
    %62 = ttg.fp4_to_fp %outRHS_6 {axis = 0 : i32} : tensor<64x32xi8, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 4}>> -> tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %63 = arith.extui %44 : tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> to tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %64 = arith.shli %63, %cst_1 : tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %65 = tt.bitcast %64 : tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> -> tensor<4x32xbf16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %66 = tt.expand_dims %65 {axis = 2 : i32} : tensor<4x32xbf16, #ttg.slice<{dim = 2, parent = #linear}>> -> tensor<4x32x1xbf16, #linear> loc(#loc)
    %67 = tt.broadcast %66 : tensor<4x32x1xbf16, #linear> -> tensor<4x32x32xbf16, #linear> loc(#loc)
    %68 = tt.trans %67 {order = array<i32: 0, 2, 1>} : tensor<4x32x32xbf16, #linear> -> tensor<4x32x32xbf16, #linear11> loc(#loc)
    %69 = tt.reshape %68 : tensor<4x32x32xbf16, #linear11> -> tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %70 = arith.mulf %62, %69 : tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %71 = arith.cmpi eq, %44, %cst_2 : tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %72 = tt.expand_dims %71 {axis = 2 : i32} : tensor<4x32xi1, #ttg.slice<{dim = 2, parent = #linear}>> -> tensor<4x32x1xi1, #linear> loc(#loc)
    %73 = tt.broadcast %72 : tensor<4x32x1xi1, #linear> -> tensor<4x32x32xi1, #linear> loc(#loc)
    %74 = tt.trans %73 {order = array<i32: 0, 2, 1>} : tensor<4x32x32xi1, #linear> -> tensor<4x32x32xi1, #linear11> loc(#loc)
    %75 = tt.reshape %74 : tensor<4x32x32xi1, #linear11> -> tensor<128x32xi1, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %76 = arith.select %75, %cst_3, %70 : tensor<128x32xi1, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>>, tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %77 = tt.dot %outRHS, %76, %cst_4 : tensor<32x128xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> * tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> -> tensor<32x32xf32, #mma> loc(#loc)
    %78 = arith.addf %61, %77 : tensor<32x32xf32, #mma> loc(#loc)
    %79 = tt.expand_dims %2 {axis = 1 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #mma}>> -> tensor<32x1xi32, #mma> loc(#loc)
    %80 = arith.muli %79, %cst : tensor<32x1xi32, #mma> loc(#loc)
    %81 = tt.broadcast %80 : tensor<32x1xi32, #mma> -> tensor<32x32xi32, #mma> loc(#loc)
    %82 = tt.expand_dims %14 {axis = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #mma}>> -> tensor<1x32xi32, #mma> loc(#loc)
    %83 = tt.broadcast %82 : tensor<1x32xi32, #mma> -> tensor<32x32xi32, #mma> loc(#loc)
    %84 = arith.addi %83, %81 : tensor<32x32xi32, #mma> loc(#loc)
    %85 = arith.truncf %78 : tensor<32x32xf32, #mma> to tensor<32x32xbf16, #mma> loc(#loc)
    amdgpu.buffer_store %85, %out[%84] : tensor<32x32xbf16, #mma> loc(#loc)
    tt.return loc(#loc)
  } loc(#loc)
} loc(#loc)
#loc = loc(unknown)


// -----// IR Dump Before SymbolDCE (symbol-dce) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [8, 8], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [1, 8], threadsPerWarp = [2, 32], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked2 = #ttg.blocked<{sizePerThread = [16, 1], threadsPerWarp = [8, 8], warpsPerCTA = [1, 4], order = [0, 1]}>
#linear = #ttg.linear<{register = [[0, 0, 1], [0, 0, 2], [0, 0, 4], [1, 0, 0], [2, 0, 0]], lane = [[0, 1, 0], [0, 2, 0], [0, 4, 0], [0, 8, 0], [0, 0, 8], [0, 0, 16]], warp = [[0, 16, 0], [0, 0, 0]], block = []}>
#linear1 = #ttg.linear<{register = [[0, 128], [0, 1], [0, 2], [0, 4], [0, 32], [0, 64]], lane = [[1, 0], [2, 0], [4, 0], [8, 0], [0, 8], [0, 16]], warp = [[0, 0], [16, 0]], block = []}>
#linear2 = #ttg.linear<{register = [[0, 1, 0], [0, 0, 1], [0, 0, 2], [0, 0, 4], [0, 0, 32], [0, 0, 64]], lane = [[1, 0, 0], [2, 0, 0], [4, 0, 0], [8, 0, 0], [0, 0, 8], [0, 0, 16]], warp = [[0, 0, 0], [16, 0, 0]], block = []}>
#linear3 = #ttg.linear<{register = [[0, 0, 1], [0, 1, 0], [0, 2, 0], [0, 4, 0], [0, 32, 0], [0, 64, 0]], lane = [[1, 0, 0], [2, 0, 0], [4, 0, 0], [8, 0, 0], [0, 8, 0], [0, 16, 0]], warp = [[0, 0, 0], [16, 0, 0]], block = []}>
#linear4 = #ttg.linear<{register = [[64, 0], [1, 0], [2, 0], [16, 0], [32, 0]], lane = [[0, 1], [0, 2], [0, 4], [0, 8], [4, 0], [8, 0]], warp = [[0, 16], [0, 0]], block = []}>
#linear5 = #ttg.linear<{register = [[1, 0, 0], [0, 1, 0], [0, 2, 0], [0, 16, 0], [0, 32, 0]], lane = [[0, 0, 1], [0, 0, 2], [0, 0, 4], [0, 0, 8], [0, 4, 0], [0, 8, 0]], warp = [[0, 0, 16], [0, 0, 0]], block = []}>
#linear6 = #ttg.linear<{register = [[0, 0, 1], [1, 0, 0], [2, 0, 0], [16, 0, 0], [32, 0, 0]], lane = [[0, 1, 0], [0, 2, 0], [0, 4, 0], [0, 8, 0], [4, 0, 0], [8, 0, 0]], warp = [[0, 16, 0], [0, 0, 0]], block = []}>
#linear7 = #ttg.linear<{register = [[0, 4], [0, 1], [0, 2]], lane = [[1, 0], [2, 0], [4, 0], [8, 0], [0, 0], [0, 0]], warp = [[16, 0], [0, 0]], block = []}>
#linear8 = #ttg.linear<{register = [[0, 1, 0], [0, 0, 1], [0, 0, 2]], lane = [[1, 0, 0], [2, 0, 0], [4, 0, 0], [8, 0, 0], [0, 0, 0], [0, 0, 0]], warp = [[16, 0, 0], [0, 0, 0]], block = []}>
#linear9 = #ttg.linear<{register = [[0, 0, 1], [0, 1, 0], [0, 2, 0]], lane = [[1, 0, 0], [2, 0, 0], [4, 0, 0], [8, 0, 0], [0, 0, 0], [0, 0, 0]], warp = [[16, 0, 0], [0, 0, 0]], block = []}>
#linear10 = #ttg.linear<{register = [[0, 1], [0, 2]], lane = [[1, 0], [2, 0], [4, 0], [8, 0], [0, 0], [0, 0]], warp = [[16, 0], [0, 0]], block = []}>
#linear11 = #ttg.linear<{register = [[0, 1, 0], [0, 2, 0], [0, 4, 0], [1, 0, 0], [2, 0, 0]], lane = [[0, 0, 1], [0, 0, 2], [0, 0, 4], [0, 0, 8], [0, 8, 0], [0, 16, 0]], warp = [[0, 0, 16], [0, 0, 0]], block = []}>
#loc1 = loc("a_base")
#loc2 = loc("stride_a0")
#loc3 = loc("b_base")
#loc4 = loc("stride_b1")
#loc5 = loc("b_scale")
#loc6 = loc("out")
#mma = #ttg.amd_mfma<{version = 4, warpsPerCTA = [2, 2], instrShape = [16, 16], isTransposed = true}>
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "hip:gfx950", "ttg.threads-per-warp" = 64 : i32} {
  tt.func public @dot_scale_kernel(%a_base: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("a_base"), %stride_a0: i32 {tt.divisibility = 16 : i32} loc("stride_a0"), %b_base: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("b_base"), %stride_b1: i32 {tt.divisibility = 16 : i32} loc("stride_b1"), %b_scale: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("b_scale"), %out: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("out")) attributes {noinline = false} {
    %cst = arith.constant dense<32> : tensor<32x1xi32, #mma> loc(#loc)
    %cst_0 = arith.constant dense<8> : tensor<32x1xi32, #blocked> loc(#loc)
    %cst_1 = arith.constant dense<7> : tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %cst_2 = arith.constant dense<-1> : tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %cst_3 = arith.constant dense<0x7FC0> : tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %cst_4 = arith.constant dense<0.000000e+00> : tensor<32x32xf32, #mma> loc(#loc)
    %0 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc)
    %1 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc)
    %2 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc)
    %3 = tt.expand_dims %0 {axis = 1 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> -> tensor<32x1xi32, #blocked1> loc(#loc)
    %4 = tt.splat %stride_a0 : i32 -> tensor<32x1xi32, #blocked1> loc(#loc)
    %5 = arith.muli %3, %4 : tensor<32x1xi32, #blocked1> loc(#loc)
    %6 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc)
    %7 = tt.broadcast %5 : tensor<32x1xi32, #blocked1> -> tensor<32x256xi32, #blocked1> loc(#loc)
    %8 = tt.expand_dims %6 {axis = 0 : i32} : tensor<256xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x256xi32, #blocked1> loc(#loc)
    %9 = tt.broadcast %8 : tensor<1x256xi32, #blocked1> -> tensor<32x256xi32, #blocked1> loc(#loc)
    %10 = arith.addi %9, %7 : tensor<32x256xi32, #blocked1> loc(#loc)
    %11 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked2}>> loc(#loc)
    %12 = tt.expand_dims %11 {axis = 1 : i32} : tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked2}>> -> tensor<128x1xi32, #blocked2> loc(#loc)
    %13 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked2}>> loc(#loc)
    %14 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #mma}>> loc(#loc)
    %15 = tt.broadcast %12 : tensor<128x1xi32, #blocked2> -> tensor<128x32xi32, #blocked2> loc(#loc)
    %16 = tt.expand_dims %13 {axis = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked2}>> -> tensor<1x32xi32, #blocked2> loc(#loc)
    %17 = tt.splat %stride_b1 : i32 -> tensor<1x32xi32, #blocked2> loc(#loc)
    %18 = arith.muli %16, %17 : tensor<1x32xi32, #blocked2> loc(#loc)
    %19 = tt.broadcast %18 : tensor<1x32xi32, #blocked2> -> tensor<128x32xi32, #blocked2> loc(#loc)
    %20 = arith.addi %19, %15 : tensor<128x32xi32, #blocked2> loc(#loc)
    %21 = tt.splat %a_base : !tt.ptr<bf16> -> tensor<32x256x!tt.ptr<bf16>, #blocked1> loc(#loc)
    %22 = tt.addptr %21, %10 : tensor<32x256x!tt.ptr<bf16>, #blocked1>, tensor<32x256xi32, #blocked1> loc(#loc)
    %23 = tt.load %22 : tensor<32x256x!tt.ptr<bf16>, #blocked1> loc(#loc)
    %24 = ttg.convert_layout %23 : tensor<32x256xbf16, #blocked1> -> tensor<32x256xbf16, #linear1> loc(#loc)
    %25 = tt.reshape %24 : tensor<32x256xbf16, #linear1> -> tensor<32x2x128xbf16, #linear2> loc(#loc)
    %26 = tt.trans %25 {order = array<i32: 0, 2, 1>} : tensor<32x2x128xbf16, #linear2> -> tensor<32x128x2xbf16, #linear3> loc(#loc)
    %outLHS, %outRHS = tt.split %26 : tensor<32x128x2xbf16, #linear3> -> tensor<32x128xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> loc(#loc)
    %27 = tt.splat %b_base : !tt.ptr<i8> -> tensor<128x32x!tt.ptr<i8>, #blocked2> loc(#loc)
    %28 = tt.addptr %27, %20 : tensor<128x32x!tt.ptr<i8>, #blocked2>, tensor<128x32xi32, #blocked2> loc(#loc)
    %29 = tt.load %28 : tensor<128x32x!tt.ptr<i8>, #blocked2> loc(#loc)
    %30 = ttg.convert_layout %29 : tensor<128x32xi8, #blocked2> -> tensor<128x32xi8, #linear4> loc(#loc)
    %31 = tt.reshape %30 : tensor<128x32xi8, #linear4> -> tensor<2x64x32xi8, #linear5> loc(#loc)
    %32 = tt.trans %31 {order = array<i32: 1, 2, 0>} : tensor<2x64x32xi8, #linear5> -> tensor<64x32x2xi8, #linear6> loc(#loc)
    %outLHS_5, %outRHS_6 = tt.split %32 : tensor<64x32x2xi8, #linear6> -> tensor<64x32xi8, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 4}>> loc(#loc)
    %33 = tt.expand_dims %1 {axis = 1 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<32x1xi32, #blocked> loc(#loc)
    %34 = arith.muli %33, %cst_0 : tensor<32x1xi32, #blocked> loc(#loc)
    %35 = tt.make_range {end = 8 : i32, start = 0 : i32} : tensor<8xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc)
    %36 = tt.broadcast %34 : tensor<32x1xi32, #blocked> -> tensor<32x8xi32, #blocked> loc(#loc)
    %37 = tt.expand_dims %35 {axis = 0 : i32} : tensor<8xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x8xi32, #blocked> loc(#loc)
    %38 = tt.broadcast %37 : tensor<1x8xi32, #blocked> -> tensor<32x8xi32, #blocked> loc(#loc)
    %39 = arith.addi %38, %36 : tensor<32x8xi32, #blocked> loc(#loc)
    %40 = amdgpu.buffer_load %b_scale[%39] : tensor<32x8xi8, #blocked> loc(#loc)
    %41 = ttg.convert_layout %40 : tensor<32x8xi8, #blocked> -> tensor<32x8xi8, #linear7> loc(#loc)
    %42 = tt.reshape %41 : tensor<32x8xi8, #linear7> -> tensor<32x2x4xi8, #linear8> loc(#loc)
    %43 = tt.trans %42 {order = array<i32: 0, 2, 1>} : tensor<32x2x4xi8, #linear8> -> tensor<32x4x2xi8, #linear9> loc(#loc)
    %outLHS_7, %outRHS_8 = tt.split %43 : tensor<32x4x2xi8, #linear9> -> tensor<32x4xi8, #linear10> loc(#loc)
    %44 = tt.trans %outRHS_8 {order = array<i32: 1, 0>} : tensor<32x4xi8, #linear10> -> tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %45 = tt.trans %outLHS_7 {order = array<i32: 1, 0>} : tensor<32x4xi8, #linear10> -> tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %46 = ttg.fp4_to_fp %outLHS_5 {axis = 0 : i32} : tensor<64x32xi8, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 4}>> -> tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %47 = arith.extui %45 : tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> to tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %48 = arith.shli %47, %cst_1 : tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %49 = tt.bitcast %48 : tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> -> tensor<4x32xbf16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %50 = tt.expand_dims %49 {axis = 2 : i32} : tensor<4x32xbf16, #ttg.slice<{dim = 2, parent = #linear}>> -> tensor<4x32x1xbf16, #linear> loc(#loc)
    %51 = tt.broadcast %50 : tensor<4x32x1xbf16, #linear> -> tensor<4x32x32xbf16, #linear> loc(#loc)
    %52 = tt.trans %51 {order = array<i32: 0, 2, 1>} : tensor<4x32x32xbf16, #linear> -> tensor<4x32x32xbf16, #linear11> loc(#loc)
    %53 = tt.reshape %52 : tensor<4x32x32xbf16, #linear11> -> tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %54 = arith.mulf %46, %53 : tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %55 = arith.cmpi eq, %45, %cst_2 : tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %56 = tt.expand_dims %55 {axis = 2 : i32} : tensor<4x32xi1, #ttg.slice<{dim = 2, parent = #linear}>> -> tensor<4x32x1xi1, #linear> loc(#loc)
    %57 = tt.broadcast %56 : tensor<4x32x1xi1, #linear> -> tensor<4x32x32xi1, #linear> loc(#loc)
    %58 = tt.trans %57 {order = array<i32: 0, 2, 1>} : tensor<4x32x32xi1, #linear> -> tensor<4x32x32xi1, #linear11> loc(#loc)
    %59 = tt.reshape %58 : tensor<4x32x32xi1, #linear11> -> tensor<128x32xi1, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %60 = arith.select %59, %cst_3, %54 : tensor<128x32xi1, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>>, tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %61 = tt.dot %outLHS, %60, %cst_4 : tensor<32x128xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> * tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> -> tensor<32x32xf32, #mma> loc(#loc)
    %62 = ttg.fp4_to_fp %outRHS_6 {axis = 0 : i32} : tensor<64x32xi8, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 4}>> -> tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %63 = arith.extui %44 : tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> to tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %64 = arith.shli %63, %cst_1 : tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %65 = tt.bitcast %64 : tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> -> tensor<4x32xbf16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %66 = tt.expand_dims %65 {axis = 2 : i32} : tensor<4x32xbf16, #ttg.slice<{dim = 2, parent = #linear}>> -> tensor<4x32x1xbf16, #linear> loc(#loc)
    %67 = tt.broadcast %66 : tensor<4x32x1xbf16, #linear> -> tensor<4x32x32xbf16, #linear> loc(#loc)
    %68 = tt.trans %67 {order = array<i32: 0, 2, 1>} : tensor<4x32x32xbf16, #linear> -> tensor<4x32x32xbf16, #linear11> loc(#loc)
    %69 = tt.reshape %68 : tensor<4x32x32xbf16, #linear11> -> tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %70 = arith.mulf %62, %69 : tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %71 = arith.cmpi eq, %44, %cst_2 : tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %72 = tt.expand_dims %71 {axis = 2 : i32} : tensor<4x32xi1, #ttg.slice<{dim = 2, parent = #linear}>> -> tensor<4x32x1xi1, #linear> loc(#loc)
    %73 = tt.broadcast %72 : tensor<4x32x1xi1, #linear> -> tensor<4x32x32xi1, #linear> loc(#loc)
    %74 = tt.trans %73 {order = array<i32: 0, 2, 1>} : tensor<4x32x32xi1, #linear> -> tensor<4x32x32xi1, #linear11> loc(#loc)
    %75 = tt.reshape %74 : tensor<4x32x32xi1, #linear11> -> tensor<128x32xi1, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %76 = arith.select %75, %cst_3, %70 : tensor<128x32xi1, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>>, tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %77 = tt.dot %outRHS, %76, %cst_4 : tensor<32x128xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> * tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> -> tensor<32x32xf32, #mma> loc(#loc)
    %78 = arith.addf %61, %77 : tensor<32x32xf32, #mma> loc(#loc)
    %79 = tt.expand_dims %2 {axis = 1 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #mma}>> -> tensor<32x1xi32, #mma> loc(#loc)
    %80 = arith.muli %79, %cst : tensor<32x1xi32, #mma> loc(#loc)
    %81 = tt.broadcast %80 : tensor<32x1xi32, #mma> -> tensor<32x32xi32, #mma> loc(#loc)
    %82 = tt.expand_dims %14 {axis = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #mma}>> -> tensor<1x32xi32, #mma> loc(#loc)
    %83 = tt.broadcast %82 : tensor<1x32xi32, #mma> -> tensor<32x32xi32, #mma> loc(#loc)
    %84 = arith.addi %83, %81 : tensor<32x32xi32, #mma> loc(#loc)
    %85 = arith.truncf %78 : tensor<32x32xf32, #mma> to tensor<32x32xbf16, #mma> loc(#loc)
    amdgpu.buffer_store %85, %out[%84] : tensor<32x32xbf16, #mma> loc(#loc)
    tt.return loc(#loc)
  } loc(#loc)
} loc(#loc)
#loc = loc(unknown)


// -----// IR Dump Before TritonAMDPeepholeOptimize (tritonamdgpu-peephole-optimize) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [8, 8], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [1, 8], threadsPerWarp = [2, 32], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked2 = #ttg.blocked<{sizePerThread = [16, 1], threadsPerWarp = [8, 8], warpsPerCTA = [1, 4], order = [0, 1]}>
#linear = #ttg.linear<{register = [[0, 0, 1], [0, 0, 2], [0, 0, 4], [1, 0, 0], [2, 0, 0]], lane = [[0, 1, 0], [0, 2, 0], [0, 4, 0], [0, 8, 0], [0, 0, 8], [0, 0, 16]], warp = [[0, 16, 0], [0, 0, 0]], block = []}>
#linear1 = #ttg.linear<{register = [[0, 128], [0, 1], [0, 2], [0, 4], [0, 32], [0, 64]], lane = [[1, 0], [2, 0], [4, 0], [8, 0], [0, 8], [0, 16]], warp = [[0, 0], [16, 0]], block = []}>
#linear2 = #ttg.linear<{register = [[0, 1, 0], [0, 0, 1], [0, 0, 2], [0, 0, 4], [0, 0, 32], [0, 0, 64]], lane = [[1, 0, 0], [2, 0, 0], [4, 0, 0], [8, 0, 0], [0, 0, 8], [0, 0, 16]], warp = [[0, 0, 0], [16, 0, 0]], block = []}>
#linear3 = #ttg.linear<{register = [[0, 0, 1], [0, 1, 0], [0, 2, 0], [0, 4, 0], [0, 32, 0], [0, 64, 0]], lane = [[1, 0, 0], [2, 0, 0], [4, 0, 0], [8, 0, 0], [0, 8, 0], [0, 16, 0]], warp = [[0, 0, 0], [16, 0, 0]], block = []}>
#linear4 = #ttg.linear<{register = [[64, 0], [1, 0], [2, 0], [16, 0], [32, 0]], lane = [[0, 1], [0, 2], [0, 4], [0, 8], [4, 0], [8, 0]], warp = [[0, 16], [0, 0]], block = []}>
#linear5 = #ttg.linear<{register = [[1, 0, 0], [0, 1, 0], [0, 2, 0], [0, 16, 0], [0, 32, 0]], lane = [[0, 0, 1], [0, 0, 2], [0, 0, 4], [0, 0, 8], [0, 4, 0], [0, 8, 0]], warp = [[0, 0, 16], [0, 0, 0]], block = []}>
#linear6 = #ttg.linear<{register = [[0, 0, 1], [1, 0, 0], [2, 0, 0], [16, 0, 0], [32, 0, 0]], lane = [[0, 1, 0], [0, 2, 0], [0, 4, 0], [0, 8, 0], [4, 0, 0], [8, 0, 0]], warp = [[0, 16, 0], [0, 0, 0]], block = []}>
#linear7 = #ttg.linear<{register = [[0, 4], [0, 1], [0, 2]], lane = [[1, 0], [2, 0], [4, 0], [8, 0], [0, 0], [0, 0]], warp = [[16, 0], [0, 0]], block = []}>
#linear8 = #ttg.linear<{register = [[0, 1, 0], [0, 0, 1], [0, 0, 2]], lane = [[1, 0, 0], [2, 0, 0], [4, 0, 0], [8, 0, 0], [0, 0, 0], [0, 0, 0]], warp = [[16, 0, 0], [0, 0, 0]], block = []}>
#linear9 = #ttg.linear<{register = [[0, 0, 1], [0, 1, 0], [0, 2, 0]], lane = [[1, 0, 0], [2, 0, 0], [4, 0, 0], [8, 0, 0], [0, 0, 0], [0, 0, 0]], warp = [[16, 0, 0], [0, 0, 0]], block = []}>
#linear10 = #ttg.linear<{register = [[0, 1], [0, 2]], lane = [[1, 0], [2, 0], [4, 0], [8, 0], [0, 0], [0, 0]], warp = [[16, 0], [0, 0]], block = []}>
#linear11 = #ttg.linear<{register = [[0, 1, 0], [0, 2, 0], [0, 4, 0], [1, 0, 0], [2, 0, 0]], lane = [[0, 0, 1], [0, 0, 2], [0, 0, 4], [0, 0, 8], [0, 8, 0], [0, 16, 0]], warp = [[0, 0, 16], [0, 0, 0]], block = []}>
#loc1 = loc("a_base")
#loc2 = loc("stride_a0")
#loc3 = loc("b_base")
#loc4 = loc("stride_b1")
#loc5 = loc("b_scale")
#loc6 = loc("out")
#mma = #ttg.amd_mfma<{version = 4, warpsPerCTA = [2, 2], instrShape = [16, 16], isTransposed = true}>
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "hip:gfx950", "ttg.threads-per-warp" = 64 : i32} {
  tt.func public @dot_scale_kernel(%a_base: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("a_base"), %stride_a0: i32 {tt.divisibility = 16 : i32} loc("stride_a0"), %b_base: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("b_base"), %stride_b1: i32 {tt.divisibility = 16 : i32} loc("stride_b1"), %b_scale: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("b_scale"), %out: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("out")) attributes {noinline = false} {
    %cst = arith.constant dense<32> : tensor<32x1xi32, #mma> loc(#loc)
    %cst_0 = arith.constant dense<8> : tensor<32x1xi32, #blocked> loc(#loc)
    %cst_1 = arith.constant dense<7> : tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %cst_2 = arith.constant dense<-1> : tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %cst_3 = arith.constant dense<0x7FC0> : tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %cst_4 = arith.constant dense<0.000000e+00> : tensor<32x32xf32, #mma> loc(#loc)
    %0 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc)
    %1 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc)
    %2 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc)
    %3 = tt.expand_dims %0 {axis = 1 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> -> tensor<32x1xi32, #blocked1> loc(#loc)
    %4 = tt.splat %stride_a0 : i32 -> tensor<32x1xi32, #blocked1> loc(#loc)
    %5 = arith.muli %3, %4 : tensor<32x1xi32, #blocked1> loc(#loc)
    %6 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc)
    %7 = tt.broadcast %5 : tensor<32x1xi32, #blocked1> -> tensor<32x256xi32, #blocked1> loc(#loc)
    %8 = tt.expand_dims %6 {axis = 0 : i32} : tensor<256xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x256xi32, #blocked1> loc(#loc)
    %9 = tt.broadcast %8 : tensor<1x256xi32, #blocked1> -> tensor<32x256xi32, #blocked1> loc(#loc)
    %10 = arith.addi %9, %7 : tensor<32x256xi32, #blocked1> loc(#loc)
    %11 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked2}>> loc(#loc)
    %12 = tt.expand_dims %11 {axis = 1 : i32} : tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked2}>> -> tensor<128x1xi32, #blocked2> loc(#loc)
    %13 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked2}>> loc(#loc)
    %14 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #mma}>> loc(#loc)
    %15 = tt.broadcast %12 : tensor<128x1xi32, #blocked2> -> tensor<128x32xi32, #blocked2> loc(#loc)
    %16 = tt.expand_dims %13 {axis = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked2}>> -> tensor<1x32xi32, #blocked2> loc(#loc)
    %17 = tt.splat %stride_b1 : i32 -> tensor<1x32xi32, #blocked2> loc(#loc)
    %18 = arith.muli %16, %17 : tensor<1x32xi32, #blocked2> loc(#loc)
    %19 = tt.broadcast %18 : tensor<1x32xi32, #blocked2> -> tensor<128x32xi32, #blocked2> loc(#loc)
    %20 = arith.addi %19, %15 : tensor<128x32xi32, #blocked2> loc(#loc)
    %21 = tt.splat %a_base : !tt.ptr<bf16> -> tensor<32x256x!tt.ptr<bf16>, #blocked1> loc(#loc)
    %22 = tt.addptr %21, %10 : tensor<32x256x!tt.ptr<bf16>, #blocked1>, tensor<32x256xi32, #blocked1> loc(#loc)
    %23 = tt.load %22 : tensor<32x256x!tt.ptr<bf16>, #blocked1> loc(#loc)
    %24 = ttg.convert_layout %23 : tensor<32x256xbf16, #blocked1> -> tensor<32x256xbf16, #linear1> loc(#loc)
    %25 = tt.reshape %24 : tensor<32x256xbf16, #linear1> -> tensor<32x2x128xbf16, #linear2> loc(#loc)
    %26 = tt.trans %25 {order = array<i32: 0, 2, 1>} : tensor<32x2x128xbf16, #linear2> -> tensor<32x128x2xbf16, #linear3> loc(#loc)
    %outLHS, %outRHS = tt.split %26 : tensor<32x128x2xbf16, #linear3> -> tensor<32x128xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> loc(#loc)
    %27 = tt.splat %b_base : !tt.ptr<i8> -> tensor<128x32x!tt.ptr<i8>, #blocked2> loc(#loc)
    %28 = tt.addptr %27, %20 : tensor<128x32x!tt.ptr<i8>, #blocked2>, tensor<128x32xi32, #blocked2> loc(#loc)
    %29 = tt.load %28 : tensor<128x32x!tt.ptr<i8>, #blocked2> loc(#loc)
    %30 = ttg.convert_layout %29 : tensor<128x32xi8, #blocked2> -> tensor<128x32xi8, #linear4> loc(#loc)
    %31 = tt.reshape %30 : tensor<128x32xi8, #linear4> -> tensor<2x64x32xi8, #linear5> loc(#loc)
    %32 = tt.trans %31 {order = array<i32: 1, 2, 0>} : tensor<2x64x32xi8, #linear5> -> tensor<64x32x2xi8, #linear6> loc(#loc)
    %outLHS_5, %outRHS_6 = tt.split %32 : tensor<64x32x2xi8, #linear6> -> tensor<64x32xi8, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 4}>> loc(#loc)
    %33 = tt.expand_dims %1 {axis = 1 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<32x1xi32, #blocked> loc(#loc)
    %34 = arith.muli %33, %cst_0 : tensor<32x1xi32, #blocked> loc(#loc)
    %35 = tt.make_range {end = 8 : i32, start = 0 : i32} : tensor<8xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc)
    %36 = tt.broadcast %34 : tensor<32x1xi32, #blocked> -> tensor<32x8xi32, #blocked> loc(#loc)
    %37 = tt.expand_dims %35 {axis = 0 : i32} : tensor<8xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x8xi32, #blocked> loc(#loc)
    %38 = tt.broadcast %37 : tensor<1x8xi32, #blocked> -> tensor<32x8xi32, #blocked> loc(#loc)
    %39 = arith.addi %38, %36 : tensor<32x8xi32, #blocked> loc(#loc)
    %40 = amdgpu.buffer_load %b_scale[%39] : tensor<32x8xi8, #blocked> loc(#loc)
    %41 = ttg.convert_layout %40 : tensor<32x8xi8, #blocked> -> tensor<32x8xi8, #linear7> loc(#loc)
    %42 = tt.reshape %41 : tensor<32x8xi8, #linear7> -> tensor<32x2x4xi8, #linear8> loc(#loc)
    %43 = tt.trans %42 {order = array<i32: 0, 2, 1>} : tensor<32x2x4xi8, #linear8> -> tensor<32x4x2xi8, #linear9> loc(#loc)
    %outLHS_7, %outRHS_8 = tt.split %43 : tensor<32x4x2xi8, #linear9> -> tensor<32x4xi8, #linear10> loc(#loc)
    %44 = tt.trans %outRHS_8 {order = array<i32: 1, 0>} : tensor<32x4xi8, #linear10> -> tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %45 = tt.trans %outLHS_7 {order = array<i32: 1, 0>} : tensor<32x4xi8, #linear10> -> tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %46 = ttg.fp4_to_fp %outLHS_5 {axis = 0 : i32} : tensor<64x32xi8, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 4}>> -> tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %47 = arith.extui %45 : tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> to tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %48 = arith.shli %47, %cst_1 : tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %49 = tt.bitcast %48 : tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> -> tensor<4x32xbf16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %50 = tt.expand_dims %49 {axis = 2 : i32} : tensor<4x32xbf16, #ttg.slice<{dim = 2, parent = #linear}>> -> tensor<4x32x1xbf16, #linear> loc(#loc)
    %51 = tt.broadcast %50 : tensor<4x32x1xbf16, #linear> -> tensor<4x32x32xbf16, #linear> loc(#loc)
    %52 = tt.trans %51 {order = array<i32: 0, 2, 1>} : tensor<4x32x32xbf16, #linear> -> tensor<4x32x32xbf16, #linear11> loc(#loc)
    %53 = tt.reshape %52 : tensor<4x32x32xbf16, #linear11> -> tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %54 = arith.mulf %46, %53 : tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %55 = arith.cmpi eq, %45, %cst_2 : tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %56 = tt.expand_dims %55 {axis = 2 : i32} : tensor<4x32xi1, #ttg.slice<{dim = 2, parent = #linear}>> -> tensor<4x32x1xi1, #linear> loc(#loc)
    %57 = tt.broadcast %56 : tensor<4x32x1xi1, #linear> -> tensor<4x32x32xi1, #linear> loc(#loc)
    %58 = tt.trans %57 {order = array<i32: 0, 2, 1>} : tensor<4x32x32xi1, #linear> -> tensor<4x32x32xi1, #linear11> loc(#loc)
    %59 = tt.reshape %58 : tensor<4x32x32xi1, #linear11> -> tensor<128x32xi1, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %60 = arith.select %59, %cst_3, %54 : tensor<128x32xi1, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>>, tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %61 = tt.dot %outLHS, %60, %cst_4 : tensor<32x128xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> * tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> -> tensor<32x32xf32, #mma> loc(#loc)
    %62 = ttg.fp4_to_fp %outRHS_6 {axis = 0 : i32} : tensor<64x32xi8, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 4}>> -> tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %63 = arith.extui %44 : tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> to tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %64 = arith.shli %63, %cst_1 : tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %65 = tt.bitcast %64 : tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> -> tensor<4x32xbf16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %66 = tt.expand_dims %65 {axis = 2 : i32} : tensor<4x32xbf16, #ttg.slice<{dim = 2, parent = #linear}>> -> tensor<4x32x1xbf16, #linear> loc(#loc)
    %67 = tt.broadcast %66 : tensor<4x32x1xbf16, #linear> -> tensor<4x32x32xbf16, #linear> loc(#loc)
    %68 = tt.trans %67 {order = array<i32: 0, 2, 1>} : tensor<4x32x32xbf16, #linear> -> tensor<4x32x32xbf16, #linear11> loc(#loc)
    %69 = tt.reshape %68 : tensor<4x32x32xbf16, #linear11> -> tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %70 = arith.mulf %62, %69 : tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %71 = arith.cmpi eq, %44, %cst_2 : tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %72 = tt.expand_dims %71 {axis = 2 : i32} : tensor<4x32xi1, #ttg.slice<{dim = 2, parent = #linear}>> -> tensor<4x32x1xi1, #linear> loc(#loc)
    %73 = tt.broadcast %72 : tensor<4x32x1xi1, #linear> -> tensor<4x32x32xi1, #linear> loc(#loc)
    %74 = tt.trans %73 {order = array<i32: 0, 2, 1>} : tensor<4x32x32xi1, #linear> -> tensor<4x32x32xi1, #linear11> loc(#loc)
    %75 = tt.reshape %74 : tensor<4x32x32xi1, #linear11> -> tensor<128x32xi1, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %76 = arith.select %75, %cst_3, %70 : tensor<128x32xi1, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>>, tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %77 = tt.dot %outRHS, %76, %cst_4 : tensor<32x128xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> * tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> -> tensor<32x32xf32, #mma> loc(#loc)
    %78 = arith.addf %61, %77 : tensor<32x32xf32, #mma> loc(#loc)
    %79 = tt.expand_dims %2 {axis = 1 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #mma}>> -> tensor<32x1xi32, #mma> loc(#loc)
    %80 = arith.muli %79, %cst : tensor<32x1xi32, #mma> loc(#loc)
    %81 = tt.broadcast %80 : tensor<32x1xi32, #mma> -> tensor<32x32xi32, #mma> loc(#loc)
    %82 = tt.expand_dims %14 {axis = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #mma}>> -> tensor<1x32xi32, #mma> loc(#loc)
    %83 = tt.broadcast %82 : tensor<1x32xi32, #mma> -> tensor<32x32xi32, #mma> loc(#loc)
    %84 = arith.addi %83, %81 : tensor<32x32xi32, #mma> loc(#loc)
    %85 = arith.truncf %78 : tensor<32x32xf32, #mma> to tensor<32x32xbf16, #mma> loc(#loc)
    amdgpu.buffer_store %85, %out[%84] : tensor<32x32xbf16, #mma> loc(#loc)
    tt.return loc(#loc)
  } loc(#loc)
} loc(#loc)
#loc = loc(unknown)


// -----// IR Dump Before OptimizeAMDLDSUsage (optimize-amd-lds-usage) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [8, 8], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [1, 8], threadsPerWarp = [2, 32], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked2 = #ttg.blocked<{sizePerThread = [16, 1], threadsPerWarp = [8, 8], warpsPerCTA = [1, 4], order = [0, 1]}>
#linear = #ttg.linear<{register = [[0, 0, 1], [0, 0, 2], [0, 0, 4], [1, 0, 0], [2, 0, 0]], lane = [[0, 1, 0], [0, 2, 0], [0, 4, 0], [0, 8, 0], [0, 0, 8], [0, 0, 16]], warp = [[0, 16, 0], [0, 0, 0]], block = []}>
#linear1 = #ttg.linear<{register = [[0, 128], [0, 1], [0, 2], [0, 4], [0, 32], [0, 64]], lane = [[1, 0], [2, 0], [4, 0], [8, 0], [0, 8], [0, 16]], warp = [[0, 0], [16, 0]], block = []}>
#linear2 = #ttg.linear<{register = [[0, 1, 0], [0, 0, 1], [0, 0, 2], [0, 0, 4], [0, 0, 32], [0, 0, 64]], lane = [[1, 0, 0], [2, 0, 0], [4, 0, 0], [8, 0, 0], [0, 0, 8], [0, 0, 16]], warp = [[0, 0, 0], [16, 0, 0]], block = []}>
#linear3 = #ttg.linear<{register = [[0, 0, 1], [0, 1, 0], [0, 2, 0], [0, 4, 0], [0, 32, 0], [0, 64, 0]], lane = [[1, 0, 0], [2, 0, 0], [4, 0, 0], [8, 0, 0], [0, 8, 0], [0, 16, 0]], warp = [[0, 0, 0], [16, 0, 0]], block = []}>
#linear4 = #ttg.linear<{register = [[64, 0], [1, 0], [2, 0], [16, 0], [32, 0]], lane = [[0, 1], [0, 2], [0, 4], [0, 8], [4, 0], [8, 0]], warp = [[0, 16], [0, 0]], block = []}>
#linear5 = #ttg.linear<{register = [[1, 0, 0], [0, 1, 0], [0, 2, 0], [0, 16, 0], [0, 32, 0]], lane = [[0, 0, 1], [0, 0, 2], [0, 0, 4], [0, 0, 8], [0, 4, 0], [0, 8, 0]], warp = [[0, 0, 16], [0, 0, 0]], block = []}>
#linear6 = #ttg.linear<{register = [[0, 0, 1], [1, 0, 0], [2, 0, 0], [16, 0, 0], [32, 0, 0]], lane = [[0, 1, 0], [0, 2, 0], [0, 4, 0], [0, 8, 0], [4, 0, 0], [8, 0, 0]], warp = [[0, 16, 0], [0, 0, 0]], block = []}>
#linear7 = #ttg.linear<{register = [[0, 4], [0, 1], [0, 2]], lane = [[1, 0], [2, 0], [4, 0], [8, 0], [0, 0], [0, 0]], warp = [[16, 0], [0, 0]], block = []}>
#linear8 = #ttg.linear<{register = [[0, 1, 0], [0, 0, 1], [0, 0, 2]], lane = [[1, 0, 0], [2, 0, 0], [4, 0, 0], [8, 0, 0], [0, 0, 0], [0, 0, 0]], warp = [[16, 0, 0], [0, 0, 0]], block = []}>
#linear9 = #ttg.linear<{register = [[0, 0, 1], [0, 1, 0], [0, 2, 0]], lane = [[1, 0, 0], [2, 0, 0], [4, 0, 0], [8, 0, 0], [0, 0, 0], [0, 0, 0]], warp = [[16, 0, 0], [0, 0, 0]], block = []}>
#linear10 = #ttg.linear<{register = [[0, 1], [0, 2]], lane = [[1, 0], [2, 0], [4, 0], [8, 0], [0, 0], [0, 0]], warp = [[16, 0], [0, 0]], block = []}>
#linear11 = #ttg.linear<{register = [[0, 1, 0], [0, 2, 0], [0, 4, 0], [1, 0, 0], [2, 0, 0]], lane = [[0, 0, 1], [0, 0, 2], [0, 0, 4], [0, 0, 8], [0, 8, 0], [0, 16, 0]], warp = [[0, 0, 16], [0, 0, 0]], block = []}>
#loc1 = loc("a_base")
#loc2 = loc("stride_a0")
#loc3 = loc("b_base")
#loc4 = loc("stride_b1")
#loc5 = loc("b_scale")
#loc6 = loc("out")
#mma = #ttg.amd_mfma<{version = 4, warpsPerCTA = [2, 2], instrShape = [16, 16], isTransposed = true}>
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "hip:gfx950", "ttg.threads-per-warp" = 64 : i32} {
  tt.func public @dot_scale_kernel(%a_base: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("a_base"), %stride_a0: i32 {tt.divisibility = 16 : i32} loc("stride_a0"), %b_base: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("b_base"), %stride_b1: i32 {tt.divisibility = 16 : i32} loc("stride_b1"), %b_scale: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("b_scale"), %out: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("out")) attributes {noinline = false} {
    %cst = arith.constant dense<32> : tensor<32x1xi32, #mma> loc(#loc)
    %cst_0 = arith.constant dense<8> : tensor<32x1xi32, #blocked> loc(#loc)
    %cst_1 = arith.constant dense<7> : tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %cst_2 = arith.constant dense<-1> : tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %cst_3 = arith.constant dense<0x7FC0> : tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %cst_4 = arith.constant dense<0.000000e+00> : tensor<32x32xf32, #mma> loc(#loc)
    %0 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc)
    %1 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc)
    %2 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc)
    %3 = tt.expand_dims %0 {axis = 1 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> -> tensor<32x1xi32, #blocked1> loc(#loc)
    %4 = tt.splat %stride_a0 : i32 -> tensor<32x1xi32, #blocked1> loc(#loc)
    %5 = arith.muli %3, %4 : tensor<32x1xi32, #blocked1> loc(#loc)
    %6 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc)
    %7 = tt.broadcast %5 : tensor<32x1xi32, #blocked1> -> tensor<32x256xi32, #blocked1> loc(#loc)
    %8 = tt.expand_dims %6 {axis = 0 : i32} : tensor<256xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x256xi32, #blocked1> loc(#loc)
    %9 = tt.broadcast %8 : tensor<1x256xi32, #blocked1> -> tensor<32x256xi32, #blocked1> loc(#loc)
    %10 = arith.addi %9, %7 : tensor<32x256xi32, #blocked1> loc(#loc)
    %11 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked2}>> loc(#loc)
    %12 = tt.expand_dims %11 {axis = 1 : i32} : tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked2}>> -> tensor<128x1xi32, #blocked2> loc(#loc)
    %13 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked2}>> loc(#loc)
    %14 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #mma}>> loc(#loc)
    %15 = tt.broadcast %12 : tensor<128x1xi32, #blocked2> -> tensor<128x32xi32, #blocked2> loc(#loc)
    %16 = tt.expand_dims %13 {axis = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked2}>> -> tensor<1x32xi32, #blocked2> loc(#loc)
    %17 = tt.splat %stride_b1 : i32 -> tensor<1x32xi32, #blocked2> loc(#loc)
    %18 = arith.muli %16, %17 : tensor<1x32xi32, #blocked2> loc(#loc)
    %19 = tt.broadcast %18 : tensor<1x32xi32, #blocked2> -> tensor<128x32xi32, #blocked2> loc(#loc)
    %20 = arith.addi %19, %15 : tensor<128x32xi32, #blocked2> loc(#loc)
    %21 = tt.splat %a_base : !tt.ptr<bf16> -> tensor<32x256x!tt.ptr<bf16>, #blocked1> loc(#loc)
    %22 = tt.addptr %21, %10 : tensor<32x256x!tt.ptr<bf16>, #blocked1>, tensor<32x256xi32, #blocked1> loc(#loc)
    %23 = tt.load %22 : tensor<32x256x!tt.ptr<bf16>, #blocked1> loc(#loc)
    %24 = ttg.convert_layout %23 : tensor<32x256xbf16, #blocked1> -> tensor<32x256xbf16, #linear1> loc(#loc)
    %25 = tt.reshape %24 : tensor<32x256xbf16, #linear1> -> tensor<32x2x128xbf16, #linear2> loc(#loc)
    %26 = tt.trans %25 {order = array<i32: 0, 2, 1>} : tensor<32x2x128xbf16, #linear2> -> tensor<32x128x2xbf16, #linear3> loc(#loc)
    %outLHS, %outRHS = tt.split %26 : tensor<32x128x2xbf16, #linear3> -> tensor<32x128xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> loc(#loc)
    %27 = tt.splat %b_base : !tt.ptr<i8> -> tensor<128x32x!tt.ptr<i8>, #blocked2> loc(#loc)
    %28 = tt.addptr %27, %20 : tensor<128x32x!tt.ptr<i8>, #blocked2>, tensor<128x32xi32, #blocked2> loc(#loc)
    %29 = tt.load %28 : tensor<128x32x!tt.ptr<i8>, #blocked2> loc(#loc)
    %30 = ttg.convert_layout %29 : tensor<128x32xi8, #blocked2> -> tensor<128x32xi8, #linear4> loc(#loc)
    %31 = tt.reshape %30 : tensor<128x32xi8, #linear4> -> tensor<2x64x32xi8, #linear5> loc(#loc)
    %32 = tt.trans %31 {order = array<i32: 1, 2, 0>} : tensor<2x64x32xi8, #linear5> -> tensor<64x32x2xi8, #linear6> loc(#loc)
    %outLHS_5, %outRHS_6 = tt.split %32 : tensor<64x32x2xi8, #linear6> -> tensor<64x32xi8, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 4}>> loc(#loc)
    %33 = tt.expand_dims %1 {axis = 1 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<32x1xi32, #blocked> loc(#loc)
    %34 = arith.muli %33, %cst_0 : tensor<32x1xi32, #blocked> loc(#loc)
    %35 = tt.make_range {end = 8 : i32, start = 0 : i32} : tensor<8xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc)
    %36 = tt.broadcast %34 : tensor<32x1xi32, #blocked> -> tensor<32x8xi32, #blocked> loc(#loc)
    %37 = tt.expand_dims %35 {axis = 0 : i32} : tensor<8xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x8xi32, #blocked> loc(#loc)
    %38 = tt.broadcast %37 : tensor<1x8xi32, #blocked> -> tensor<32x8xi32, #blocked> loc(#loc)
    %39 = arith.addi %38, %36 : tensor<32x8xi32, #blocked> loc(#loc)
    %40 = amdgpu.buffer_load %b_scale[%39] : tensor<32x8xi8, #blocked> loc(#loc)
    %41 = ttg.convert_layout %40 : tensor<32x8xi8, #blocked> -> tensor<32x8xi8, #linear7> loc(#loc)
    %42 = tt.reshape %41 : tensor<32x8xi8, #linear7> -> tensor<32x2x4xi8, #linear8> loc(#loc)
    %43 = tt.trans %42 {order = array<i32: 0, 2, 1>} : tensor<32x2x4xi8, #linear8> -> tensor<32x4x2xi8, #linear9> loc(#loc)
    %outLHS_7, %outRHS_8 = tt.split %43 : tensor<32x4x2xi8, #linear9> -> tensor<32x4xi8, #linear10> loc(#loc)
    %44 = tt.trans %outRHS_8 {order = array<i32: 1, 0>} : tensor<32x4xi8, #linear10> -> tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %45 = tt.trans %outLHS_7 {order = array<i32: 1, 0>} : tensor<32x4xi8, #linear10> -> tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %46 = arith.extui %45 : tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> to tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %47 = arith.shli %46, %cst_1 : tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %48 = tt.bitcast %47 : tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> -> tensor<4x32xbf16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %49 = tt.expand_dims %48 {axis = 2 : i32} : tensor<4x32xbf16, #ttg.slice<{dim = 2, parent = #linear}>> -> tensor<4x32x1xbf16, #linear> loc(#loc)
    %50 = tt.broadcast %49 : tensor<4x32x1xbf16, #linear> -> tensor<4x32x32xbf16, #linear> loc(#loc)
    %51 = tt.trans %50 {order = array<i32: 0, 2, 1>} : tensor<4x32x32xbf16, #linear> -> tensor<4x32x32xbf16, #linear11> loc(#loc)
    %52 = tt.reshape %51 : tensor<4x32x32xbf16, #linear11> -> tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %53 = amdgpu.scaled_upcast_fp4 %outLHS_5 scale %52 {axis = 0 : i32} : tensor<64x32xi8, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 4}>>, tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> -> tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %54 = arith.cmpi eq, %45, %cst_2 : tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %55 = tt.expand_dims %54 {axis = 2 : i32} : tensor<4x32xi1, #ttg.slice<{dim = 2, parent = #linear}>> -> tensor<4x32x1xi1, #linear> loc(#loc)
    %56 = tt.broadcast %55 : tensor<4x32x1xi1, #linear> -> tensor<4x32x32xi1, #linear> loc(#loc)
    %57 = tt.trans %56 {order = array<i32: 0, 2, 1>} : tensor<4x32x32xi1, #linear> -> tensor<4x32x32xi1, #linear11> loc(#loc)
    %58 = tt.reshape %57 : tensor<4x32x32xi1, #linear11> -> tensor<128x32xi1, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %59 = arith.select %58, %cst_3, %53 : tensor<128x32xi1, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>>, tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %60 = tt.dot %outLHS, %59, %cst_4 : tensor<32x128xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> * tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> -> tensor<32x32xf32, #mma> loc(#loc)
    %61 = arith.extui %44 : tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> to tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %62 = arith.shli %61, %cst_1 : tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %63 = tt.bitcast %62 : tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> -> tensor<4x32xbf16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %64 = tt.expand_dims %63 {axis = 2 : i32} : tensor<4x32xbf16, #ttg.slice<{dim = 2, parent = #linear}>> -> tensor<4x32x1xbf16, #linear> loc(#loc)
    %65 = tt.broadcast %64 : tensor<4x32x1xbf16, #linear> -> tensor<4x32x32xbf16, #linear> loc(#loc)
    %66 = tt.trans %65 {order = array<i32: 0, 2, 1>} : tensor<4x32x32xbf16, #linear> -> tensor<4x32x32xbf16, #linear11> loc(#loc)
    %67 = tt.reshape %66 : tensor<4x32x32xbf16, #linear11> -> tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %68 = amdgpu.scaled_upcast_fp4 %outRHS_6 scale %67 {axis = 0 : i32} : tensor<64x32xi8, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 4}>>, tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> -> tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %69 = arith.cmpi eq, %44, %cst_2 : tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %70 = tt.expand_dims %69 {axis = 2 : i32} : tensor<4x32xi1, #ttg.slice<{dim = 2, parent = #linear}>> -> tensor<4x32x1xi1, #linear> loc(#loc)
    %71 = tt.broadcast %70 : tensor<4x32x1xi1, #linear> -> tensor<4x32x32xi1, #linear> loc(#loc)
    %72 = tt.trans %71 {order = array<i32: 0, 2, 1>} : tensor<4x32x32xi1, #linear> -> tensor<4x32x32xi1, #linear11> loc(#loc)
    %73 = tt.reshape %72 : tensor<4x32x32xi1, #linear11> -> tensor<128x32xi1, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %74 = arith.select %73, %cst_3, %68 : tensor<128x32xi1, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>>, tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %75 = tt.dot %outRHS, %74, %cst_4 : tensor<32x128xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> * tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> -> tensor<32x32xf32, #mma> loc(#loc)
    %76 = arith.addf %60, %75 : tensor<32x32xf32, #mma> loc(#loc)
    %77 = tt.expand_dims %2 {axis = 1 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #mma}>> -> tensor<32x1xi32, #mma> loc(#loc)
    %78 = arith.muli %77, %cst : tensor<32x1xi32, #mma> loc(#loc)
    %79 = tt.broadcast %78 : tensor<32x1xi32, #mma> -> tensor<32x32xi32, #mma> loc(#loc)
    %80 = tt.expand_dims %14 {axis = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #mma}>> -> tensor<1x32xi32, #mma> loc(#loc)
    %81 = tt.broadcast %80 : tensor<1x32xi32, #mma> -> tensor<32x32xi32, #mma> loc(#loc)
    %82 = arith.addi %81, %79 : tensor<32x32xi32, #mma> loc(#loc)
    %83 = arith.truncf %76 : tensor<32x32xf32, #mma> to tensor<32x32xbf16, #mma> loc(#loc)
    amdgpu.buffer_store %83, %out[%82] : tensor<32x32xbf16, #mma> loc(#loc)
    tt.return loc(#loc)
  } loc(#loc)
} loc(#loc)
#loc = loc(unknown)


// -----// IR Dump Before TritonSCFToCF (triton-scf-to-cf) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [8, 8], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [1, 8], threadsPerWarp = [2, 32], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked2 = #ttg.blocked<{sizePerThread = [16, 1], threadsPerWarp = [8, 8], warpsPerCTA = [1, 4], order = [0, 1]}>
#linear = #ttg.linear<{register = [[0, 0, 1], [0, 0, 2], [0, 0, 4], [1, 0, 0], [2, 0, 0]], lane = [[0, 1, 0], [0, 2, 0], [0, 4, 0], [0, 8, 0], [0, 0, 8], [0, 0, 16]], warp = [[0, 16, 0], [0, 0, 0]], block = []}>
#linear1 = #ttg.linear<{register = [[0, 128], [0, 1], [0, 2], [0, 4], [0, 32], [0, 64]], lane = [[1, 0], [2, 0], [4, 0], [8, 0], [0, 8], [0, 16]], warp = [[0, 0], [16, 0]], block = []}>
#linear2 = #ttg.linear<{register = [[0, 1, 0], [0, 0, 1], [0, 0, 2], [0, 0, 4], [0, 0, 32], [0, 0, 64]], lane = [[1, 0, 0], [2, 0, 0], [4, 0, 0], [8, 0, 0], [0, 0, 8], [0, 0, 16]], warp = [[0, 0, 0], [16, 0, 0]], block = []}>
#linear3 = #ttg.linear<{register = [[0, 0, 1], [0, 1, 0], [0, 2, 0], [0, 4, 0], [0, 32, 0], [0, 64, 0]], lane = [[1, 0, 0], [2, 0, 0], [4, 0, 0], [8, 0, 0], [0, 8, 0], [0, 16, 0]], warp = [[0, 0, 0], [16, 0, 0]], block = []}>
#linear4 = #ttg.linear<{register = [[64, 0], [1, 0], [2, 0], [16, 0], [32, 0]], lane = [[0, 1], [0, 2], [0, 4], [0, 8], [4, 0], [8, 0]], warp = [[0, 16], [0, 0]], block = []}>
#linear5 = #ttg.linear<{register = [[1, 0, 0], [0, 1, 0], [0, 2, 0], [0, 16, 0], [0, 32, 0]], lane = [[0, 0, 1], [0, 0, 2], [0, 0, 4], [0, 0, 8], [0, 4, 0], [0, 8, 0]], warp = [[0, 0, 16], [0, 0, 0]], block = []}>
#linear6 = #ttg.linear<{register = [[0, 0, 1], [1, 0, 0], [2, 0, 0], [16, 0, 0], [32, 0, 0]], lane = [[0, 1, 0], [0, 2, 0], [0, 4, 0], [0, 8, 0], [4, 0, 0], [8, 0, 0]], warp = [[0, 16, 0], [0, 0, 0]], block = []}>
#linear7 = #ttg.linear<{register = [[0, 4], [0, 1], [0, 2]], lane = [[1, 0], [2, 0], [4, 0], [8, 0], [0, 0], [0, 0]], warp = [[16, 0], [0, 0]], block = []}>
#linear8 = #ttg.linear<{register = [[0, 1, 0], [0, 0, 1], [0, 0, 2]], lane = [[1, 0, 0], [2, 0, 0], [4, 0, 0], [8, 0, 0], [0, 0, 0], [0, 0, 0]], warp = [[16, 0, 0], [0, 0, 0]], block = []}>
#linear9 = #ttg.linear<{register = [[0, 0, 1], [0, 1, 0], [0, 2, 0]], lane = [[1, 0, 0], [2, 0, 0], [4, 0, 0], [8, 0, 0], [0, 0, 0], [0, 0, 0]], warp = [[16, 0, 0], [0, 0, 0]], block = []}>
#linear10 = #ttg.linear<{register = [[0, 1], [0, 2]], lane = [[1, 0], [2, 0], [4, 0], [8, 0], [0, 0], [0, 0]], warp = [[16, 0], [0, 0]], block = []}>
#linear11 = #ttg.linear<{register = [[0, 1, 0], [0, 2, 0], [0, 4, 0], [1, 0, 0], [2, 0, 0]], lane = [[0, 0, 1], [0, 0, 2], [0, 0, 4], [0, 0, 8], [0, 8, 0], [0, 16, 0]], warp = [[0, 0, 16], [0, 0, 0]], block = []}>
#loc1 = loc("a_base")
#loc2 = loc("stride_a0")
#loc3 = loc("b_base")
#loc4 = loc("stride_b1")
#loc5 = loc("b_scale")
#loc6 = loc("out")
#mma = #ttg.amd_mfma<{version = 4, warpsPerCTA = [2, 2], instrShape = [16, 16], isTransposed = true}>
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "hip:gfx950", "ttg.threads-per-warp" = 64 : i32} {
  tt.func public @dot_scale_kernel(%a_base: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("a_base"), %stride_a0: i32 {tt.divisibility = 16 : i32} loc("stride_a0"), %b_base: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("b_base"), %stride_b1: i32 {tt.divisibility = 16 : i32} loc("stride_b1"), %b_scale: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("b_scale"), %out: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("out")) attributes {noinline = false} {
    %cst = arith.constant dense<32> : tensor<32x1xi32, #mma> loc(#loc)
    %cst_0 = arith.constant dense<8> : tensor<32x1xi32, #blocked> loc(#loc)
    %cst_1 = arith.constant dense<7> : tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %cst_2 = arith.constant dense<-1> : tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %cst_3 = arith.constant dense<0x7FC0> : tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %cst_4 = arith.constant dense<0.000000e+00> : tensor<32x32xf32, #mma> loc(#loc)
    %0 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc)
    %1 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc)
    %2 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc)
    %3 = tt.expand_dims %0 {axis = 1 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> -> tensor<32x1xi32, #blocked1> loc(#loc)
    %4 = tt.splat %stride_a0 : i32 -> tensor<32x1xi32, #blocked1> loc(#loc)
    %5 = arith.muli %3, %4 : tensor<32x1xi32, #blocked1> loc(#loc)
    %6 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc)
    %7 = tt.broadcast %5 : tensor<32x1xi32, #blocked1> -> tensor<32x256xi32, #blocked1> loc(#loc)
    %8 = tt.expand_dims %6 {axis = 0 : i32} : tensor<256xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x256xi32, #blocked1> loc(#loc)
    %9 = tt.broadcast %8 : tensor<1x256xi32, #blocked1> -> tensor<32x256xi32, #blocked1> loc(#loc)
    %10 = arith.addi %9, %7 : tensor<32x256xi32, #blocked1> loc(#loc)
    %11 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked2}>> loc(#loc)
    %12 = tt.expand_dims %11 {axis = 1 : i32} : tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked2}>> -> tensor<128x1xi32, #blocked2> loc(#loc)
    %13 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked2}>> loc(#loc)
    %14 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #mma}>> loc(#loc)
    %15 = tt.broadcast %12 : tensor<128x1xi32, #blocked2> -> tensor<128x32xi32, #blocked2> loc(#loc)
    %16 = tt.expand_dims %13 {axis = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked2}>> -> tensor<1x32xi32, #blocked2> loc(#loc)
    %17 = tt.splat %stride_b1 : i32 -> tensor<1x32xi32, #blocked2> loc(#loc)
    %18 = arith.muli %16, %17 : tensor<1x32xi32, #blocked2> loc(#loc)
    %19 = tt.broadcast %18 : tensor<1x32xi32, #blocked2> -> tensor<128x32xi32, #blocked2> loc(#loc)
    %20 = arith.addi %19, %15 : tensor<128x32xi32, #blocked2> loc(#loc)
    %21 = tt.splat %a_base : !tt.ptr<bf16> -> tensor<32x256x!tt.ptr<bf16>, #blocked1> loc(#loc)
    %22 = tt.addptr %21, %10 : tensor<32x256x!tt.ptr<bf16>, #blocked1>, tensor<32x256xi32, #blocked1> loc(#loc)
    %23 = tt.load %22 : tensor<32x256x!tt.ptr<bf16>, #blocked1> loc(#loc)
    %24 = ttg.convert_layout %23 : tensor<32x256xbf16, #blocked1> -> tensor<32x256xbf16, #linear1> loc(#loc)
    %25 = tt.reshape %24 : tensor<32x256xbf16, #linear1> -> tensor<32x2x128xbf16, #linear2> loc(#loc)
    %26 = tt.trans %25 {order = array<i32: 0, 2, 1>} : tensor<32x2x128xbf16, #linear2> -> tensor<32x128x2xbf16, #linear3> loc(#loc)
    %outLHS, %outRHS = tt.split %26 : tensor<32x128x2xbf16, #linear3> -> tensor<32x128xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> loc(#loc)
    %27 = tt.splat %b_base : !tt.ptr<i8> -> tensor<128x32x!tt.ptr<i8>, #blocked2> loc(#loc)
    %28 = tt.addptr %27, %20 : tensor<128x32x!tt.ptr<i8>, #blocked2>, tensor<128x32xi32, #blocked2> loc(#loc)
    %29 = tt.load %28 : tensor<128x32x!tt.ptr<i8>, #blocked2> loc(#loc)
    %30 = ttg.convert_layout %29 : tensor<128x32xi8, #blocked2> -> tensor<128x32xi8, #linear4> loc(#loc)
    %31 = tt.reshape %30 : tensor<128x32xi8, #linear4> -> tensor<2x64x32xi8, #linear5> loc(#loc)
    %32 = tt.trans %31 {order = array<i32: 1, 2, 0>} : tensor<2x64x32xi8, #linear5> -> tensor<64x32x2xi8, #linear6> loc(#loc)
    %outLHS_5, %outRHS_6 = tt.split %32 : tensor<64x32x2xi8, #linear6> -> tensor<64x32xi8, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 4}>> loc(#loc)
    %33 = tt.expand_dims %1 {axis = 1 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<32x1xi32, #blocked> loc(#loc)
    %34 = arith.muli %33, %cst_0 : tensor<32x1xi32, #blocked> loc(#loc)
    %35 = tt.make_range {end = 8 : i32, start = 0 : i32} : tensor<8xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc)
    %36 = tt.broadcast %34 : tensor<32x1xi32, #blocked> -> tensor<32x8xi32, #blocked> loc(#loc)
    %37 = tt.expand_dims %35 {axis = 0 : i32} : tensor<8xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x8xi32, #blocked> loc(#loc)
    %38 = tt.broadcast %37 : tensor<1x8xi32, #blocked> -> tensor<32x8xi32, #blocked> loc(#loc)
    %39 = arith.addi %38, %36 : tensor<32x8xi32, #blocked> loc(#loc)
    %40 = amdgpu.buffer_load %b_scale[%39] : tensor<32x8xi8, #blocked> loc(#loc)
    %41 = ttg.convert_layout %40 : tensor<32x8xi8, #blocked> -> tensor<32x8xi8, #linear7> loc(#loc)
    %42 = tt.reshape %41 : tensor<32x8xi8, #linear7> -> tensor<32x2x4xi8, #linear8> loc(#loc)
    %43 = tt.trans %42 {order = array<i32: 0, 2, 1>} : tensor<32x2x4xi8, #linear8> -> tensor<32x4x2xi8, #linear9> loc(#loc)
    %outLHS_7, %outRHS_8 = tt.split %43 : tensor<32x4x2xi8, #linear9> -> tensor<32x4xi8, #linear10> loc(#loc)
    %44 = tt.trans %outRHS_8 {order = array<i32: 1, 0>} : tensor<32x4xi8, #linear10> -> tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %45 = tt.trans %outLHS_7 {order = array<i32: 1, 0>} : tensor<32x4xi8, #linear10> -> tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %46 = arith.extui %45 : tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> to tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %47 = arith.shli %46, %cst_1 : tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %48 = tt.bitcast %47 : tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> -> tensor<4x32xbf16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %49 = tt.expand_dims %48 {axis = 2 : i32} : tensor<4x32xbf16, #ttg.slice<{dim = 2, parent = #linear}>> -> tensor<4x32x1xbf16, #linear> loc(#loc)
    %50 = tt.broadcast %49 : tensor<4x32x1xbf16, #linear> -> tensor<4x32x32xbf16, #linear> loc(#loc)
    %51 = tt.trans %50 {order = array<i32: 0, 2, 1>} : tensor<4x32x32xbf16, #linear> -> tensor<4x32x32xbf16, #linear11> loc(#loc)
    %52 = tt.reshape %51 : tensor<4x32x32xbf16, #linear11> -> tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %53 = amdgpu.scaled_upcast_fp4 %outLHS_5 scale %52 {axis = 0 : i32} : tensor<64x32xi8, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 4}>>, tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> -> tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %54 = arith.cmpi eq, %45, %cst_2 : tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %55 = tt.expand_dims %54 {axis = 2 : i32} : tensor<4x32xi1, #ttg.slice<{dim = 2, parent = #linear}>> -> tensor<4x32x1xi1, #linear> loc(#loc)
    %56 = tt.broadcast %55 : tensor<4x32x1xi1, #linear> -> tensor<4x32x32xi1, #linear> loc(#loc)
    %57 = tt.trans %56 {order = array<i32: 0, 2, 1>} : tensor<4x32x32xi1, #linear> -> tensor<4x32x32xi1, #linear11> loc(#loc)
    %58 = tt.reshape %57 : tensor<4x32x32xi1, #linear11> -> tensor<128x32xi1, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %59 = arith.select %58, %cst_3, %53 : tensor<128x32xi1, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>>, tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %60 = tt.dot %outLHS, %59, %cst_4 : tensor<32x128xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> * tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> -> tensor<32x32xf32, #mma> loc(#loc)
    %61 = arith.extui %44 : tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> to tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %62 = arith.shli %61, %cst_1 : tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %63 = tt.bitcast %62 : tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> -> tensor<4x32xbf16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %64 = tt.expand_dims %63 {axis = 2 : i32} : tensor<4x32xbf16, #ttg.slice<{dim = 2, parent = #linear}>> -> tensor<4x32x1xbf16, #linear> loc(#loc)
    %65 = tt.broadcast %64 : tensor<4x32x1xbf16, #linear> -> tensor<4x32x32xbf16, #linear> loc(#loc)
    %66 = tt.trans %65 {order = array<i32: 0, 2, 1>} : tensor<4x32x32xbf16, #linear> -> tensor<4x32x32xbf16, #linear11> loc(#loc)
    %67 = tt.reshape %66 : tensor<4x32x32xbf16, #linear11> -> tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %68 = amdgpu.scaled_upcast_fp4 %outRHS_6 scale %67 {axis = 0 : i32} : tensor<64x32xi8, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 4}>>, tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> -> tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %69 = arith.cmpi eq, %44, %cst_2 : tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %70 = tt.expand_dims %69 {axis = 2 : i32} : tensor<4x32xi1, #ttg.slice<{dim = 2, parent = #linear}>> -> tensor<4x32x1xi1, #linear> loc(#loc)
    %71 = tt.broadcast %70 : tensor<4x32x1xi1, #linear> -> tensor<4x32x32xi1, #linear> loc(#loc)
    %72 = tt.trans %71 {order = array<i32: 0, 2, 1>} : tensor<4x32x32xi1, #linear> -> tensor<4x32x32xi1, #linear11> loc(#loc)
    %73 = tt.reshape %72 : tensor<4x32x32xi1, #linear11> -> tensor<128x32xi1, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %74 = arith.select %73, %cst_3, %68 : tensor<128x32xi1, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>>, tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %75 = tt.dot %outRHS, %74, %cst_4 : tensor<32x128xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> * tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> -> tensor<32x32xf32, #mma> loc(#loc)
    %76 = arith.addf %60, %75 : tensor<32x32xf32, #mma> loc(#loc)
    %77 = tt.expand_dims %2 {axis = 1 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #mma}>> -> tensor<32x1xi32, #mma> loc(#loc)
    %78 = arith.muli %77, %cst : tensor<32x1xi32, #mma> loc(#loc)
    %79 = tt.broadcast %78 : tensor<32x1xi32, #mma> -> tensor<32x32xi32, #mma> loc(#loc)
    %80 = tt.expand_dims %14 {axis = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #mma}>> -> tensor<1x32xi32, #mma> loc(#loc)
    %81 = tt.broadcast %80 : tensor<1x32xi32, #mma> -> tensor<32x32xi32, #mma> loc(#loc)
    %82 = arith.addi %81, %79 : tensor<32x32xi32, #mma> loc(#loc)
    %83 = arith.truncf %76 : tensor<32x32xf32, #mma> to tensor<32x32xbf16, #mma> loc(#loc)
    amdgpu.buffer_store %83, %out[%82] : tensor<32x32xbf16, #mma> loc(#loc)
    tt.return loc(#loc)
  } loc(#loc)
} loc(#loc)
#loc = loc(unknown)


// -----// IR Dump Before ConvertIndexToLLVMPass (convert-index-to-llvm) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [8, 8], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [1, 8], threadsPerWarp = [2, 32], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked2 = #ttg.blocked<{sizePerThread = [16, 1], threadsPerWarp = [8, 8], warpsPerCTA = [1, 4], order = [0, 1]}>
#linear = #ttg.linear<{register = [[0, 0, 1], [0, 0, 2], [0, 0, 4], [1, 0, 0], [2, 0, 0]], lane = [[0, 1, 0], [0, 2, 0], [0, 4, 0], [0, 8, 0], [0, 0, 8], [0, 0, 16]], warp = [[0, 16, 0], [0, 0, 0]], block = []}>
#linear1 = #ttg.linear<{register = [[0, 128], [0, 1], [0, 2], [0, 4], [0, 32], [0, 64]], lane = [[1, 0], [2, 0], [4, 0], [8, 0], [0, 8], [0, 16]], warp = [[0, 0], [16, 0]], block = []}>
#linear2 = #ttg.linear<{register = [[0, 1, 0], [0, 0, 1], [0, 0, 2], [0, 0, 4], [0, 0, 32], [0, 0, 64]], lane = [[1, 0, 0], [2, 0, 0], [4, 0, 0], [8, 0, 0], [0, 0, 8], [0, 0, 16]], warp = [[0, 0, 0], [16, 0, 0]], block = []}>
#linear3 = #ttg.linear<{register = [[0, 0, 1], [0, 1, 0], [0, 2, 0], [0, 4, 0], [0, 32, 0], [0, 64, 0]], lane = [[1, 0, 0], [2, 0, 0], [4, 0, 0], [8, 0, 0], [0, 8, 0], [0, 16, 0]], warp = [[0, 0, 0], [16, 0, 0]], block = []}>
#linear4 = #ttg.linear<{register = [[64, 0], [1, 0], [2, 0], [16, 0], [32, 0]], lane = [[0, 1], [0, 2], [0, 4], [0, 8], [4, 0], [8, 0]], warp = [[0, 16], [0, 0]], block = []}>
#linear5 = #ttg.linear<{register = [[1, 0, 0], [0, 1, 0], [0, 2, 0], [0, 16, 0], [0, 32, 0]], lane = [[0, 0, 1], [0, 0, 2], [0, 0, 4], [0, 0, 8], [0, 4, 0], [0, 8, 0]], warp = [[0, 0, 16], [0, 0, 0]], block = []}>
#linear6 = #ttg.linear<{register = [[0, 0, 1], [1, 0, 0], [2, 0, 0], [16, 0, 0], [32, 0, 0]], lane = [[0, 1, 0], [0, 2, 0], [0, 4, 0], [0, 8, 0], [4, 0, 0], [8, 0, 0]], warp = [[0, 16, 0], [0, 0, 0]], block = []}>
#linear7 = #ttg.linear<{register = [[0, 4], [0, 1], [0, 2]], lane = [[1, 0], [2, 0], [4, 0], [8, 0], [0, 0], [0, 0]], warp = [[16, 0], [0, 0]], block = []}>
#linear8 = #ttg.linear<{register = [[0, 1, 0], [0, 0, 1], [0, 0, 2]], lane = [[1, 0, 0], [2, 0, 0], [4, 0, 0], [8, 0, 0], [0, 0, 0], [0, 0, 0]], warp = [[16, 0, 0], [0, 0, 0]], block = []}>
#linear9 = #ttg.linear<{register = [[0, 0, 1], [0, 1, 0], [0, 2, 0]], lane = [[1, 0, 0], [2, 0, 0], [4, 0, 0], [8, 0, 0], [0, 0, 0], [0, 0, 0]], warp = [[16, 0, 0], [0, 0, 0]], block = []}>
#linear10 = #ttg.linear<{register = [[0, 1], [0, 2]], lane = [[1, 0], [2, 0], [4, 0], [8, 0], [0, 0], [0, 0]], warp = [[16, 0], [0, 0]], block = []}>
#linear11 = #ttg.linear<{register = [[0, 1, 0], [0, 2, 0], [0, 4, 0], [1, 0, 0], [2, 0, 0]], lane = [[0, 0, 1], [0, 0, 2], [0, 0, 4], [0, 0, 8], [0, 8, 0], [0, 16, 0]], warp = [[0, 0, 16], [0, 0, 0]], block = []}>
#loc1 = loc("a_base")
#loc2 = loc("stride_a0")
#loc3 = loc("b_base")
#loc4 = loc("stride_b1")
#loc5 = loc("b_scale")
#loc6 = loc("out")
#mma = #ttg.amd_mfma<{version = 4, warpsPerCTA = [2, 2], instrShape = [16, 16], isTransposed = true}>
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "hip:gfx950", "ttg.threads-per-warp" = 64 : i32} {
  tt.func public @dot_scale_kernel(%a_base: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("a_base"), %stride_a0: i32 {tt.divisibility = 16 : i32} loc("stride_a0"), %b_base: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("b_base"), %stride_b1: i32 {tt.divisibility = 16 : i32} loc("stride_b1"), %b_scale: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("b_scale"), %out: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("out")) attributes {noinline = false} {
    %cst = arith.constant dense<32> : tensor<32x1xi32, #mma> loc(#loc)
    %cst_0 = arith.constant dense<8> : tensor<32x1xi32, #blocked> loc(#loc)
    %cst_1 = arith.constant dense<7> : tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %cst_2 = arith.constant dense<-1> : tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %cst_3 = arith.constant dense<0x7FC0> : tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %cst_4 = arith.constant dense<0.000000e+00> : tensor<32x32xf32, #mma> loc(#loc)
    %0 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc)
    %1 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc)
    %2 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc)
    %3 = tt.expand_dims %0 {axis = 1 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> -> tensor<32x1xi32, #blocked1> loc(#loc)
    %4 = tt.splat %stride_a0 : i32 -> tensor<32x1xi32, #blocked1> loc(#loc)
    %5 = arith.muli %3, %4 : tensor<32x1xi32, #blocked1> loc(#loc)
    %6 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc)
    %7 = tt.broadcast %5 : tensor<32x1xi32, #blocked1> -> tensor<32x256xi32, #blocked1> loc(#loc)
    %8 = tt.expand_dims %6 {axis = 0 : i32} : tensor<256xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x256xi32, #blocked1> loc(#loc)
    %9 = tt.broadcast %8 : tensor<1x256xi32, #blocked1> -> tensor<32x256xi32, #blocked1> loc(#loc)
    %10 = arith.addi %9, %7 : tensor<32x256xi32, #blocked1> loc(#loc)
    %11 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked2}>> loc(#loc)
    %12 = tt.expand_dims %11 {axis = 1 : i32} : tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked2}>> -> tensor<128x1xi32, #blocked2> loc(#loc)
    %13 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked2}>> loc(#loc)
    %14 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #mma}>> loc(#loc)
    %15 = tt.broadcast %12 : tensor<128x1xi32, #blocked2> -> tensor<128x32xi32, #blocked2> loc(#loc)
    %16 = tt.expand_dims %13 {axis = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked2}>> -> tensor<1x32xi32, #blocked2> loc(#loc)
    %17 = tt.splat %stride_b1 : i32 -> tensor<1x32xi32, #blocked2> loc(#loc)
    %18 = arith.muli %16, %17 : tensor<1x32xi32, #blocked2> loc(#loc)
    %19 = tt.broadcast %18 : tensor<1x32xi32, #blocked2> -> tensor<128x32xi32, #blocked2> loc(#loc)
    %20 = arith.addi %19, %15 : tensor<128x32xi32, #blocked2> loc(#loc)
    %21 = tt.splat %a_base : !tt.ptr<bf16> -> tensor<32x256x!tt.ptr<bf16>, #blocked1> loc(#loc)
    %22 = tt.addptr %21, %10 : tensor<32x256x!tt.ptr<bf16>, #blocked1>, tensor<32x256xi32, #blocked1> loc(#loc)
    %23 = tt.load %22 : tensor<32x256x!tt.ptr<bf16>, #blocked1> loc(#loc)
    %24 = ttg.convert_layout %23 : tensor<32x256xbf16, #blocked1> -> tensor<32x256xbf16, #linear1> loc(#loc)
    %25 = tt.reshape %24 : tensor<32x256xbf16, #linear1> -> tensor<32x2x128xbf16, #linear2> loc(#loc)
    %26 = tt.trans %25 {order = array<i32: 0, 2, 1>} : tensor<32x2x128xbf16, #linear2> -> tensor<32x128x2xbf16, #linear3> loc(#loc)
    %outLHS, %outRHS = tt.split %26 : tensor<32x128x2xbf16, #linear3> -> tensor<32x128xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> loc(#loc)
    %27 = tt.splat %b_base : !tt.ptr<i8> -> tensor<128x32x!tt.ptr<i8>, #blocked2> loc(#loc)
    %28 = tt.addptr %27, %20 : tensor<128x32x!tt.ptr<i8>, #blocked2>, tensor<128x32xi32, #blocked2> loc(#loc)
    %29 = tt.load %28 : tensor<128x32x!tt.ptr<i8>, #blocked2> loc(#loc)
    %30 = ttg.convert_layout %29 : tensor<128x32xi8, #blocked2> -> tensor<128x32xi8, #linear4> loc(#loc)
    %31 = tt.reshape %30 : tensor<128x32xi8, #linear4> -> tensor<2x64x32xi8, #linear5> loc(#loc)
    %32 = tt.trans %31 {order = array<i32: 1, 2, 0>} : tensor<2x64x32xi8, #linear5> -> tensor<64x32x2xi8, #linear6> loc(#loc)
    %outLHS_5, %outRHS_6 = tt.split %32 : tensor<64x32x2xi8, #linear6> -> tensor<64x32xi8, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 4}>> loc(#loc)
    %33 = tt.expand_dims %1 {axis = 1 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<32x1xi32, #blocked> loc(#loc)
    %34 = arith.muli %33, %cst_0 : tensor<32x1xi32, #blocked> loc(#loc)
    %35 = tt.make_range {end = 8 : i32, start = 0 : i32} : tensor<8xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc)
    %36 = tt.broadcast %34 : tensor<32x1xi32, #blocked> -> tensor<32x8xi32, #blocked> loc(#loc)
    %37 = tt.expand_dims %35 {axis = 0 : i32} : tensor<8xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x8xi32, #blocked> loc(#loc)
    %38 = tt.broadcast %37 : tensor<1x8xi32, #blocked> -> tensor<32x8xi32, #blocked> loc(#loc)
    %39 = arith.addi %38, %36 : tensor<32x8xi32, #blocked> loc(#loc)
    %40 = amdgpu.buffer_load %b_scale[%39] : tensor<32x8xi8, #blocked> loc(#loc)
    %41 = ttg.convert_layout %40 : tensor<32x8xi8, #blocked> -> tensor<32x8xi8, #linear7> loc(#loc)
    %42 = tt.reshape %41 : tensor<32x8xi8, #linear7> -> tensor<32x2x4xi8, #linear8> loc(#loc)
    %43 = tt.trans %42 {order = array<i32: 0, 2, 1>} : tensor<32x2x4xi8, #linear8> -> tensor<32x4x2xi8, #linear9> loc(#loc)
    %outLHS_7, %outRHS_8 = tt.split %43 : tensor<32x4x2xi8, #linear9> -> tensor<32x4xi8, #linear10> loc(#loc)
    %44 = tt.trans %outRHS_8 {order = array<i32: 1, 0>} : tensor<32x4xi8, #linear10> -> tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %45 = tt.trans %outLHS_7 {order = array<i32: 1, 0>} : tensor<32x4xi8, #linear10> -> tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %46 = arith.extui %45 : tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> to tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %47 = arith.shli %46, %cst_1 : tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %48 = tt.bitcast %47 : tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> -> tensor<4x32xbf16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %49 = tt.expand_dims %48 {axis = 2 : i32} : tensor<4x32xbf16, #ttg.slice<{dim = 2, parent = #linear}>> -> tensor<4x32x1xbf16, #linear> loc(#loc)
    %50 = tt.broadcast %49 : tensor<4x32x1xbf16, #linear> -> tensor<4x32x32xbf16, #linear> loc(#loc)
    %51 = tt.trans %50 {order = array<i32: 0, 2, 1>} : tensor<4x32x32xbf16, #linear> -> tensor<4x32x32xbf16, #linear11> loc(#loc)
    %52 = tt.reshape %51 : tensor<4x32x32xbf16, #linear11> -> tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %53 = amdgpu.scaled_upcast_fp4 %outLHS_5 scale %52 {axis = 0 : i32} : tensor<64x32xi8, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 4}>>, tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> -> tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %54 = arith.cmpi eq, %45, %cst_2 : tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %55 = tt.expand_dims %54 {axis = 2 : i32} : tensor<4x32xi1, #ttg.slice<{dim = 2, parent = #linear}>> -> tensor<4x32x1xi1, #linear> loc(#loc)
    %56 = tt.broadcast %55 : tensor<4x32x1xi1, #linear> -> tensor<4x32x32xi1, #linear> loc(#loc)
    %57 = tt.trans %56 {order = array<i32: 0, 2, 1>} : tensor<4x32x32xi1, #linear> -> tensor<4x32x32xi1, #linear11> loc(#loc)
    %58 = tt.reshape %57 : tensor<4x32x32xi1, #linear11> -> tensor<128x32xi1, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %59 = arith.select %58, %cst_3, %53 : tensor<128x32xi1, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>>, tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %60 = tt.dot %outLHS, %59, %cst_4 : tensor<32x128xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> * tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> -> tensor<32x32xf32, #mma> loc(#loc)
    %61 = arith.extui %44 : tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> to tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %62 = arith.shli %61, %cst_1 : tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %63 = tt.bitcast %62 : tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> -> tensor<4x32xbf16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %64 = tt.expand_dims %63 {axis = 2 : i32} : tensor<4x32xbf16, #ttg.slice<{dim = 2, parent = #linear}>> -> tensor<4x32x1xbf16, #linear> loc(#loc)
    %65 = tt.broadcast %64 : tensor<4x32x1xbf16, #linear> -> tensor<4x32x32xbf16, #linear> loc(#loc)
    %66 = tt.trans %65 {order = array<i32: 0, 2, 1>} : tensor<4x32x32xbf16, #linear> -> tensor<4x32x32xbf16, #linear11> loc(#loc)
    %67 = tt.reshape %66 : tensor<4x32x32xbf16, #linear11> -> tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %68 = amdgpu.scaled_upcast_fp4 %outRHS_6 scale %67 {axis = 0 : i32} : tensor<64x32xi8, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 4}>>, tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> -> tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %69 = arith.cmpi eq, %44, %cst_2 : tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %70 = tt.expand_dims %69 {axis = 2 : i32} : tensor<4x32xi1, #ttg.slice<{dim = 2, parent = #linear}>> -> tensor<4x32x1xi1, #linear> loc(#loc)
    %71 = tt.broadcast %70 : tensor<4x32x1xi1, #linear> -> tensor<4x32x32xi1, #linear> loc(#loc)
    %72 = tt.trans %71 {order = array<i32: 0, 2, 1>} : tensor<4x32x32xi1, #linear> -> tensor<4x32x32xi1, #linear11> loc(#loc)
    %73 = tt.reshape %72 : tensor<4x32x32xi1, #linear11> -> tensor<128x32xi1, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %74 = arith.select %73, %cst_3, %68 : tensor<128x32xi1, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>>, tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %75 = tt.dot %outRHS, %74, %cst_4 : tensor<32x128xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> * tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> -> tensor<32x32xf32, #mma> loc(#loc)
    %76 = arith.addf %60, %75 : tensor<32x32xf32, #mma> loc(#loc)
    %77 = tt.expand_dims %2 {axis = 1 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #mma}>> -> tensor<32x1xi32, #mma> loc(#loc)
    %78 = arith.muli %77, %cst : tensor<32x1xi32, #mma> loc(#loc)
    %79 = tt.broadcast %78 : tensor<32x1xi32, #mma> -> tensor<32x32xi32, #mma> loc(#loc)
    %80 = tt.expand_dims %14 {axis = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #mma}>> -> tensor<1x32xi32, #mma> loc(#loc)
    %81 = tt.broadcast %80 : tensor<1x32xi32, #mma> -> tensor<32x32xi32, #mma> loc(#loc)
    %82 = arith.addi %81, %79 : tensor<32x32xi32, #mma> loc(#loc)
    %83 = arith.truncf %76 : tensor<32x32xf32, #mma> to tensor<32x32xbf16, #mma> loc(#loc)
    amdgpu.buffer_store %83, %out[%82] : tensor<32x32xbf16, #mma> loc(#loc)
    tt.return loc(#loc)
  } loc(#loc)
} loc(#loc)
#loc = loc(unknown)


// -----// IR Dump Before AllocateAMDGPUSharedMemory (allocate-amdgpu-shared-memory) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [8, 8], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [1, 8], threadsPerWarp = [2, 32], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked2 = #ttg.blocked<{sizePerThread = [16, 1], threadsPerWarp = [8, 8], warpsPerCTA = [1, 4], order = [0, 1]}>
#linear = #ttg.linear<{register = [[0, 0, 1], [0, 0, 2], [0, 0, 4], [1, 0, 0], [2, 0, 0]], lane = [[0, 1, 0], [0, 2, 0], [0, 4, 0], [0, 8, 0], [0, 0, 8], [0, 0, 16]], warp = [[0, 16, 0], [0, 0, 0]], block = []}>
#linear1 = #ttg.linear<{register = [[0, 128], [0, 1], [0, 2], [0, 4], [0, 32], [0, 64]], lane = [[1, 0], [2, 0], [4, 0], [8, 0], [0, 8], [0, 16]], warp = [[0, 0], [16, 0]], block = []}>
#linear2 = #ttg.linear<{register = [[0, 1, 0], [0, 0, 1], [0, 0, 2], [0, 0, 4], [0, 0, 32], [0, 0, 64]], lane = [[1, 0, 0], [2, 0, 0], [4, 0, 0], [8, 0, 0], [0, 0, 8], [0, 0, 16]], warp = [[0, 0, 0], [16, 0, 0]], block = []}>
#linear3 = #ttg.linear<{register = [[0, 0, 1], [0, 1, 0], [0, 2, 0], [0, 4, 0], [0, 32, 0], [0, 64, 0]], lane = [[1, 0, 0], [2, 0, 0], [4, 0, 0], [8, 0, 0], [0, 8, 0], [0, 16, 0]], warp = [[0, 0, 0], [16, 0, 0]], block = []}>
#linear4 = #ttg.linear<{register = [[64, 0], [1, 0], [2, 0], [16, 0], [32, 0]], lane = [[0, 1], [0, 2], [0, 4], [0, 8], [4, 0], [8, 0]], warp = [[0, 16], [0, 0]], block = []}>
#linear5 = #ttg.linear<{register = [[1, 0, 0], [0, 1, 0], [0, 2, 0], [0, 16, 0], [0, 32, 0]], lane = [[0, 0, 1], [0, 0, 2], [0, 0, 4], [0, 0, 8], [0, 4, 0], [0, 8, 0]], warp = [[0, 0, 16], [0, 0, 0]], block = []}>
#linear6 = #ttg.linear<{register = [[0, 0, 1], [1, 0, 0], [2, 0, 0], [16, 0, 0], [32, 0, 0]], lane = [[0, 1, 0], [0, 2, 0], [0, 4, 0], [0, 8, 0], [4, 0, 0], [8, 0, 0]], warp = [[0, 16, 0], [0, 0, 0]], block = []}>
#linear7 = #ttg.linear<{register = [[0, 4], [0, 1], [0, 2]], lane = [[1, 0], [2, 0], [4, 0], [8, 0], [0, 0], [0, 0]], warp = [[16, 0], [0, 0]], block = []}>
#linear8 = #ttg.linear<{register = [[0, 1, 0], [0, 0, 1], [0, 0, 2]], lane = [[1, 0, 0], [2, 0, 0], [4, 0, 0], [8, 0, 0], [0, 0, 0], [0, 0, 0]], warp = [[16, 0, 0], [0, 0, 0]], block = []}>
#linear9 = #ttg.linear<{register = [[0, 0, 1], [0, 1, 0], [0, 2, 0]], lane = [[1, 0, 0], [2, 0, 0], [4, 0, 0], [8, 0, 0], [0, 0, 0], [0, 0, 0]], warp = [[16, 0, 0], [0, 0, 0]], block = []}>
#linear10 = #ttg.linear<{register = [[0, 1], [0, 2]], lane = [[1, 0], [2, 0], [4, 0], [8, 0], [0, 0], [0, 0]], warp = [[16, 0], [0, 0]], block = []}>
#linear11 = #ttg.linear<{register = [[0, 1, 0], [0, 2, 0], [0, 4, 0], [1, 0, 0], [2, 0, 0]], lane = [[0, 0, 1], [0, 0, 2], [0, 0, 4], [0, 0, 8], [0, 8, 0], [0, 16, 0]], warp = [[0, 0, 16], [0, 0, 0]], block = []}>
#loc1 = loc("a_base")
#loc2 = loc("stride_a0")
#loc3 = loc("b_base")
#loc4 = loc("stride_b1")
#loc5 = loc("b_scale")
#loc6 = loc("out")
#mma = #ttg.amd_mfma<{version = 4, warpsPerCTA = [2, 2], instrShape = [16, 16], isTransposed = true}>
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "hip:gfx950", "ttg.threads-per-warp" = 64 : i32} {
  tt.func public @dot_scale_kernel(%a_base: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("a_base"), %stride_a0: i32 {tt.divisibility = 16 : i32} loc("stride_a0"), %b_base: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("b_base"), %stride_b1: i32 {tt.divisibility = 16 : i32} loc("stride_b1"), %b_scale: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("b_scale"), %out: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("out")) attributes {noinline = false} {
    %cst = arith.constant dense<32> : tensor<32x1xi32, #mma> loc(#loc)
    %cst_0 = arith.constant dense<8> : tensor<32x1xi32, #blocked> loc(#loc)
    %cst_1 = arith.constant dense<7> : tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %cst_2 = arith.constant dense<-1> : tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %cst_3 = arith.constant dense<0x7FC0> : tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %cst_4 = arith.constant dense<0.000000e+00> : tensor<32x32xf32, #mma> loc(#loc)
    %0 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc)
    %1 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc)
    %2 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc)
    %3 = tt.expand_dims %0 {axis = 1 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> -> tensor<32x1xi32, #blocked1> loc(#loc)
    %4 = tt.splat %stride_a0 : i32 -> tensor<32x1xi32, #blocked1> loc(#loc)
    %5 = arith.muli %3, %4 : tensor<32x1xi32, #blocked1> loc(#loc)
    %6 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc)
    %7 = tt.broadcast %5 : tensor<32x1xi32, #blocked1> -> tensor<32x256xi32, #blocked1> loc(#loc)
    %8 = tt.expand_dims %6 {axis = 0 : i32} : tensor<256xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x256xi32, #blocked1> loc(#loc)
    %9 = tt.broadcast %8 : tensor<1x256xi32, #blocked1> -> tensor<32x256xi32, #blocked1> loc(#loc)
    %10 = arith.addi %9, %7 : tensor<32x256xi32, #blocked1> loc(#loc)
    %11 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked2}>> loc(#loc)
    %12 = tt.expand_dims %11 {axis = 1 : i32} : tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked2}>> -> tensor<128x1xi32, #blocked2> loc(#loc)
    %13 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked2}>> loc(#loc)
    %14 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #mma}>> loc(#loc)
    %15 = tt.broadcast %12 : tensor<128x1xi32, #blocked2> -> tensor<128x32xi32, #blocked2> loc(#loc)
    %16 = tt.expand_dims %13 {axis = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked2}>> -> tensor<1x32xi32, #blocked2> loc(#loc)
    %17 = tt.splat %stride_b1 : i32 -> tensor<1x32xi32, #blocked2> loc(#loc)
    %18 = arith.muli %16, %17 : tensor<1x32xi32, #blocked2> loc(#loc)
    %19 = tt.broadcast %18 : tensor<1x32xi32, #blocked2> -> tensor<128x32xi32, #blocked2> loc(#loc)
    %20 = arith.addi %19, %15 : tensor<128x32xi32, #blocked2> loc(#loc)
    %21 = tt.splat %a_base : !tt.ptr<bf16> -> tensor<32x256x!tt.ptr<bf16>, #blocked1> loc(#loc)
    %22 = tt.addptr %21, %10 : tensor<32x256x!tt.ptr<bf16>, #blocked1>, tensor<32x256xi32, #blocked1> loc(#loc)
    %23 = tt.load %22 : tensor<32x256x!tt.ptr<bf16>, #blocked1> loc(#loc)
    %24 = ttg.convert_layout %23 : tensor<32x256xbf16, #blocked1> -> tensor<32x256xbf16, #linear1> loc(#loc)
    %25 = tt.reshape %24 : tensor<32x256xbf16, #linear1> -> tensor<32x2x128xbf16, #linear2> loc(#loc)
    %26 = tt.trans %25 {order = array<i32: 0, 2, 1>} : tensor<32x2x128xbf16, #linear2> -> tensor<32x128x2xbf16, #linear3> loc(#loc)
    %outLHS, %outRHS = tt.split %26 : tensor<32x128x2xbf16, #linear3> -> tensor<32x128xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> loc(#loc)
    %27 = tt.splat %b_base : !tt.ptr<i8> -> tensor<128x32x!tt.ptr<i8>, #blocked2> loc(#loc)
    %28 = tt.addptr %27, %20 : tensor<128x32x!tt.ptr<i8>, #blocked2>, tensor<128x32xi32, #blocked2> loc(#loc)
    %29 = tt.load %28 : tensor<128x32x!tt.ptr<i8>, #blocked2> loc(#loc)
    %30 = ttg.convert_layout %29 : tensor<128x32xi8, #blocked2> -> tensor<128x32xi8, #linear4> loc(#loc)
    %31 = tt.reshape %30 : tensor<128x32xi8, #linear4> -> tensor<2x64x32xi8, #linear5> loc(#loc)
    %32 = tt.trans %31 {order = array<i32: 1, 2, 0>} : tensor<2x64x32xi8, #linear5> -> tensor<64x32x2xi8, #linear6> loc(#loc)
    %outLHS_5, %outRHS_6 = tt.split %32 : tensor<64x32x2xi8, #linear6> -> tensor<64x32xi8, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 4}>> loc(#loc)
    %33 = tt.expand_dims %1 {axis = 1 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<32x1xi32, #blocked> loc(#loc)
    %34 = arith.muli %33, %cst_0 : tensor<32x1xi32, #blocked> loc(#loc)
    %35 = tt.make_range {end = 8 : i32, start = 0 : i32} : tensor<8xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc)
    %36 = tt.broadcast %34 : tensor<32x1xi32, #blocked> -> tensor<32x8xi32, #blocked> loc(#loc)
    %37 = tt.expand_dims %35 {axis = 0 : i32} : tensor<8xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x8xi32, #blocked> loc(#loc)
    %38 = tt.broadcast %37 : tensor<1x8xi32, #blocked> -> tensor<32x8xi32, #blocked> loc(#loc)
    %39 = arith.addi %38, %36 : tensor<32x8xi32, #blocked> loc(#loc)
    %40 = amdgpu.buffer_load %b_scale[%39] : tensor<32x8xi8, #blocked> loc(#loc)
    %41 = ttg.convert_layout %40 : tensor<32x8xi8, #blocked> -> tensor<32x8xi8, #linear7> loc(#loc)
    %42 = tt.reshape %41 : tensor<32x8xi8, #linear7> -> tensor<32x2x4xi8, #linear8> loc(#loc)
    %43 = tt.trans %42 {order = array<i32: 0, 2, 1>} : tensor<32x2x4xi8, #linear8> -> tensor<32x4x2xi8, #linear9> loc(#loc)
    %outLHS_7, %outRHS_8 = tt.split %43 : tensor<32x4x2xi8, #linear9> -> tensor<32x4xi8, #linear10> loc(#loc)
    %44 = tt.trans %outRHS_8 {order = array<i32: 1, 0>} : tensor<32x4xi8, #linear10> -> tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %45 = tt.trans %outLHS_7 {order = array<i32: 1, 0>} : tensor<32x4xi8, #linear10> -> tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %46 = arith.extui %45 : tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> to tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %47 = arith.shli %46, %cst_1 : tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %48 = tt.bitcast %47 : tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> -> tensor<4x32xbf16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %49 = tt.expand_dims %48 {axis = 2 : i32} : tensor<4x32xbf16, #ttg.slice<{dim = 2, parent = #linear}>> -> tensor<4x32x1xbf16, #linear> loc(#loc)
    %50 = tt.broadcast %49 : tensor<4x32x1xbf16, #linear> -> tensor<4x32x32xbf16, #linear> loc(#loc)
    %51 = tt.trans %50 {order = array<i32: 0, 2, 1>} : tensor<4x32x32xbf16, #linear> -> tensor<4x32x32xbf16, #linear11> loc(#loc)
    %52 = tt.reshape %51 : tensor<4x32x32xbf16, #linear11> -> tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %53 = amdgpu.scaled_upcast_fp4 %outLHS_5 scale %52 {axis = 0 : i32} : tensor<64x32xi8, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 4}>>, tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> -> tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %54 = arith.cmpi eq, %45, %cst_2 : tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %55 = tt.expand_dims %54 {axis = 2 : i32} : tensor<4x32xi1, #ttg.slice<{dim = 2, parent = #linear}>> -> tensor<4x32x1xi1, #linear> loc(#loc)
    %56 = tt.broadcast %55 : tensor<4x32x1xi1, #linear> -> tensor<4x32x32xi1, #linear> loc(#loc)
    %57 = tt.trans %56 {order = array<i32: 0, 2, 1>} : tensor<4x32x32xi1, #linear> -> tensor<4x32x32xi1, #linear11> loc(#loc)
    %58 = tt.reshape %57 : tensor<4x32x32xi1, #linear11> -> tensor<128x32xi1, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %59 = arith.select %58, %cst_3, %53 : tensor<128x32xi1, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>>, tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %60 = tt.dot %outLHS, %59, %cst_4 : tensor<32x128xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> * tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> -> tensor<32x32xf32, #mma> loc(#loc)
    %61 = arith.extui %44 : tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> to tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %62 = arith.shli %61, %cst_1 : tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %63 = tt.bitcast %62 : tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> -> tensor<4x32xbf16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %64 = tt.expand_dims %63 {axis = 2 : i32} : tensor<4x32xbf16, #ttg.slice<{dim = 2, parent = #linear}>> -> tensor<4x32x1xbf16, #linear> loc(#loc)
    %65 = tt.broadcast %64 : tensor<4x32x1xbf16, #linear> -> tensor<4x32x32xbf16, #linear> loc(#loc)
    %66 = tt.trans %65 {order = array<i32: 0, 2, 1>} : tensor<4x32x32xbf16, #linear> -> tensor<4x32x32xbf16, #linear11> loc(#loc)
    %67 = tt.reshape %66 : tensor<4x32x32xbf16, #linear11> -> tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %68 = amdgpu.scaled_upcast_fp4 %outRHS_6 scale %67 {axis = 0 : i32} : tensor<64x32xi8, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 4}>>, tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> -> tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %69 = arith.cmpi eq, %44, %cst_2 : tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %70 = tt.expand_dims %69 {axis = 2 : i32} : tensor<4x32xi1, #ttg.slice<{dim = 2, parent = #linear}>> -> tensor<4x32x1xi1, #linear> loc(#loc)
    %71 = tt.broadcast %70 : tensor<4x32x1xi1, #linear> -> tensor<4x32x32xi1, #linear> loc(#loc)
    %72 = tt.trans %71 {order = array<i32: 0, 2, 1>} : tensor<4x32x32xi1, #linear> -> tensor<4x32x32xi1, #linear11> loc(#loc)
    %73 = tt.reshape %72 : tensor<4x32x32xi1, #linear11> -> tensor<128x32xi1, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %74 = arith.select %73, %cst_3, %68 : tensor<128x32xi1, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>>, tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %75 = tt.dot %outRHS, %74, %cst_4 : tensor<32x128xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> * tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> -> tensor<32x32xf32, #mma> loc(#loc)
    %76 = arith.addf %60, %75 : tensor<32x32xf32, #mma> loc(#loc)
    %77 = tt.expand_dims %2 {axis = 1 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #mma}>> -> tensor<32x1xi32, #mma> loc(#loc)
    %78 = arith.muli %77, %cst : tensor<32x1xi32, #mma> loc(#loc)
    %79 = tt.broadcast %78 : tensor<32x1xi32, #mma> -> tensor<32x32xi32, #mma> loc(#loc)
    %80 = tt.expand_dims %14 {axis = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #mma}>> -> tensor<1x32xi32, #mma> loc(#loc)
    %81 = tt.broadcast %80 : tensor<1x32xi32, #mma> -> tensor<32x32xi32, #mma> loc(#loc)
    %82 = arith.addi %81, %79 : tensor<32x32xi32, #mma> loc(#loc)
    %83 = arith.truncf %76 : tensor<32x32xf32, #mma> to tensor<32x32xbf16, #mma> loc(#loc)
    amdgpu.buffer_store %83, %out[%82] : tensor<32x32xbf16, #mma> loc(#loc)
    tt.return loc(#loc)
  } loc(#loc)
} loc(#loc)
#loc = loc(unknown)


// -----// IR Dump Before ConvertTritonAMDGPUToLLVM (convert-triton-amdgpu-to-llvm) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [8, 8], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [1, 8], threadsPerWarp = [2, 32], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked2 = #ttg.blocked<{sizePerThread = [16, 1], threadsPerWarp = [8, 8], warpsPerCTA = [1, 4], order = [0, 1]}>
#linear = #ttg.linear<{register = [[0, 0, 1], [0, 0, 2], [0, 0, 4], [1, 0, 0], [2, 0, 0]], lane = [[0, 1, 0], [0, 2, 0], [0, 4, 0], [0, 8, 0], [0, 0, 8], [0, 0, 16]], warp = [[0, 16, 0], [0, 0, 0]], block = []}>
#linear1 = #ttg.linear<{register = [[0, 128], [0, 1], [0, 2], [0, 4], [0, 32], [0, 64]], lane = [[1, 0], [2, 0], [4, 0], [8, 0], [0, 8], [0, 16]], warp = [[0, 0], [16, 0]], block = []}>
#linear2 = #ttg.linear<{register = [[0, 1, 0], [0, 0, 1], [0, 0, 2], [0, 0, 4], [0, 0, 32], [0, 0, 64]], lane = [[1, 0, 0], [2, 0, 0], [4, 0, 0], [8, 0, 0], [0, 0, 8], [0, 0, 16]], warp = [[0, 0, 0], [16, 0, 0]], block = []}>
#linear3 = #ttg.linear<{register = [[0, 0, 1], [0, 1, 0], [0, 2, 0], [0, 4, 0], [0, 32, 0], [0, 64, 0]], lane = [[1, 0, 0], [2, 0, 0], [4, 0, 0], [8, 0, 0], [0, 8, 0], [0, 16, 0]], warp = [[0, 0, 0], [16, 0, 0]], block = []}>
#linear4 = #ttg.linear<{register = [[64, 0], [1, 0], [2, 0], [16, 0], [32, 0]], lane = [[0, 1], [0, 2], [0, 4], [0, 8], [4, 0], [8, 0]], warp = [[0, 16], [0, 0]], block = []}>
#linear5 = #ttg.linear<{register = [[1, 0, 0], [0, 1, 0], [0, 2, 0], [0, 16, 0], [0, 32, 0]], lane = [[0, 0, 1], [0, 0, 2], [0, 0, 4], [0, 0, 8], [0, 4, 0], [0, 8, 0]], warp = [[0, 0, 16], [0, 0, 0]], block = []}>
#linear6 = #ttg.linear<{register = [[0, 0, 1], [1, 0, 0], [2, 0, 0], [16, 0, 0], [32, 0, 0]], lane = [[0, 1, 0], [0, 2, 0], [0, 4, 0], [0, 8, 0], [4, 0, 0], [8, 0, 0]], warp = [[0, 16, 0], [0, 0, 0]], block = []}>
#linear7 = #ttg.linear<{register = [[0, 4], [0, 1], [0, 2]], lane = [[1, 0], [2, 0], [4, 0], [8, 0], [0, 0], [0, 0]], warp = [[16, 0], [0, 0]], block = []}>
#linear8 = #ttg.linear<{register = [[0, 1, 0], [0, 0, 1], [0, 0, 2]], lane = [[1, 0, 0], [2, 0, 0], [4, 0, 0], [8, 0, 0], [0, 0, 0], [0, 0, 0]], warp = [[16, 0, 0], [0, 0, 0]], block = []}>
#linear9 = #ttg.linear<{register = [[0, 0, 1], [0, 1, 0], [0, 2, 0]], lane = [[1, 0, 0], [2, 0, 0], [4, 0, 0], [8, 0, 0], [0, 0, 0], [0, 0, 0]], warp = [[16, 0, 0], [0, 0, 0]], block = []}>
#linear10 = #ttg.linear<{register = [[0, 1], [0, 2]], lane = [[1, 0], [2, 0], [4, 0], [8, 0], [0, 0], [0, 0]], warp = [[16, 0], [0, 0]], block = []}>
#linear11 = #ttg.linear<{register = [[0, 1, 0], [0, 2, 0], [0, 4, 0], [1, 0, 0], [2, 0, 0]], lane = [[0, 0, 1], [0, 0, 2], [0, 0, 4], [0, 0, 8], [0, 8, 0], [0, 16, 0]], warp = [[0, 0, 16], [0, 0, 0]], block = []}>
#loc1 = loc("a_base")
#loc2 = loc("stride_a0")
#loc3 = loc("b_base")
#loc4 = loc("stride_b1")
#loc5 = loc("b_scale")
#loc6 = loc("out")
#mma = #ttg.amd_mfma<{version = 4, warpsPerCTA = [2, 2], instrShape = [16, 16], isTransposed = true}>
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.shared = 16384 : i32, ttg.target = "hip:gfx950", "ttg.threads-per-warp" = 64 : i32} {
  tt.func public @dot_scale_kernel(%a_base: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("a_base"), %stride_a0: i32 {tt.divisibility = 16 : i32} loc("stride_a0"), %b_base: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("b_base"), %stride_b1: i32 {tt.divisibility = 16 : i32} loc("stride_b1"), %b_scale: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("b_scale"), %out: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("out")) attributes {noinline = false} {
    %cst = arith.constant dense<32> : tensor<32x1xi32, #mma> loc(#loc)
    %cst_0 = arith.constant dense<8> : tensor<32x1xi32, #blocked> loc(#loc)
    %cst_1 = arith.constant dense<7> : tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %cst_2 = arith.constant dense<-1> : tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %cst_3 = arith.constant dense<0x7FC0> : tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %cst_4 = arith.constant dense<0.000000e+00> : tensor<32x32xf32, #mma> loc(#loc)
    %0 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc)
    %1 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc)
    %2 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc)
    %3 = tt.expand_dims %0 {axis = 1 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> -> tensor<32x1xi32, #blocked1> loc(#loc)
    %4 = tt.splat %stride_a0 : i32 -> tensor<32x1xi32, #blocked1> loc(#loc)
    %5 = arith.muli %3, %4 : tensor<32x1xi32, #blocked1> loc(#loc)
    %6 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc)
    %7 = tt.broadcast %5 : tensor<32x1xi32, #blocked1> -> tensor<32x256xi32, #blocked1> loc(#loc)
    %8 = tt.expand_dims %6 {axis = 0 : i32} : tensor<256xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x256xi32, #blocked1> loc(#loc)
    %9 = tt.broadcast %8 : tensor<1x256xi32, #blocked1> -> tensor<32x256xi32, #blocked1> loc(#loc)
    %10 = arith.addi %9, %7 : tensor<32x256xi32, #blocked1> loc(#loc)
    %11 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked2}>> loc(#loc)
    %12 = tt.expand_dims %11 {axis = 1 : i32} : tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked2}>> -> tensor<128x1xi32, #blocked2> loc(#loc)
    %13 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked2}>> loc(#loc)
    %14 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #mma}>> loc(#loc)
    %15 = tt.broadcast %12 : tensor<128x1xi32, #blocked2> -> tensor<128x32xi32, #blocked2> loc(#loc)
    %16 = tt.expand_dims %13 {axis = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked2}>> -> tensor<1x32xi32, #blocked2> loc(#loc)
    %17 = tt.splat %stride_b1 : i32 -> tensor<1x32xi32, #blocked2> loc(#loc)
    %18 = arith.muli %16, %17 : tensor<1x32xi32, #blocked2> loc(#loc)
    %19 = tt.broadcast %18 : tensor<1x32xi32, #blocked2> -> tensor<128x32xi32, #blocked2> loc(#loc)
    %20 = arith.addi %19, %15 : tensor<128x32xi32, #blocked2> loc(#loc)
    %21 = tt.splat %a_base : !tt.ptr<bf16> -> tensor<32x256x!tt.ptr<bf16>, #blocked1> loc(#loc)
    %22 = tt.addptr %21, %10 : tensor<32x256x!tt.ptr<bf16>, #blocked1>, tensor<32x256xi32, #blocked1> loc(#loc)
    %23 = tt.load %22 : tensor<32x256x!tt.ptr<bf16>, #blocked1> loc(#loc)
    %24 = ttg.convert_layout %23 {allocation.offset = 0 : i32} : tensor<32x256xbf16, #blocked1> -> tensor<32x256xbf16, #linear1> loc(#loc)
    %25 = tt.reshape %24 : tensor<32x256xbf16, #linear1> -> tensor<32x2x128xbf16, #linear2> loc(#loc)
    %26 = tt.trans %25 {order = array<i32: 0, 2, 1>} : tensor<32x2x128xbf16, #linear2> -> tensor<32x128x2xbf16, #linear3> loc(#loc)
    %outLHS, %outRHS = tt.split %26 : tensor<32x128x2xbf16, #linear3> -> tensor<32x128xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> loc(#loc)
    %27 = tt.splat %b_base : !tt.ptr<i8> -> tensor<128x32x!tt.ptr<i8>, #blocked2> loc(#loc)
    %28 = tt.addptr %27, %20 : tensor<128x32x!tt.ptr<i8>, #blocked2>, tensor<128x32xi32, #blocked2> loc(#loc)
    %29 = tt.load %28 : tensor<128x32x!tt.ptr<i8>, #blocked2> loc(#loc)
    %30 = ttg.convert_layout %29 {allocation.offset = 0 : i32} : tensor<128x32xi8, #blocked2> -> tensor<128x32xi8, #linear4> loc(#loc)
    %31 = tt.reshape %30 : tensor<128x32xi8, #linear4> -> tensor<2x64x32xi8, #linear5> loc(#loc)
    %32 = tt.trans %31 {order = array<i32: 1, 2, 0>} : tensor<2x64x32xi8, #linear5> -> tensor<64x32x2xi8, #linear6> loc(#loc)
    %outLHS_5, %outRHS_6 = tt.split %32 : tensor<64x32x2xi8, #linear6> -> tensor<64x32xi8, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 4}>> loc(#loc)
    %33 = tt.expand_dims %1 {axis = 1 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<32x1xi32, #blocked> loc(#loc)
    %34 = arith.muli %33, %cst_0 : tensor<32x1xi32, #blocked> loc(#loc)
    %35 = tt.make_range {end = 8 : i32, start = 0 : i32} : tensor<8xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc)
    %36 = tt.broadcast %34 : tensor<32x1xi32, #blocked> -> tensor<32x8xi32, #blocked> loc(#loc)
    %37 = tt.expand_dims %35 {axis = 0 : i32} : tensor<8xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x8xi32, #blocked> loc(#loc)
    %38 = tt.broadcast %37 : tensor<1x8xi32, #blocked> -> tensor<32x8xi32, #blocked> loc(#loc)
    %39 = arith.addi %38, %36 : tensor<32x8xi32, #blocked> loc(#loc)
    %40 = amdgpu.buffer_load %b_scale[%39] : tensor<32x8xi8, #blocked> loc(#loc)
    %41 = ttg.convert_layout %40 {allocation.offset = 0 : i32} : tensor<32x8xi8, #blocked> -> tensor<32x8xi8, #linear7> loc(#loc)
    %42 = tt.reshape %41 : tensor<32x8xi8, #linear7> -> tensor<32x2x4xi8, #linear8> loc(#loc)
    %43 = tt.trans %42 {order = array<i32: 0, 2, 1>} : tensor<32x2x4xi8, #linear8> -> tensor<32x4x2xi8, #linear9> loc(#loc)
    %outLHS_7, %outRHS_8 = tt.split %43 : tensor<32x4x2xi8, #linear9> -> tensor<32x4xi8, #linear10> loc(#loc)
    %44 = tt.trans %outRHS_8 {order = array<i32: 1, 0>} : tensor<32x4xi8, #linear10> -> tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %45 = tt.trans %outLHS_7 {order = array<i32: 1, 0>} : tensor<32x4xi8, #linear10> -> tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %46 = arith.extui %45 : tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> to tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %47 = arith.shli %46, %cst_1 : tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %48 = tt.bitcast %47 : tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> -> tensor<4x32xbf16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %49 = tt.expand_dims %48 {axis = 2 : i32} : tensor<4x32xbf16, #ttg.slice<{dim = 2, parent = #linear}>> -> tensor<4x32x1xbf16, #linear> loc(#loc)
    %50 = tt.broadcast %49 : tensor<4x32x1xbf16, #linear> -> tensor<4x32x32xbf16, #linear> loc(#loc)
    %51 = tt.trans %50 {order = array<i32: 0, 2, 1>} : tensor<4x32x32xbf16, #linear> -> tensor<4x32x32xbf16, #linear11> loc(#loc)
    %52 = tt.reshape %51 : tensor<4x32x32xbf16, #linear11> -> tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %53 = amdgpu.scaled_upcast_fp4 %outLHS_5 scale %52 {axis = 0 : i32} : tensor<64x32xi8, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 4}>>, tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> -> tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %54 = arith.cmpi eq, %45, %cst_2 : tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %55 = tt.expand_dims %54 {axis = 2 : i32} : tensor<4x32xi1, #ttg.slice<{dim = 2, parent = #linear}>> -> tensor<4x32x1xi1, #linear> loc(#loc)
    %56 = tt.broadcast %55 : tensor<4x32x1xi1, #linear> -> tensor<4x32x32xi1, #linear> loc(#loc)
    %57 = tt.trans %56 {order = array<i32: 0, 2, 1>} : tensor<4x32x32xi1, #linear> -> tensor<4x32x32xi1, #linear11> loc(#loc)
    %58 = tt.reshape %57 : tensor<4x32x32xi1, #linear11> -> tensor<128x32xi1, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %59 = arith.select %58, %cst_3, %53 : tensor<128x32xi1, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>>, tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %60 = tt.dot %outLHS, %59, %cst_4 : tensor<32x128xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> * tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> -> tensor<32x32xf32, #mma> loc(#loc)
    %61 = arith.extui %44 : tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> to tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %62 = arith.shli %61, %cst_1 : tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %63 = tt.bitcast %62 : tensor<4x32xi16, #ttg.slice<{dim = 2, parent = #linear}>> -> tensor<4x32xbf16, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %64 = tt.expand_dims %63 {axis = 2 : i32} : tensor<4x32xbf16, #ttg.slice<{dim = 2, parent = #linear}>> -> tensor<4x32x1xbf16, #linear> loc(#loc)
    %65 = tt.broadcast %64 : tensor<4x32x1xbf16, #linear> -> tensor<4x32x32xbf16, #linear> loc(#loc)
    %66 = tt.trans %65 {order = array<i32: 0, 2, 1>} : tensor<4x32x32xbf16, #linear> -> tensor<4x32x32xbf16, #linear11> loc(#loc)
    %67 = tt.reshape %66 : tensor<4x32x32xbf16, #linear11> -> tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %68 = amdgpu.scaled_upcast_fp4 %outRHS_6 scale %67 {axis = 0 : i32} : tensor<64x32xi8, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 4}>>, tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> -> tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %69 = arith.cmpi eq, %44, %cst_2 : tensor<4x32xi8, #ttg.slice<{dim = 2, parent = #linear}>> loc(#loc)
    %70 = tt.expand_dims %69 {axis = 2 : i32} : tensor<4x32xi1, #ttg.slice<{dim = 2, parent = #linear}>> -> tensor<4x32x1xi1, #linear> loc(#loc)
    %71 = tt.broadcast %70 : tensor<4x32x1xi1, #linear> -> tensor<4x32x32xi1, #linear> loc(#loc)
    %72 = tt.trans %71 {order = array<i32: 0, 2, 1>} : tensor<4x32x32xi1, #linear> -> tensor<4x32x32xi1, #linear11> loc(#loc)
    %73 = tt.reshape %72 : tensor<4x32x32xi1, #linear11> -> tensor<128x32xi1, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %74 = arith.select %73, %cst_3, %68 : tensor<128x32xi1, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>>, tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc)
    %75 = tt.dot %outRHS, %74, %cst_4 : tensor<32x128xbf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> * tensor<128x32xbf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> -> tensor<32x32xf32, #mma> loc(#loc)
    %76 = arith.addf %60, %75 : tensor<32x32xf32, #mma> loc(#loc)
    %77 = tt.expand_dims %2 {axis = 1 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #mma}>> -> tensor<32x1xi32, #mma> loc(#loc)
    %78 = arith.muli %77, %cst : tensor<32x1xi32, #mma> loc(#loc)
    %79 = tt.broadcast %78 : tensor<32x1xi32, #mma> -> tensor<32x32xi32, #mma> loc(#loc)
    %80 = tt.expand_dims %14 {axis = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #mma}>> -> tensor<1x32xi32, #mma> loc(#loc)
    %81 = tt.broadcast %80 : tensor<1x32xi32, #mma> -> tensor<32x32xi32, #mma> loc(#loc)
    %82 = arith.addi %81, %79 : tensor<32x32xi32, #mma> loc(#loc)
    %83 = arith.truncf %76 : tensor<32x32xf32, #mma> to tensor<32x32xbf16, #mma> loc(#loc)
    amdgpu.buffer_store %83, %out[%82] : tensor<32x32xbf16, #mma> loc(#loc)
    tt.return loc(#loc)
  } loc(#loc)
} loc(#loc)
#loc = loc(unknown)


// -----// IR Dump Before Canonicalizer (canonicalize) ('builtin.module' operation) //----- //
#loc = loc(unknown)
#loc1 = loc("a_base")
#loc2 = loc("stride_a0")
#loc3 = loc("b_base")
#loc4 = loc("stride_b1")
#loc5 = loc("b_scale")
#loc6 = loc("out")
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.shared = 16384 : i32, ttg.target = "hip:gfx950", "ttg.threads-per-warp" = 64 : i32} {
  llvm.mlir.global external @global_smem() {addr_space = 3 : i32, alignment = 16 : i64} : !llvm.array<0 x i8> loc(#loc)
  llvm.func @"__triton_hip_predicated_load_vector<8xbf16>_!llvm.ptr<1>_i1_vector<8xbf16>_"(!llvm.ptr<1>, i1, vector<8xbf16>) -> vector<8xbf16> attributes {libname = "", libpath = ""} loc(#loc)
  llvm.func @"__triton_hip_predicated_store_!llvm.void_!llvm.ptr<3>_vector<8xbf16>_i1_"(!llvm.ptr<3>, vector<8xbf16>, i1) attributes {libname = "", libpath = ""} loc(#loc)
  llvm.func @"__triton_hip_predicated_load_vector<8xbf16>_!llvm.ptr<3>_i1_vector<8xbf16>_"(!llvm.ptr<3>, i1, vector<8xbf16>) -> vector<8xbf16> attributes {libname = "", libpath = ""} loc(#loc)
  llvm.func @"__triton_hip_predicated_load_vector<16xi8>_!llvm.ptr<1>_i1_vector<16xi8>_"(!llvm.ptr<1>, i1, vector<16xi8>) -> vector<16xi8> attributes {libname = "", libpath = ""} loc(#loc)
  llvm.func @"__triton_hip_predicated_store_!llvm.void_!llvm.ptr<3>_vector<4xi8>_i1_"(!llvm.ptr<3>, vector<4xi8>, i1) attributes {libname = "", libpath = ""} loc(#loc)
  llvm.func @"__triton_hip_predicated_load_vector<4xi8>_!llvm.ptr<3>_i1_vector<4xi8>_"(!llvm.ptr<3>, i1, vector<4xi8>) -> vector<4xi8> attributes {libname = "", libpath = ""} loc(#loc)
  llvm.func @"__triton_hip_predicated_store_!llvm.void_!llvm.ptr<3>_vector<1xi8>_i1_"(!llvm.ptr<3>, vector<1xi8>, i1) attributes {libname = "", libpath = ""} loc(#loc)
  llvm.func @"__triton_hip_predicated_load_vector<1xi8>_!llvm.ptr<3>_i1_vector<1xi8>_"(!llvm.ptr<3>, i1, vector<1xi8>) -> vector<1xi8> attributes {libname = "", libpath = ""} loc(#loc)
  llvm.func @dot_scale_kernel(%a_base: !llvm.ptr<1> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("a_base"), %stride_a0: i32 {tt.divisibility = 16 : i32} loc("stride_a0"), %b_base: !llvm.ptr<1> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("b_base"), %stride_b1: i32 {tt.divisibility = 16 : i32} loc("stride_b1"), %b_scale: !llvm.ptr<1> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("b_scale"), %out: !llvm.ptr<1> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("out"), %arg6: !llvm.ptr<1> loc(unknown), %arg7: !llvm.ptr<1> loc(unknown)) attributes {noinline = false, nvvm.kernel = 1 : ui1, nvvm.reqntid = array<i32: 128>} {
    %0 = llvm.mlir.constant(32 : i32) : i32 loc(#loc)
    %1 = llvm.bitcast %0 : i32 to i32 loc(#loc)
    %2 = llvm.mlir.undef : !llvm.struct<(i32, i32, i32, i32)> loc(#loc)
    %3 = llvm.insertvalue %1, %2[0] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc)
    %4 = llvm.insertvalue %1, %3[1] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc)
    %5 = llvm.insertvalue %1, %4[2] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc)
    %6 = llvm.insertvalue %1, %5[3] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc)
    %7 = llvm.mlir.constant(8 : i32) : i32 loc(#loc)
    %8 = llvm.bitcast %7 : i32 to i32 loc(#loc)
    %9 = llvm.mlir.undef : !llvm.struct<(i32)> loc(#loc)
    %10 = llvm.insertvalue %8, %9[0] : !llvm.struct<(i32)>  loc(#loc)
    %11 = llvm.mlir.constant(7 : i16) : i16 loc(#loc)
    %12 = llvm.bitcast %11 : i16 to i16 loc(#loc)
    %13 = llvm.mlir.undef : !llvm.struct<(i16, i16, i16, i16)> loc(#loc)
    %14 = llvm.insertvalue %12, %13[0] : !llvm.struct<(i16, i16, i16, i16)>  loc(#loc)
    %15 = llvm.insertvalue %12, %14[1] : !llvm.struct<(i16, i16, i16, i16)>  loc(#loc)
    %16 = llvm.insertvalue %12, %15[2] : !llvm.struct<(i16, i16, i16, i16)>  loc(#loc)
    %17 = llvm.insertvalue %12, %16[3] : !llvm.struct<(i16, i16, i16, i16)>  loc(#loc)
    %18 = llvm.mlir.constant(-1 : i8) : i8 loc(#loc)
    %19 = llvm.bitcast %18 : i8 to i8 loc(#loc)
    %20 = llvm.mlir.undef : !llvm.struct<(i8, i8, i8, i8)> loc(#loc)
    %21 = llvm.insertvalue %19, %20[0] : !llvm.struct<(i8, i8, i8, i8)>  loc(#loc)
    %22 = llvm.insertvalue %19, %21[1] : !llvm.struct<(i8, i8, i8, i8)>  loc(#loc)
    %23 = llvm.insertvalue %19, %22[2] : !llvm.struct<(i8, i8, i8, i8)>  loc(#loc)
    %24 = llvm.insertvalue %19, %23[3] : !llvm.struct<(i8, i8, i8, i8)>  loc(#loc)
    %25 = llvm.mlir.constant(0x7FC0 : bf16) : bf16 loc(#loc)
    %26 = llvm.bitcast %25 : bf16 to bf16 loc(#loc)
    %27 = llvm.mlir.undef : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)> loc(#loc)
    %28 = llvm.insertvalue %26, %27[0] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %29 = llvm.insertvalue %26, %28[1] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %30 = llvm.insertvalue %26, %29[2] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %31 = llvm.insertvalue %26, %30[3] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %32 = llvm.insertvalue %26, %31[4] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %33 = llvm.insertvalue %26, %32[5] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %34 = llvm.insertvalue %26, %33[6] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %35 = llvm.insertvalue %26, %34[7] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %36 = llvm.insertvalue %26, %35[8] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %37 = llvm.insertvalue %26, %36[9] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %38 = llvm.insertvalue %26, %37[10] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %39 = llvm.insertvalue %26, %38[11] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %40 = llvm.insertvalue %26, %39[12] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %41 = llvm.insertvalue %26, %40[13] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %42 = llvm.insertvalue %26, %41[14] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %43 = llvm.insertvalue %26, %42[15] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %44 = llvm.insertvalue %26, %43[16] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %45 = llvm.insertvalue %26, %44[17] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %46 = llvm.insertvalue %26, %45[18] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %47 = llvm.insertvalue %26, %46[19] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %48 = llvm.insertvalue %26, %47[20] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %49 = llvm.insertvalue %26, %48[21] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %50 = llvm.insertvalue %26, %49[22] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %51 = llvm.insertvalue %26, %50[23] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %52 = llvm.insertvalue %26, %51[24] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %53 = llvm.insertvalue %26, %52[25] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %54 = llvm.insertvalue %26, %53[26] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %55 = llvm.insertvalue %26, %54[27] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %56 = llvm.insertvalue %26, %55[28] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %57 = llvm.insertvalue %26, %56[29] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %58 = llvm.insertvalue %26, %57[30] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %59 = llvm.insertvalue %26, %58[31] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %60 = llvm.mlir.constant(0.000000e+00 : f32) : f32 loc(#loc)
    %61 = llvm.bitcast %60 : f32 to f32 loc(#loc)
    %62 = llvm.mlir.undef : !llvm.struct<(f32, f32, f32, f32)> loc(#loc)
    %63 = llvm.insertvalue %61, %62[0] : !llvm.struct<(f32, f32, f32, f32)>  loc(#loc)
    %64 = llvm.insertvalue %61, %63[1] : !llvm.struct<(f32, f32, f32, f32)>  loc(#loc)
    %65 = llvm.insertvalue %61, %64[2] : !llvm.struct<(f32, f32, f32, f32)>  loc(#loc)
    %66 = llvm.insertvalue %61, %65[3] : !llvm.struct<(f32, f32, f32, f32)>  loc(#loc)
    %67 = llvm.mlir.constant(0 : index) : i32 loc(#loc)
    %68 = rocdl.workitem.id.x : i32 loc(#loc)
    %69 = llvm.mlir.constant(255 : i32) : i32 loc(#loc)
    %70 = llvm.and %68, %69 : i32 loc(#loc)
    %71 = llvm.mlir.constant(64 : i32) : i32 loc(#loc)
    %72 = llvm.urem %70, %71 : i32 loc(#loc)
    %73 = llvm.udiv %70, %71 : i32 loc(#loc)
    %74 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %75 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %76 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %77 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %78 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %79 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %80 = llvm.shl %72, %79 : i32 loc(#loc)
    %81 = llvm.or %78, %80 : i32 loc(#loc)
    %82 = llvm.mlir.constant(6 : i32) : i32 loc(#loc)
    %83 = llvm.shl %73, %82 : i32 loc(#loc)
    %84 = llvm.or %81, %83 : i32 loc(#loc)
    %85 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %86 = llvm.mlir.constant(224 : i32) : i32 loc(#loc)
    %87 = llvm.and %84, %86 : i32 loc(#loc)
    %88 = llvm.mlir.constant(5 : i32) : i32 loc(#loc)
    %89 = llvm.lshr %87, %88 : i32 loc(#loc)
    %90 = llvm.xor %85, %89 : i32 loc(#loc)
    %91 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %92 = llvm.xor %77, %90 : i32 loc(#loc)
    %93 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %94 = llvm.xor %92, %93 : i32 loc(#loc)
    %95 = llvm.mlir.constant(8 : i32) : i32 loc(#loc)
    %96 = llvm.xor %92, %95 : i32 loc(#loc)
    %97 = llvm.mlir.constant(16 : i32) : i32 loc(#loc)
    %98 = llvm.xor %92, %97 : i32 loc(#loc)
    %99 = llvm.mlir.constant(24 : i32) : i32 loc(#loc)
    %100 = llvm.xor %92, %99 : i32 loc(#loc)
    %101 = llvm.add %94, %67 : i32 loc(#loc)
    %102 = llvm.add %96, %67 : i32 loc(#loc)
    %103 = llvm.add %98, %67 : i32 loc(#loc)
    %104 = llvm.add %100, %67 : i32 loc(#loc)
    %105 = llvm.mlir.undef : !llvm.struct<(i32, i32, i32, i32)> loc(#loc)
    %106 = llvm.insertvalue %101, %105[0] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc)
    %107 = llvm.insertvalue %102, %106[1] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc)
    %108 = llvm.insertvalue %103, %107[2] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc)
    %109 = llvm.insertvalue %104, %108[3] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc)
    %110 = llvm.mlir.constant(0 : index) : i32 loc(#loc)
    %111 = rocdl.workitem.id.x : i32 loc(#loc)
    %112 = llvm.mlir.constant(255 : i32) : i32 loc(#loc)
    %113 = llvm.and %111, %112 : i32 loc(#loc)
    %114 = llvm.mlir.constant(64 : i32) : i32 loc(#loc)
    %115 = llvm.urem %113, %114 : i32 loc(#loc)
    %116 = llvm.udiv %113, %114 : i32 loc(#loc)
    %117 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %118 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %119 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %120 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %121 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %122 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %123 = llvm.shl %115, %122 : i32 loc(#loc)
    %124 = llvm.or %121, %123 : i32 loc(#loc)
    %125 = llvm.mlir.constant(6 : i32) : i32 loc(#loc)
    %126 = llvm.shl %116, %125 : i32 loc(#loc)
    %127 = llvm.or %124, %126 : i32 loc(#loc)
    %128 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %129 = llvm.mlir.constant(248 : i32) : i32 loc(#loc)
    %130 = llvm.and %127, %129 : i32 loc(#loc)
    %131 = llvm.mlir.constant(3 : i32) : i32 loc(#loc)
    %132 = llvm.lshr %130, %131 : i32 loc(#loc)
    %133 = llvm.xor %128, %132 : i32 loc(#loc)
    %134 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %135 = llvm.xor %120, %133 : i32 loc(#loc)
    %136 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %137 = llvm.xor %135, %136 : i32 loc(#loc)
    %138 = llvm.add %137, %110 : i32 loc(#loc)
    %139 = llvm.mlir.undef : !llvm.struct<(i32)> loc(#loc)
    %140 = llvm.insertvalue %138, %139[0] : !llvm.struct<(i32)>  loc(#loc)
    %141 = llvm.mlir.constant(0 : index) : i32 loc(#loc)
    %142 = rocdl.workitem.id.x : i32 loc(#loc)
    %143 = llvm.mlir.constant(255 : i32) : i32 loc(#loc)
    %144 = llvm.and %142, %143 : i32 loc(#loc)
    %145 = llvm.mlir.constant(64 : i32) : i32 loc(#loc)
    %146 = llvm.urem %144, %145 : i32 loc(#loc)
    %147 = llvm.udiv %144, %145 : i32 loc(#loc)
    %148 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %149 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %150 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %151 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %152 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %153 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %154 = llvm.shl %146, %153 : i32 loc(#loc)
    %155 = llvm.or %152, %154 : i32 loc(#loc)
    %156 = llvm.mlir.constant(6 : i32) : i32 loc(#loc)
    %157 = llvm.shl %147, %156 : i32 loc(#loc)
    %158 = llvm.or %155, %157 : i32 loc(#loc)
    %159 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %160 = llvm.mlir.constant(15 : i32) : i32 loc(#loc)
    %161 = llvm.and %158, %160 : i32 loc(#loc)
    %162 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %163 = llvm.lshr %161, %162 : i32 loc(#loc)
    %164 = llvm.xor %159, %163 : i32 loc(#loc)
    %165 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %166 = llvm.mlir.constant(128 : i32) : i32 loc(#loc)
    %167 = llvm.and %158, %166 : i32 loc(#loc)
    %168 = llvm.icmp "eq" %167, %165 : i32 loc(#loc)
    %169 = llvm.mlir.constant(16 : i32) : i32 loc(#loc)
    %170 = llvm.select %168, %165, %169 : i1, i32 loc(#loc)
    %171 = llvm.xor %164, %170 : i32 loc(#loc)
    %172 = llvm.xor %151, %171 : i32 loc(#loc)
    %173 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %174 = llvm.xor %172, %173 : i32 loc(#loc)
    %175 = llvm.add %174, %141 : i32 loc(#loc)
    %176 = llvm.mlir.undef : !llvm.struct<(i32)> loc(#loc)
    %177 = llvm.insertvalue %175, %176[0] : !llvm.struct<(i32)>  loc(#loc)
    %178 = llvm.extractvalue %109[0] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc)
    %179 = llvm.extractvalue %109[1] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc)
    %180 = llvm.extractvalue %109[2] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc)
    %181 = llvm.extractvalue %109[3] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc)
    %182 = llvm.mlir.undef : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc)
    %183 = llvm.insertvalue %178, %182[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %184 = llvm.insertvalue %178, %183[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %185 = llvm.insertvalue %178, %184[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %186 = llvm.insertvalue %178, %185[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %187 = llvm.insertvalue %178, %186[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %188 = llvm.insertvalue %178, %187[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %189 = llvm.insertvalue %178, %188[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %190 = llvm.insertvalue %178, %189[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %191 = llvm.insertvalue %179, %190[8] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %192 = llvm.insertvalue %179, %191[9] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %193 = llvm.insertvalue %179, %192[10] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %194 = llvm.insertvalue %179, %193[11] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %195 = llvm.insertvalue %179, %194[12] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %196 = llvm.insertvalue %179, %195[13] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %197 = llvm.insertvalue %179, %196[14] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %198 = llvm.insertvalue %179, %197[15] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %199 = llvm.insertvalue %180, %198[16] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %200 = llvm.insertvalue %180, %199[17] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %201 = llvm.insertvalue %180, %200[18] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %202 = llvm.insertvalue %180, %201[19] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %203 = llvm.insertvalue %180, %202[20] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %204 = llvm.insertvalue %180, %203[21] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %205 = llvm.insertvalue %180, %204[22] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %206 = llvm.insertvalue %180, %205[23] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %207 = llvm.insertvalue %181, %206[24] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %208 = llvm.insertvalue %181, %207[25] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %209 = llvm.insertvalue %181, %208[26] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %210 = llvm.insertvalue %181, %209[27] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %211 = llvm.insertvalue %181, %210[28] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %212 = llvm.insertvalue %181, %211[29] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %213 = llvm.insertvalue %181, %212[30] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %214 = llvm.insertvalue %181, %213[31] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %215 = llvm.bitcast %stride_a0 : i32 to i32 loc(#loc)
    %216 = llvm.mlir.undef : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc)
    %217 = llvm.insertvalue %215, %216[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %218 = llvm.insertvalue %215, %217[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %219 = llvm.insertvalue %215, %218[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %220 = llvm.insertvalue %215, %219[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %221 = llvm.insertvalue %215, %220[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %222 = llvm.insertvalue %215, %221[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %223 = llvm.insertvalue %215, %222[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %224 = llvm.insertvalue %215, %223[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %225 = llvm.insertvalue %215, %224[8] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %226 = llvm.insertvalue %215, %225[9] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %227 = llvm.insertvalue %215, %226[10] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %228 = llvm.insertvalue %215, %227[11] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %229 = llvm.insertvalue %215, %228[12] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %230 = llvm.insertvalue %215, %229[13] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %231 = llvm.insertvalue %215, %230[14] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %232 = llvm.insertvalue %215, %231[15] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %233 = llvm.insertvalue %215, %232[16] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %234 = llvm.insertvalue %215, %233[17] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %235 = llvm.insertvalue %215, %234[18] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %236 = llvm.insertvalue %215, %235[19] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %237 = llvm.insertvalue %215, %236[20] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %238 = llvm.insertvalue %215, %237[21] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %239 = llvm.insertvalue %215, %238[22] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %240 = llvm.insertvalue %215, %239[23] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %241 = llvm.insertvalue %215, %240[24] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %242 = llvm.insertvalue %215, %241[25] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %243 = llvm.insertvalue %215, %242[26] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %244 = llvm.insertvalue %215, %243[27] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %245 = llvm.insertvalue %215, %244[28] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %246 = llvm.insertvalue %215, %245[29] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %247 = llvm.insertvalue %215, %246[30] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %248 = llvm.insertvalue %215, %247[31] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %249 = llvm.extractvalue %214[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %250 = llvm.extractvalue %214[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %251 = llvm.extractvalue %214[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %252 = llvm.extractvalue %214[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %253 = llvm.extractvalue %214[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %254 = llvm.extractvalue %214[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %255 = llvm.extractvalue %214[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %256 = llvm.extractvalue %214[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %257 = llvm.extractvalue %214[8] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %258 = llvm.extractvalue %214[9] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %259 = llvm.extractvalue %214[10] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %260 = llvm.extractvalue %214[11] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %261 = llvm.extractvalue %214[12] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %262 = llvm.extractvalue %214[13] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %263 = llvm.extractvalue %214[14] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %264 = llvm.extractvalue %214[15] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %265 = llvm.extractvalue %214[16] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %266 = llvm.extractvalue %214[17] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %267 = llvm.extractvalue %214[18] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %268 = llvm.extractvalue %214[19] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %269 = llvm.extractvalue %214[20] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %270 = llvm.extractvalue %214[21] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %271 = llvm.extractvalue %214[22] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %272 = llvm.extractvalue %214[23] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %273 = llvm.extractvalue %214[24] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %274 = llvm.extractvalue %214[25] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %275 = llvm.extractvalue %214[26] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %276 = llvm.extractvalue %214[27] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %277 = llvm.extractvalue %214[28] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %278 = llvm.extractvalue %214[29] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %279 = llvm.extractvalue %214[30] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %280 = llvm.extractvalue %214[31] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %281 = llvm.extractvalue %248[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %282 = llvm.extractvalue %248[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %283 = llvm.extractvalue %248[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %284 = llvm.extractvalue %248[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %285 = llvm.extractvalue %248[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %286 = llvm.extractvalue %248[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %287 = llvm.extractvalue %248[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %288 = llvm.extractvalue %248[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %289 = llvm.extractvalue %248[8] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %290 = llvm.extractvalue %248[9] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %291 = llvm.extractvalue %248[10] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %292 = llvm.extractvalue %248[11] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %293 = llvm.extractvalue %248[12] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %294 = llvm.extractvalue %248[13] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %295 = llvm.extractvalue %248[14] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %296 = llvm.extractvalue %248[15] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %297 = llvm.extractvalue %248[16] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %298 = llvm.extractvalue %248[17] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %299 = llvm.extractvalue %248[18] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %300 = llvm.extractvalue %248[19] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %301 = llvm.extractvalue %248[20] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %302 = llvm.extractvalue %248[21] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %303 = llvm.extractvalue %248[22] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %304 = llvm.extractvalue %248[23] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %305 = llvm.extractvalue %248[24] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %306 = llvm.extractvalue %248[25] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %307 = llvm.extractvalue %248[26] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %308 = llvm.extractvalue %248[27] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %309 = llvm.extractvalue %248[28] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %310 = llvm.extractvalue %248[29] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %311 = llvm.extractvalue %248[30] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %312 = llvm.extractvalue %248[31] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %313 = llvm.mul %249, %281 : i32 loc(#loc)
    %314 = llvm.mul %250, %282 : i32 loc(#loc)
    %315 = llvm.mul %251, %283 : i32 loc(#loc)
    %316 = llvm.mul %252, %284 : i32 loc(#loc)
    %317 = llvm.mul %253, %285 : i32 loc(#loc)
    %318 = llvm.mul %254, %286 : i32 loc(#loc)
    %319 = llvm.mul %255, %287 : i32 loc(#loc)
    %320 = llvm.mul %256, %288 : i32 loc(#loc)
    %321 = llvm.mul %257, %289 : i32 loc(#loc)
    %322 = llvm.mul %258, %290 : i32 loc(#loc)
    %323 = llvm.mul %259, %291 : i32 loc(#loc)
    %324 = llvm.mul %260, %292 : i32 loc(#loc)
    %325 = llvm.mul %261, %293 : i32 loc(#loc)
    %326 = llvm.mul %262, %294 : i32 loc(#loc)
    %327 = llvm.mul %263, %295 : i32 loc(#loc)
    %328 = llvm.mul %264, %296 : i32 loc(#loc)
    %329 = llvm.mul %265, %297 : i32 loc(#loc)
    %330 = llvm.mul %266, %298 : i32 loc(#loc)
    %331 = llvm.mul %267, %299 : i32 loc(#loc)
    %332 = llvm.mul %268, %300 : i32 loc(#loc)
    %333 = llvm.mul %269, %301 : i32 loc(#loc)
    %334 = llvm.mul %270, %302 : i32 loc(#loc)
    %335 = llvm.mul %271, %303 : i32 loc(#loc)
    %336 = llvm.mul %272, %304 : i32 loc(#loc)
    %337 = llvm.mul %273, %305 : i32 loc(#loc)
    %338 = llvm.mul %274, %306 : i32 loc(#loc)
    %339 = llvm.mul %275, %307 : i32 loc(#loc)
    %340 = llvm.mul %276, %308 : i32 loc(#loc)
    %341 = llvm.mul %277, %309 : i32 loc(#loc)
    %342 = llvm.mul %278, %310 : i32 loc(#loc)
    %343 = llvm.mul %279, %311 : i32 loc(#loc)
    %344 = llvm.mul %280, %312 : i32 loc(#loc)
    %345 = llvm.mlir.undef : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc)
    %346 = llvm.insertvalue %313, %345[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %347 = llvm.insertvalue %314, %346[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %348 = llvm.insertvalue %315, %347[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %349 = llvm.insertvalue %316, %348[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %350 = llvm.insertvalue %317, %349[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %351 = llvm.insertvalue %318, %350[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %352 = llvm.insertvalue %319, %351[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %353 = llvm.insertvalue %320, %352[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %354 = llvm.insertvalue %321, %353[8] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %355 = llvm.insertvalue %322, %354[9] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %356 = llvm.insertvalue %323, %355[10] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %357 = llvm.insertvalue %324, %356[11] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %358 = llvm.insertvalue %325, %357[12] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %359 = llvm.insertvalue %326, %358[13] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %360 = llvm.insertvalue %327, %359[14] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %361 = llvm.insertvalue %328, %360[15] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %362 = llvm.insertvalue %329, %361[16] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %363 = llvm.insertvalue %330, %362[17] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %364 = llvm.insertvalue %331, %363[18] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %365 = llvm.insertvalue %332, %364[19] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %366 = llvm.insertvalue %333, %365[20] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %367 = llvm.insertvalue %334, %366[21] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %368 = llvm.insertvalue %335, %367[22] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %369 = llvm.insertvalue %336, %368[23] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %370 = llvm.insertvalue %337, %369[24] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %371 = llvm.insertvalue %338, %370[25] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %372 = llvm.insertvalue %339, %371[26] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %373 = llvm.insertvalue %340, %372[27] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %374 = llvm.insertvalue %341, %373[28] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %375 = llvm.insertvalue %342, %374[29] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %376 = llvm.insertvalue %343, %375[30] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %377 = llvm.insertvalue %344, %376[31] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %378 = llvm.mlir.constant(0 : index) : i32 loc(#loc)
    %379 = rocdl.workitem.id.x : i32 loc(#loc)
    %380 = llvm.mlir.constant(255 : i32) : i32 loc(#loc)
    %381 = llvm.and %379, %380 : i32 loc(#loc)
    %382 = llvm.mlir.constant(64 : i32) : i32 loc(#loc)
    %383 = llvm.urem %381, %382 : i32 loc(#loc)
    %384 = llvm.udiv %381, %382 : i32 loc(#loc)
    %385 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %386 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %387 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %388 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %389 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %390 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %391 = llvm.shl %383, %390 : i32 loc(#loc)
    %392 = llvm.or %389, %391 : i32 loc(#loc)
    %393 = llvm.mlir.constant(6 : i32) : i32 loc(#loc)
    %394 = llvm.shl %384, %393 : i32 loc(#loc)
    %395 = llvm.or %392, %394 : i32 loc(#loc)
    %396 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %397 = llvm.mlir.constant(31 : i32) : i32 loc(#loc)
    %398 = llvm.and %395, %397 : i32 loc(#loc)
    %399 = llvm.mlir.constant(3 : i32) : i32 loc(#loc)
    %400 = llvm.shl %398, %399 : i32 loc(#loc)
    %401 = llvm.xor %396, %400 : i32 loc(#loc)
    %402 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %403 = llvm.xor %388, %401 : i32 loc(#loc)
    %404 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %405 = llvm.xor %403, %404 : i32 loc(#loc)
    %406 = llvm.mlir.constant(1 : i32) : i32 loc(#loc)
    %407 = llvm.xor %403, %406 : i32 loc(#loc)
    %408 = llvm.mlir.constant(2 : i32) : i32 loc(#loc)
    %409 = llvm.xor %403, %408 : i32 loc(#loc)
    %410 = llvm.mlir.constant(3 : i32) : i32 loc(#loc)
    %411 = llvm.xor %403, %410 : i32 loc(#loc)
    %412 = llvm.mlir.constant(4 : i32) : i32 loc(#loc)
    %413 = llvm.xor %403, %412 : i32 loc(#loc)
    %414 = llvm.mlir.constant(5 : i32) : i32 loc(#loc)
    %415 = llvm.xor %403, %414 : i32 loc(#loc)
    %416 = llvm.mlir.constant(6 : i32) : i32 loc(#loc)
    %417 = llvm.xor %403, %416 : i32 loc(#loc)
    %418 = llvm.mlir.constant(7 : i32) : i32 loc(#loc)
    %419 = llvm.xor %403, %418 : i32 loc(#loc)
    %420 = llvm.add %405, %378 : i32 loc(#loc)
    %421 = llvm.add %407, %378 : i32 loc(#loc)
    %422 = llvm.add %409, %378 : i32 loc(#loc)
    %423 = llvm.add %411, %378 : i32 loc(#loc)
    %424 = llvm.add %413, %378 : i32 loc(#loc)
    %425 = llvm.add %415, %378 : i32 loc(#loc)
    %426 = llvm.add %417, %378 : i32 loc(#loc)
    %427 = llvm.add %419, %378 : i32 loc(#loc)
    %428 = llvm.mlir.undef : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc)
    %429 = llvm.insertvalue %420, %428[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %430 = llvm.insertvalue %421, %429[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %431 = llvm.insertvalue %422, %430[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %432 = llvm.insertvalue %423, %431[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %433 = llvm.insertvalue %424, %432[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %434 = llvm.insertvalue %425, %433[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %435 = llvm.insertvalue %426, %434[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %436 = llvm.insertvalue %427, %435[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %437 = llvm.extractvalue %377[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %438 = llvm.extractvalue %377[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %439 = llvm.extractvalue %377[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %440 = llvm.extractvalue %377[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %441 = llvm.extractvalue %377[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %442 = llvm.extractvalue %377[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %443 = llvm.extractvalue %377[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %444 = llvm.extractvalue %377[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %445 = llvm.extractvalue %377[8] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %446 = llvm.extractvalue %377[9] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %447 = llvm.extractvalue %377[10] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %448 = llvm.extractvalue %377[11] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %449 = llvm.extractvalue %377[12] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %450 = llvm.extractvalue %377[13] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %451 = llvm.extractvalue %377[14] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %452 = llvm.extractvalue %377[15] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %453 = llvm.extractvalue %377[16] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %454 = llvm.extractvalue %377[17] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %455 = llvm.extractvalue %377[18] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %456 = llvm.extractvalue %377[19] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %457 = llvm.extractvalue %377[20] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %458 = llvm.extractvalue %377[21] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %459 = llvm.extractvalue %377[22] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %460 = llvm.extractvalue %377[23] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %461 = llvm.extractvalue %377[24] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %462 = llvm.extractvalue %377[25] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %463 = llvm.extractvalue %377[26] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %464 = llvm.extractvalue %377[27] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %465 = llvm.extractvalue %377[28] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %466 = llvm.extractvalue %377[29] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %467 = llvm.extractvalue %377[30] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %468 = llvm.extractvalue %377[31] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %469 = llvm.mlir.undef : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc)
    %470 = llvm.insertvalue %444, %469[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %471 = llvm.insertvalue %444, %470[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %472 = llvm.insertvalue %444, %471[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %473 = llvm.insertvalue %444, %472[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %474 = llvm.insertvalue %444, %473[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %475 = llvm.insertvalue %444, %474[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %476 = llvm.insertvalue %444, %475[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %477 = llvm.insertvalue %444, %476[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %478 = llvm.insertvalue %452, %477[8] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %479 = llvm.insertvalue %452, %478[9] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %480 = llvm.insertvalue %452, %479[10] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %481 = llvm.insertvalue %452, %480[11] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %482 = llvm.insertvalue %452, %481[12] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %483 = llvm.insertvalue %452, %482[13] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %484 = llvm.insertvalue %452, %483[14] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %485 = llvm.insertvalue %452, %484[15] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %486 = llvm.insertvalue %460, %485[16] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %487 = llvm.insertvalue %460, %486[17] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %488 = llvm.insertvalue %460, %487[18] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %489 = llvm.insertvalue %460, %488[19] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %490 = llvm.insertvalue %460, %489[20] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %491 = llvm.insertvalue %460, %490[21] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %492 = llvm.insertvalue %460, %491[22] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %493 = llvm.insertvalue %460, %492[23] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %494 = llvm.insertvalue %468, %493[24] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %495 = llvm.insertvalue %468, %494[25] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %496 = llvm.insertvalue %468, %495[26] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %497 = llvm.insertvalue %468, %496[27] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %498 = llvm.insertvalue %468, %497[28] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %499 = llvm.insertvalue %468, %498[29] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %500 = llvm.insertvalue %468, %499[30] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %501 = llvm.insertvalue %468, %500[31] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %502 = llvm.extractvalue %436[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %503 = llvm.extractvalue %436[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %504 = llvm.extractvalue %436[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %505 = llvm.extractvalue %436[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %506 = llvm.extractvalue %436[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %507 = llvm.extractvalue %436[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %508 = llvm.extractvalue %436[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %509 = llvm.extractvalue %436[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %510 = llvm.mlir.undef : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc)
    %511 = llvm.insertvalue %502, %510[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %512 = llvm.insertvalue %503, %511[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %513 = llvm.insertvalue %504, %512[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %514 = llvm.insertvalue %505, %513[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %515 = llvm.insertvalue %506, %514[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %516 = llvm.insertvalue %507, %515[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %517 = llvm.insertvalue %508, %516[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %518 = llvm.insertvalue %509, %517[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %519 = llvm.extractvalue %518[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %520 = llvm.extractvalue %518[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %521 = llvm.extractvalue %518[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %522 = llvm.extractvalue %518[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %523 = llvm.extractvalue %518[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %524 = llvm.extractvalue %518[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %525 = llvm.extractvalue %518[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %526 = llvm.extractvalue %518[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %527 = llvm.mlir.undef : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc)
    %528 = llvm.insertvalue %519, %527[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %529 = llvm.insertvalue %520, %528[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %530 = llvm.insertvalue %521, %529[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %531 = llvm.insertvalue %522, %530[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %532 = llvm.insertvalue %523, %531[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %533 = llvm.insertvalue %524, %532[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %534 = llvm.insertvalue %525, %533[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %535 = llvm.insertvalue %526, %534[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %536 = llvm.insertvalue %519, %535[8] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %537 = llvm.insertvalue %520, %536[9] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %538 = llvm.insertvalue %521, %537[10] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %539 = llvm.insertvalue %522, %538[11] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %540 = llvm.insertvalue %523, %539[12] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %541 = llvm.insertvalue %524, %540[13] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %542 = llvm.insertvalue %525, %541[14] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %543 = llvm.insertvalue %526, %542[15] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %544 = llvm.insertvalue %519, %543[16] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %545 = llvm.insertvalue %520, %544[17] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %546 = llvm.insertvalue %521, %545[18] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %547 = llvm.insertvalue %522, %546[19] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %548 = llvm.insertvalue %523, %547[20] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %549 = llvm.insertvalue %524, %548[21] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %550 = llvm.insertvalue %525, %549[22] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %551 = llvm.insertvalue %526, %550[23] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %552 = llvm.insertvalue %519, %551[24] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %553 = llvm.insertvalue %520, %552[25] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %554 = llvm.insertvalue %521, %553[26] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %555 = llvm.insertvalue %522, %554[27] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %556 = llvm.insertvalue %523, %555[28] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %557 = llvm.insertvalue %524, %556[29] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %558 = llvm.insertvalue %525, %557[30] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %559 = llvm.insertvalue %526, %558[31] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %560 = llvm.extractvalue %559[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %561 = llvm.extractvalue %559[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %562 = llvm.extractvalue %559[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %563 = llvm.extractvalue %559[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %564 = llvm.extractvalue %559[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %565 = llvm.extractvalue %559[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %566 = llvm.extractvalue %559[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %567 = llvm.extractvalue %559[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %568 = llvm.extractvalue %559[8] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %569 = llvm.extractvalue %559[9] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %570 = llvm.extractvalue %559[10] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %571 = llvm.extractvalue %559[11] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %572 = llvm.extractvalue %559[12] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %573 = llvm.extractvalue %559[13] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %574 = llvm.extractvalue %559[14] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %575 = llvm.extractvalue %559[15] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %576 = llvm.extractvalue %559[16] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %577 = llvm.extractvalue %559[17] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %578 = llvm.extractvalue %559[18] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %579 = llvm.extractvalue %559[19] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %580 = llvm.extractvalue %559[20] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %581 = llvm.extractvalue %559[21] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %582 = llvm.extractvalue %559[22] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %583 = llvm.extractvalue %559[23] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %584 = llvm.extractvalue %559[24] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %585 = llvm.extractvalue %559[25] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %586 = llvm.extractvalue %559[26] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %587 = llvm.extractvalue %559[27] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %588 = llvm.extractvalue %559[28] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %589 = llvm.extractvalue %559[29] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %590 = llvm.extractvalue %559[30] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %591 = llvm.extractvalue %559[31] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %592 = llvm.extractvalue %501[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %593 = llvm.extractvalue %501[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %594 = llvm.extractvalue %501[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %595 = llvm.extractvalue %501[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %596 = llvm.extractvalue %501[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %597 = llvm.extractvalue %501[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %598 = llvm.extractvalue %501[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %599 = llvm.extractvalue %501[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %600 = llvm.extractvalue %501[8] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %601 = llvm.extractvalue %501[9] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %602 = llvm.extractvalue %501[10] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %603 = llvm.extractvalue %501[11] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %604 = llvm.extractvalue %501[12] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %605 = llvm.extractvalue %501[13] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %606 = llvm.extractvalue %501[14] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %607 = llvm.extractvalue %501[15] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %608 = llvm.extractvalue %501[16] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %609 = llvm.extractvalue %501[17] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %610 = llvm.extractvalue %501[18] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %611 = llvm.extractvalue %501[19] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %612 = llvm.extractvalue %501[20] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %613 = llvm.extractvalue %501[21] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %614 = llvm.extractvalue %501[22] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %615 = llvm.extractvalue %501[23] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %616 = llvm.extractvalue %501[24] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %617 = llvm.extractvalue %501[25] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %618 = llvm.extractvalue %501[26] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %619 = llvm.extractvalue %501[27] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %620 = llvm.extractvalue %501[28] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %621 = llvm.extractvalue %501[29] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %622 = llvm.extractvalue %501[30] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %623 = llvm.extractvalue %501[31] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %624 = llvm.add %560, %592 : i32 loc(#loc)
    %625 = llvm.add %561, %593 : i32 loc(#loc)
    %626 = llvm.add %562, %594 : i32 loc(#loc)
    %627 = llvm.add %563, %595 : i32 loc(#loc)
    %628 = llvm.add %564, %596 : i32 loc(#loc)
    %629 = llvm.add %565, %597 : i32 loc(#loc)
    %630 = llvm.add %566, %598 : i32 loc(#loc)
    %631 = llvm.add %567, %599 : i32 loc(#loc)
    %632 = llvm.add %568, %600 : i32 loc(#loc)
    %633 = llvm.add %569, %601 : i32 loc(#loc)
    %634 = llvm.add %570, %602 : i32 loc(#loc)
    %635 = llvm.add %571, %603 : i32 loc(#loc)
    %636 = llvm.add %572, %604 : i32 loc(#loc)
    %637 = llvm.add %573, %605 : i32 loc(#loc)
    %638 = llvm.add %574, %606 : i32 loc(#loc)
    %639 = llvm.add %575, %607 : i32 loc(#loc)
    %640 = llvm.add %576, %608 : i32 loc(#loc)
    %641 = llvm.add %577, %609 : i32 loc(#loc)
    %642 = llvm.add %578, %610 : i32 loc(#loc)
    %643 = llvm.add %579, %611 : i32 loc(#loc)
    %644 = llvm.add %580, %612 : i32 loc(#loc)
    %645 = llvm.add %581, %613 : i32 loc(#loc)
    %646 = llvm.add %582, %614 : i32 loc(#loc)
    %647 = llvm.add %583, %615 : i32 loc(#loc)
    %648 = llvm.add %584, %616 : i32 loc(#loc)
    %649 = llvm.add %585, %617 : i32 loc(#loc)
    %650 = llvm.add %586, %618 : i32 loc(#loc)
    %651 = llvm.add %587, %619 : i32 loc(#loc)
    %652 = llvm.add %588, %620 : i32 loc(#loc)
    %653 = llvm.add %589, %621 : i32 loc(#loc)
    %654 = llvm.add %590, %622 : i32 loc(#loc)
    %655 = llvm.add %591, %623 : i32 loc(#loc)
    %656 = llvm.mlir.undef : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc)
    %657 = llvm.insertvalue %624, %656[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %658 = llvm.insertvalue %625, %657[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %659 = llvm.insertvalue %626, %658[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %660 = llvm.insertvalue %627, %659[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %661 = llvm.insertvalue %628, %660[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %662 = llvm.insertvalue %629, %661[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %663 = llvm.insertvalue %630, %662[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %664 = llvm.insertvalue %631, %663[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %665 = llvm.insertvalue %632, %664[8] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %666 = llvm.insertvalue %633, %665[9] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %667 = llvm.insertvalue %634, %666[10] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %668 = llvm.insertvalue %635, %667[11] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %669 = llvm.insertvalue %636, %668[12] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %670 = llvm.insertvalue %637, %669[13] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %671 = llvm.insertvalue %638, %670[14] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %672 = llvm.insertvalue %639, %671[15] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %673 = llvm.insertvalue %640, %672[16] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %674 = llvm.insertvalue %641, %673[17] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %675 = llvm.insertvalue %642, %674[18] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %676 = llvm.insertvalue %643, %675[19] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %677 = llvm.insertvalue %644, %676[20] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %678 = llvm.insertvalue %645, %677[21] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %679 = llvm.insertvalue %646, %678[22] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %680 = llvm.insertvalue %647, %679[23] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %681 = llvm.insertvalue %648, %680[24] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %682 = llvm.insertvalue %649, %681[25] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %683 = llvm.insertvalue %650, %682[26] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %684 = llvm.insertvalue %651, %683[27] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %685 = llvm.insertvalue %652, %684[28] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %686 = llvm.insertvalue %653, %685[29] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %687 = llvm.insertvalue %654, %686[30] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %688 = llvm.insertvalue %655, %687[31] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %689 = llvm.mlir.constant(0 : index) : i32 loc(#loc)
    %690 = rocdl.workitem.id.x : i32 loc(#loc)
    %691 = llvm.mlir.constant(255 : i32) : i32 loc(#loc)
    %692 = llvm.and %690, %691 : i32 loc(#loc)
    %693 = llvm.mlir.constant(64 : i32) : i32 loc(#loc)
    %694 = llvm.urem %692, %693 : i32 loc(#loc)
    %695 = llvm.udiv %692, %693 : i32 loc(#loc)
    %696 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %697 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %698 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %699 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %700 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %701 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %702 = llvm.shl %694, %701 : i32 loc(#loc)
    %703 = llvm.or %700, %702 : i32 loc(#loc)
    %704 = llvm.mlir.constant(6 : i32) : i32 loc(#loc)
    %705 = llvm.shl %695, %704 : i32 loc(#loc)
    %706 = llvm.or %703, %705 : i32 loc(#loc)
    %707 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %708 = llvm.mlir.constant(7 : i32) : i32 loc(#loc)
    %709 = llvm.and %706, %708 : i32 loc(#loc)
    %710 = llvm.mlir.constant(4 : i32) : i32 loc(#loc)
    %711 = llvm.shl %709, %710 : i32 loc(#loc)
    %712 = llvm.xor %707, %711 : i32 loc(#loc)
    %713 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %714 = llvm.xor %699, %712 : i32 loc(#loc)
    %715 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %716 = llvm.xor %714, %715 : i32 loc(#loc)
    %717 = llvm.mlir.constant(1 : i32) : i32 loc(#loc)
    %718 = llvm.xor %714, %717 : i32 loc(#loc)
    %719 = llvm.mlir.constant(2 : i32) : i32 loc(#loc)
    %720 = llvm.xor %714, %719 : i32 loc(#loc)
    %721 = llvm.mlir.constant(3 : i32) : i32 loc(#loc)
    %722 = llvm.xor %714, %721 : i32 loc(#loc)
    %723 = llvm.mlir.constant(4 : i32) : i32 loc(#loc)
    %724 = llvm.xor %714, %723 : i32 loc(#loc)
    %725 = llvm.mlir.constant(5 : i32) : i32 loc(#loc)
    %726 = llvm.xor %714, %725 : i32 loc(#loc)
    %727 = llvm.mlir.constant(6 : i32) : i32 loc(#loc)
    %728 = llvm.xor %714, %727 : i32 loc(#loc)
    %729 = llvm.mlir.constant(7 : i32) : i32 loc(#loc)
    %730 = llvm.xor %714, %729 : i32 loc(#loc)
    %731 = llvm.mlir.constant(8 : i32) : i32 loc(#loc)
    %732 = llvm.xor %714, %731 : i32 loc(#loc)
    %733 = llvm.mlir.constant(9 : i32) : i32 loc(#loc)
    %734 = llvm.xor %714, %733 : i32 loc(#loc)
    %735 = llvm.mlir.constant(10 : i32) : i32 loc(#loc)
    %736 = llvm.xor %714, %735 : i32 loc(#loc)
    %737 = llvm.mlir.constant(11 : i32) : i32 loc(#loc)
    %738 = llvm.xor %714, %737 : i32 loc(#loc)
    %739 = llvm.mlir.constant(12 : i32) : i32 loc(#loc)
    %740 = llvm.xor %714, %739 : i32 loc(#loc)
    %741 = llvm.mlir.constant(13 : i32) : i32 loc(#loc)
    %742 = llvm.xor %714, %741 : i32 loc(#loc)
    %743 = llvm.mlir.constant(14 : i32) : i32 loc(#loc)
    %744 = llvm.xor %714, %743 : i32 loc(#loc)
    %745 = llvm.mlir.constant(15 : i32) : i32 loc(#loc)
    %746 = llvm.xor %714, %745 : i32 loc(#loc)
    %747 = llvm.add %716, %689 : i32 loc(#loc)
    %748 = llvm.add %718, %689 : i32 loc(#loc)
    %749 = llvm.add %720, %689 : i32 loc(#loc)
    %750 = llvm.add %722, %689 : i32 loc(#loc)
    %751 = llvm.add %724, %689 : i32 loc(#loc)
    %752 = llvm.add %726, %689 : i32 loc(#loc)
    %753 = llvm.add %728, %689 : i32 loc(#loc)
    %754 = llvm.add %730, %689 : i32 loc(#loc)
    %755 = llvm.add %732, %689 : i32 loc(#loc)
    %756 = llvm.add %734, %689 : i32 loc(#loc)
    %757 = llvm.add %736, %689 : i32 loc(#loc)
    %758 = llvm.add %738, %689 : i32 loc(#loc)
    %759 = llvm.add %740, %689 : i32 loc(#loc)
    %760 = llvm.add %742, %689 : i32 loc(#loc)
    %761 = llvm.add %744, %689 : i32 loc(#loc)
    %762 = llvm.add %746, %689 : i32 loc(#loc)
    %763 = llvm.mlir.undef : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc)
    %764 = llvm.insertvalue %747, %763[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %765 = llvm.insertvalue %748, %764[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %766 = llvm.insertvalue %749, %765[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %767 = llvm.insertvalue %750, %766[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %768 = llvm.insertvalue %751, %767[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %769 = llvm.insertvalue %752, %768[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %770 = llvm.insertvalue %753, %769[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %771 = llvm.insertvalue %754, %770[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %772 = llvm.insertvalue %755, %771[8] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %773 = llvm.insertvalue %756, %772[9] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %774 = llvm.insertvalue %757, %773[10] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %775 = llvm.insertvalue %758, %774[11] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %776 = llvm.insertvalue %759, %775[12] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %777 = llvm.insertvalue %760, %776[13] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %778 = llvm.insertvalue %761, %777[14] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %779 = llvm.insertvalue %762, %778[15] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %780 = llvm.extractvalue %779[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %781 = llvm.extractvalue %779[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %782 = llvm.extractvalue %779[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %783 = llvm.extractvalue %779[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %784 = llvm.extractvalue %779[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %785 = llvm.extractvalue %779[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %786 = llvm.extractvalue %779[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %787 = llvm.extractvalue %779[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %788 = llvm.extractvalue %779[8] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %789 = llvm.extractvalue %779[9] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %790 = llvm.extractvalue %779[10] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %791 = llvm.extractvalue %779[11] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %792 = llvm.extractvalue %779[12] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %793 = llvm.extractvalue %779[13] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %794 = llvm.extractvalue %779[14] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %795 = llvm.extractvalue %779[15] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %796 = llvm.mlir.undef : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc)
    %797 = llvm.insertvalue %780, %796[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %798 = llvm.insertvalue %781, %797[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %799 = llvm.insertvalue %782, %798[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %800 = llvm.insertvalue %783, %799[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %801 = llvm.insertvalue %784, %800[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %802 = llvm.insertvalue %785, %801[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %803 = llvm.insertvalue %786, %802[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %804 = llvm.insertvalue %787, %803[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %805 = llvm.insertvalue %788, %804[8] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %806 = llvm.insertvalue %789, %805[9] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %807 = llvm.insertvalue %790, %806[10] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %808 = llvm.insertvalue %791, %807[11] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %809 = llvm.insertvalue %792, %808[12] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %810 = llvm.insertvalue %793, %809[13] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %811 = llvm.insertvalue %794, %810[14] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %812 = llvm.insertvalue %795, %811[15] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %813 = llvm.mlir.constant(0 : index) : i32 loc(#loc)
    %814 = rocdl.workitem.id.x : i32 loc(#loc)
    %815 = llvm.mlir.constant(255 : i32) : i32 loc(#loc)
    %816 = llvm.and %814, %815 : i32 loc(#loc)
    %817 = llvm.mlir.constant(64 : i32) : i32 loc(#loc)
    %818 = llvm.urem %816, %817 : i32 loc(#loc)
    %819 = llvm.udiv %816, %817 : i32 loc(#loc)
    %820 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %821 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %822 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %823 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %824 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %825 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %826 = llvm.shl %818, %825 : i32 loc(#loc)
    %827 = llvm.or %824, %826 : i32 loc(#loc)
    %828 = llvm.mlir.constant(6 : i32) : i32 loc(#loc)
    %829 = llvm.shl %819, %828 : i32 loc(#loc)
    %830 = llvm.or %827, %829 : i32 loc(#loc)
    %831 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %832 = llvm.mlir.constant(248 : i32) : i32 loc(#loc)
    %833 = llvm.and %830, %832 : i32 loc(#loc)
    %834 = llvm.mlir.constant(3 : i32) : i32 loc(#loc)
    %835 = llvm.lshr %833, %834 : i32 loc(#loc)
    %836 = llvm.xor %831, %835 : i32 loc(#loc)
    %837 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %838 = llvm.xor %823, %836 : i32 loc(#loc)
    %839 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %840 = llvm.xor %838, %839 : i32 loc(#loc)
    %841 = llvm.add %840, %813 : i32 loc(#loc)
    %842 = llvm.mlir.undef : !llvm.struct<(i32)> loc(#loc)
    %843 = llvm.insertvalue %841, %842[0] : !llvm.struct<(i32)>  loc(#loc)
    %844 = llvm.mlir.constant(0 : index) : i32 loc(#loc)
    %845 = rocdl.workitem.id.x : i32 loc(#loc)
    %846 = llvm.mlir.constant(255 : i32) : i32 loc(#loc)
    %847 = llvm.and %845, %846 : i32 loc(#loc)
    %848 = llvm.mlir.constant(64 : i32) : i32 loc(#loc)
    %849 = llvm.urem %847, %848 : i32 loc(#loc)
    %850 = llvm.udiv %847, %848 : i32 loc(#loc)
    %851 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %852 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %853 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %854 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %855 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %856 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %857 = llvm.shl %849, %856 : i32 loc(#loc)
    %858 = llvm.or %855, %857 : i32 loc(#loc)
    %859 = llvm.mlir.constant(6 : i32) : i32 loc(#loc)
    %860 = llvm.shl %850, %859 : i32 loc(#loc)
    %861 = llvm.or %858, %860 : i32 loc(#loc)
    %862 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %863 = llvm.mlir.constant(112 : i32) : i32 loc(#loc)
    %864 = llvm.and %861, %863 : i32 loc(#loc)
    %865 = llvm.mlir.constant(2 : i32) : i32 loc(#loc)
    %866 = llvm.lshr %864, %865 : i32 loc(#loc)
    %867 = llvm.xor %862, %866 : i32 loc(#loc)
    %868 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %869 = llvm.xor %854, %867 : i32 loc(#loc)
    %870 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %871 = llvm.xor %869, %870 : i32 loc(#loc)
    %872 = llvm.mlir.constant(1 : i32) : i32 loc(#loc)
    %873 = llvm.xor %869, %872 : i32 loc(#loc)
    %874 = llvm.mlir.constant(2 : i32) : i32 loc(#loc)
    %875 = llvm.xor %869, %874 : i32 loc(#loc)
    %876 = llvm.mlir.constant(3 : i32) : i32 loc(#loc)
    %877 = llvm.xor %869, %876 : i32 loc(#loc)
    %878 = llvm.add %871, %844 : i32 loc(#loc)
    %879 = llvm.add %873, %844 : i32 loc(#loc)
    %880 = llvm.add %875, %844 : i32 loc(#loc)
    %881 = llvm.add %877, %844 : i32 loc(#loc)
    %882 = llvm.mlir.undef : !llvm.struct<(i32, i32, i32, i32)> loc(#loc)
    %883 = llvm.insertvalue %878, %882[0] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc)
    %884 = llvm.insertvalue %879, %883[1] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc)
    %885 = llvm.insertvalue %880, %884[2] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc)
    %886 = llvm.insertvalue %881, %885[3] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc)
    %887 = llvm.extractvalue %812[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %888 = llvm.extractvalue %812[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %889 = llvm.extractvalue %812[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %890 = llvm.extractvalue %812[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %891 = llvm.extractvalue %812[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %892 = llvm.extractvalue %812[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %893 = llvm.extractvalue %812[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %894 = llvm.extractvalue %812[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %895 = llvm.extractvalue %812[8] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %896 = llvm.extractvalue %812[9] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %897 = llvm.extractvalue %812[10] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %898 = llvm.extractvalue %812[11] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %899 = llvm.extractvalue %812[12] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %900 = llvm.extractvalue %812[13] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %901 = llvm.extractvalue %812[14] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %902 = llvm.extractvalue %812[15] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %903 = llvm.mlir.undef : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc)
    %904 = llvm.insertvalue %887, %903[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %905 = llvm.insertvalue %888, %904[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %906 = llvm.insertvalue %889, %905[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %907 = llvm.insertvalue %890, %906[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %908 = llvm.insertvalue %891, %907[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %909 = llvm.insertvalue %892, %908[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %910 = llvm.insertvalue %893, %909[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %911 = llvm.insertvalue %894, %910[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %912 = llvm.insertvalue %895, %911[8] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %913 = llvm.insertvalue %896, %912[9] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %914 = llvm.insertvalue %897, %913[10] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %915 = llvm.insertvalue %898, %914[11] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %916 = llvm.insertvalue %899, %915[12] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %917 = llvm.insertvalue %900, %916[13] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %918 = llvm.insertvalue %901, %917[14] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %919 = llvm.insertvalue %902, %918[15] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %920 = llvm.extractvalue %843[0] : !llvm.struct<(i32)>  loc(#loc)
    %921 = llvm.mlir.undef : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc)
    %922 = llvm.insertvalue %920, %921[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %923 = llvm.insertvalue %920, %922[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %924 = llvm.insertvalue %920, %923[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %925 = llvm.insertvalue %920, %924[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %926 = llvm.insertvalue %920, %925[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %927 = llvm.insertvalue %920, %926[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %928 = llvm.insertvalue %920, %927[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %929 = llvm.insertvalue %920, %928[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %930 = llvm.insertvalue %920, %929[8] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %931 = llvm.insertvalue %920, %930[9] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %932 = llvm.insertvalue %920, %931[10] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %933 = llvm.insertvalue %920, %932[11] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %934 = llvm.insertvalue %920, %933[12] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %935 = llvm.insertvalue %920, %934[13] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %936 = llvm.insertvalue %920, %935[14] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %937 = llvm.insertvalue %920, %936[15] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %938 = llvm.bitcast %stride_b1 : i32 to i32 loc(#loc)
    %939 = llvm.mlir.undef : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc)
    %940 = llvm.insertvalue %938, %939[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %941 = llvm.insertvalue %938, %940[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %942 = llvm.insertvalue %938, %941[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %943 = llvm.insertvalue %938, %942[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %944 = llvm.insertvalue %938, %943[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %945 = llvm.insertvalue %938, %944[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %946 = llvm.insertvalue %938, %945[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %947 = llvm.insertvalue %938, %946[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %948 = llvm.insertvalue %938, %947[8] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %949 = llvm.insertvalue %938, %948[9] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %950 = llvm.insertvalue %938, %949[10] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %951 = llvm.insertvalue %938, %950[11] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %952 = llvm.insertvalue %938, %951[12] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %953 = llvm.insertvalue %938, %952[13] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %954 = llvm.insertvalue %938, %953[14] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %955 = llvm.insertvalue %938, %954[15] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %956 = llvm.extractvalue %937[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %957 = llvm.extractvalue %937[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %958 = llvm.extractvalue %937[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %959 = llvm.extractvalue %937[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %960 = llvm.extractvalue %937[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %961 = llvm.extractvalue %937[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %962 = llvm.extractvalue %937[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %963 = llvm.extractvalue %937[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %964 = llvm.extractvalue %937[8] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %965 = llvm.extractvalue %937[9] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %966 = llvm.extractvalue %937[10] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %967 = llvm.extractvalue %937[11] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %968 = llvm.extractvalue %937[12] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %969 = llvm.extractvalue %937[13] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %970 = llvm.extractvalue %937[14] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %971 = llvm.extractvalue %937[15] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %972 = llvm.extractvalue %955[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %973 = llvm.extractvalue %955[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %974 = llvm.extractvalue %955[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %975 = llvm.extractvalue %955[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %976 = llvm.extractvalue %955[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %977 = llvm.extractvalue %955[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %978 = llvm.extractvalue %955[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %979 = llvm.extractvalue %955[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %980 = llvm.extractvalue %955[8] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %981 = llvm.extractvalue %955[9] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %982 = llvm.extractvalue %955[10] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %983 = llvm.extractvalue %955[11] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %984 = llvm.extractvalue %955[12] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %985 = llvm.extractvalue %955[13] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %986 = llvm.extractvalue %955[14] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %987 = llvm.extractvalue %955[15] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %988 = llvm.mul %956, %972 : i32 loc(#loc)
    %989 = llvm.mul %957, %973 : i32 loc(#loc)
    %990 = llvm.mul %958, %974 : i32 loc(#loc)
    %991 = llvm.mul %959, %975 : i32 loc(#loc)
    %992 = llvm.mul %960, %976 : i32 loc(#loc)
    %993 = llvm.mul %961, %977 : i32 loc(#loc)
    %994 = llvm.mul %962, %978 : i32 loc(#loc)
    %995 = llvm.mul %963, %979 : i32 loc(#loc)
    %996 = llvm.mul %964, %980 : i32 loc(#loc)
    %997 = llvm.mul %965, %981 : i32 loc(#loc)
    %998 = llvm.mul %966, %982 : i32 loc(#loc)
    %999 = llvm.mul %967, %983 : i32 loc(#loc)
    %1000 = llvm.mul %968, %984 : i32 loc(#loc)
    %1001 = llvm.mul %969, %985 : i32 loc(#loc)
    %1002 = llvm.mul %970, %986 : i32 loc(#loc)
    %1003 = llvm.mul %971, %987 : i32 loc(#loc)
    %1004 = llvm.mlir.undef : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc)
    %1005 = llvm.insertvalue %988, %1004[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %1006 = llvm.insertvalue %989, %1005[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %1007 = llvm.insertvalue %990, %1006[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %1008 = llvm.insertvalue %991, %1007[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %1009 = llvm.insertvalue %992, %1008[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %1010 = llvm.insertvalue %993, %1009[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %1011 = llvm.insertvalue %994, %1010[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %1012 = llvm.insertvalue %995, %1011[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %1013 = llvm.insertvalue %996, %1012[8] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %1014 = llvm.insertvalue %997, %1013[9] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %1015 = llvm.insertvalue %998, %1014[10] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %1016 = llvm.insertvalue %999, %1015[11] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %1017 = llvm.insertvalue %1000, %1016[12] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %1018 = llvm.insertvalue %1001, %1017[13] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %1019 = llvm.insertvalue %1002, %1018[14] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %1020 = llvm.insertvalue %1003, %1019[15] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %1021 = llvm.extractvalue %1020[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %1022 = llvm.extractvalue %1020[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %1023 = llvm.extractvalue %1020[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %1024 = llvm.extractvalue %1020[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %1025 = llvm.extractvalue %1020[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %1026 = llvm.extractvalue %1020[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %1027 = llvm.extractvalue %1020[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %1028 = llvm.extractvalue %1020[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %1029 = llvm.extractvalue %1020[8] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %1030 = llvm.extractvalue %1020[9] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %1031 = llvm.extractvalue %1020[10] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %1032 = llvm.extractvalue %1020[11] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %1033 = llvm.extractvalue %1020[12] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %1034 = llvm.extractvalue %1020[13] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %1035 = llvm.extractvalue %1020[14] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %1036 = llvm.extractvalue %1020[15] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %1037 = llvm.mlir.undef : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc)
    %1038 = llvm.insertvalue %1036, %1037[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %1039 = llvm.insertvalue %1036, %1038[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %1040 = llvm.insertvalue %1036, %1039[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %1041 = llvm.insertvalue %1036, %1040[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %1042 = llvm.insertvalue %1036, %1041[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %1043 = llvm.insertvalue %1036, %1042[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %1044 = llvm.insertvalue %1036, %1043[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %1045 = llvm.insertvalue %1036, %1044[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %1046 = llvm.insertvalue %1036, %1045[8] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %1047 = llvm.insertvalue %1036, %1046[9] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %1048 = llvm.insertvalue %1036, %1047[10] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %1049 = llvm.insertvalue %1036, %1048[11] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %1050 = llvm.insertvalue %1036, %1049[12] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %1051 = llvm.insertvalue %1036, %1050[13] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %1052 = llvm.insertvalue %1036, %1051[14] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %1053 = llvm.insertvalue %1036, %1052[15] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %1054 = llvm.extractvalue %1053[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %1055 = llvm.extractvalue %1053[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %1056 = llvm.extractvalue %1053[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %1057 = llvm.extractvalue %1053[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %1058 = llvm.extractvalue %1053[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %1059 = llvm.extractvalue %1053[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %1060 = llvm.extractvalue %1053[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %1061 = llvm.extractvalue %1053[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %1062 = llvm.extractvalue %1053[8] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %1063 = llvm.extractvalue %1053[9] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %1064 = llvm.extractvalue %1053[10] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %1065 = llvm.extractvalue %1053[11] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %1066 = llvm.extractvalue %1053[12] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %1067 = llvm.extractvalue %1053[13] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %1068 = llvm.extractvalue %1053[14] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %1069 = llvm.extractvalue %1053[15] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %1070 = llvm.extractvalue %919[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %1071 = llvm.extractvalue %919[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %1072 = llvm.extractvalue %919[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %1073 = llvm.extractvalue %919[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %1074 = llvm.extractvalue %919[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %1075 = llvm.extractvalue %919[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %1076 = llvm.extractvalue %919[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %1077 = llvm.extractvalue %919[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %1078 = llvm.extractvalue %919[8] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %1079 = llvm.extractvalue %919[9] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %1080 = llvm.extractvalue %919[10] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %1081 = llvm.extractvalue %919[11] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %1082 = llvm.extractvalue %919[12] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %1083 = llvm.extractvalue %919[13] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %1084 = llvm.extractvalue %919[14] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %1085 = llvm.extractvalue %919[15] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %1086 = llvm.add %1054, %1070 : i32 loc(#loc)
    %1087 = llvm.add %1055, %1071 : i32 loc(#loc)
    %1088 = llvm.add %1056, %1072 : i32 loc(#loc)
    %1089 = llvm.add %1057, %1073 : i32 loc(#loc)
    %1090 = llvm.add %1058, %1074 : i32 loc(#loc)
    %1091 = llvm.add %1059, %1075 : i32 loc(#loc)
    %1092 = llvm.add %1060, %1076 : i32 loc(#loc)
    %1093 = llvm.add %1061, %1077 : i32 loc(#loc)
    %1094 = llvm.add %1062, %1078 : i32 loc(#loc)
    %1095 = llvm.add %1063, %1079 : i32 loc(#loc)
    %1096 = llvm.add %1064, %1080 : i32 loc(#loc)
    %1097 = llvm.add %1065, %1081 : i32 loc(#loc)
    %1098 = llvm.add %1066, %1082 : i32 loc(#loc)
    %1099 = llvm.add %1067, %1083 : i32 loc(#loc)
    %1100 = llvm.add %1068, %1084 : i32 loc(#loc)
    %1101 = llvm.add %1069, %1085 : i32 loc(#loc)
    %1102 = llvm.mlir.undef : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc)
    %1103 = llvm.insertvalue %1086, %1102[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %1104 = llvm.insertvalue %1087, %1103[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %1105 = llvm.insertvalue %1088, %1104[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %1106 = llvm.insertvalue %1089, %1105[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %1107 = llvm.insertvalue %1090, %1106[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %1108 = llvm.insertvalue %1091, %1107[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %1109 = llvm.insertvalue %1092, %1108[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %1110 = llvm.insertvalue %1093, %1109[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %1111 = llvm.insertvalue %1094, %1110[8] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %1112 = llvm.insertvalue %1095, %1111[9] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %1113 = llvm.insertvalue %1096, %1112[10] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %1114 = llvm.insertvalue %1097, %1113[11] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %1115 = llvm.insertvalue %1098, %1114[12] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %1116 = llvm.insertvalue %1099, %1115[13] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %1117 = llvm.insertvalue %1100, %1116[14] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %1118 = llvm.insertvalue %1101, %1117[15] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %1119 = llvm.bitcast %a_base : !llvm.ptr<1> to !llvm.ptr<1> loc(#loc)
    %1120 = llvm.mlir.undef : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc)
    %1121 = llvm.insertvalue %1119, %1120[0] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %1122 = llvm.insertvalue %1119, %1121[1] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %1123 = llvm.insertvalue %1119, %1122[2] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %1124 = llvm.insertvalue %1119, %1123[3] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %1125 = llvm.insertvalue %1119, %1124[4] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %1126 = llvm.insertvalue %1119, %1125[5] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %1127 = llvm.insertvalue %1119, %1126[6] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %1128 = llvm.insertvalue %1119, %1127[7] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %1129 = llvm.insertvalue %1119, %1128[8] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %1130 = llvm.insertvalue %1119, %1129[9] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %1131 = llvm.insertvalue %1119, %1130[10] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %1132 = llvm.insertvalue %1119, %1131[11] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %1133 = llvm.insertvalue %1119, %1132[12] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %1134 = llvm.insertvalue %1119, %1133[13] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %1135 = llvm.insertvalue %1119, %1134[14] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %1136 = llvm.insertvalue %1119, %1135[15] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %1137 = llvm.insertvalue %1119, %1136[16] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %1138 = llvm.insertvalue %1119, %1137[17] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %1139 = llvm.insertvalue %1119, %1138[18] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %1140 = llvm.insertvalue %1119, %1139[19] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %1141 = llvm.insertvalue %1119, %1140[20] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %1142 = llvm.insertvalue %1119, %1141[21] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %1143 = llvm.insertvalue %1119, %1142[22] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %1144 = llvm.insertvalue %1119, %1143[23] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %1145 = llvm.insertvalue %1119, %1144[24] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %1146 = llvm.insertvalue %1119, %1145[25] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %1147 = llvm.insertvalue %1119, %1146[26] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %1148 = llvm.insertvalue %1119, %1147[27] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %1149 = llvm.insertvalue %1119, %1148[28] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %1150 = llvm.insertvalue %1119, %1149[29] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %1151 = llvm.insertvalue %1119, %1150[30] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %1152 = llvm.insertvalue %1119, %1151[31] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %1153 = llvm.extractvalue %1152[0] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %1154 = llvm.extractvalue %1152[1] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %1155 = llvm.extractvalue %1152[2] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %1156 = llvm.extractvalue %1152[3] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %1157 = llvm.extractvalue %1152[4] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %1158 = llvm.extractvalue %1152[5] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %1159 = llvm.extractvalue %1152[6] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %1160 = llvm.extractvalue %1152[7] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %1161 = llvm.extractvalue %1152[8] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %1162 = llvm.extractvalue %1152[9] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %1163 = llvm.extractvalue %1152[10] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %1164 = llvm.extractvalue %1152[11] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %1165 = llvm.extractvalue %1152[12] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %1166 = llvm.extractvalue %1152[13] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %1167 = llvm.extractvalue %1152[14] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %1168 = llvm.extractvalue %1152[15] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %1169 = llvm.extractvalue %1152[16] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %1170 = llvm.extractvalue %1152[17] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %1171 = llvm.extractvalue %1152[18] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %1172 = llvm.extractvalue %1152[19] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %1173 = llvm.extractvalue %1152[20] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %1174 = llvm.extractvalue %1152[21] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %1175 = llvm.extractvalue %1152[22] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %1176 = llvm.extractvalue %1152[23] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %1177 = llvm.extractvalue %1152[24] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %1178 = llvm.extractvalue %1152[25] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %1179 = llvm.extractvalue %1152[26] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %1180 = llvm.extractvalue %1152[27] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %1181 = llvm.extractvalue %1152[28] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %1182 = llvm.extractvalue %1152[29] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %1183 = llvm.extractvalue %1152[30] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %1184 = llvm.extractvalue %1152[31] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %1185 = llvm.extractvalue %688[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %1186 = llvm.extractvalue %688[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %1187 = llvm.extractvalue %688[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %1188 = llvm.extractvalue %688[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %1189 = llvm.extractvalue %688[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %1190 = llvm.extractvalue %688[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %1191 = llvm.extractvalue %688[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %1192 = llvm.extractvalue %688[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %1193 = llvm.extractvalue %688[8] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %1194 = llvm.extractvalue %688[9] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %1195 = llvm.extractvalue %688[10] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %1196 = llvm.extractvalue %688[11] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %1197 = llvm.extractvalue %688[12] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %1198 = llvm.extractvalue %688[13] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %1199 = llvm.extractvalue %688[14] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %1200 = llvm.extractvalue %688[15] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %1201 = llvm.extractvalue %688[16] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %1202 = llvm.extractvalue %688[17] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %1203 = llvm.extractvalue %688[18] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %1204 = llvm.extractvalue %688[19] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %1205 = llvm.extractvalue %688[20] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %1206 = llvm.extractvalue %688[21] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %1207 = llvm.extractvalue %688[22] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %1208 = llvm.extractvalue %688[23] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %1209 = llvm.extractvalue %688[24] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %1210 = llvm.extractvalue %688[25] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %1211 = llvm.extractvalue %688[26] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %1212 = llvm.extractvalue %688[27] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %1213 = llvm.extractvalue %688[28] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %1214 = llvm.extractvalue %688[29] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %1215 = llvm.extractvalue %688[30] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %1216 = llvm.extractvalue %688[31] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %1217 = llvm.getelementptr %1153[%1185] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc)
    %1218 = llvm.getelementptr %1154[%1186] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc)
    %1219 = llvm.getelementptr %1155[%1187] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc)
    %1220 = llvm.getelementptr %1156[%1188] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc)
    %1221 = llvm.getelementptr %1157[%1189] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc)
    %1222 = llvm.getelementptr %1158[%1190] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc)
    %1223 = llvm.getelementptr %1159[%1191] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc)
    %1224 = llvm.getelementptr %1160[%1192] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc)
    %1225 = llvm.getelementptr %1161[%1193] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc)
    %1226 = llvm.getelementptr %1162[%1194] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc)
    %1227 = llvm.getelementptr %1163[%1195] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc)
    %1228 = llvm.getelementptr %1164[%1196] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc)
    %1229 = llvm.getelementptr %1165[%1197] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc)
    %1230 = llvm.getelementptr %1166[%1198] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc)
    %1231 = llvm.getelementptr %1167[%1199] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc)
    %1232 = llvm.getelementptr %1168[%1200] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc)
    %1233 = llvm.getelementptr %1169[%1201] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc)
    %1234 = llvm.getelementptr %1170[%1202] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc)
    %1235 = llvm.getelementptr %1171[%1203] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc)
    %1236 = llvm.getelementptr %1172[%1204] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc)
    %1237 = llvm.getelementptr %1173[%1205] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc)
    %1238 = llvm.getelementptr %1174[%1206] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc)
    %1239 = llvm.getelementptr %1175[%1207] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc)
    %1240 = llvm.getelementptr %1176[%1208] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc)
    %1241 = llvm.getelementptr %1177[%1209] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc)
    %1242 = llvm.getelementptr %1178[%1210] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc)
    %1243 = llvm.getelementptr %1179[%1211] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc)
    %1244 = llvm.getelementptr %1180[%1212] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc)
    %1245 = llvm.getelementptr %1181[%1213] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc)
    %1246 = llvm.getelementptr %1182[%1214] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc)
    %1247 = llvm.getelementptr %1183[%1215] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc)
    %1248 = llvm.getelementptr %1184[%1216] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc)
    %1249 = llvm.mlir.undef : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc)
    %1250 = llvm.insertvalue %1217, %1249[0] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %1251 = llvm.insertvalue %1218, %1250[1] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %1252 = llvm.insertvalue %1219, %1251[2] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %1253 = llvm.insertvalue %1220, %1252[3] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %1254 = llvm.insertvalue %1221, %1253[4] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %1255 = llvm.insertvalue %1222, %1254[5] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %1256 = llvm.insertvalue %1223, %1255[6] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %1257 = llvm.insertvalue %1224, %1256[7] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %1258 = llvm.insertvalue %1225, %1257[8] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %1259 = llvm.insertvalue %1226, %1258[9] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %1260 = llvm.insertvalue %1227, %1259[10] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %1261 = llvm.insertvalue %1228, %1260[11] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %1262 = llvm.insertvalue %1229, %1261[12] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %1263 = llvm.insertvalue %1230, %1262[13] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %1264 = llvm.insertvalue %1231, %1263[14] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %1265 = llvm.insertvalue %1232, %1264[15] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %1266 = llvm.insertvalue %1233, %1265[16] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %1267 = llvm.insertvalue %1234, %1266[17] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %1268 = llvm.insertvalue %1235, %1267[18] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %1269 = llvm.insertvalue %1236, %1268[19] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %1270 = llvm.insertvalue %1237, %1269[20] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %1271 = llvm.insertvalue %1238, %1270[21] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %1272 = llvm.insertvalue %1239, %1271[22] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %1273 = llvm.insertvalue %1240, %1272[23] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %1274 = llvm.insertvalue %1241, %1273[24] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %1275 = llvm.insertvalue %1242, %1274[25] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %1276 = llvm.insertvalue %1243, %1275[26] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %1277 = llvm.insertvalue %1244, %1276[27] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %1278 = llvm.insertvalue %1245, %1277[28] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %1279 = llvm.insertvalue %1246, %1278[29] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %1280 = llvm.insertvalue %1247, %1279[30] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %1281 = llvm.insertvalue %1248, %1280[31] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %1282 = llvm.extractvalue %1281[0] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %1283 = llvm.extractvalue %1281[1] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %1284 = llvm.extractvalue %1281[2] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %1285 = llvm.extractvalue %1281[3] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %1286 = llvm.extractvalue %1281[4] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %1287 = llvm.extractvalue %1281[5] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %1288 = llvm.extractvalue %1281[6] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %1289 = llvm.extractvalue %1281[7] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %1290 = llvm.extractvalue %1281[8] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %1291 = llvm.extractvalue %1281[9] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %1292 = llvm.extractvalue %1281[10] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %1293 = llvm.extractvalue %1281[11] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %1294 = llvm.extractvalue %1281[12] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %1295 = llvm.extractvalue %1281[13] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %1296 = llvm.extractvalue %1281[14] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %1297 = llvm.extractvalue %1281[15] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %1298 = llvm.extractvalue %1281[16] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %1299 = llvm.extractvalue %1281[17] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %1300 = llvm.extractvalue %1281[18] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %1301 = llvm.extractvalue %1281[19] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %1302 = llvm.extractvalue %1281[20] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %1303 = llvm.extractvalue %1281[21] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %1304 = llvm.extractvalue %1281[22] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %1305 = llvm.extractvalue %1281[23] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %1306 = llvm.extractvalue %1281[24] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %1307 = llvm.extractvalue %1281[25] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %1308 = llvm.extractvalue %1281[26] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %1309 = llvm.extractvalue %1281[27] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %1310 = llvm.extractvalue %1281[28] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %1311 = llvm.extractvalue %1281[29] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %1312 = llvm.extractvalue %1281[30] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %1313 = llvm.extractvalue %1281[31] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %1314 = llvm.mlir.constant(true) : i1 loc(#loc)
    %1315 = llvm.mlir.constant(dense<0.000000e+00> : vector<8xbf16>) : vector<8xbf16> loc(#loc)
    %1316 = llvm.call @"__triton_hip_predicated_load_vector<8xbf16>_!llvm.ptr<1>_i1_vector<8xbf16>_"(%1282, %1314, %1315) : (!llvm.ptr<1>, i1, vector<8xbf16>) -> vector<8xbf16> loc(#loc)
    %1317 = llvm.mlir.constant(0 : index) : i32 loc(#loc)
    %1318 = llvm.extractelement %1316[%1317 : i32] : vector<8xbf16> loc(#loc)
    %1319 = llvm.mlir.constant(1 : index) : i32 loc(#loc)
    %1320 = llvm.extractelement %1316[%1319 : i32] : vector<8xbf16> loc(#loc)
    %1321 = llvm.mlir.constant(2 : index) : i32 loc(#loc)
    %1322 = llvm.extractelement %1316[%1321 : i32] : vector<8xbf16> loc(#loc)
    %1323 = llvm.mlir.constant(3 : index) : i32 loc(#loc)
    %1324 = llvm.extractelement %1316[%1323 : i32] : vector<8xbf16> loc(#loc)
    %1325 = llvm.mlir.constant(4 : index) : i32 loc(#loc)
    %1326 = llvm.extractelement %1316[%1325 : i32] : vector<8xbf16> loc(#loc)
    %1327 = llvm.mlir.constant(5 : index) : i32 loc(#loc)
    %1328 = llvm.extractelement %1316[%1327 : i32] : vector<8xbf16> loc(#loc)
    %1329 = llvm.mlir.constant(6 : index) : i32 loc(#loc)
    %1330 = llvm.extractelement %1316[%1329 : i32] : vector<8xbf16> loc(#loc)
    %1331 = llvm.mlir.constant(7 : index) : i32 loc(#loc)
    %1332 = llvm.extractelement %1316[%1331 : i32] : vector<8xbf16> loc(#loc)
    %1333 = llvm.mlir.constant(true) : i1 loc(#loc)
    %1334 = llvm.mlir.constant(dense<0.000000e+00> : vector<8xbf16>) : vector<8xbf16> loc(#loc)
    %1335 = llvm.call @"__triton_hip_predicated_load_vector<8xbf16>_!llvm.ptr<1>_i1_vector<8xbf16>_"(%1290, %1333, %1334) : (!llvm.ptr<1>, i1, vector<8xbf16>) -> vector<8xbf16> loc(#loc)
    %1336 = llvm.mlir.constant(0 : index) : i32 loc(#loc)
    %1337 = llvm.extractelement %1335[%1336 : i32] : vector<8xbf16> loc(#loc)
    %1338 = llvm.mlir.constant(1 : index) : i32 loc(#loc)
    %1339 = llvm.extractelement %1335[%1338 : i32] : vector<8xbf16> loc(#loc)
    %1340 = llvm.mlir.constant(2 : index) : i32 loc(#loc)
    %1341 = llvm.extractelement %1335[%1340 : i32] : vector<8xbf16> loc(#loc)
    %1342 = llvm.mlir.constant(3 : index) : i32 loc(#loc)
    %1343 = llvm.extractelement %1335[%1342 : i32] : vector<8xbf16> loc(#loc)
    %1344 = llvm.mlir.constant(4 : index) : i32 loc(#loc)
    %1345 = llvm.extractelement %1335[%1344 : i32] : vector<8xbf16> loc(#loc)
    %1346 = llvm.mlir.constant(5 : index) : i32 loc(#loc)
    %1347 = llvm.extractelement %1335[%1346 : i32] : vector<8xbf16> loc(#loc)
    %1348 = llvm.mlir.constant(6 : index) : i32 loc(#loc)
    %1349 = llvm.extractelement %1335[%1348 : i32] : vector<8xbf16> loc(#loc)
    %1350 = llvm.mlir.constant(7 : index) : i32 loc(#loc)
    %1351 = llvm.extractelement %1335[%1350 : i32] : vector<8xbf16> loc(#loc)
    %1352 = llvm.mlir.constant(true) : i1 loc(#loc)
    %1353 = llvm.mlir.constant(dense<0.000000e+00> : vector<8xbf16>) : vector<8xbf16> loc(#loc)
    %1354 = llvm.call @"__triton_hip_predicated_load_vector<8xbf16>_!llvm.ptr<1>_i1_vector<8xbf16>_"(%1298, %1352, %1353) : (!llvm.ptr<1>, i1, vector<8xbf16>) -> vector<8xbf16> loc(#loc)
    %1355 = llvm.mlir.constant(0 : index) : i32 loc(#loc)
    %1356 = llvm.extractelement %1354[%1355 : i32] : vector<8xbf16> loc(#loc)
    %1357 = llvm.mlir.constant(1 : index) : i32 loc(#loc)
    %1358 = llvm.extractelement %1354[%1357 : i32] : vector<8xbf16> loc(#loc)
    %1359 = llvm.mlir.constant(2 : index) : i32 loc(#loc)
    %1360 = llvm.extractelement %1354[%1359 : i32] : vector<8xbf16> loc(#loc)
    %1361 = llvm.mlir.constant(3 : index) : i32 loc(#loc)
    %1362 = llvm.extractelement %1354[%1361 : i32] : vector<8xbf16> loc(#loc)
    %1363 = llvm.mlir.constant(4 : index) : i32 loc(#loc)
    %1364 = llvm.extractelement %1354[%1363 : i32] : vector<8xbf16> loc(#loc)
    %1365 = llvm.mlir.constant(5 : index) : i32 loc(#loc)
    %1366 = llvm.extractelement %1354[%1365 : i32] : vector<8xbf16> loc(#loc)
    %1367 = llvm.mlir.constant(6 : index) : i32 loc(#loc)
    %1368 = llvm.extractelement %1354[%1367 : i32] : vector<8xbf16> loc(#loc)
    %1369 = llvm.mlir.constant(7 : index) : i32 loc(#loc)
    %1370 = llvm.extractelement %1354[%1369 : i32] : vector<8xbf16> loc(#loc)
    %1371 = llvm.mlir.constant(true) : i1 loc(#loc)
    %1372 = llvm.mlir.constant(dense<0.000000e+00> : vector<8xbf16>) : vector<8xbf16> loc(#loc)
    %1373 = llvm.call @"__triton_hip_predicated_load_vector<8xbf16>_!llvm.ptr<1>_i1_vector<8xbf16>_"(%1306, %1371, %1372) : (!llvm.ptr<1>, i1, vector<8xbf16>) -> vector<8xbf16> loc(#loc)
    %1374 = llvm.mlir.constant(0 : index) : i32 loc(#loc)
    %1375 = llvm.extractelement %1373[%1374 : i32] : vector<8xbf16> loc(#loc)
    %1376 = llvm.mlir.constant(1 : index) : i32 loc(#loc)
    %1377 = llvm.extractelement %1373[%1376 : i32] : vector<8xbf16> loc(#loc)
    %1378 = llvm.mlir.constant(2 : index) : i32 loc(#loc)
    %1379 = llvm.extractelement %1373[%1378 : i32] : vector<8xbf16> loc(#loc)
    %1380 = llvm.mlir.constant(3 : index) : i32 loc(#loc)
    %1381 = llvm.extractelement %1373[%1380 : i32] : vector<8xbf16> loc(#loc)
    %1382 = llvm.mlir.constant(4 : index) : i32 loc(#loc)
    %1383 = llvm.extractelement %1373[%1382 : i32] : vector<8xbf16> loc(#loc)
    %1384 = llvm.mlir.constant(5 : index) : i32 loc(#loc)
    %1385 = llvm.extractelement %1373[%1384 : i32] : vector<8xbf16> loc(#loc)
    %1386 = llvm.mlir.constant(6 : index) : i32 loc(#loc)
    %1387 = llvm.extractelement %1373[%1386 : i32] : vector<8xbf16> loc(#loc)
    %1388 = llvm.mlir.constant(7 : index) : i32 loc(#loc)
    %1389 = llvm.extractelement %1373[%1388 : i32] : vector<8xbf16> loc(#loc)
    %1390 = llvm.mlir.undef : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)> loc(#loc)
    %1391 = llvm.insertvalue %1318, %1390[0] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1392 = llvm.insertvalue %1320, %1391[1] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1393 = llvm.insertvalue %1322, %1392[2] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1394 = llvm.insertvalue %1324, %1393[3] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1395 = llvm.insertvalue %1326, %1394[4] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1396 = llvm.insertvalue %1328, %1395[5] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1397 = llvm.insertvalue %1330, %1396[6] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1398 = llvm.insertvalue %1332, %1397[7] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1399 = llvm.insertvalue %1337, %1398[8] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1400 = llvm.insertvalue %1339, %1399[9] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1401 = llvm.insertvalue %1341, %1400[10] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1402 = llvm.insertvalue %1343, %1401[11] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1403 = llvm.insertvalue %1345, %1402[12] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1404 = llvm.insertvalue %1347, %1403[13] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1405 = llvm.insertvalue %1349, %1404[14] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1406 = llvm.insertvalue %1351, %1405[15] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1407 = llvm.insertvalue %1356, %1406[16] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1408 = llvm.insertvalue %1358, %1407[17] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1409 = llvm.insertvalue %1360, %1408[18] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1410 = llvm.insertvalue %1362, %1409[19] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1411 = llvm.insertvalue %1364, %1410[20] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1412 = llvm.insertvalue %1366, %1411[21] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1413 = llvm.insertvalue %1368, %1412[22] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1414 = llvm.insertvalue %1370, %1413[23] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1415 = llvm.insertvalue %1375, %1414[24] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1416 = llvm.insertvalue %1377, %1415[25] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1417 = llvm.insertvalue %1379, %1416[26] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1418 = llvm.insertvalue %1381, %1417[27] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1419 = llvm.insertvalue %1383, %1418[28] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1420 = llvm.insertvalue %1385, %1419[29] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1421 = llvm.insertvalue %1387, %1420[30] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1422 = llvm.insertvalue %1389, %1421[31] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1423 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %1424 = llvm.mlir.addressof @global_smem : !llvm.ptr<3> loc(#loc)
    %1425 = llvm.getelementptr %1424[%1423] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %1426 = llvm.extractvalue %1422[0] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1427 = llvm.extractvalue %1422[1] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1428 = llvm.extractvalue %1422[2] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1429 = llvm.extractvalue %1422[3] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1430 = llvm.extractvalue %1422[4] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1431 = llvm.extractvalue %1422[5] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1432 = llvm.extractvalue %1422[6] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1433 = llvm.extractvalue %1422[7] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1434 = llvm.extractvalue %1422[8] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1435 = llvm.extractvalue %1422[9] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1436 = llvm.extractvalue %1422[10] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1437 = llvm.extractvalue %1422[11] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1438 = llvm.extractvalue %1422[12] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1439 = llvm.extractvalue %1422[13] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1440 = llvm.extractvalue %1422[14] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1441 = llvm.extractvalue %1422[15] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1442 = llvm.extractvalue %1422[16] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1443 = llvm.extractvalue %1422[17] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1444 = llvm.extractvalue %1422[18] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1445 = llvm.extractvalue %1422[19] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1446 = llvm.extractvalue %1422[20] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1447 = llvm.extractvalue %1422[21] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1448 = llvm.extractvalue %1422[22] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1449 = llvm.extractvalue %1422[23] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1450 = llvm.extractvalue %1422[24] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1451 = llvm.extractvalue %1422[25] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1452 = llvm.extractvalue %1422[26] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1453 = llvm.extractvalue %1422[27] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1454 = llvm.extractvalue %1422[28] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1455 = llvm.extractvalue %1422[29] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1456 = llvm.extractvalue %1422[30] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1457 = llvm.extractvalue %1422[31] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1458 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %1459 = rocdl.workitem.id.x : i32 loc(#loc)
    %1460 = llvm.mlir.constant(255 : i32) : i32 loc(#loc)
    %1461 = llvm.and %1459, %1460 : i32 loc(#loc)
    %1462 = llvm.mlir.constant(64 : i32) : i32 loc(#loc)
    %1463 = llvm.urem %1461, %1462 : i32 loc(#loc)
    %1464 = llvm.udiv %1461, %1462 : i32 loc(#loc)
    %1465 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %1466 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %1467 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %1468 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %1469 = llvm.shl %1463, %1468 : i32 loc(#loc)
    %1470 = llvm.or %1467, %1469 : i32 loc(#loc)
    %1471 = llvm.mlir.constant(6 : i32) : i32 loc(#loc)
    %1472 = llvm.shl %1464, %1471 : i32 loc(#loc)
    %1473 = llvm.or %1470, %1472 : i32 loc(#loc)
    %1474 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %1475 = llvm.mlir.constant(206 : i32) : i32 loc(#loc)
    %1476 = llvm.and %1473, %1475 : i32 loc(#loc)
    %1477 = llvm.mlir.constant(3 : i32) : i32 loc(#loc)
    %1478 = llvm.shl %1476, %1477 : i32 loc(#loc)
    %1479 = llvm.xor %1474, %1478 : i32 loc(#loc)
    %1480 = llvm.mlir.constant(192 : i32) : i32 loc(#loc)
    %1481 = llvm.and %1473, %1480 : i32 loc(#loc)
    %1482 = llvm.mlir.constant(2 : i32) : i32 loc(#loc)
    %1483 = llvm.lshr %1481, %1482 : i32 loc(#loc)
    %1484 = llvm.xor %1479, %1483 : i32 loc(#loc)
    %1485 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %1486 = llvm.mlir.constant(1 : i32) : i32 loc(#loc)
    %1487 = llvm.and %1473, %1486 : i32 loc(#loc)
    %1488 = llvm.icmp "eq" %1487, %1485 : i32 loc(#loc)
    %1489 = llvm.mlir.constant(4096 : i32) : i32 loc(#loc)
    %1490 = llvm.select %1488, %1485, %1489 : i1, i32 loc(#loc)
    %1491 = llvm.xor %1484, %1490 : i32 loc(#loc)
    %1492 = llvm.mlir.constant(16 : i32) : i32 loc(#loc)
    %1493 = llvm.and %1473, %1492 : i32 loc(#loc)
    %1494 = llvm.icmp "eq" %1493, %1485 : i32 loc(#loc)
    %1495 = llvm.mlir.constant(256 : i32) : i32 loc(#loc)
    %1496 = llvm.select %1494, %1485, %1495 : i1, i32 loc(#loc)
    %1497 = llvm.xor %1491, %1496 : i32 loc(#loc)
    %1498 = llvm.mlir.constant(32 : i32) : i32 loc(#loc)
    %1499 = llvm.and %1473, %1498 : i32 loc(#loc)
    %1500 = llvm.icmp "eq" %1499, %1485 : i32 loc(#loc)
    %1501 = llvm.mlir.constant(8192 : i32) : i32 loc(#loc)
    %1502 = llvm.select %1500, %1485, %1501 : i1, i32 loc(#loc)
    %1503 = llvm.xor %1497, %1502 : i32 loc(#loc)
    %1504 = llvm.xor %1466, %1503 : i32 loc(#loc)
    %1505 = llvm.mlir.constant(2 : i32) : i32 loc(#loc)
    %1506 = llvm.mul %1458, %1505 : i32 loc(#loc)
    %1507 = llvm.xor %1504, %1506 : i32 loc(#loc)
    %1508 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %1509 = llvm.xor %1507, %1508 : i32 loc(#loc)
    %1510 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %1511 = llvm.add %1509, %1510 : i32 loc(#loc)
    %1512 = llvm.getelementptr inbounds %1425[%1511] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %1513 = llvm.mlir.undef : vector<8xbf16> loc(#loc)
    %1514 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %1515 = llvm.insertelement %1426, %1513[%1514 : i32] : vector<8xbf16> loc(#loc)
    %1516 = llvm.mlir.constant(1 : i32) : i32 loc(#loc)
    %1517 = llvm.insertelement %1427, %1515[%1516 : i32] : vector<8xbf16> loc(#loc)
    %1518 = llvm.mlir.constant(2 : i32) : i32 loc(#loc)
    %1519 = llvm.insertelement %1428, %1517[%1518 : i32] : vector<8xbf16> loc(#loc)
    %1520 = llvm.mlir.constant(3 : i32) : i32 loc(#loc)
    %1521 = llvm.insertelement %1429, %1519[%1520 : i32] : vector<8xbf16> loc(#loc)
    %1522 = llvm.mlir.constant(4 : i32) : i32 loc(#loc)
    %1523 = llvm.insertelement %1430, %1521[%1522 : i32] : vector<8xbf16> loc(#loc)
    %1524 = llvm.mlir.constant(5 : i32) : i32 loc(#loc)
    %1525 = llvm.insertelement %1431, %1523[%1524 : i32] : vector<8xbf16> loc(#loc)
    %1526 = llvm.mlir.constant(6 : i32) : i32 loc(#loc)
    %1527 = llvm.insertelement %1432, %1525[%1526 : i32] : vector<8xbf16> loc(#loc)
    %1528 = llvm.mlir.constant(7 : i32) : i32 loc(#loc)
    %1529 = llvm.insertelement %1433, %1527[%1528 : i32] : vector<8xbf16> loc(#loc)
    %1530 = llvm.mlir.constant(true) : i1 loc(#loc)
    llvm.call @"__triton_hip_predicated_store_!llvm.void_!llvm.ptr<3>_vector<8xbf16>_i1_"(%1512, %1529, %1530) : (!llvm.ptr<3>, vector<8xbf16>, i1) -> () loc(#loc)
    %1531 = llvm.mlir.constant(128 : i32) : i32 loc(#loc)
    %1532 = llvm.add %1509, %1531 : i32 loc(#loc)
    %1533 = llvm.getelementptr inbounds %1425[%1532] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %1534 = llvm.mlir.undef : vector<8xbf16> loc(#loc)
    %1535 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %1536 = llvm.insertelement %1442, %1534[%1535 : i32] : vector<8xbf16> loc(#loc)
    %1537 = llvm.mlir.constant(1 : i32) : i32 loc(#loc)
    %1538 = llvm.insertelement %1443, %1536[%1537 : i32] : vector<8xbf16> loc(#loc)
    %1539 = llvm.mlir.constant(2 : i32) : i32 loc(#loc)
    %1540 = llvm.insertelement %1444, %1538[%1539 : i32] : vector<8xbf16> loc(#loc)
    %1541 = llvm.mlir.constant(3 : i32) : i32 loc(#loc)
    %1542 = llvm.insertelement %1445, %1540[%1541 : i32] : vector<8xbf16> loc(#loc)
    %1543 = llvm.mlir.constant(4 : i32) : i32 loc(#loc)
    %1544 = llvm.insertelement %1446, %1542[%1543 : i32] : vector<8xbf16> loc(#loc)
    %1545 = llvm.mlir.constant(5 : i32) : i32 loc(#loc)
    %1546 = llvm.insertelement %1447, %1544[%1545 : i32] : vector<8xbf16> loc(#loc)
    %1547 = llvm.mlir.constant(6 : i32) : i32 loc(#loc)
    %1548 = llvm.insertelement %1448, %1546[%1547 : i32] : vector<8xbf16> loc(#loc)
    %1549 = llvm.mlir.constant(7 : i32) : i32 loc(#loc)
    %1550 = llvm.insertelement %1449, %1548[%1549 : i32] : vector<8xbf16> loc(#loc)
    %1551 = llvm.mlir.constant(true) : i1 loc(#loc)
    llvm.call @"__triton_hip_predicated_store_!llvm.void_!llvm.ptr<3>_vector<8xbf16>_i1_"(%1533, %1550, %1551) : (!llvm.ptr<3>, vector<8xbf16>, i1) -> () loc(#loc)
    %1552 = llvm.mlir.constant(2112 : i32) : i32 loc(#loc)
    %1553 = llvm.xor %1507, %1552 : i32 loc(#loc)
    %1554 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %1555 = llvm.add %1553, %1554 : i32 loc(#loc)
    %1556 = llvm.getelementptr inbounds %1425[%1555] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %1557 = llvm.mlir.undef : vector<8xbf16> loc(#loc)
    %1558 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %1559 = llvm.insertelement %1434, %1557[%1558 : i32] : vector<8xbf16> loc(#loc)
    %1560 = llvm.mlir.constant(1 : i32) : i32 loc(#loc)
    %1561 = llvm.insertelement %1435, %1559[%1560 : i32] : vector<8xbf16> loc(#loc)
    %1562 = llvm.mlir.constant(2 : i32) : i32 loc(#loc)
    %1563 = llvm.insertelement %1436, %1561[%1562 : i32] : vector<8xbf16> loc(#loc)
    %1564 = llvm.mlir.constant(3 : i32) : i32 loc(#loc)
    %1565 = llvm.insertelement %1437, %1563[%1564 : i32] : vector<8xbf16> loc(#loc)
    %1566 = llvm.mlir.constant(4 : i32) : i32 loc(#loc)
    %1567 = llvm.insertelement %1438, %1565[%1566 : i32] : vector<8xbf16> loc(#loc)
    %1568 = llvm.mlir.constant(5 : i32) : i32 loc(#loc)
    %1569 = llvm.insertelement %1439, %1567[%1568 : i32] : vector<8xbf16> loc(#loc)
    %1570 = llvm.mlir.constant(6 : i32) : i32 loc(#loc)
    %1571 = llvm.insertelement %1440, %1569[%1570 : i32] : vector<8xbf16> loc(#loc)
    %1572 = llvm.mlir.constant(7 : i32) : i32 loc(#loc)
    %1573 = llvm.insertelement %1441, %1571[%1572 : i32] : vector<8xbf16> loc(#loc)
    %1574 = llvm.mlir.constant(true) : i1 loc(#loc)
    llvm.call @"__triton_hip_predicated_store_!llvm.void_!llvm.ptr<3>_vector<8xbf16>_i1_"(%1556, %1573, %1574) : (!llvm.ptr<3>, vector<8xbf16>, i1) -> () loc(#loc)
    %1575 = llvm.mlir.constant(128 : i32) : i32 loc(#loc)
    %1576 = llvm.add %1553, %1575 : i32 loc(#loc)
    %1577 = llvm.getelementptr inbounds %1425[%1576] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %1578 = llvm.mlir.undef : vector<8xbf16> loc(#loc)
    %1579 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %1580 = llvm.insertelement %1450, %1578[%1579 : i32] : vector<8xbf16> loc(#loc)
    %1581 = llvm.mlir.constant(1 : i32) : i32 loc(#loc)
    %1582 = llvm.insertelement %1451, %1580[%1581 : i32] : vector<8xbf16> loc(#loc)
    %1583 = llvm.mlir.constant(2 : i32) : i32 loc(#loc)
    %1584 = llvm.insertelement %1452, %1582[%1583 : i32] : vector<8xbf16> loc(#loc)
    %1585 = llvm.mlir.constant(3 : i32) : i32 loc(#loc)
    %1586 = llvm.insertelement %1453, %1584[%1585 : i32] : vector<8xbf16> loc(#loc)
    %1587 = llvm.mlir.constant(4 : i32) : i32 loc(#loc)
    %1588 = llvm.insertelement %1454, %1586[%1587 : i32] : vector<8xbf16> loc(#loc)
    %1589 = llvm.mlir.constant(5 : i32) : i32 loc(#loc)
    %1590 = llvm.insertelement %1455, %1588[%1589 : i32] : vector<8xbf16> loc(#loc)
    %1591 = llvm.mlir.constant(6 : i32) : i32 loc(#loc)
    %1592 = llvm.insertelement %1456, %1590[%1591 : i32] : vector<8xbf16> loc(#loc)
    %1593 = llvm.mlir.constant(7 : i32) : i32 loc(#loc)
    %1594 = llvm.insertelement %1457, %1592[%1593 : i32] : vector<8xbf16> loc(#loc)
    %1595 = llvm.mlir.constant(true) : i1 loc(#loc)
    llvm.call @"__triton_hip_predicated_store_!llvm.void_!llvm.ptr<3>_vector<8xbf16>_i1_"(%1577, %1594, %1595) : (!llvm.ptr<3>, vector<8xbf16>, i1) -> () loc(#loc)
    rocdl.barrier loc(#loc)
    %1596 = rocdl.workitem.id.x : i32 loc(#loc)
    %1597 = llvm.mlir.constant(255 : i32) : i32 loc(#loc)
    %1598 = llvm.and %1596, %1597 : i32 loc(#loc)
    %1599 = llvm.mlir.constant(64 : i32) : i32 loc(#loc)
    %1600 = llvm.urem %1598, %1599 : i32 loc(#loc)
    %1601 = llvm.udiv %1598, %1599 : i32 loc(#loc)
    %1602 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %1603 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %1604 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %1605 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %1606 = llvm.shl %1600, %1605 : i32 loc(#loc)
    %1607 = llvm.or %1604, %1606 : i32 loc(#loc)
    %1608 = llvm.mlir.constant(6 : i32) : i32 loc(#loc)
    %1609 = llvm.shl %1601, %1608 : i32 loc(#loc)
    %1610 = llvm.or %1607, %1609 : i32 loc(#loc)
    %1611 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %1612 = llvm.mlir.constant(30 : i32) : i32 loc(#loc)
    %1613 = llvm.and %1610, %1612 : i32 loc(#loc)
    %1614 = llvm.mlir.constant(8 : i32) : i32 loc(#loc)
    %1615 = llvm.shl %1613, %1614 : i32 loc(#loc)
    %1616 = llvm.xor %1611, %1615 : i32 loc(#loc)
    %1617 = llvm.mlir.constant(14 : i32) : i32 loc(#loc)
    %1618 = llvm.and %1610, %1617 : i32 loc(#loc)
    %1619 = llvm.mlir.constant(3 : i32) : i32 loc(#loc)
    %1620 = llvm.shl %1618, %1619 : i32 loc(#loc)
    %1621 = llvm.xor %1616, %1620 : i32 loc(#loc)
    %1622 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %1623 = llvm.mlir.constant(1 : i32) : i32 loc(#loc)
    %1624 = llvm.and %1610, %1623 : i32 loc(#loc)
    %1625 = llvm.icmp "eq" %1624, %1622 : i32 loc(#loc)
    %1626 = llvm.mlir.constant(8192 : i32) : i32 loc(#loc)
    %1627 = llvm.select %1625, %1622, %1626 : i1, i32 loc(#loc)
    %1628 = llvm.xor %1621, %1627 : i32 loc(#loc)
    %1629 = llvm.mlir.constant(32 : i32) : i32 loc(#loc)
    %1630 = llvm.and %1610, %1629 : i32 loc(#loc)
    %1631 = llvm.icmp "eq" %1630, %1622 : i32 loc(#loc)
    %1632 = llvm.mlir.constant(16 : i32) : i32 loc(#loc)
    %1633 = llvm.select %1631, %1622, %1632 : i1, i32 loc(#loc)
    %1634 = llvm.xor %1628, %1633 : i32 loc(#loc)
    %1635 = llvm.mlir.constant(128 : i32) : i32 loc(#loc)
    %1636 = llvm.and %1610, %1635 : i32 loc(#loc)
    %1637 = llvm.icmp "eq" %1636, %1622 : i32 loc(#loc)
    %1638 = llvm.mlir.constant(128 : i32) : i32 loc(#loc)
    %1639 = llvm.select %1637, %1622, %1638 : i1, i32 loc(#loc)
    %1640 = llvm.xor %1634, %1639 : i32 loc(#loc)
    %1641 = llvm.xor %1603, %1640 : i32 loc(#loc)
    %1642 = llvm.mlir.constant(2 : i32) : i32 loc(#loc)
    %1643 = llvm.mul %1458, %1642 : i32 loc(#loc)
    %1644 = llvm.xor %1641, %1643 : i32 loc(#loc)
    %1645 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %1646 = llvm.xor %1644, %1645 : i32 loc(#loc)
    %1647 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %1648 = llvm.add %1646, %1647 : i32 loc(#loc)
    %1649 = llvm.getelementptr inbounds %1425[%1648] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %1650 = llvm.mlir.constant(true) : i1 loc(#loc)
    %1651 = llvm.mlir.constant(dense<0.000000e+00> : vector<8xbf16>) : vector<8xbf16> loc(#loc)
    %1652 = llvm.call @"__triton_hip_predicated_load_vector<8xbf16>_!llvm.ptr<3>_i1_vector<8xbf16>_"(%1649, %1650, %1651) : (!llvm.ptr<3>, i1, vector<8xbf16>) -> vector<8xbf16> loc(#loc)
    %1653 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %1654 = llvm.extractelement %1652[%1653 : i32] : vector<8xbf16> loc(#loc)
    %1655 = llvm.mlir.constant(1 : i32) : i32 loc(#loc)
    %1656 = llvm.extractelement %1652[%1655 : i32] : vector<8xbf16> loc(#loc)
    %1657 = llvm.mlir.constant(2 : i32) : i32 loc(#loc)
    %1658 = llvm.extractelement %1652[%1657 : i32] : vector<8xbf16> loc(#loc)
    %1659 = llvm.mlir.constant(3 : i32) : i32 loc(#loc)
    %1660 = llvm.extractelement %1652[%1659 : i32] : vector<8xbf16> loc(#loc)
    %1661 = llvm.mlir.constant(4 : i32) : i32 loc(#loc)
    %1662 = llvm.extractelement %1652[%1661 : i32] : vector<8xbf16> loc(#loc)
    %1663 = llvm.mlir.constant(5 : i32) : i32 loc(#loc)
    %1664 = llvm.extractelement %1652[%1663 : i32] : vector<8xbf16> loc(#loc)
    %1665 = llvm.mlir.constant(6 : i32) : i32 loc(#loc)
    %1666 = llvm.extractelement %1652[%1665 : i32] : vector<8xbf16> loc(#loc)
    %1667 = llvm.mlir.constant(7 : i32) : i32 loc(#loc)
    %1668 = llvm.extractelement %1652[%1667 : i32] : vector<8xbf16> loc(#loc)
    %1669 = llvm.mlir.constant(256 : i32) : i32 loc(#loc)
    %1670 = llvm.add %1646, %1669 : i32 loc(#loc)
    %1671 = llvm.getelementptr inbounds %1425[%1670] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %1672 = llvm.mlir.constant(true) : i1 loc(#loc)
    %1673 = llvm.mlir.constant(dense<0.000000e+00> : vector<8xbf16>) : vector<8xbf16> loc(#loc)
    %1674 = llvm.call @"__triton_hip_predicated_load_vector<8xbf16>_!llvm.ptr<3>_i1_vector<8xbf16>_"(%1671, %1672, %1673) : (!llvm.ptr<3>, i1, vector<8xbf16>) -> vector<8xbf16> loc(#loc)
    %1675 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %1676 = llvm.extractelement %1674[%1675 : i32] : vector<8xbf16> loc(#loc)
    %1677 = llvm.mlir.constant(1 : i32) : i32 loc(#loc)
    %1678 = llvm.extractelement %1674[%1677 : i32] : vector<8xbf16> loc(#loc)
    %1679 = llvm.mlir.constant(2 : i32) : i32 loc(#loc)
    %1680 = llvm.extractelement %1674[%1679 : i32] : vector<8xbf16> loc(#loc)
    %1681 = llvm.mlir.constant(3 : i32) : i32 loc(#loc)
    %1682 = llvm.extractelement %1674[%1681 : i32] : vector<8xbf16> loc(#loc)
    %1683 = llvm.mlir.constant(4 : i32) : i32 loc(#loc)
    %1684 = llvm.extractelement %1674[%1683 : i32] : vector<8xbf16> loc(#loc)
    %1685 = llvm.mlir.constant(5 : i32) : i32 loc(#loc)
    %1686 = llvm.extractelement %1674[%1685 : i32] : vector<8xbf16> loc(#loc)
    %1687 = llvm.mlir.constant(6 : i32) : i32 loc(#loc)
    %1688 = llvm.extractelement %1674[%1687 : i32] : vector<8xbf16> loc(#loc)
    %1689 = llvm.mlir.constant(7 : i32) : i32 loc(#loc)
    %1690 = llvm.extractelement %1674[%1689 : i32] : vector<8xbf16> loc(#loc)
    %1691 = llvm.mlir.constant(32 : i32) : i32 loc(#loc)
    %1692 = llvm.xor %1644, %1691 : i32 loc(#loc)
    %1693 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %1694 = llvm.add %1692, %1693 : i32 loc(#loc)
    %1695 = llvm.getelementptr inbounds %1425[%1694] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %1696 = llvm.mlir.constant(true) : i1 loc(#loc)
    %1697 = llvm.mlir.constant(dense<0.000000e+00> : vector<8xbf16>) : vector<8xbf16> loc(#loc)
    %1698 = llvm.call @"__triton_hip_predicated_load_vector<8xbf16>_!llvm.ptr<3>_i1_vector<8xbf16>_"(%1695, %1696, %1697) : (!llvm.ptr<3>, i1, vector<8xbf16>) -> vector<8xbf16> loc(#loc)
    %1699 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %1700 = llvm.extractelement %1698[%1699 : i32] : vector<8xbf16> loc(#loc)
    %1701 = llvm.mlir.constant(1 : i32) : i32 loc(#loc)
    %1702 = llvm.extractelement %1698[%1701 : i32] : vector<8xbf16> loc(#loc)
    %1703 = llvm.mlir.constant(2 : i32) : i32 loc(#loc)
    %1704 = llvm.extractelement %1698[%1703 : i32] : vector<8xbf16> loc(#loc)
    %1705 = llvm.mlir.constant(3 : i32) : i32 loc(#loc)
    %1706 = llvm.extractelement %1698[%1705 : i32] : vector<8xbf16> loc(#loc)
    %1707 = llvm.mlir.constant(4 : i32) : i32 loc(#loc)
    %1708 = llvm.extractelement %1698[%1707 : i32] : vector<8xbf16> loc(#loc)
    %1709 = llvm.mlir.constant(5 : i32) : i32 loc(#loc)
    %1710 = llvm.extractelement %1698[%1709 : i32] : vector<8xbf16> loc(#loc)
    %1711 = llvm.mlir.constant(6 : i32) : i32 loc(#loc)
    %1712 = llvm.extractelement %1698[%1711 : i32] : vector<8xbf16> loc(#loc)
    %1713 = llvm.mlir.constant(7 : i32) : i32 loc(#loc)
    %1714 = llvm.extractelement %1698[%1713 : i32] : vector<8xbf16> loc(#loc)
    %1715 = llvm.mlir.constant(256 : i32) : i32 loc(#loc)
    %1716 = llvm.add %1692, %1715 : i32 loc(#loc)
    %1717 = llvm.getelementptr inbounds %1425[%1716] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %1718 = llvm.mlir.constant(true) : i1 loc(#loc)
    %1719 = llvm.mlir.constant(dense<0.000000e+00> : vector<8xbf16>) : vector<8xbf16> loc(#loc)
    %1720 = llvm.call @"__triton_hip_predicated_load_vector<8xbf16>_!llvm.ptr<3>_i1_vector<8xbf16>_"(%1717, %1718, %1719) : (!llvm.ptr<3>, i1, vector<8xbf16>) -> vector<8xbf16> loc(#loc)
    %1721 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %1722 = llvm.extractelement %1720[%1721 : i32] : vector<8xbf16> loc(#loc)
    %1723 = llvm.mlir.constant(1 : i32) : i32 loc(#loc)
    %1724 = llvm.extractelement %1720[%1723 : i32] : vector<8xbf16> loc(#loc)
    %1725 = llvm.mlir.constant(2 : i32) : i32 loc(#loc)
    %1726 = llvm.extractelement %1720[%1725 : i32] : vector<8xbf16> loc(#loc)
    %1727 = llvm.mlir.constant(3 : i32) : i32 loc(#loc)
    %1728 = llvm.extractelement %1720[%1727 : i32] : vector<8xbf16> loc(#loc)
    %1729 = llvm.mlir.constant(4 : i32) : i32 loc(#loc)
    %1730 = llvm.extractelement %1720[%1729 : i32] : vector<8xbf16> loc(#loc)
    %1731 = llvm.mlir.constant(5 : i32) : i32 loc(#loc)
    %1732 = llvm.extractelement %1720[%1731 : i32] : vector<8xbf16> loc(#loc)
    %1733 = llvm.mlir.constant(6 : i32) : i32 loc(#loc)
    %1734 = llvm.extractelement %1720[%1733 : i32] : vector<8xbf16> loc(#loc)
    %1735 = llvm.mlir.constant(7 : i32) : i32 loc(#loc)
    %1736 = llvm.extractelement %1720[%1735 : i32] : vector<8xbf16> loc(#loc)
    %1737 = llvm.mlir.constant(64 : i32) : i32 loc(#loc)
    %1738 = llvm.xor %1644, %1737 : i32 loc(#loc)
    %1739 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %1740 = llvm.add %1738, %1739 : i32 loc(#loc)
    %1741 = llvm.getelementptr inbounds %1425[%1740] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %1742 = llvm.mlir.constant(true) : i1 loc(#loc)
    %1743 = llvm.mlir.constant(dense<0.000000e+00> : vector<8xbf16>) : vector<8xbf16> loc(#loc)
    %1744 = llvm.call @"__triton_hip_predicated_load_vector<8xbf16>_!llvm.ptr<3>_i1_vector<8xbf16>_"(%1741, %1742, %1743) : (!llvm.ptr<3>, i1, vector<8xbf16>) -> vector<8xbf16> loc(#loc)
    %1745 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %1746 = llvm.extractelement %1744[%1745 : i32] : vector<8xbf16> loc(#loc)
    %1747 = llvm.mlir.constant(1 : i32) : i32 loc(#loc)
    %1748 = llvm.extractelement %1744[%1747 : i32] : vector<8xbf16> loc(#loc)
    %1749 = llvm.mlir.constant(2 : i32) : i32 loc(#loc)
    %1750 = llvm.extractelement %1744[%1749 : i32] : vector<8xbf16> loc(#loc)
    %1751 = llvm.mlir.constant(3 : i32) : i32 loc(#loc)
    %1752 = llvm.extractelement %1744[%1751 : i32] : vector<8xbf16> loc(#loc)
    %1753 = llvm.mlir.constant(4 : i32) : i32 loc(#loc)
    %1754 = llvm.extractelement %1744[%1753 : i32] : vector<8xbf16> loc(#loc)
    %1755 = llvm.mlir.constant(5 : i32) : i32 loc(#loc)
    %1756 = llvm.extractelement %1744[%1755 : i32] : vector<8xbf16> loc(#loc)
    %1757 = llvm.mlir.constant(6 : i32) : i32 loc(#loc)
    %1758 = llvm.extractelement %1744[%1757 : i32] : vector<8xbf16> loc(#loc)
    %1759 = llvm.mlir.constant(7 : i32) : i32 loc(#loc)
    %1760 = llvm.extractelement %1744[%1759 : i32] : vector<8xbf16> loc(#loc)
    %1761 = llvm.mlir.constant(256 : i32) : i32 loc(#loc)
    %1762 = llvm.add %1738, %1761 : i32 loc(#loc)
    %1763 = llvm.getelementptr inbounds %1425[%1762] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %1764 = llvm.mlir.constant(true) : i1 loc(#loc)
    %1765 = llvm.mlir.constant(dense<0.000000e+00> : vector<8xbf16>) : vector<8xbf16> loc(#loc)
    %1766 = llvm.call @"__triton_hip_predicated_load_vector<8xbf16>_!llvm.ptr<3>_i1_vector<8xbf16>_"(%1763, %1764, %1765) : (!llvm.ptr<3>, i1, vector<8xbf16>) -> vector<8xbf16> loc(#loc)
    %1767 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %1768 = llvm.extractelement %1766[%1767 : i32] : vector<8xbf16> loc(#loc)
    %1769 = llvm.mlir.constant(1 : i32) : i32 loc(#loc)
    %1770 = llvm.extractelement %1766[%1769 : i32] : vector<8xbf16> loc(#loc)
    %1771 = llvm.mlir.constant(2 : i32) : i32 loc(#loc)
    %1772 = llvm.extractelement %1766[%1771 : i32] : vector<8xbf16> loc(#loc)
    %1773 = llvm.mlir.constant(3 : i32) : i32 loc(#loc)
    %1774 = llvm.extractelement %1766[%1773 : i32] : vector<8xbf16> loc(#loc)
    %1775 = llvm.mlir.constant(4 : i32) : i32 loc(#loc)
    %1776 = llvm.extractelement %1766[%1775 : i32] : vector<8xbf16> loc(#loc)
    %1777 = llvm.mlir.constant(5 : i32) : i32 loc(#loc)
    %1778 = llvm.extractelement %1766[%1777 : i32] : vector<8xbf16> loc(#loc)
    %1779 = llvm.mlir.constant(6 : i32) : i32 loc(#loc)
    %1780 = llvm.extractelement %1766[%1779 : i32] : vector<8xbf16> loc(#loc)
    %1781 = llvm.mlir.constant(7 : i32) : i32 loc(#loc)
    %1782 = llvm.extractelement %1766[%1781 : i32] : vector<8xbf16> loc(#loc)
    %1783 = llvm.mlir.constant(96 : i32) : i32 loc(#loc)
    %1784 = llvm.xor %1644, %1783 : i32 loc(#loc)
    %1785 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %1786 = llvm.add %1784, %1785 : i32 loc(#loc)
    %1787 = llvm.getelementptr inbounds %1425[%1786] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %1788 = llvm.mlir.constant(true) : i1 loc(#loc)
    %1789 = llvm.mlir.constant(dense<0.000000e+00> : vector<8xbf16>) : vector<8xbf16> loc(#loc)
    %1790 = llvm.call @"__triton_hip_predicated_load_vector<8xbf16>_!llvm.ptr<3>_i1_vector<8xbf16>_"(%1787, %1788, %1789) : (!llvm.ptr<3>, i1, vector<8xbf16>) -> vector<8xbf16> loc(#loc)
    %1791 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %1792 = llvm.extractelement %1790[%1791 : i32] : vector<8xbf16> loc(#loc)
    %1793 = llvm.mlir.constant(1 : i32) : i32 loc(#loc)
    %1794 = llvm.extractelement %1790[%1793 : i32] : vector<8xbf16> loc(#loc)
    %1795 = llvm.mlir.constant(2 : i32) : i32 loc(#loc)
    %1796 = llvm.extractelement %1790[%1795 : i32] : vector<8xbf16> loc(#loc)
    %1797 = llvm.mlir.constant(3 : i32) : i32 loc(#loc)
    %1798 = llvm.extractelement %1790[%1797 : i32] : vector<8xbf16> loc(#loc)
    %1799 = llvm.mlir.constant(4 : i32) : i32 loc(#loc)
    %1800 = llvm.extractelement %1790[%1799 : i32] : vector<8xbf16> loc(#loc)
    %1801 = llvm.mlir.constant(5 : i32) : i32 loc(#loc)
    %1802 = llvm.extractelement %1790[%1801 : i32] : vector<8xbf16> loc(#loc)
    %1803 = llvm.mlir.constant(6 : i32) : i32 loc(#loc)
    %1804 = llvm.extractelement %1790[%1803 : i32] : vector<8xbf16> loc(#loc)
    %1805 = llvm.mlir.constant(7 : i32) : i32 loc(#loc)
    %1806 = llvm.extractelement %1790[%1805 : i32] : vector<8xbf16> loc(#loc)
    %1807 = llvm.mlir.constant(256 : i32) : i32 loc(#loc)
    %1808 = llvm.add %1784, %1807 : i32 loc(#loc)
    %1809 = llvm.getelementptr inbounds %1425[%1808] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %1810 = llvm.mlir.constant(true) : i1 loc(#loc)
    %1811 = llvm.mlir.constant(dense<0.000000e+00> : vector<8xbf16>) : vector<8xbf16> loc(#loc)
    %1812 = llvm.call @"__triton_hip_predicated_load_vector<8xbf16>_!llvm.ptr<3>_i1_vector<8xbf16>_"(%1809, %1810, %1811) : (!llvm.ptr<3>, i1, vector<8xbf16>) -> vector<8xbf16> loc(#loc)
    %1813 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %1814 = llvm.extractelement %1812[%1813 : i32] : vector<8xbf16> loc(#loc)
    %1815 = llvm.mlir.constant(1 : i32) : i32 loc(#loc)
    %1816 = llvm.extractelement %1812[%1815 : i32] : vector<8xbf16> loc(#loc)
    %1817 = llvm.mlir.constant(2 : i32) : i32 loc(#loc)
    %1818 = llvm.extractelement %1812[%1817 : i32] : vector<8xbf16> loc(#loc)
    %1819 = llvm.mlir.constant(3 : i32) : i32 loc(#loc)
    %1820 = llvm.extractelement %1812[%1819 : i32] : vector<8xbf16> loc(#loc)
    %1821 = llvm.mlir.constant(4 : i32) : i32 loc(#loc)
    %1822 = llvm.extractelement %1812[%1821 : i32] : vector<8xbf16> loc(#loc)
    %1823 = llvm.mlir.constant(5 : i32) : i32 loc(#loc)
    %1824 = llvm.extractelement %1812[%1823 : i32] : vector<8xbf16> loc(#loc)
    %1825 = llvm.mlir.constant(6 : i32) : i32 loc(#loc)
    %1826 = llvm.extractelement %1812[%1825 : i32] : vector<8xbf16> loc(#loc)
    %1827 = llvm.mlir.constant(7 : i32) : i32 loc(#loc)
    %1828 = llvm.extractelement %1812[%1827 : i32] : vector<8xbf16> loc(#loc)
    %1829 = llvm.mlir.undef : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)> loc(#loc)
    %1830 = llvm.insertvalue %1654, %1829[0] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1831 = llvm.insertvalue %1676, %1830[1] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1832 = llvm.insertvalue %1656, %1831[2] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1833 = llvm.insertvalue %1678, %1832[3] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1834 = llvm.insertvalue %1658, %1833[4] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1835 = llvm.insertvalue %1680, %1834[5] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1836 = llvm.insertvalue %1660, %1835[6] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1837 = llvm.insertvalue %1682, %1836[7] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1838 = llvm.insertvalue %1662, %1837[8] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1839 = llvm.insertvalue %1684, %1838[9] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1840 = llvm.insertvalue %1664, %1839[10] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1841 = llvm.insertvalue %1686, %1840[11] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1842 = llvm.insertvalue %1666, %1841[12] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1843 = llvm.insertvalue %1688, %1842[13] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1844 = llvm.insertvalue %1668, %1843[14] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1845 = llvm.insertvalue %1690, %1844[15] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1846 = llvm.insertvalue %1700, %1845[16] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1847 = llvm.insertvalue %1722, %1846[17] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1848 = llvm.insertvalue %1702, %1847[18] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1849 = llvm.insertvalue %1724, %1848[19] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1850 = llvm.insertvalue %1704, %1849[20] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1851 = llvm.insertvalue %1726, %1850[21] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1852 = llvm.insertvalue %1706, %1851[22] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1853 = llvm.insertvalue %1728, %1852[23] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1854 = llvm.insertvalue %1708, %1853[24] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1855 = llvm.insertvalue %1730, %1854[25] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1856 = llvm.insertvalue %1710, %1855[26] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1857 = llvm.insertvalue %1732, %1856[27] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1858 = llvm.insertvalue %1712, %1857[28] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1859 = llvm.insertvalue %1734, %1858[29] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1860 = llvm.insertvalue %1714, %1859[30] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1861 = llvm.insertvalue %1736, %1860[31] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1862 = llvm.insertvalue %1746, %1861[32] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1863 = llvm.insertvalue %1768, %1862[33] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1864 = llvm.insertvalue %1748, %1863[34] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1865 = llvm.insertvalue %1770, %1864[35] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1866 = llvm.insertvalue %1750, %1865[36] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1867 = llvm.insertvalue %1772, %1866[37] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1868 = llvm.insertvalue %1752, %1867[38] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1869 = llvm.insertvalue %1774, %1868[39] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1870 = llvm.insertvalue %1754, %1869[40] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1871 = llvm.insertvalue %1776, %1870[41] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1872 = llvm.insertvalue %1756, %1871[42] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1873 = llvm.insertvalue %1778, %1872[43] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1874 = llvm.insertvalue %1758, %1873[44] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1875 = llvm.insertvalue %1780, %1874[45] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1876 = llvm.insertvalue %1760, %1875[46] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1877 = llvm.insertvalue %1782, %1876[47] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1878 = llvm.insertvalue %1792, %1877[48] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1879 = llvm.insertvalue %1814, %1878[49] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1880 = llvm.insertvalue %1794, %1879[50] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1881 = llvm.insertvalue %1816, %1880[51] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1882 = llvm.insertvalue %1796, %1881[52] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1883 = llvm.insertvalue %1818, %1882[53] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1884 = llvm.insertvalue %1798, %1883[54] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1885 = llvm.insertvalue %1820, %1884[55] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1886 = llvm.insertvalue %1800, %1885[56] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1887 = llvm.insertvalue %1822, %1886[57] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1888 = llvm.insertvalue %1802, %1887[58] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1889 = llvm.insertvalue %1824, %1888[59] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1890 = llvm.insertvalue %1804, %1889[60] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1891 = llvm.insertvalue %1826, %1890[61] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1892 = llvm.insertvalue %1806, %1891[62] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1893 = llvm.insertvalue %1828, %1892[63] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1894 = llvm.extractvalue %1893[0] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1895 = llvm.extractvalue %1893[1] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1896 = llvm.extractvalue %1893[2] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1897 = llvm.extractvalue %1893[3] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1898 = llvm.extractvalue %1893[4] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1899 = llvm.extractvalue %1893[5] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1900 = llvm.extractvalue %1893[6] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1901 = llvm.extractvalue %1893[7] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1902 = llvm.extractvalue %1893[8] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1903 = llvm.extractvalue %1893[9] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1904 = llvm.extractvalue %1893[10] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1905 = llvm.extractvalue %1893[11] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1906 = llvm.extractvalue %1893[12] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1907 = llvm.extractvalue %1893[13] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1908 = llvm.extractvalue %1893[14] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1909 = llvm.extractvalue %1893[15] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1910 = llvm.extractvalue %1893[16] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1911 = llvm.extractvalue %1893[17] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1912 = llvm.extractvalue %1893[18] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1913 = llvm.extractvalue %1893[19] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1914 = llvm.extractvalue %1893[20] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1915 = llvm.extractvalue %1893[21] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1916 = llvm.extractvalue %1893[22] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1917 = llvm.extractvalue %1893[23] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1918 = llvm.extractvalue %1893[24] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1919 = llvm.extractvalue %1893[25] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1920 = llvm.extractvalue %1893[26] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1921 = llvm.extractvalue %1893[27] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1922 = llvm.extractvalue %1893[28] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1923 = llvm.extractvalue %1893[29] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1924 = llvm.extractvalue %1893[30] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1925 = llvm.extractvalue %1893[31] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1926 = llvm.extractvalue %1893[32] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1927 = llvm.extractvalue %1893[33] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1928 = llvm.extractvalue %1893[34] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1929 = llvm.extractvalue %1893[35] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1930 = llvm.extractvalue %1893[36] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1931 = llvm.extractvalue %1893[37] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1932 = llvm.extractvalue %1893[38] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1933 = llvm.extractvalue %1893[39] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1934 = llvm.extractvalue %1893[40] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1935 = llvm.extractvalue %1893[41] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1936 = llvm.extractvalue %1893[42] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1937 = llvm.extractvalue %1893[43] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1938 = llvm.extractvalue %1893[44] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1939 = llvm.extractvalue %1893[45] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1940 = llvm.extractvalue %1893[46] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1941 = llvm.extractvalue %1893[47] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1942 = llvm.extractvalue %1893[48] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1943 = llvm.extractvalue %1893[49] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1944 = llvm.extractvalue %1893[50] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1945 = llvm.extractvalue %1893[51] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1946 = llvm.extractvalue %1893[52] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1947 = llvm.extractvalue %1893[53] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1948 = llvm.extractvalue %1893[54] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1949 = llvm.extractvalue %1893[55] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1950 = llvm.extractvalue %1893[56] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1951 = llvm.extractvalue %1893[57] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1952 = llvm.extractvalue %1893[58] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1953 = llvm.extractvalue %1893[59] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1954 = llvm.extractvalue %1893[60] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1955 = llvm.extractvalue %1893[61] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1956 = llvm.extractvalue %1893[62] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1957 = llvm.extractvalue %1893[63] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1958 = llvm.mlir.undef : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)> loc(#loc)
    %1959 = llvm.insertvalue %1894, %1958[0] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1960 = llvm.insertvalue %1895, %1959[1] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1961 = llvm.insertvalue %1896, %1960[2] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1962 = llvm.insertvalue %1897, %1961[3] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1963 = llvm.insertvalue %1898, %1962[4] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1964 = llvm.insertvalue %1899, %1963[5] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1965 = llvm.insertvalue %1900, %1964[6] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1966 = llvm.insertvalue %1901, %1965[7] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1967 = llvm.insertvalue %1902, %1966[8] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1968 = llvm.insertvalue %1903, %1967[9] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1969 = llvm.insertvalue %1904, %1968[10] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1970 = llvm.insertvalue %1905, %1969[11] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1971 = llvm.insertvalue %1906, %1970[12] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1972 = llvm.insertvalue %1907, %1971[13] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1973 = llvm.insertvalue %1908, %1972[14] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1974 = llvm.insertvalue %1909, %1973[15] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1975 = llvm.insertvalue %1910, %1974[16] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1976 = llvm.insertvalue %1911, %1975[17] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1977 = llvm.insertvalue %1912, %1976[18] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1978 = llvm.insertvalue %1913, %1977[19] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1979 = llvm.insertvalue %1914, %1978[20] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1980 = llvm.insertvalue %1915, %1979[21] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1981 = llvm.insertvalue %1916, %1980[22] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1982 = llvm.insertvalue %1917, %1981[23] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1983 = llvm.insertvalue %1918, %1982[24] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1984 = llvm.insertvalue %1919, %1983[25] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1985 = llvm.insertvalue %1920, %1984[26] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1986 = llvm.insertvalue %1921, %1985[27] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1987 = llvm.insertvalue %1922, %1986[28] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1988 = llvm.insertvalue %1923, %1987[29] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1989 = llvm.insertvalue %1924, %1988[30] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1990 = llvm.insertvalue %1925, %1989[31] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1991 = llvm.insertvalue %1926, %1990[32] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1992 = llvm.insertvalue %1927, %1991[33] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1993 = llvm.insertvalue %1928, %1992[34] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1994 = llvm.insertvalue %1929, %1993[35] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1995 = llvm.insertvalue %1930, %1994[36] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1996 = llvm.insertvalue %1931, %1995[37] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1997 = llvm.insertvalue %1932, %1996[38] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1998 = llvm.insertvalue %1933, %1997[39] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %1999 = llvm.insertvalue %1934, %1998[40] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %2000 = llvm.insertvalue %1935, %1999[41] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %2001 = llvm.insertvalue %1936, %2000[42] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %2002 = llvm.insertvalue %1937, %2001[43] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %2003 = llvm.insertvalue %1938, %2002[44] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %2004 = llvm.insertvalue %1939, %2003[45] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %2005 = llvm.insertvalue %1940, %2004[46] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %2006 = llvm.insertvalue %1941, %2005[47] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %2007 = llvm.insertvalue %1942, %2006[48] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %2008 = llvm.insertvalue %1943, %2007[49] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %2009 = llvm.insertvalue %1944, %2008[50] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %2010 = llvm.insertvalue %1945, %2009[51] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %2011 = llvm.insertvalue %1946, %2010[52] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %2012 = llvm.insertvalue %1947, %2011[53] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %2013 = llvm.insertvalue %1948, %2012[54] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %2014 = llvm.insertvalue %1949, %2013[55] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %2015 = llvm.insertvalue %1950, %2014[56] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %2016 = llvm.insertvalue %1951, %2015[57] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %2017 = llvm.insertvalue %1952, %2016[58] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %2018 = llvm.insertvalue %1953, %2017[59] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %2019 = llvm.insertvalue %1954, %2018[60] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %2020 = llvm.insertvalue %1955, %2019[61] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %2021 = llvm.insertvalue %1956, %2020[62] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %2022 = llvm.insertvalue %1957, %2021[63] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %2023 = llvm.extractvalue %2022[0] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %2024 = llvm.extractvalue %2022[1] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %2025 = llvm.extractvalue %2022[2] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %2026 = llvm.extractvalue %2022[3] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %2027 = llvm.extractvalue %2022[4] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %2028 = llvm.extractvalue %2022[5] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %2029 = llvm.extractvalue %2022[6] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %2030 = llvm.extractvalue %2022[7] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %2031 = llvm.extractvalue %2022[8] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %2032 = llvm.extractvalue %2022[9] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %2033 = llvm.extractvalue %2022[10] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %2034 = llvm.extractvalue %2022[11] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %2035 = llvm.extractvalue %2022[12] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %2036 = llvm.extractvalue %2022[13] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %2037 = llvm.extractvalue %2022[14] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %2038 = llvm.extractvalue %2022[15] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %2039 = llvm.extractvalue %2022[16] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %2040 = llvm.extractvalue %2022[17] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %2041 = llvm.extractvalue %2022[18] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %2042 = llvm.extractvalue %2022[19] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %2043 = llvm.extractvalue %2022[20] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %2044 = llvm.extractvalue %2022[21] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %2045 = llvm.extractvalue %2022[22] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %2046 = llvm.extractvalue %2022[23] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %2047 = llvm.extractvalue %2022[24] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %2048 = llvm.extractvalue %2022[25] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %2049 = llvm.extractvalue %2022[26] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %2050 = llvm.extractvalue %2022[27] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %2051 = llvm.extractvalue %2022[28] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %2052 = llvm.extractvalue %2022[29] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %2053 = llvm.extractvalue %2022[30] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %2054 = llvm.extractvalue %2022[31] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %2055 = llvm.extractvalue %2022[32] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %2056 = llvm.extractvalue %2022[33] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %2057 = llvm.extractvalue %2022[34] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %2058 = llvm.extractvalue %2022[35] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %2059 = llvm.extractvalue %2022[36] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %2060 = llvm.extractvalue %2022[37] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %2061 = llvm.extractvalue %2022[38] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %2062 = llvm.extractvalue %2022[39] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %2063 = llvm.extractvalue %2022[40] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %2064 = llvm.extractvalue %2022[41] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %2065 = llvm.extractvalue %2022[42] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %2066 = llvm.extractvalue %2022[43] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %2067 = llvm.extractvalue %2022[44] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %2068 = llvm.extractvalue %2022[45] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %2069 = llvm.extractvalue %2022[46] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %2070 = llvm.extractvalue %2022[47] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %2071 = llvm.extractvalue %2022[48] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %2072 = llvm.extractvalue %2022[49] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %2073 = llvm.extractvalue %2022[50] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %2074 = llvm.extractvalue %2022[51] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %2075 = llvm.extractvalue %2022[52] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %2076 = llvm.extractvalue %2022[53] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %2077 = llvm.extractvalue %2022[54] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %2078 = llvm.extractvalue %2022[55] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %2079 = llvm.extractvalue %2022[56] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %2080 = llvm.extractvalue %2022[57] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %2081 = llvm.extractvalue %2022[58] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %2082 = llvm.extractvalue %2022[59] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %2083 = llvm.extractvalue %2022[60] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %2084 = llvm.extractvalue %2022[61] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %2085 = llvm.extractvalue %2022[62] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %2086 = llvm.extractvalue %2022[63] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %2087 = llvm.mlir.undef : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)> loc(#loc)
    %2088 = llvm.insertvalue %2023, %2087[0] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %2089 = llvm.insertvalue %2025, %2088[1] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %2090 = llvm.insertvalue %2027, %2089[2] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %2091 = llvm.insertvalue %2029, %2090[3] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %2092 = llvm.insertvalue %2031, %2091[4] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %2093 = llvm.insertvalue %2033, %2092[5] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %2094 = llvm.insertvalue %2035, %2093[6] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %2095 = llvm.insertvalue %2037, %2094[7] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %2096 = llvm.insertvalue %2039, %2095[8] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %2097 = llvm.insertvalue %2041, %2096[9] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %2098 = llvm.insertvalue %2043, %2097[10] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %2099 = llvm.insertvalue %2045, %2098[11] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %2100 = llvm.insertvalue %2047, %2099[12] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %2101 = llvm.insertvalue %2049, %2100[13] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %2102 = llvm.insertvalue %2051, %2101[14] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %2103 = llvm.insertvalue %2053, %2102[15] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %2104 = llvm.insertvalue %2055, %2103[16] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %2105 = llvm.insertvalue %2057, %2104[17] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %2106 = llvm.insertvalue %2059, %2105[18] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %2107 = llvm.insertvalue %2061, %2106[19] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %2108 = llvm.insertvalue %2063, %2107[20] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %2109 = llvm.insertvalue %2065, %2108[21] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %2110 = llvm.insertvalue %2067, %2109[22] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %2111 = llvm.insertvalue %2069, %2110[23] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %2112 = llvm.insertvalue %2071, %2111[24] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %2113 = llvm.insertvalue %2073, %2112[25] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %2114 = llvm.insertvalue %2075, %2113[26] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %2115 = llvm.insertvalue %2077, %2114[27] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %2116 = llvm.insertvalue %2079, %2115[28] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %2117 = llvm.insertvalue %2081, %2116[29] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %2118 = llvm.insertvalue %2083, %2117[30] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %2119 = llvm.insertvalue %2085, %2118[31] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %2120 = llvm.mlir.undef : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)> loc(#loc)
    %2121 = llvm.insertvalue %2024, %2120[0] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %2122 = llvm.insertvalue %2026, %2121[1] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %2123 = llvm.insertvalue %2028, %2122[2] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %2124 = llvm.insertvalue %2030, %2123[3] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %2125 = llvm.insertvalue %2032, %2124[4] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %2126 = llvm.insertvalue %2034, %2125[5] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %2127 = llvm.insertvalue %2036, %2126[6] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %2128 = llvm.insertvalue %2038, %2127[7] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %2129 = llvm.insertvalue %2040, %2128[8] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %2130 = llvm.insertvalue %2042, %2129[9] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %2131 = llvm.insertvalue %2044, %2130[10] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %2132 = llvm.insertvalue %2046, %2131[11] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %2133 = llvm.insertvalue %2048, %2132[12] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %2134 = llvm.insertvalue %2050, %2133[13] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %2135 = llvm.insertvalue %2052, %2134[14] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %2136 = llvm.insertvalue %2054, %2135[15] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %2137 = llvm.insertvalue %2056, %2136[16] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %2138 = llvm.insertvalue %2058, %2137[17] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %2139 = llvm.insertvalue %2060, %2138[18] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %2140 = llvm.insertvalue %2062, %2139[19] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %2141 = llvm.insertvalue %2064, %2140[20] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %2142 = llvm.insertvalue %2066, %2141[21] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %2143 = llvm.insertvalue %2068, %2142[22] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %2144 = llvm.insertvalue %2070, %2143[23] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %2145 = llvm.insertvalue %2072, %2144[24] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %2146 = llvm.insertvalue %2074, %2145[25] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %2147 = llvm.insertvalue %2076, %2146[26] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %2148 = llvm.insertvalue %2078, %2147[27] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %2149 = llvm.insertvalue %2080, %2148[28] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %2150 = llvm.insertvalue %2082, %2149[29] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %2151 = llvm.insertvalue %2084, %2150[30] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %2152 = llvm.insertvalue %2086, %2151[31] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %2153 = llvm.bitcast %b_base : !llvm.ptr<1> to !llvm.ptr<1> loc(#loc)
    %2154 = llvm.mlir.undef : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc)
    %2155 = llvm.insertvalue %2153, %2154[0] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %2156 = llvm.insertvalue %2153, %2155[1] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %2157 = llvm.insertvalue %2153, %2156[2] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %2158 = llvm.insertvalue %2153, %2157[3] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %2159 = llvm.insertvalue %2153, %2158[4] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %2160 = llvm.insertvalue %2153, %2159[5] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %2161 = llvm.insertvalue %2153, %2160[6] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %2162 = llvm.insertvalue %2153, %2161[7] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %2163 = llvm.insertvalue %2153, %2162[8] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %2164 = llvm.insertvalue %2153, %2163[9] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %2165 = llvm.insertvalue %2153, %2164[10] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %2166 = llvm.insertvalue %2153, %2165[11] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %2167 = llvm.insertvalue %2153, %2166[12] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %2168 = llvm.insertvalue %2153, %2167[13] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %2169 = llvm.insertvalue %2153, %2168[14] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %2170 = llvm.insertvalue %2153, %2169[15] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %2171 = llvm.extractvalue %2170[0] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %2172 = llvm.extractvalue %2170[1] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %2173 = llvm.extractvalue %2170[2] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %2174 = llvm.extractvalue %2170[3] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %2175 = llvm.extractvalue %2170[4] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %2176 = llvm.extractvalue %2170[5] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %2177 = llvm.extractvalue %2170[6] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %2178 = llvm.extractvalue %2170[7] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %2179 = llvm.extractvalue %2170[8] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %2180 = llvm.extractvalue %2170[9] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %2181 = llvm.extractvalue %2170[10] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %2182 = llvm.extractvalue %2170[11] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %2183 = llvm.extractvalue %2170[12] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %2184 = llvm.extractvalue %2170[13] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %2185 = llvm.extractvalue %2170[14] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %2186 = llvm.extractvalue %2170[15] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %2187 = llvm.extractvalue %1118[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %2188 = llvm.extractvalue %1118[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %2189 = llvm.extractvalue %1118[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %2190 = llvm.extractvalue %1118[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %2191 = llvm.extractvalue %1118[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %2192 = llvm.extractvalue %1118[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %2193 = llvm.extractvalue %1118[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %2194 = llvm.extractvalue %1118[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %2195 = llvm.extractvalue %1118[8] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %2196 = llvm.extractvalue %1118[9] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %2197 = llvm.extractvalue %1118[10] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %2198 = llvm.extractvalue %1118[11] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %2199 = llvm.extractvalue %1118[12] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %2200 = llvm.extractvalue %1118[13] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %2201 = llvm.extractvalue %1118[14] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %2202 = llvm.extractvalue %1118[15] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc)
    %2203 = llvm.getelementptr %2171[%2187] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, i8 loc(#loc)
    %2204 = llvm.getelementptr %2172[%2188] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, i8 loc(#loc)
    %2205 = llvm.getelementptr %2173[%2189] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, i8 loc(#loc)
    %2206 = llvm.getelementptr %2174[%2190] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, i8 loc(#loc)
    %2207 = llvm.getelementptr %2175[%2191] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, i8 loc(#loc)
    %2208 = llvm.getelementptr %2176[%2192] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, i8 loc(#loc)
    %2209 = llvm.getelementptr %2177[%2193] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, i8 loc(#loc)
    %2210 = llvm.getelementptr %2178[%2194] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, i8 loc(#loc)
    %2211 = llvm.getelementptr %2179[%2195] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, i8 loc(#loc)
    %2212 = llvm.getelementptr %2180[%2196] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, i8 loc(#loc)
    %2213 = llvm.getelementptr %2181[%2197] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, i8 loc(#loc)
    %2214 = llvm.getelementptr %2182[%2198] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, i8 loc(#loc)
    %2215 = llvm.getelementptr %2183[%2199] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, i8 loc(#loc)
    %2216 = llvm.getelementptr %2184[%2200] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, i8 loc(#loc)
    %2217 = llvm.getelementptr %2185[%2201] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, i8 loc(#loc)
    %2218 = llvm.getelementptr %2186[%2202] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, i8 loc(#loc)
    %2219 = llvm.mlir.undef : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)> loc(#loc)
    %2220 = llvm.insertvalue %2203, %2219[0] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %2221 = llvm.insertvalue %2204, %2220[1] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %2222 = llvm.insertvalue %2205, %2221[2] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %2223 = llvm.insertvalue %2206, %2222[3] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %2224 = llvm.insertvalue %2207, %2223[4] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %2225 = llvm.insertvalue %2208, %2224[5] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %2226 = llvm.insertvalue %2209, %2225[6] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %2227 = llvm.insertvalue %2210, %2226[7] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %2228 = llvm.insertvalue %2211, %2227[8] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %2229 = llvm.insertvalue %2212, %2228[9] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %2230 = llvm.insertvalue %2213, %2229[10] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %2231 = llvm.insertvalue %2214, %2230[11] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %2232 = llvm.insertvalue %2215, %2231[12] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %2233 = llvm.insertvalue %2216, %2232[13] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %2234 = llvm.insertvalue %2217, %2233[14] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %2235 = llvm.insertvalue %2218, %2234[15] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %2236 = llvm.extractvalue %2235[0] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %2237 = llvm.extractvalue %2235[1] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %2238 = llvm.extractvalue %2235[2] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %2239 = llvm.extractvalue %2235[3] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %2240 = llvm.extractvalue %2235[4] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %2241 = llvm.extractvalue %2235[5] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %2242 = llvm.extractvalue %2235[6] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %2243 = llvm.extractvalue %2235[7] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %2244 = llvm.extractvalue %2235[8] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %2245 = llvm.extractvalue %2235[9] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %2246 = llvm.extractvalue %2235[10] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %2247 = llvm.extractvalue %2235[11] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %2248 = llvm.extractvalue %2235[12] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %2249 = llvm.extractvalue %2235[13] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %2250 = llvm.extractvalue %2235[14] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %2251 = llvm.extractvalue %2235[15] : !llvm.struct<(ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>, ptr<1>)>  loc(#loc)
    %2252 = llvm.mlir.constant(true) : i1 loc(#loc)
    %2253 = llvm.mlir.constant(dense<0> : vector<16xi8>) : vector<16xi8> loc(#loc)
    %2254 = llvm.call @"__triton_hip_predicated_load_vector<16xi8>_!llvm.ptr<1>_i1_vector<16xi8>_"(%2236, %2252, %2253) : (!llvm.ptr<1>, i1, vector<16xi8>) -> vector<16xi8> loc(#loc)
    %2255 = llvm.mlir.constant(0 : index) : i32 loc(#loc)
    %2256 = llvm.extractelement %2254[%2255 : i32] : vector<16xi8> loc(#loc)
    %2257 = llvm.mlir.constant(1 : index) : i32 loc(#loc)
    %2258 = llvm.extractelement %2254[%2257 : i32] : vector<16xi8> loc(#loc)
    %2259 = llvm.mlir.constant(2 : index) : i32 loc(#loc)
    %2260 = llvm.extractelement %2254[%2259 : i32] : vector<16xi8> loc(#loc)
    %2261 = llvm.mlir.constant(3 : index) : i32 loc(#loc)
    %2262 = llvm.extractelement %2254[%2261 : i32] : vector<16xi8> loc(#loc)
    %2263 = llvm.mlir.constant(4 : index) : i32 loc(#loc)
    %2264 = llvm.extractelement %2254[%2263 : i32] : vector<16xi8> loc(#loc)
    %2265 = llvm.mlir.constant(5 : index) : i32 loc(#loc)
    %2266 = llvm.extractelement %2254[%2265 : i32] : vector<16xi8> loc(#loc)
    %2267 = llvm.mlir.constant(6 : index) : i32 loc(#loc)
    %2268 = llvm.extractelement %2254[%2267 : i32] : vector<16xi8> loc(#loc)
    %2269 = llvm.mlir.constant(7 : index) : i32 loc(#loc)
    %2270 = llvm.extractelement %2254[%2269 : i32] : vector<16xi8> loc(#loc)
    %2271 = llvm.mlir.constant(8 : index) : i32 loc(#loc)
    %2272 = llvm.extractelement %2254[%2271 : i32] : vector<16xi8> loc(#loc)
    %2273 = llvm.mlir.constant(9 : index) : i32 loc(#loc)
    %2274 = llvm.extractelement %2254[%2273 : i32] : vector<16xi8> loc(#loc)
    %2275 = llvm.mlir.constant(10 : index) : i32 loc(#loc)
    %2276 = llvm.extractelement %2254[%2275 : i32] : vector<16xi8> loc(#loc)
    %2277 = llvm.mlir.constant(11 : index) : i32 loc(#loc)
    %2278 = llvm.extractelement %2254[%2277 : i32] : vector<16xi8> loc(#loc)
    %2279 = llvm.mlir.constant(12 : index) : i32 loc(#loc)
    %2280 = llvm.extractelement %2254[%2279 : i32] : vector<16xi8> loc(#loc)
    %2281 = llvm.mlir.constant(13 : index) : i32 loc(#loc)
    %2282 = llvm.extractelement %2254[%2281 : i32] : vector<16xi8> loc(#loc)
    %2283 = llvm.mlir.constant(14 : index) : i32 loc(#loc)
    %2284 = llvm.extractelement %2254[%2283 : i32] : vector<16xi8> loc(#loc)
    %2285 = llvm.mlir.constant(15 : index) : i32 loc(#loc)
    %2286 = llvm.extractelement %2254[%2285 : i32] : vector<16xi8> loc(#loc)
    %2287 = llvm.mlir.undef : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)> loc(#loc)
    %2288 = llvm.insertvalue %2256, %2287[0] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2289 = llvm.insertvalue %2258, %2288[1] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2290 = llvm.insertvalue %2260, %2289[2] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2291 = llvm.insertvalue %2262, %2290[3] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2292 = llvm.insertvalue %2264, %2291[4] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2293 = llvm.insertvalue %2266, %2292[5] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2294 = llvm.insertvalue %2268, %2293[6] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2295 = llvm.insertvalue %2270, %2294[7] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2296 = llvm.insertvalue %2272, %2295[8] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2297 = llvm.insertvalue %2274, %2296[9] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2298 = llvm.insertvalue %2276, %2297[10] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2299 = llvm.insertvalue %2278, %2298[11] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2300 = llvm.insertvalue %2280, %2299[12] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2301 = llvm.insertvalue %2282, %2300[13] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2302 = llvm.insertvalue %2284, %2301[14] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2303 = llvm.insertvalue %2286, %2302[15] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    rocdl.barrier loc(#loc)
    %2304 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %2305 = llvm.mlir.addressof @global_smem : !llvm.ptr<3> loc(#loc)
    %2306 = llvm.getelementptr %2305[%2304] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %2307 = llvm.extractvalue %2303[0] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2308 = llvm.extractvalue %2303[1] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2309 = llvm.extractvalue %2303[2] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2310 = llvm.extractvalue %2303[3] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2311 = llvm.extractvalue %2303[4] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2312 = llvm.extractvalue %2303[5] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2313 = llvm.extractvalue %2303[6] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2314 = llvm.extractvalue %2303[7] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2315 = llvm.extractvalue %2303[8] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2316 = llvm.extractvalue %2303[9] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2317 = llvm.extractvalue %2303[10] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2318 = llvm.extractvalue %2303[11] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2319 = llvm.extractvalue %2303[12] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2320 = llvm.extractvalue %2303[13] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2321 = llvm.extractvalue %2303[14] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2322 = llvm.extractvalue %2303[15] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2323 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %2324 = rocdl.workitem.id.x : i32 loc(#loc)
    %2325 = llvm.mlir.constant(255 : i32) : i32 loc(#loc)
    %2326 = llvm.and %2324, %2325 : i32 loc(#loc)
    %2327 = llvm.mlir.constant(64 : i32) : i32 loc(#loc)
    %2328 = llvm.urem %2326, %2327 : i32 loc(#loc)
    %2329 = llvm.udiv %2326, %2327 : i32 loc(#loc)
    %2330 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %2331 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %2332 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %2333 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %2334 = llvm.shl %2328, %2333 : i32 loc(#loc)
    %2335 = llvm.or %2332, %2334 : i32 loc(#loc)
    %2336 = llvm.mlir.constant(6 : i32) : i32 loc(#loc)
    %2337 = llvm.shl %2329, %2336 : i32 loc(#loc)
    %2338 = llvm.or %2335, %2337 : i32 loc(#loc)
    %2339 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %2340 = llvm.mlir.constant(248 : i32) : i32 loc(#loc)
    %2341 = llvm.and %2338, %2340 : i32 loc(#loc)
    %2342 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %2343 = llvm.lshr %2341, %2342 : i32 loc(#loc)
    %2344 = llvm.xor %2339, %2343 : i32 loc(#loc)
    %2345 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %2346 = llvm.mlir.constant(1 : i32) : i32 loc(#loc)
    %2347 = llvm.and %2338, %2346 : i32 loc(#loc)
    %2348 = llvm.icmp "eq" %2347, %2345 : i32 loc(#loc)
    %2349 = llvm.mlir.constant(1024 : i32) : i32 loc(#loc)
    %2350 = llvm.select %2348, %2345, %2349 : i1, i32 loc(#loc)
    %2351 = llvm.xor %2344, %2350 : i32 loc(#loc)
    %2352 = llvm.mlir.constant(2 : i32) : i32 loc(#loc)
    %2353 = llvm.and %2338, %2352 : i32 loc(#loc)
    %2354 = llvm.icmp "eq" %2353, %2345 : i32 loc(#loc)
    %2355 = llvm.mlir.constant(4 : i32) : i32 loc(#loc)
    %2356 = llvm.select %2354, %2345, %2355 : i1, i32 loc(#loc)
    %2357 = llvm.xor %2351, %2356 : i32 loc(#loc)
    %2358 = llvm.mlir.constant(4 : i32) : i32 loc(#loc)
    %2359 = llvm.and %2338, %2358 : i32 loc(#loc)
    %2360 = llvm.icmp "eq" %2359, %2345 : i32 loc(#loc)
    %2361 = llvm.mlir.constant(576 : i32) : i32 loc(#loc)
    %2362 = llvm.select %2360, %2345, %2361 : i1, i32 loc(#loc)
    %2363 = llvm.xor %2357, %2362 : i32 loc(#loc)
    %2364 = llvm.xor %2331, %2363 : i32 loc(#loc)
    %2365 = llvm.mlir.constant(1 : i32) : i32 loc(#loc)
    %2366 = llvm.mul %2323, %2365 : i32 loc(#loc)
    %2367 = llvm.xor %2364, %2366 : i32 loc(#loc)
    %2368 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %2369 = llvm.xor %2367, %2368 : i32 loc(#loc)
    %2370 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %2371 = llvm.add %2369, %2370 : i32 loc(#loc)
    %2372 = llvm.getelementptr inbounds %2306[%2371] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %2373 = llvm.mlir.undef : vector<4xi8> loc(#loc)
    %2374 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %2375 = llvm.insertelement %2307, %2373[%2374 : i32] : vector<4xi8> loc(#loc)
    %2376 = llvm.mlir.constant(1 : i32) : i32 loc(#loc)
    %2377 = llvm.insertelement %2308, %2375[%2376 : i32] : vector<4xi8> loc(#loc)
    %2378 = llvm.mlir.constant(2 : i32) : i32 loc(#loc)
    %2379 = llvm.insertelement %2309, %2377[%2378 : i32] : vector<4xi8> loc(#loc)
    %2380 = llvm.mlir.constant(3 : i32) : i32 loc(#loc)
    %2381 = llvm.insertelement %2310, %2379[%2380 : i32] : vector<4xi8> loc(#loc)
    %2382 = llvm.mlir.constant(true) : i1 loc(#loc)
    llvm.call @"__triton_hip_predicated_store_!llvm.void_!llvm.ptr<3>_vector<4xi8>_i1_"(%2372, %2381, %2382) : (!llvm.ptr<3>, vector<4xi8>, i1) -> () loc(#loc)
    %2383 = llvm.mlir.constant(2048 : i32) : i32 loc(#loc)
    %2384 = llvm.add %2369, %2383 : i32 loc(#loc)
    %2385 = llvm.getelementptr inbounds %2306[%2384] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %2386 = llvm.mlir.undef : vector<4xi8> loc(#loc)
    %2387 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %2388 = llvm.insertelement %2311, %2386[%2387 : i32] : vector<4xi8> loc(#loc)
    %2389 = llvm.mlir.constant(1 : i32) : i32 loc(#loc)
    %2390 = llvm.insertelement %2312, %2388[%2389 : i32] : vector<4xi8> loc(#loc)
    %2391 = llvm.mlir.constant(2 : i32) : i32 loc(#loc)
    %2392 = llvm.insertelement %2313, %2390[%2391 : i32] : vector<4xi8> loc(#loc)
    %2393 = llvm.mlir.constant(3 : i32) : i32 loc(#loc)
    %2394 = llvm.insertelement %2314, %2392[%2393 : i32] : vector<4xi8> loc(#loc)
    %2395 = llvm.mlir.constant(true) : i1 loc(#loc)
    llvm.call @"__triton_hip_predicated_store_!llvm.void_!llvm.ptr<3>_vector<4xi8>_i1_"(%2385, %2394, %2395) : (!llvm.ptr<3>, vector<4xi8>, i1) -> () loc(#loc)
    %2396 = llvm.mlir.constant(260 : i32) : i32 loc(#loc)
    %2397 = llvm.xor %2367, %2396 : i32 loc(#loc)
    %2398 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %2399 = llvm.add %2397, %2398 : i32 loc(#loc)
    %2400 = llvm.getelementptr inbounds %2306[%2399] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %2401 = llvm.mlir.undef : vector<4xi8> loc(#loc)
    %2402 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %2403 = llvm.insertelement %2315, %2401[%2402 : i32] : vector<4xi8> loc(#loc)
    %2404 = llvm.mlir.constant(1 : i32) : i32 loc(#loc)
    %2405 = llvm.insertelement %2316, %2403[%2404 : i32] : vector<4xi8> loc(#loc)
    %2406 = llvm.mlir.constant(2 : i32) : i32 loc(#loc)
    %2407 = llvm.insertelement %2317, %2405[%2406 : i32] : vector<4xi8> loc(#loc)
    %2408 = llvm.mlir.constant(3 : i32) : i32 loc(#loc)
    %2409 = llvm.insertelement %2318, %2407[%2408 : i32] : vector<4xi8> loc(#loc)
    %2410 = llvm.mlir.constant(true) : i1 loc(#loc)
    llvm.call @"__triton_hip_predicated_store_!llvm.void_!llvm.ptr<3>_vector<4xi8>_i1_"(%2400, %2409, %2410) : (!llvm.ptr<3>, vector<4xi8>, i1) -> () loc(#loc)
    %2411 = llvm.mlir.constant(2048 : i32) : i32 loc(#loc)
    %2412 = llvm.add %2397, %2411 : i32 loc(#loc)
    %2413 = llvm.getelementptr inbounds %2306[%2412] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %2414 = llvm.mlir.undef : vector<4xi8> loc(#loc)
    %2415 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %2416 = llvm.insertelement %2319, %2414[%2415 : i32] : vector<4xi8> loc(#loc)
    %2417 = llvm.mlir.constant(1 : i32) : i32 loc(#loc)
    %2418 = llvm.insertelement %2320, %2416[%2417 : i32] : vector<4xi8> loc(#loc)
    %2419 = llvm.mlir.constant(2 : i32) : i32 loc(#loc)
    %2420 = llvm.insertelement %2321, %2418[%2419 : i32] : vector<4xi8> loc(#loc)
    %2421 = llvm.mlir.constant(3 : i32) : i32 loc(#loc)
    %2422 = llvm.insertelement %2322, %2420[%2421 : i32] : vector<4xi8> loc(#loc)
    %2423 = llvm.mlir.constant(true) : i1 loc(#loc)
    llvm.call @"__triton_hip_predicated_store_!llvm.void_!llvm.ptr<3>_vector<4xi8>_i1_"(%2413, %2422, %2423) : (!llvm.ptr<3>, vector<4xi8>, i1) -> () loc(#loc)
    rocdl.barrier loc(#loc)
    %2424 = rocdl.workitem.id.x : i32 loc(#loc)
    %2425 = llvm.mlir.constant(255 : i32) : i32 loc(#loc)
    %2426 = llvm.and %2424, %2425 : i32 loc(#loc)
    %2427 = llvm.mlir.constant(64 : i32) : i32 loc(#loc)
    %2428 = llvm.urem %2426, %2427 : i32 loc(#loc)
    %2429 = llvm.udiv %2426, %2427 : i32 loc(#loc)
    %2430 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %2431 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %2432 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %2433 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %2434 = llvm.shl %2428, %2433 : i32 loc(#loc)
    %2435 = llvm.or %2432, %2434 : i32 loc(#loc)
    %2436 = llvm.mlir.constant(6 : i32) : i32 loc(#loc)
    %2437 = llvm.shl %2429, %2436 : i32 loc(#loc)
    %2438 = llvm.or %2435, %2437 : i32 loc(#loc)
    %2439 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %2440 = llvm.mlir.constant(15 : i32) : i32 loc(#loc)
    %2441 = llvm.and %2438, %2440 : i32 loc(#loc)
    %2442 = llvm.mlir.constant(3 : i32) : i32 loc(#loc)
    %2443 = llvm.shl %2441, %2442 : i32 loc(#loc)
    %2444 = llvm.xor %2439, %2443 : i32 loc(#loc)
    %2445 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %2446 = llvm.mlir.constant(16 : i32) : i32 loc(#loc)
    %2447 = llvm.and %2438, %2446 : i32 loc(#loc)
    %2448 = llvm.icmp "eq" %2447, %2445 : i32 loc(#loc)
    %2449 = llvm.mlir.constant(2048 : i32) : i32 loc(#loc)
    %2450 = llvm.select %2448, %2445, %2449 : i1, i32 loc(#loc)
    %2451 = llvm.xor %2444, %2450 : i32 loc(#loc)
    %2452 = llvm.mlir.constant(32 : i32) : i32 loc(#loc)
    %2453 = llvm.and %2438, %2452 : i32 loc(#loc)
    %2454 = llvm.icmp "eq" %2453, %2445 : i32 loc(#loc)
    %2455 = llvm.mlir.constant(260 : i32) : i32 loc(#loc)
    %2456 = llvm.select %2454, %2445, %2455 : i1, i32 loc(#loc)
    %2457 = llvm.xor %2451, %2456 : i32 loc(#loc)
    %2458 = llvm.mlir.constant(64 : i32) : i32 loc(#loc)
    %2459 = llvm.and %2438, %2458 : i32 loc(#loc)
    %2460 = llvm.icmp "eq" %2459, %2445 : i32 loc(#loc)
    %2461 = llvm.mlir.constant(128 : i32) : i32 loc(#loc)
    %2462 = llvm.select %2460, %2445, %2461 : i1, i32 loc(#loc)
    %2463 = llvm.xor %2457, %2462 : i32 loc(#loc)
    %2464 = llvm.xor %2431, %2463 : i32 loc(#loc)
    %2465 = llvm.mlir.constant(1 : i32) : i32 loc(#loc)
    %2466 = llvm.mul %2323, %2465 : i32 loc(#loc)
    %2467 = llvm.xor %2464, %2466 : i32 loc(#loc)
    %2468 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %2469 = llvm.xor %2467, %2468 : i32 loc(#loc)
    %2470 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %2471 = llvm.add %2469, %2470 : i32 loc(#loc)
    %2472 = llvm.getelementptr inbounds %2306[%2471] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %2473 = llvm.mlir.constant(true) : i1 loc(#loc)
    %2474 = llvm.mlir.constant(dense<0> : vector<4xi8>) : vector<4xi8> loc(#loc)
    %2475 = llvm.call @"__triton_hip_predicated_load_vector<4xi8>_!llvm.ptr<3>_i1_vector<4xi8>_"(%2472, %2473, %2474) : (!llvm.ptr<3>, i1, vector<4xi8>) -> vector<4xi8> loc(#loc)
    %2476 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %2477 = llvm.extractelement %2475[%2476 : i32] : vector<4xi8> loc(#loc)
    %2478 = llvm.mlir.constant(1 : i32) : i32 loc(#loc)
    %2479 = llvm.extractelement %2475[%2478 : i32] : vector<4xi8> loc(#loc)
    %2480 = llvm.mlir.constant(2 : i32) : i32 loc(#loc)
    %2481 = llvm.extractelement %2475[%2480 : i32] : vector<4xi8> loc(#loc)
    %2482 = llvm.mlir.constant(3 : i32) : i32 loc(#loc)
    %2483 = llvm.extractelement %2475[%2482 : i32] : vector<4xi8> loc(#loc)
    %2484 = llvm.mlir.constant(1024 : i32) : i32 loc(#loc)
    %2485 = llvm.add %2469, %2484 : i32 loc(#loc)
    %2486 = llvm.getelementptr inbounds %2306[%2485] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %2487 = llvm.mlir.constant(true) : i1 loc(#loc)
    %2488 = llvm.mlir.constant(dense<0> : vector<4xi8>) : vector<4xi8> loc(#loc)
    %2489 = llvm.call @"__triton_hip_predicated_load_vector<4xi8>_!llvm.ptr<3>_i1_vector<4xi8>_"(%2486, %2487, %2488) : (!llvm.ptr<3>, i1, vector<4xi8>) -> vector<4xi8> loc(#loc)
    %2490 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %2491 = llvm.extractelement %2489[%2490 : i32] : vector<4xi8> loc(#loc)
    %2492 = llvm.mlir.constant(1 : i32) : i32 loc(#loc)
    %2493 = llvm.extractelement %2489[%2492 : i32] : vector<4xi8> loc(#loc)
    %2494 = llvm.mlir.constant(2 : i32) : i32 loc(#loc)
    %2495 = llvm.extractelement %2489[%2494 : i32] : vector<4xi8> loc(#loc)
    %2496 = llvm.mlir.constant(3 : i32) : i32 loc(#loc)
    %2497 = llvm.extractelement %2489[%2496 : i32] : vector<4xi8> loc(#loc)
    %2498 = llvm.mlir.constant(576 : i32) : i32 loc(#loc)
    %2499 = llvm.xor %2467, %2498 : i32 loc(#loc)
    %2500 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %2501 = llvm.add %2499, %2500 : i32 loc(#loc)
    %2502 = llvm.getelementptr inbounds %2306[%2501] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %2503 = llvm.mlir.constant(true) : i1 loc(#loc)
    %2504 = llvm.mlir.constant(dense<0> : vector<4xi8>) : vector<4xi8> loc(#loc)
    %2505 = llvm.call @"__triton_hip_predicated_load_vector<4xi8>_!llvm.ptr<3>_i1_vector<4xi8>_"(%2502, %2503, %2504) : (!llvm.ptr<3>, i1, vector<4xi8>) -> vector<4xi8> loc(#loc)
    %2506 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %2507 = llvm.extractelement %2505[%2506 : i32] : vector<4xi8> loc(#loc)
    %2508 = llvm.mlir.constant(1 : i32) : i32 loc(#loc)
    %2509 = llvm.extractelement %2505[%2508 : i32] : vector<4xi8> loc(#loc)
    %2510 = llvm.mlir.constant(2 : i32) : i32 loc(#loc)
    %2511 = llvm.extractelement %2505[%2510 : i32] : vector<4xi8> loc(#loc)
    %2512 = llvm.mlir.constant(3 : i32) : i32 loc(#loc)
    %2513 = llvm.extractelement %2505[%2512 : i32] : vector<4xi8> loc(#loc)
    %2514 = llvm.mlir.constant(1024 : i32) : i32 loc(#loc)
    %2515 = llvm.add %2499, %2514 : i32 loc(#loc)
    %2516 = llvm.getelementptr inbounds %2306[%2515] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %2517 = llvm.mlir.constant(true) : i1 loc(#loc)
    %2518 = llvm.mlir.constant(dense<0> : vector<4xi8>) : vector<4xi8> loc(#loc)
    %2519 = llvm.call @"__triton_hip_predicated_load_vector<4xi8>_!llvm.ptr<3>_i1_vector<4xi8>_"(%2516, %2517, %2518) : (!llvm.ptr<3>, i1, vector<4xi8>) -> vector<4xi8> loc(#loc)
    %2520 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %2521 = llvm.extractelement %2519[%2520 : i32] : vector<4xi8> loc(#loc)
    %2522 = llvm.mlir.constant(1 : i32) : i32 loc(#loc)
    %2523 = llvm.extractelement %2519[%2522 : i32] : vector<4xi8> loc(#loc)
    %2524 = llvm.mlir.constant(2 : i32) : i32 loc(#loc)
    %2525 = llvm.extractelement %2519[%2524 : i32] : vector<4xi8> loc(#loc)
    %2526 = llvm.mlir.constant(3 : i32) : i32 loc(#loc)
    %2527 = llvm.extractelement %2519[%2526 : i32] : vector<4xi8> loc(#loc)
    %2528 = llvm.mlir.constant(4 : i32) : i32 loc(#loc)
    %2529 = llvm.xor %2467, %2528 : i32 loc(#loc)
    %2530 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %2531 = llvm.add %2529, %2530 : i32 loc(#loc)
    %2532 = llvm.getelementptr inbounds %2306[%2531] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %2533 = llvm.mlir.constant(true) : i1 loc(#loc)
    %2534 = llvm.mlir.constant(dense<0> : vector<4xi8>) : vector<4xi8> loc(#loc)
    %2535 = llvm.call @"__triton_hip_predicated_load_vector<4xi8>_!llvm.ptr<3>_i1_vector<4xi8>_"(%2532, %2533, %2534) : (!llvm.ptr<3>, i1, vector<4xi8>) -> vector<4xi8> loc(#loc)
    %2536 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %2537 = llvm.extractelement %2535[%2536 : i32] : vector<4xi8> loc(#loc)
    %2538 = llvm.mlir.constant(1 : i32) : i32 loc(#loc)
    %2539 = llvm.extractelement %2535[%2538 : i32] : vector<4xi8> loc(#loc)
    %2540 = llvm.mlir.constant(2 : i32) : i32 loc(#loc)
    %2541 = llvm.extractelement %2535[%2540 : i32] : vector<4xi8> loc(#loc)
    %2542 = llvm.mlir.constant(3 : i32) : i32 loc(#loc)
    %2543 = llvm.extractelement %2535[%2542 : i32] : vector<4xi8> loc(#loc)
    %2544 = llvm.mlir.constant(1024 : i32) : i32 loc(#loc)
    %2545 = llvm.add %2529, %2544 : i32 loc(#loc)
    %2546 = llvm.getelementptr inbounds %2306[%2545] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %2547 = llvm.mlir.constant(true) : i1 loc(#loc)
    %2548 = llvm.mlir.constant(dense<0> : vector<4xi8>) : vector<4xi8> loc(#loc)
    %2549 = llvm.call @"__triton_hip_predicated_load_vector<4xi8>_!llvm.ptr<3>_i1_vector<4xi8>_"(%2546, %2547, %2548) : (!llvm.ptr<3>, i1, vector<4xi8>) -> vector<4xi8> loc(#loc)
    %2550 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %2551 = llvm.extractelement %2549[%2550 : i32] : vector<4xi8> loc(#loc)
    %2552 = llvm.mlir.constant(1 : i32) : i32 loc(#loc)
    %2553 = llvm.extractelement %2549[%2552 : i32] : vector<4xi8> loc(#loc)
    %2554 = llvm.mlir.constant(2 : i32) : i32 loc(#loc)
    %2555 = llvm.extractelement %2549[%2554 : i32] : vector<4xi8> loc(#loc)
    %2556 = llvm.mlir.constant(3 : i32) : i32 loc(#loc)
    %2557 = llvm.extractelement %2549[%2556 : i32] : vector<4xi8> loc(#loc)
    %2558 = llvm.mlir.constant(580 : i32) : i32 loc(#loc)
    %2559 = llvm.xor %2467, %2558 : i32 loc(#loc)
    %2560 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %2561 = llvm.add %2559, %2560 : i32 loc(#loc)
    %2562 = llvm.getelementptr inbounds %2306[%2561] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %2563 = llvm.mlir.constant(true) : i1 loc(#loc)
    %2564 = llvm.mlir.constant(dense<0> : vector<4xi8>) : vector<4xi8> loc(#loc)
    %2565 = llvm.call @"__triton_hip_predicated_load_vector<4xi8>_!llvm.ptr<3>_i1_vector<4xi8>_"(%2562, %2563, %2564) : (!llvm.ptr<3>, i1, vector<4xi8>) -> vector<4xi8> loc(#loc)
    %2566 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %2567 = llvm.extractelement %2565[%2566 : i32] : vector<4xi8> loc(#loc)
    %2568 = llvm.mlir.constant(1 : i32) : i32 loc(#loc)
    %2569 = llvm.extractelement %2565[%2568 : i32] : vector<4xi8> loc(#loc)
    %2570 = llvm.mlir.constant(2 : i32) : i32 loc(#loc)
    %2571 = llvm.extractelement %2565[%2570 : i32] : vector<4xi8> loc(#loc)
    %2572 = llvm.mlir.constant(3 : i32) : i32 loc(#loc)
    %2573 = llvm.extractelement %2565[%2572 : i32] : vector<4xi8> loc(#loc)
    %2574 = llvm.mlir.constant(1024 : i32) : i32 loc(#loc)
    %2575 = llvm.add %2559, %2574 : i32 loc(#loc)
    %2576 = llvm.getelementptr inbounds %2306[%2575] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %2577 = llvm.mlir.constant(true) : i1 loc(#loc)
    %2578 = llvm.mlir.constant(dense<0> : vector<4xi8>) : vector<4xi8> loc(#loc)
    %2579 = llvm.call @"__triton_hip_predicated_load_vector<4xi8>_!llvm.ptr<3>_i1_vector<4xi8>_"(%2576, %2577, %2578) : (!llvm.ptr<3>, i1, vector<4xi8>) -> vector<4xi8> loc(#loc)
    %2580 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %2581 = llvm.extractelement %2579[%2580 : i32] : vector<4xi8> loc(#loc)
    %2582 = llvm.mlir.constant(1 : i32) : i32 loc(#loc)
    %2583 = llvm.extractelement %2579[%2582 : i32] : vector<4xi8> loc(#loc)
    %2584 = llvm.mlir.constant(2 : i32) : i32 loc(#loc)
    %2585 = llvm.extractelement %2579[%2584 : i32] : vector<4xi8> loc(#loc)
    %2586 = llvm.mlir.constant(3 : i32) : i32 loc(#loc)
    %2587 = llvm.extractelement %2579[%2586 : i32] : vector<4xi8> loc(#loc)
    %2588 = llvm.mlir.undef : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)> loc(#loc)
    %2589 = llvm.insertvalue %2477, %2588[0] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2590 = llvm.insertvalue %2507, %2589[1] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2591 = llvm.insertvalue %2479, %2590[2] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2592 = llvm.insertvalue %2509, %2591[3] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2593 = llvm.insertvalue %2481, %2592[4] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2594 = llvm.insertvalue %2511, %2593[5] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2595 = llvm.insertvalue %2483, %2594[6] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2596 = llvm.insertvalue %2513, %2595[7] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2597 = llvm.insertvalue %2491, %2596[8] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2598 = llvm.insertvalue %2521, %2597[9] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2599 = llvm.insertvalue %2493, %2598[10] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2600 = llvm.insertvalue %2523, %2599[11] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2601 = llvm.insertvalue %2495, %2600[12] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2602 = llvm.insertvalue %2525, %2601[13] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2603 = llvm.insertvalue %2497, %2602[14] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2604 = llvm.insertvalue %2527, %2603[15] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2605 = llvm.insertvalue %2537, %2604[16] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2606 = llvm.insertvalue %2567, %2605[17] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2607 = llvm.insertvalue %2539, %2606[18] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2608 = llvm.insertvalue %2569, %2607[19] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2609 = llvm.insertvalue %2541, %2608[20] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2610 = llvm.insertvalue %2571, %2609[21] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2611 = llvm.insertvalue %2543, %2610[22] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2612 = llvm.insertvalue %2573, %2611[23] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2613 = llvm.insertvalue %2551, %2612[24] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2614 = llvm.insertvalue %2581, %2613[25] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2615 = llvm.insertvalue %2553, %2614[26] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2616 = llvm.insertvalue %2583, %2615[27] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2617 = llvm.insertvalue %2555, %2616[28] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2618 = llvm.insertvalue %2585, %2617[29] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2619 = llvm.insertvalue %2557, %2618[30] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2620 = llvm.insertvalue %2587, %2619[31] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2621 = llvm.extractvalue %2620[0] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2622 = llvm.extractvalue %2620[1] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2623 = llvm.extractvalue %2620[2] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2624 = llvm.extractvalue %2620[3] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2625 = llvm.extractvalue %2620[4] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2626 = llvm.extractvalue %2620[5] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2627 = llvm.extractvalue %2620[6] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2628 = llvm.extractvalue %2620[7] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2629 = llvm.extractvalue %2620[8] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2630 = llvm.extractvalue %2620[9] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2631 = llvm.extractvalue %2620[10] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2632 = llvm.extractvalue %2620[11] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2633 = llvm.extractvalue %2620[12] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2634 = llvm.extractvalue %2620[13] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2635 = llvm.extractvalue %2620[14] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2636 = llvm.extractvalue %2620[15] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2637 = llvm.extractvalue %2620[16] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2638 = llvm.extractvalue %2620[17] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2639 = llvm.extractvalue %2620[18] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2640 = llvm.extractvalue %2620[19] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2641 = llvm.extractvalue %2620[20] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2642 = llvm.extractvalue %2620[21] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2643 = llvm.extractvalue %2620[22] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2644 = llvm.extractvalue %2620[23] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2645 = llvm.extractvalue %2620[24] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2646 = llvm.extractvalue %2620[25] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2647 = llvm.extractvalue %2620[26] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2648 = llvm.extractvalue %2620[27] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2649 = llvm.extractvalue %2620[28] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2650 = llvm.extractvalue %2620[29] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2651 = llvm.extractvalue %2620[30] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2652 = llvm.extractvalue %2620[31] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2653 = llvm.mlir.undef : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)> loc(#loc)
    %2654 = llvm.insertvalue %2621, %2653[0] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2655 = llvm.insertvalue %2622, %2654[1] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2656 = llvm.insertvalue %2623, %2655[2] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2657 = llvm.insertvalue %2624, %2656[3] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2658 = llvm.insertvalue %2625, %2657[4] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2659 = llvm.insertvalue %2626, %2658[5] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2660 = llvm.insertvalue %2627, %2659[6] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2661 = llvm.insertvalue %2628, %2660[7] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2662 = llvm.insertvalue %2629, %2661[8] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2663 = llvm.insertvalue %2630, %2662[9] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2664 = llvm.insertvalue %2631, %2663[10] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2665 = llvm.insertvalue %2632, %2664[11] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2666 = llvm.insertvalue %2633, %2665[12] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2667 = llvm.insertvalue %2634, %2666[13] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2668 = llvm.insertvalue %2635, %2667[14] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2669 = llvm.insertvalue %2636, %2668[15] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2670 = llvm.insertvalue %2637, %2669[16] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2671 = llvm.insertvalue %2638, %2670[17] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2672 = llvm.insertvalue %2639, %2671[18] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2673 = llvm.insertvalue %2640, %2672[19] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2674 = llvm.insertvalue %2641, %2673[20] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2675 = llvm.insertvalue %2642, %2674[21] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2676 = llvm.insertvalue %2643, %2675[22] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2677 = llvm.insertvalue %2644, %2676[23] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2678 = llvm.insertvalue %2645, %2677[24] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2679 = llvm.insertvalue %2646, %2678[25] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2680 = llvm.insertvalue %2647, %2679[26] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2681 = llvm.insertvalue %2648, %2680[27] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2682 = llvm.insertvalue %2649, %2681[28] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2683 = llvm.insertvalue %2650, %2682[29] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2684 = llvm.insertvalue %2651, %2683[30] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2685 = llvm.insertvalue %2652, %2684[31] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2686 = llvm.extractvalue %2685[0] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2687 = llvm.extractvalue %2685[1] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2688 = llvm.extractvalue %2685[2] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2689 = llvm.extractvalue %2685[3] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2690 = llvm.extractvalue %2685[4] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2691 = llvm.extractvalue %2685[5] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2692 = llvm.extractvalue %2685[6] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2693 = llvm.extractvalue %2685[7] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2694 = llvm.extractvalue %2685[8] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2695 = llvm.extractvalue %2685[9] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2696 = llvm.extractvalue %2685[10] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2697 = llvm.extractvalue %2685[11] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2698 = llvm.extractvalue %2685[12] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2699 = llvm.extractvalue %2685[13] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2700 = llvm.extractvalue %2685[14] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2701 = llvm.extractvalue %2685[15] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2702 = llvm.extractvalue %2685[16] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2703 = llvm.extractvalue %2685[17] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2704 = llvm.extractvalue %2685[18] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2705 = llvm.extractvalue %2685[19] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2706 = llvm.extractvalue %2685[20] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2707 = llvm.extractvalue %2685[21] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2708 = llvm.extractvalue %2685[22] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2709 = llvm.extractvalue %2685[23] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2710 = llvm.extractvalue %2685[24] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2711 = llvm.extractvalue %2685[25] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2712 = llvm.extractvalue %2685[26] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2713 = llvm.extractvalue %2685[27] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2714 = llvm.extractvalue %2685[28] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2715 = llvm.extractvalue %2685[29] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2716 = llvm.extractvalue %2685[30] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2717 = llvm.extractvalue %2685[31] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2718 = llvm.mlir.undef : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)> loc(#loc)
    %2719 = llvm.insertvalue %2686, %2718[0] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2720 = llvm.insertvalue %2688, %2719[1] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2721 = llvm.insertvalue %2690, %2720[2] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2722 = llvm.insertvalue %2692, %2721[3] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2723 = llvm.insertvalue %2694, %2722[4] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2724 = llvm.insertvalue %2696, %2723[5] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2725 = llvm.insertvalue %2698, %2724[6] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2726 = llvm.insertvalue %2700, %2725[7] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2727 = llvm.insertvalue %2702, %2726[8] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2728 = llvm.insertvalue %2704, %2727[9] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2729 = llvm.insertvalue %2706, %2728[10] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2730 = llvm.insertvalue %2708, %2729[11] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2731 = llvm.insertvalue %2710, %2730[12] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2732 = llvm.insertvalue %2712, %2731[13] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2733 = llvm.insertvalue %2714, %2732[14] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2734 = llvm.insertvalue %2716, %2733[15] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2735 = llvm.mlir.undef : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)> loc(#loc)
    %2736 = llvm.insertvalue %2687, %2735[0] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2737 = llvm.insertvalue %2689, %2736[1] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2738 = llvm.insertvalue %2691, %2737[2] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2739 = llvm.insertvalue %2693, %2738[3] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2740 = llvm.insertvalue %2695, %2739[4] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2741 = llvm.insertvalue %2697, %2740[5] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2742 = llvm.insertvalue %2699, %2741[6] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2743 = llvm.insertvalue %2701, %2742[7] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2744 = llvm.insertvalue %2703, %2743[8] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2745 = llvm.insertvalue %2705, %2744[9] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2746 = llvm.insertvalue %2707, %2745[10] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2747 = llvm.insertvalue %2709, %2746[11] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2748 = llvm.insertvalue %2711, %2747[12] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2749 = llvm.insertvalue %2713, %2748[13] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2750 = llvm.insertvalue %2715, %2749[14] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2751 = llvm.insertvalue %2717, %2750[15] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2752 = llvm.extractvalue %140[0] : !llvm.struct<(i32)>  loc(#loc)
    %2753 = llvm.mlir.undef : !llvm.struct<(i32)> loc(#loc)
    %2754 = llvm.insertvalue %2752, %2753[0] : !llvm.struct<(i32)>  loc(#loc)
    %2755 = llvm.extractvalue %2754[0] : !llvm.struct<(i32)>  loc(#loc)
    %2756 = llvm.extractvalue %10[0] : !llvm.struct<(i32)>  loc(#loc)
    %2757 = llvm.mul %2755, %2756 : i32 loc(#loc)
    %2758 = llvm.mlir.undef : !llvm.struct<(i32)> loc(#loc)
    %2759 = llvm.insertvalue %2757, %2758[0] : !llvm.struct<(i32)>  loc(#loc)
    %2760 = llvm.mlir.constant(0 : index) : i32 loc(#loc)
    %2761 = rocdl.workitem.id.x : i32 loc(#loc)
    %2762 = llvm.mlir.constant(255 : i32) : i32 loc(#loc)
    %2763 = llvm.and %2761, %2762 : i32 loc(#loc)
    %2764 = llvm.mlir.constant(64 : i32) : i32 loc(#loc)
    %2765 = llvm.urem %2763, %2764 : i32 loc(#loc)
    %2766 = llvm.udiv %2763, %2764 : i32 loc(#loc)
    %2767 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %2768 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %2769 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %2770 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %2771 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %2772 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %2773 = llvm.shl %2765, %2772 : i32 loc(#loc)
    %2774 = llvm.or %2771, %2773 : i32 loc(#loc)
    %2775 = llvm.mlir.constant(6 : i32) : i32 loc(#loc)
    %2776 = llvm.shl %2766, %2775 : i32 loc(#loc)
    %2777 = llvm.or %2774, %2776 : i32 loc(#loc)
    %2778 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %2779 = llvm.mlir.constant(7 : i32) : i32 loc(#loc)
    %2780 = llvm.and %2777, %2779 : i32 loc(#loc)
    %2781 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %2782 = llvm.lshr %2780, %2781 : i32 loc(#loc)
    %2783 = llvm.xor %2778, %2782 : i32 loc(#loc)
    %2784 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %2785 = llvm.xor %2770, %2783 : i32 loc(#loc)
    %2786 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %2787 = llvm.xor %2785, %2786 : i32 loc(#loc)
    %2788 = llvm.add %2787, %2760 : i32 loc(#loc)
    %2789 = llvm.mlir.undef : !llvm.struct<(i32)> loc(#loc)
    %2790 = llvm.insertvalue %2788, %2789[0] : !llvm.struct<(i32)>  loc(#loc)
    %2791 = llvm.extractvalue %2759[0] : !llvm.struct<(i32)>  loc(#loc)
    %2792 = llvm.mlir.undef : !llvm.struct<(i32)> loc(#loc)
    %2793 = llvm.insertvalue %2791, %2792[0] : !llvm.struct<(i32)>  loc(#loc)
    %2794 = llvm.extractvalue %2790[0] : !llvm.struct<(i32)>  loc(#loc)
    %2795 = llvm.mlir.undef : !llvm.struct<(i32)> loc(#loc)
    %2796 = llvm.insertvalue %2794, %2795[0] : !llvm.struct<(i32)>  loc(#loc)
    %2797 = llvm.extractvalue %2796[0] : !llvm.struct<(i32)>  loc(#loc)
    %2798 = llvm.mlir.undef : !llvm.struct<(i32)> loc(#loc)
    %2799 = llvm.insertvalue %2797, %2798[0] : !llvm.struct<(i32)>  loc(#loc)
    %2800 = llvm.extractvalue %2799[0] : !llvm.struct<(i32)>  loc(#loc)
    %2801 = llvm.extractvalue %2793[0] : !llvm.struct<(i32)>  loc(#loc)
    %2802 = llvm.add %2800, %2801 : i32 loc(#loc)
    %2803 = llvm.mlir.undef : !llvm.struct<(i32)> loc(#loc)
    %2804 = llvm.insertvalue %2802, %2803[0] : !llvm.struct<(i32)>  loc(#loc)
    %2805 = llvm.extractvalue %2804[0] : !llvm.struct<(i32)>  loc(#loc)
    %2806 = llvm.mlir.constant(0 : i16) : i16 loc(#loc)
    %2807 = llvm.mlir.constant(159744 : i32) : i32 loc(#loc)
    %2808 = llvm.mlir.constant(2147483646 : i32) : i32 loc(#loc)
    %2809 = rocdl.make.buffer.rsrc %b_scale, %2806, %2808, %2807 : <1> to <8> loc(#loc)
    %2810 = llvm.mlir.constant(true) : i1 loc(#loc)
    %2811 = llvm.mlir.constant(dense<0> : vector<1xi8>) : vector<1xi8> loc(#loc)
    %2812 = llvm.mlir.constant(-2147483648 : i32) : i32 loc(#loc)
    %2813 = llvm.mlir.constant(1 : i32) : i32 loc(#loc)
    %2814 = llvm.mul %2813, %2805 : i32 loc(#loc)
    %2815 = llvm.select %2810, %2814, %2812 : i1, i32 loc(#loc)
    %2816 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %2817 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %2818 = rocdl.raw.ptr.buffer.load %2809, %2815, %2816, %2817 : i8 loc(#loc)
    %2819 = llvm.bitcast %2818 : i8 to vector<1xi8> loc(#loc)
    %2820 = llvm.mlir.constant(0 : index) : i32 loc(#loc)
    %2821 = llvm.extractelement %2819[%2820 : i32] : vector<1xi8> loc(#loc)
    %2822 = llvm.mlir.undef : !llvm.struct<(i8)> loc(#loc)
    %2823 = llvm.insertvalue %2821, %2822[0] : !llvm.struct<(i8)>  loc(#loc)
    rocdl.barrier loc(#loc)
    %2824 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %2825 = llvm.mlir.addressof @global_smem : !llvm.ptr<3> loc(#loc)
    %2826 = llvm.getelementptr %2825[%2824] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %2827 = llvm.extractvalue %2823[0] : !llvm.struct<(i8)>  loc(#loc)
    %2828 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %2829 = rocdl.workitem.id.x : i32 loc(#loc)
    %2830 = llvm.mlir.constant(255 : i32) : i32 loc(#loc)
    %2831 = llvm.and %2829, %2830 : i32 loc(#loc)
    %2832 = llvm.mlir.constant(64 : i32) : i32 loc(#loc)
    %2833 = llvm.urem %2831, %2832 : i32 loc(#loc)
    %2834 = llvm.udiv %2831, %2832 : i32 loc(#loc)
    %2835 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %2836 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %2837 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %2838 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %2839 = llvm.shl %2833, %2838 : i32 loc(#loc)
    %2840 = llvm.or %2837, %2839 : i32 loc(#loc)
    %2841 = llvm.mlir.constant(6 : i32) : i32 loc(#loc)
    %2842 = llvm.shl %2834, %2841 : i32 loc(#loc)
    %2843 = llvm.or %2840, %2842 : i32 loc(#loc)
    %2844 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %2845 = llvm.mlir.constant(63 : i32) : i32 loc(#loc)
    %2846 = llvm.and %2843, %2845 : i32 loc(#loc)
    %2847 = llvm.mlir.constant(2 : i32) : i32 loc(#loc)
    %2848 = llvm.shl %2846, %2847 : i32 loc(#loc)
    %2849 = llvm.xor %2844, %2848 : i32 loc(#loc)
    %2850 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %2851 = llvm.mlir.constant(64 : i32) : i32 loc(#loc)
    %2852 = llvm.and %2843, %2851 : i32 loc(#loc)
    %2853 = llvm.icmp "eq" %2852, %2850 : i32 loc(#loc)
    %2854 = llvm.mlir.constant(2 : i32) : i32 loc(#loc)
    %2855 = llvm.select %2853, %2850, %2854 : i1, i32 loc(#loc)
    %2856 = llvm.xor %2849, %2855 : i32 loc(#loc)
    %2857 = llvm.mlir.constant(128 : i32) : i32 loc(#loc)
    %2858 = llvm.and %2843, %2857 : i32 loc(#loc)
    %2859 = llvm.icmp "eq" %2858, %2850 : i32 loc(#loc)
    %2860 = llvm.mlir.constant(1 : i32) : i32 loc(#loc)
    %2861 = llvm.select %2859, %2850, %2860 : i1, i32 loc(#loc)
    %2862 = llvm.xor %2856, %2861 : i32 loc(#loc)
    %2863 = llvm.xor %2836, %2862 : i32 loc(#loc)
    %2864 = llvm.mlir.constant(1 : i32) : i32 loc(#loc)
    %2865 = llvm.mul %2828, %2864 : i32 loc(#loc)
    %2866 = llvm.xor %2863, %2865 : i32 loc(#loc)
    %2867 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %2868 = llvm.xor %2866, %2867 : i32 loc(#loc)
    %2869 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %2870 = llvm.add %2868, %2869 : i32 loc(#loc)
    %2871 = llvm.getelementptr inbounds %2826[%2870] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %2872 = llvm.mlir.undef : vector<1xi8> loc(#loc)
    %2873 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %2874 = llvm.insertelement %2827, %2872[%2873 : i32] : vector<1xi8> loc(#loc)
    %2875 = llvm.mlir.constant(true) : i1 loc(#loc)
    llvm.call @"__triton_hip_predicated_store_!llvm.void_!llvm.ptr<3>_vector<1xi8>_i1_"(%2871, %2874, %2875) : (!llvm.ptr<3>, vector<1xi8>, i1) -> () loc(#loc)
    rocdl.barrier loc(#loc)
    %2876 = rocdl.workitem.id.x : i32 loc(#loc)
    %2877 = llvm.mlir.constant(255 : i32) : i32 loc(#loc)
    %2878 = llvm.and %2876, %2877 : i32 loc(#loc)
    %2879 = llvm.mlir.constant(64 : i32) : i32 loc(#loc)
    %2880 = llvm.urem %2878, %2879 : i32 loc(#loc)
    %2881 = llvm.udiv %2878, %2879 : i32 loc(#loc)
    %2882 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %2883 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %2884 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %2885 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %2886 = llvm.shl %2880, %2885 : i32 loc(#loc)
    %2887 = llvm.or %2884, %2886 : i32 loc(#loc)
    %2888 = llvm.mlir.constant(6 : i32) : i32 loc(#loc)
    %2889 = llvm.shl %2881, %2888 : i32 loc(#loc)
    %2890 = llvm.or %2887, %2889 : i32 loc(#loc)
    %2891 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %2892 = llvm.mlir.constant(7 : i32) : i32 loc(#loc)
    %2893 = llvm.and %2890, %2892 : i32 loc(#loc)
    %2894 = llvm.mlir.constant(5 : i32) : i32 loc(#loc)
    %2895 = llvm.shl %2893, %2894 : i32 loc(#loc)
    %2896 = llvm.xor %2891, %2895 : i32 loc(#loc)
    %2897 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %2898 = llvm.mlir.constant(8 : i32) : i32 loc(#loc)
    %2899 = llvm.and %2890, %2898 : i32 loc(#loc)
    %2900 = llvm.icmp "eq" %2899, %2897 : i32 loc(#loc)
    %2901 = llvm.mlir.constant(2 : i32) : i32 loc(#loc)
    %2902 = llvm.select %2900, %2897, %2901 : i1, i32 loc(#loc)
    %2903 = llvm.xor %2896, %2902 : i32 loc(#loc)
    %2904 = llvm.mlir.constant(64 : i32) : i32 loc(#loc)
    %2905 = llvm.and %2890, %2904 : i32 loc(#loc)
    %2906 = llvm.icmp "eq" %2905, %2897 : i32 loc(#loc)
    %2907 = llvm.mlir.constant(1 : i32) : i32 loc(#loc)
    %2908 = llvm.select %2906, %2897, %2907 : i1, i32 loc(#loc)
    %2909 = llvm.xor %2903, %2908 : i32 loc(#loc)
    %2910 = llvm.xor %2883, %2909 : i32 loc(#loc)
    %2911 = llvm.mlir.constant(1 : i32) : i32 loc(#loc)
    %2912 = llvm.mul %2828, %2911 : i32 loc(#loc)
    %2913 = llvm.xor %2910, %2912 : i32 loc(#loc)
    %2914 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %2915 = llvm.xor %2913, %2914 : i32 loc(#loc)
    %2916 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %2917 = llvm.add %2915, %2916 : i32 loc(#loc)
    %2918 = llvm.getelementptr inbounds %2826[%2917] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %2919 = llvm.mlir.constant(true) : i1 loc(#loc)
    %2920 = llvm.mlir.constant(dense<0> : vector<1xi8>) : vector<1xi8> loc(#loc)
    %2921 = llvm.call @"__triton_hip_predicated_load_vector<1xi8>_!llvm.ptr<3>_i1_vector<1xi8>_"(%2918, %2919, %2920) : (!llvm.ptr<3>, i1, vector<1xi8>) -> vector<1xi8> loc(#loc)
    %2922 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %2923 = llvm.extractelement %2921[%2922 : i32] : vector<1xi8> loc(#loc)
    %2924 = llvm.mlir.constant(16 : i32) : i32 loc(#loc)
    %2925 = llvm.add %2915, %2924 : i32 loc(#loc)
    %2926 = llvm.getelementptr inbounds %2826[%2925] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %2927 = llvm.mlir.constant(true) : i1 loc(#loc)
    %2928 = llvm.mlir.constant(dense<0> : vector<1xi8>) : vector<1xi8> loc(#loc)
    %2929 = llvm.call @"__triton_hip_predicated_load_vector<1xi8>_!llvm.ptr<3>_i1_vector<1xi8>_"(%2926, %2927, %2928) : (!llvm.ptr<3>, i1, vector<1xi8>) -> vector<1xi8> loc(#loc)
    %2930 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %2931 = llvm.extractelement %2929[%2930 : i32] : vector<1xi8> loc(#loc)
    %2932 = llvm.mlir.constant(4 : i32) : i32 loc(#loc)
    %2933 = llvm.add %2915, %2932 : i32 loc(#loc)
    %2934 = llvm.getelementptr inbounds %2826[%2933] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %2935 = llvm.mlir.constant(true) : i1 loc(#loc)
    %2936 = llvm.mlir.constant(dense<0> : vector<1xi8>) : vector<1xi8> loc(#loc)
    %2937 = llvm.call @"__triton_hip_predicated_load_vector<1xi8>_!llvm.ptr<3>_i1_vector<1xi8>_"(%2934, %2935, %2936) : (!llvm.ptr<3>, i1, vector<1xi8>) -> vector<1xi8> loc(#loc)
    %2938 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %2939 = llvm.extractelement %2937[%2938 : i32] : vector<1xi8> loc(#loc)
    %2940 = llvm.mlir.constant(20 : i32) : i32 loc(#loc)
    %2941 = llvm.add %2915, %2940 : i32 loc(#loc)
    %2942 = llvm.getelementptr inbounds %2826[%2941] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %2943 = llvm.mlir.constant(true) : i1 loc(#loc)
    %2944 = llvm.mlir.constant(dense<0> : vector<1xi8>) : vector<1xi8> loc(#loc)
    %2945 = llvm.call @"__triton_hip_predicated_load_vector<1xi8>_!llvm.ptr<3>_i1_vector<1xi8>_"(%2942, %2943, %2944) : (!llvm.ptr<3>, i1, vector<1xi8>) -> vector<1xi8> loc(#loc)
    %2946 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %2947 = llvm.extractelement %2945[%2946 : i32] : vector<1xi8> loc(#loc)
    %2948 = llvm.mlir.constant(8 : i32) : i32 loc(#loc)
    %2949 = llvm.add %2915, %2948 : i32 loc(#loc)
    %2950 = llvm.getelementptr inbounds %2826[%2949] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %2951 = llvm.mlir.constant(true) : i1 loc(#loc)
    %2952 = llvm.mlir.constant(dense<0> : vector<1xi8>) : vector<1xi8> loc(#loc)
    %2953 = llvm.call @"__triton_hip_predicated_load_vector<1xi8>_!llvm.ptr<3>_i1_vector<1xi8>_"(%2950, %2951, %2952) : (!llvm.ptr<3>, i1, vector<1xi8>) -> vector<1xi8> loc(#loc)
    %2954 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %2955 = llvm.extractelement %2953[%2954 : i32] : vector<1xi8> loc(#loc)
    %2956 = llvm.mlir.constant(24 : i32) : i32 loc(#loc)
    %2957 = llvm.add %2915, %2956 : i32 loc(#loc)
    %2958 = llvm.getelementptr inbounds %2826[%2957] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %2959 = llvm.mlir.constant(true) : i1 loc(#loc)
    %2960 = llvm.mlir.constant(dense<0> : vector<1xi8>) : vector<1xi8> loc(#loc)
    %2961 = llvm.call @"__triton_hip_predicated_load_vector<1xi8>_!llvm.ptr<3>_i1_vector<1xi8>_"(%2958, %2959, %2960) : (!llvm.ptr<3>, i1, vector<1xi8>) -> vector<1xi8> loc(#loc)
    %2962 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %2963 = llvm.extractelement %2961[%2962 : i32] : vector<1xi8> loc(#loc)
    %2964 = llvm.mlir.constant(12 : i32) : i32 loc(#loc)
    %2965 = llvm.add %2915, %2964 : i32 loc(#loc)
    %2966 = llvm.getelementptr inbounds %2826[%2965] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %2967 = llvm.mlir.constant(true) : i1 loc(#loc)
    %2968 = llvm.mlir.constant(dense<0> : vector<1xi8>) : vector<1xi8> loc(#loc)
    %2969 = llvm.call @"__triton_hip_predicated_load_vector<1xi8>_!llvm.ptr<3>_i1_vector<1xi8>_"(%2966, %2967, %2968) : (!llvm.ptr<3>, i1, vector<1xi8>) -> vector<1xi8> loc(#loc)
    %2970 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %2971 = llvm.extractelement %2969[%2970 : i32] : vector<1xi8> loc(#loc)
    %2972 = llvm.mlir.constant(28 : i32) : i32 loc(#loc)
    %2973 = llvm.add %2915, %2972 : i32 loc(#loc)
    %2974 = llvm.getelementptr inbounds %2826[%2973] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %2975 = llvm.mlir.constant(true) : i1 loc(#loc)
    %2976 = llvm.mlir.constant(dense<0> : vector<1xi8>) : vector<1xi8> loc(#loc)
    %2977 = llvm.call @"__triton_hip_predicated_load_vector<1xi8>_!llvm.ptr<3>_i1_vector<1xi8>_"(%2974, %2975, %2976) : (!llvm.ptr<3>, i1, vector<1xi8>) -> vector<1xi8> loc(#loc)
    %2978 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %2979 = llvm.extractelement %2977[%2978 : i32] : vector<1xi8> loc(#loc)
    %2980 = llvm.mlir.undef : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8)> loc(#loc)
    %2981 = llvm.insertvalue %2923, %2980[0] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2982 = llvm.insertvalue %2931, %2981[1] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2983 = llvm.insertvalue %2939, %2982[2] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2984 = llvm.insertvalue %2947, %2983[3] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2985 = llvm.insertvalue %2955, %2984[4] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2986 = llvm.insertvalue %2963, %2985[5] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2987 = llvm.insertvalue %2971, %2986[6] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2988 = llvm.insertvalue %2979, %2987[7] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2989 = llvm.extractvalue %2988[0] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2990 = llvm.extractvalue %2988[1] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2991 = llvm.extractvalue %2988[2] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2992 = llvm.extractvalue %2988[3] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2993 = llvm.extractvalue %2988[4] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2994 = llvm.extractvalue %2988[5] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2995 = llvm.extractvalue %2988[6] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2996 = llvm.extractvalue %2988[7] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2997 = llvm.mlir.undef : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8)> loc(#loc)
    %2998 = llvm.insertvalue %2989, %2997[0] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %2999 = llvm.insertvalue %2990, %2998[1] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %3000 = llvm.insertvalue %2991, %2999[2] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %3001 = llvm.insertvalue %2992, %3000[3] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %3002 = llvm.insertvalue %2993, %3001[4] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %3003 = llvm.insertvalue %2994, %3002[5] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %3004 = llvm.insertvalue %2995, %3003[6] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %3005 = llvm.insertvalue %2996, %3004[7] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %3006 = llvm.extractvalue %3005[0] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %3007 = llvm.extractvalue %3005[1] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %3008 = llvm.extractvalue %3005[2] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %3009 = llvm.extractvalue %3005[3] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %3010 = llvm.extractvalue %3005[4] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %3011 = llvm.extractvalue %3005[5] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %3012 = llvm.extractvalue %3005[6] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %3013 = llvm.extractvalue %3005[7] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %3014 = llvm.mlir.undef : !llvm.struct<(i8, i8, i8, i8)> loc(#loc)
    %3015 = llvm.insertvalue %3006, %3014[0] : !llvm.struct<(i8, i8, i8, i8)>  loc(#loc)
    %3016 = llvm.insertvalue %3008, %3015[1] : !llvm.struct<(i8, i8, i8, i8)>  loc(#loc)
    %3017 = llvm.insertvalue %3010, %3016[2] : !llvm.struct<(i8, i8, i8, i8)>  loc(#loc)
    %3018 = llvm.insertvalue %3012, %3017[3] : !llvm.struct<(i8, i8, i8, i8)>  loc(#loc)
    %3019 = llvm.mlir.undef : !llvm.struct<(i8, i8, i8, i8)> loc(#loc)
    %3020 = llvm.insertvalue %3007, %3019[0] : !llvm.struct<(i8, i8, i8, i8)>  loc(#loc)
    %3021 = llvm.insertvalue %3009, %3020[1] : !llvm.struct<(i8, i8, i8, i8)>  loc(#loc)
    %3022 = llvm.insertvalue %3011, %3021[2] : !llvm.struct<(i8, i8, i8, i8)>  loc(#loc)
    %3023 = llvm.insertvalue %3013, %3022[3] : !llvm.struct<(i8, i8, i8, i8)>  loc(#loc)
    %3024 = llvm.extractvalue %3018[0] : !llvm.struct<(i8, i8, i8, i8)>  loc(#loc)
    %3025 = llvm.extractvalue %3018[1] : !llvm.struct<(i8, i8, i8, i8)>  loc(#loc)
    %3026 = llvm.extractvalue %3018[2] : !llvm.struct<(i8, i8, i8, i8)>  loc(#loc)
    %3027 = llvm.extractvalue %3018[3] : !llvm.struct<(i8, i8, i8, i8)>  loc(#loc)
    %3028 = llvm.zext %3024 : i8 to i16 loc(#loc)
    %3029 = llvm.zext %3025 : i8 to i16 loc(#loc)
    %3030 = llvm.zext %3026 : i8 to i16 loc(#loc)
    %3031 = llvm.zext %3027 : i8 to i16 loc(#loc)
    %3032 = llvm.mlir.undef : !llvm.struct<(i16, i16, i16, i16)> loc(#loc)
    %3033 = llvm.insertvalue %3028, %3032[0] : !llvm.struct<(i16, i16, i16, i16)>  loc(#loc)
    %3034 = llvm.insertvalue %3029, %3033[1] : !llvm.struct<(i16, i16, i16, i16)>  loc(#loc)
    %3035 = llvm.insertvalue %3030, %3034[2] : !llvm.struct<(i16, i16, i16, i16)>  loc(#loc)
    %3036 = llvm.insertvalue %3031, %3035[3] : !llvm.struct<(i16, i16, i16, i16)>  loc(#loc)
    %3037 = llvm.extractvalue %3036[0] : !llvm.struct<(i16, i16, i16, i16)>  loc(#loc)
    %3038 = llvm.extractvalue %3036[1] : !llvm.struct<(i16, i16, i16, i16)>  loc(#loc)
    %3039 = llvm.extractvalue %3036[2] : !llvm.struct<(i16, i16, i16, i16)>  loc(#loc)
    %3040 = llvm.extractvalue %3036[3] : !llvm.struct<(i16, i16, i16, i16)>  loc(#loc)
    %3041 = llvm.extractvalue %17[0] : !llvm.struct<(i16, i16, i16, i16)>  loc(#loc)
    %3042 = llvm.extractvalue %17[1] : !llvm.struct<(i16, i16, i16, i16)>  loc(#loc)
    %3043 = llvm.extractvalue %17[2] : !llvm.struct<(i16, i16, i16, i16)>  loc(#loc)
    %3044 = llvm.extractvalue %17[3] : !llvm.struct<(i16, i16, i16, i16)>  loc(#loc)
    %3045 = llvm.shl %3037, %3041 : i16 loc(#loc)
    %3046 = llvm.shl %3038, %3042 : i16 loc(#loc)
    %3047 = llvm.shl %3039, %3043 : i16 loc(#loc)
    %3048 = llvm.shl %3040, %3044 : i16 loc(#loc)
    %3049 = llvm.mlir.undef : !llvm.struct<(i16, i16, i16, i16)> loc(#loc)
    %3050 = llvm.insertvalue %3045, %3049[0] : !llvm.struct<(i16, i16, i16, i16)>  loc(#loc)
    %3051 = llvm.insertvalue %3046, %3050[1] : !llvm.struct<(i16, i16, i16, i16)>  loc(#loc)
    %3052 = llvm.insertvalue %3047, %3051[2] : !llvm.struct<(i16, i16, i16, i16)>  loc(#loc)
    %3053 = llvm.insertvalue %3048, %3052[3] : !llvm.struct<(i16, i16, i16, i16)>  loc(#loc)
    %3054 = llvm.extractvalue %3053[0] : !llvm.struct<(i16, i16, i16, i16)>  loc(#loc)
    %3055 = llvm.extractvalue %3053[1] : !llvm.struct<(i16, i16, i16, i16)>  loc(#loc)
    %3056 = llvm.extractvalue %3053[2] : !llvm.struct<(i16, i16, i16, i16)>  loc(#loc)
    %3057 = llvm.extractvalue %3053[3] : !llvm.struct<(i16, i16, i16, i16)>  loc(#loc)
    %3058 = llvm.bitcast %3054 : i16 to bf16 loc(#loc)
    %3059 = llvm.bitcast %3055 : i16 to bf16 loc(#loc)
    %3060 = llvm.bitcast %3056 : i16 to bf16 loc(#loc)
    %3061 = llvm.bitcast %3057 : i16 to bf16 loc(#loc)
    %3062 = llvm.mlir.undef : !llvm.struct<(bf16, bf16, bf16, bf16)> loc(#loc)
    %3063 = llvm.insertvalue %3058, %3062[0] : !llvm.struct<(bf16, bf16, bf16, bf16)>  loc(#loc)
    %3064 = llvm.insertvalue %3059, %3063[1] : !llvm.struct<(bf16, bf16, bf16, bf16)>  loc(#loc)
    %3065 = llvm.insertvalue %3060, %3064[2] : !llvm.struct<(bf16, bf16, bf16, bf16)>  loc(#loc)
    %3066 = llvm.insertvalue %3061, %3065[3] : !llvm.struct<(bf16, bf16, bf16, bf16)>  loc(#loc)
    %3067 = llvm.extractvalue %3066[0] : !llvm.struct<(bf16, bf16, bf16, bf16)>  loc(#loc)
    %3068 = llvm.extractvalue %3066[1] : !llvm.struct<(bf16, bf16, bf16, bf16)>  loc(#loc)
    %3069 = llvm.extractvalue %3066[2] : !llvm.struct<(bf16, bf16, bf16, bf16)>  loc(#loc)
    %3070 = llvm.extractvalue %3066[3] : !llvm.struct<(bf16, bf16, bf16, bf16)>  loc(#loc)
    %3071 = llvm.mlir.undef : !llvm.struct<(bf16, bf16, bf16, bf16)> loc(#loc)
    %3072 = llvm.insertvalue %3067, %3071[0] : !llvm.struct<(bf16, bf16, bf16, bf16)>  loc(#loc)
    %3073 = llvm.insertvalue %3068, %3072[1] : !llvm.struct<(bf16, bf16, bf16, bf16)>  loc(#loc)
    %3074 = llvm.insertvalue %3069, %3073[2] : !llvm.struct<(bf16, bf16, bf16, bf16)>  loc(#loc)
    %3075 = llvm.insertvalue %3070, %3074[3] : !llvm.struct<(bf16, bf16, bf16, bf16)>  loc(#loc)
    %3076 = llvm.extractvalue %3075[0] : !llvm.struct<(bf16, bf16, bf16, bf16)>  loc(#loc)
    %3077 = llvm.extractvalue %3075[1] : !llvm.struct<(bf16, bf16, bf16, bf16)>  loc(#loc)
    %3078 = llvm.extractvalue %3075[2] : !llvm.struct<(bf16, bf16, bf16, bf16)>  loc(#loc)
    %3079 = llvm.extractvalue %3075[3] : !llvm.struct<(bf16, bf16, bf16, bf16)>  loc(#loc)
    %3080 = llvm.mlir.undef : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)> loc(#loc)
    %3081 = llvm.insertvalue %3076, %3080[0] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3082 = llvm.insertvalue %3076, %3081[1] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3083 = llvm.insertvalue %3076, %3082[2] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3084 = llvm.insertvalue %3076, %3083[3] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3085 = llvm.insertvalue %3076, %3084[4] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3086 = llvm.insertvalue %3076, %3085[5] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3087 = llvm.insertvalue %3076, %3086[6] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3088 = llvm.insertvalue %3076, %3087[7] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3089 = llvm.insertvalue %3077, %3088[8] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3090 = llvm.insertvalue %3077, %3089[9] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3091 = llvm.insertvalue %3077, %3090[10] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3092 = llvm.insertvalue %3077, %3091[11] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3093 = llvm.insertvalue %3077, %3092[12] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3094 = llvm.insertvalue %3077, %3093[13] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3095 = llvm.insertvalue %3077, %3094[14] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3096 = llvm.insertvalue %3077, %3095[15] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3097 = llvm.insertvalue %3078, %3096[16] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3098 = llvm.insertvalue %3078, %3097[17] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3099 = llvm.insertvalue %3078, %3098[18] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3100 = llvm.insertvalue %3078, %3099[19] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3101 = llvm.insertvalue %3078, %3100[20] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3102 = llvm.insertvalue %3078, %3101[21] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3103 = llvm.insertvalue %3078, %3102[22] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3104 = llvm.insertvalue %3078, %3103[23] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3105 = llvm.insertvalue %3079, %3104[24] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3106 = llvm.insertvalue %3079, %3105[25] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3107 = llvm.insertvalue %3079, %3106[26] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3108 = llvm.insertvalue %3079, %3107[27] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3109 = llvm.insertvalue %3079, %3108[28] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3110 = llvm.insertvalue %3079, %3109[29] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3111 = llvm.insertvalue %3079, %3110[30] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3112 = llvm.insertvalue %3079, %3111[31] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3113 = llvm.extractvalue %3112[0] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3114 = llvm.extractvalue %3112[1] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3115 = llvm.extractvalue %3112[2] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3116 = llvm.extractvalue %3112[3] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3117 = llvm.extractvalue %3112[4] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3118 = llvm.extractvalue %3112[5] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3119 = llvm.extractvalue %3112[6] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3120 = llvm.extractvalue %3112[7] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3121 = llvm.extractvalue %3112[8] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3122 = llvm.extractvalue %3112[9] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3123 = llvm.extractvalue %3112[10] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3124 = llvm.extractvalue %3112[11] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3125 = llvm.extractvalue %3112[12] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3126 = llvm.extractvalue %3112[13] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3127 = llvm.extractvalue %3112[14] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3128 = llvm.extractvalue %3112[15] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3129 = llvm.extractvalue %3112[16] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3130 = llvm.extractvalue %3112[17] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3131 = llvm.extractvalue %3112[18] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3132 = llvm.extractvalue %3112[19] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3133 = llvm.extractvalue %3112[20] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3134 = llvm.extractvalue %3112[21] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3135 = llvm.extractvalue %3112[22] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3136 = llvm.extractvalue %3112[23] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3137 = llvm.extractvalue %3112[24] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3138 = llvm.extractvalue %3112[25] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3139 = llvm.extractvalue %3112[26] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3140 = llvm.extractvalue %3112[27] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3141 = llvm.extractvalue %3112[28] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3142 = llvm.extractvalue %3112[29] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3143 = llvm.extractvalue %3112[30] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3144 = llvm.extractvalue %3112[31] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3145 = llvm.mlir.undef : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)> loc(#loc)
    %3146 = llvm.insertvalue %3113, %3145[0] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3147 = llvm.insertvalue %3114, %3146[1] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3148 = llvm.insertvalue %3115, %3147[2] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3149 = llvm.insertvalue %3116, %3148[3] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3150 = llvm.insertvalue %3117, %3149[4] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3151 = llvm.insertvalue %3118, %3150[5] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3152 = llvm.insertvalue %3119, %3151[6] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3153 = llvm.insertvalue %3120, %3152[7] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3154 = llvm.insertvalue %3121, %3153[8] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3155 = llvm.insertvalue %3122, %3154[9] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3156 = llvm.insertvalue %3123, %3155[10] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3157 = llvm.insertvalue %3124, %3156[11] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3158 = llvm.insertvalue %3125, %3157[12] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3159 = llvm.insertvalue %3126, %3158[13] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3160 = llvm.insertvalue %3127, %3159[14] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3161 = llvm.insertvalue %3128, %3160[15] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3162 = llvm.insertvalue %3129, %3161[16] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3163 = llvm.insertvalue %3130, %3162[17] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3164 = llvm.insertvalue %3131, %3163[18] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3165 = llvm.insertvalue %3132, %3164[19] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3166 = llvm.insertvalue %3133, %3165[20] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3167 = llvm.insertvalue %3134, %3166[21] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3168 = llvm.insertvalue %3135, %3167[22] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3169 = llvm.insertvalue %3136, %3168[23] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3170 = llvm.insertvalue %3137, %3169[24] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3171 = llvm.insertvalue %3138, %3170[25] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3172 = llvm.insertvalue %3139, %3171[26] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3173 = llvm.insertvalue %3140, %3172[27] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3174 = llvm.insertvalue %3141, %3173[28] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3175 = llvm.insertvalue %3142, %3174[29] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3176 = llvm.insertvalue %3143, %3175[30] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3177 = llvm.insertvalue %3144, %3176[31] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3178 = llvm.extractvalue %2734[0] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %3179 = llvm.extractvalue %2734[1] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %3180 = llvm.extractvalue %2734[2] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %3181 = llvm.extractvalue %2734[3] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %3182 = llvm.extractvalue %2734[4] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %3183 = llvm.extractvalue %2734[5] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %3184 = llvm.extractvalue %2734[6] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %3185 = llvm.extractvalue %2734[7] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %3186 = llvm.extractvalue %2734[8] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %3187 = llvm.extractvalue %2734[9] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %3188 = llvm.extractvalue %2734[10] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %3189 = llvm.extractvalue %2734[11] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %3190 = llvm.extractvalue %2734[12] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %3191 = llvm.extractvalue %2734[13] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %3192 = llvm.extractvalue %2734[14] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %3193 = llvm.extractvalue %2734[15] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %3194 = llvm.extractvalue %3177[0] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3195 = llvm.extractvalue %3177[1] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3196 = llvm.extractvalue %3177[2] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3197 = llvm.extractvalue %3177[3] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3198 = llvm.extractvalue %3177[4] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3199 = llvm.extractvalue %3177[5] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3200 = llvm.extractvalue %3177[6] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3201 = llvm.extractvalue %3177[7] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3202 = llvm.extractvalue %3177[8] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3203 = llvm.extractvalue %3177[9] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3204 = llvm.extractvalue %3177[10] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3205 = llvm.extractvalue %3177[11] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3206 = llvm.extractvalue %3177[12] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3207 = llvm.extractvalue %3177[13] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3208 = llvm.extractvalue %3177[14] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3209 = llvm.extractvalue %3177[15] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3210 = llvm.extractvalue %3177[16] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3211 = llvm.extractvalue %3177[17] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3212 = llvm.extractvalue %3177[18] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3213 = llvm.extractvalue %3177[19] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3214 = llvm.extractvalue %3177[20] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3215 = llvm.extractvalue %3177[21] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3216 = llvm.extractvalue %3177[22] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3217 = llvm.extractvalue %3177[23] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3218 = llvm.extractvalue %3177[24] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3219 = llvm.extractvalue %3177[25] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3220 = llvm.extractvalue %3177[26] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3221 = llvm.extractvalue %3177[27] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3222 = llvm.extractvalue %3177[28] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3223 = llvm.extractvalue %3177[29] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3224 = llvm.extractvalue %3177[30] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3225 = llvm.extractvalue %3177[31] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3226 = llvm.mlir.undef : vector<4xi8> loc(#loc)
    %3227 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %3228 = llvm.insertelement %3178, %3226[%3227 : i32] : vector<4xi8> loc(#loc)
    %3229 = llvm.mlir.constant(1 : i32) : i32 loc(#loc)
    %3230 = llvm.insertelement %3179, %3228[%3229 : i32] : vector<4xi8> loc(#loc)
    %3231 = llvm.mlir.constant(2 : i32) : i32 loc(#loc)
    %3232 = llvm.insertelement %3180, %3230[%3231 : i32] : vector<4xi8> loc(#loc)
    %3233 = llvm.mlir.constant(3 : i32) : i32 loc(#loc)
    %3234 = llvm.insertelement %3181, %3232[%3233 : i32] : vector<4xi8> loc(#loc)
    %3235 = llvm.bitcast %3234 : vector<4xi8> to i32 loc(#loc)
    %3236 = llvm.bitcast %3194 : bf16 to i16 loc(#loc)
    %3237 = llvm.zext %3236 : i16 to i32 loc(#loc)
    %3238 = llvm.mlir.constant(16 : i32) : i32 loc(#loc)
    %3239 = llvm.shl %3237, %3238 : i32 loc(#loc)
    %3240 = llvm.bitcast %3239 : i32 to f32 loc(#loc)
    %3241 = rocdl.cvt.scalef32.pk.bf16.fp4 %3235[0], %3240 : vector<2xbf16> loc(#loc)
    %3242 = rocdl.cvt.scalef32.pk.bf16.fp4 %3235[2], %3240 : vector<2xbf16> loc(#loc)
    %3243 = rocdl.cvt.scalef32.pk.bf16.fp4 %3235[1], %3240 : vector<2xbf16> loc(#loc)
    %3244 = rocdl.cvt.scalef32.pk.bf16.fp4 %3235[3], %3240 : vector<2xbf16> loc(#loc)
    %3245 = llvm.bitcast %3241 : vector<2xbf16> to vector<2xbf16> loc(#loc)
    %3246 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %3247 = llvm.extractelement %3245[%3246 : i32] : vector<2xbf16> loc(#loc)
    %3248 = llvm.mlir.constant(1 : i32) : i32 loc(#loc)
    %3249 = llvm.extractelement %3245[%3248 : i32] : vector<2xbf16> loc(#loc)
    %3250 = llvm.bitcast %3242 : vector<2xbf16> to vector<2xbf16> loc(#loc)
    %3251 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %3252 = llvm.extractelement %3250[%3251 : i32] : vector<2xbf16> loc(#loc)
    %3253 = llvm.mlir.constant(1 : i32) : i32 loc(#loc)
    %3254 = llvm.extractelement %3250[%3253 : i32] : vector<2xbf16> loc(#loc)
    %3255 = llvm.bitcast %3243 : vector<2xbf16> to vector<2xbf16> loc(#loc)
    %3256 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %3257 = llvm.extractelement %3255[%3256 : i32] : vector<2xbf16> loc(#loc)
    %3258 = llvm.mlir.constant(1 : i32) : i32 loc(#loc)
    %3259 = llvm.extractelement %3255[%3258 : i32] : vector<2xbf16> loc(#loc)
    %3260 = llvm.bitcast %3244 : vector<2xbf16> to vector<2xbf16> loc(#loc)
    %3261 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %3262 = llvm.extractelement %3260[%3261 : i32] : vector<2xbf16> loc(#loc)
    %3263 = llvm.mlir.constant(1 : i32) : i32 loc(#loc)
    %3264 = llvm.extractelement %3260[%3263 : i32] : vector<2xbf16> loc(#loc)
    %3265 = llvm.mlir.undef : vector<4xi8> loc(#loc)
    %3266 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %3267 = llvm.insertelement %3182, %3265[%3266 : i32] : vector<4xi8> loc(#loc)
    %3268 = llvm.mlir.constant(1 : i32) : i32 loc(#loc)
    %3269 = llvm.insertelement %3183, %3267[%3268 : i32] : vector<4xi8> loc(#loc)
    %3270 = llvm.mlir.constant(2 : i32) : i32 loc(#loc)
    %3271 = llvm.insertelement %3184, %3269[%3270 : i32] : vector<4xi8> loc(#loc)
    %3272 = llvm.mlir.constant(3 : i32) : i32 loc(#loc)
    %3273 = llvm.insertelement %3185, %3271[%3272 : i32] : vector<4xi8> loc(#loc)
    %3274 = llvm.bitcast %3273 : vector<4xi8> to i32 loc(#loc)
    %3275 = llvm.bitcast %3202 : bf16 to i16 loc(#loc)
    %3276 = llvm.zext %3275 : i16 to i32 loc(#loc)
    %3277 = llvm.mlir.constant(16 : i32) : i32 loc(#loc)
    %3278 = llvm.shl %3276, %3277 : i32 loc(#loc)
    %3279 = llvm.bitcast %3278 : i32 to f32 loc(#loc)
    %3280 = rocdl.cvt.scalef32.pk.bf16.fp4 %3274[0], %3279 : vector<2xbf16> loc(#loc)
    %3281 = rocdl.cvt.scalef32.pk.bf16.fp4 %3274[2], %3279 : vector<2xbf16> loc(#loc)
    %3282 = rocdl.cvt.scalef32.pk.bf16.fp4 %3274[1], %3279 : vector<2xbf16> loc(#loc)
    %3283 = rocdl.cvt.scalef32.pk.bf16.fp4 %3274[3], %3279 : vector<2xbf16> loc(#loc)
    %3284 = llvm.bitcast %3280 : vector<2xbf16> to vector<2xbf16> loc(#loc)
    %3285 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %3286 = llvm.extractelement %3284[%3285 : i32] : vector<2xbf16> loc(#loc)
    %3287 = llvm.mlir.constant(1 : i32) : i32 loc(#loc)
    %3288 = llvm.extractelement %3284[%3287 : i32] : vector<2xbf16> loc(#loc)
    %3289 = llvm.bitcast %3281 : vector<2xbf16> to vector<2xbf16> loc(#loc)
    %3290 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %3291 = llvm.extractelement %3289[%3290 : i32] : vector<2xbf16> loc(#loc)
    %3292 = llvm.mlir.constant(1 : i32) : i32 loc(#loc)
    %3293 = llvm.extractelement %3289[%3292 : i32] : vector<2xbf16> loc(#loc)
    %3294 = llvm.bitcast %3282 : vector<2xbf16> to vector<2xbf16> loc(#loc)
    %3295 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %3296 = llvm.extractelement %3294[%3295 : i32] : vector<2xbf16> loc(#loc)
    %3297 = llvm.mlir.constant(1 : i32) : i32 loc(#loc)
    %3298 = llvm.extractelement %3294[%3297 : i32] : vector<2xbf16> loc(#loc)
    %3299 = llvm.bitcast %3283 : vector<2xbf16> to vector<2xbf16> loc(#loc)
    %3300 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %3301 = llvm.extractelement %3299[%3300 : i32] : vector<2xbf16> loc(#loc)
    %3302 = llvm.mlir.constant(1 : i32) : i32 loc(#loc)
    %3303 = llvm.extractelement %3299[%3302 : i32] : vector<2xbf16> loc(#loc)
    %3304 = llvm.mlir.undef : vector<4xi8> loc(#loc)
    %3305 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %3306 = llvm.insertelement %3186, %3304[%3305 : i32] : vector<4xi8> loc(#loc)
    %3307 = llvm.mlir.constant(1 : i32) : i32 loc(#loc)
    %3308 = llvm.insertelement %3187, %3306[%3307 : i32] : vector<4xi8> loc(#loc)
    %3309 = llvm.mlir.constant(2 : i32) : i32 loc(#loc)
    %3310 = llvm.insertelement %3188, %3308[%3309 : i32] : vector<4xi8> loc(#loc)
    %3311 = llvm.mlir.constant(3 : i32) : i32 loc(#loc)
    %3312 = llvm.insertelement %3189, %3310[%3311 : i32] : vector<4xi8> loc(#loc)
    %3313 = llvm.bitcast %3312 : vector<4xi8> to i32 loc(#loc)
    %3314 = llvm.bitcast %3210 : bf16 to i16 loc(#loc)
    %3315 = llvm.zext %3314 : i16 to i32 loc(#loc)
    %3316 = llvm.mlir.constant(16 : i32) : i32 loc(#loc)
    %3317 = llvm.shl %3315, %3316 : i32 loc(#loc)
    %3318 = llvm.bitcast %3317 : i32 to f32 loc(#loc)
    %3319 = rocdl.cvt.scalef32.pk.bf16.fp4 %3313[0], %3318 : vector<2xbf16> loc(#loc)
    %3320 = rocdl.cvt.scalef32.pk.bf16.fp4 %3313[2], %3318 : vector<2xbf16> loc(#loc)
    %3321 = rocdl.cvt.scalef32.pk.bf16.fp4 %3313[1], %3318 : vector<2xbf16> loc(#loc)
    %3322 = rocdl.cvt.scalef32.pk.bf16.fp4 %3313[3], %3318 : vector<2xbf16> loc(#loc)
    %3323 = llvm.bitcast %3319 : vector<2xbf16> to vector<2xbf16> loc(#loc)
    %3324 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %3325 = llvm.extractelement %3323[%3324 : i32] : vector<2xbf16> loc(#loc)
    %3326 = llvm.mlir.constant(1 : i32) : i32 loc(#loc)
    %3327 = llvm.extractelement %3323[%3326 : i32] : vector<2xbf16> loc(#loc)
    %3328 = llvm.bitcast %3320 : vector<2xbf16> to vector<2xbf16> loc(#loc)
    %3329 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %3330 = llvm.extractelement %3328[%3329 : i32] : vector<2xbf16> loc(#loc)
    %3331 = llvm.mlir.constant(1 : i32) : i32 loc(#loc)
    %3332 = llvm.extractelement %3328[%3331 : i32] : vector<2xbf16> loc(#loc)
    %3333 = llvm.bitcast %3321 : vector<2xbf16> to vector<2xbf16> loc(#loc)
    %3334 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %3335 = llvm.extractelement %3333[%3334 : i32] : vector<2xbf16> loc(#loc)
    %3336 = llvm.mlir.constant(1 : i32) : i32 loc(#loc)
    %3337 = llvm.extractelement %3333[%3336 : i32] : vector<2xbf16> loc(#loc)
    %3338 = llvm.bitcast %3322 : vector<2xbf16> to vector<2xbf16> loc(#loc)
    %3339 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %3340 = llvm.extractelement %3338[%3339 : i32] : vector<2xbf16> loc(#loc)
    %3341 = llvm.mlir.constant(1 : i32) : i32 loc(#loc)
    %3342 = llvm.extractelement %3338[%3341 : i32] : vector<2xbf16> loc(#loc)
    %3343 = llvm.mlir.undef : vector<4xi8> loc(#loc)
    %3344 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %3345 = llvm.insertelement %3190, %3343[%3344 : i32] : vector<4xi8> loc(#loc)
    %3346 = llvm.mlir.constant(1 : i32) : i32 loc(#loc)
    %3347 = llvm.insertelement %3191, %3345[%3346 : i32] : vector<4xi8> loc(#loc)
    %3348 = llvm.mlir.constant(2 : i32) : i32 loc(#loc)
    %3349 = llvm.insertelement %3192, %3347[%3348 : i32] : vector<4xi8> loc(#loc)
    %3350 = llvm.mlir.constant(3 : i32) : i32 loc(#loc)
    %3351 = llvm.insertelement %3193, %3349[%3350 : i32] : vector<4xi8> loc(#loc)
    %3352 = llvm.bitcast %3351 : vector<4xi8> to i32 loc(#loc)
    %3353 = llvm.bitcast %3218 : bf16 to i16 loc(#loc)
    %3354 = llvm.zext %3353 : i16 to i32 loc(#loc)
    %3355 = llvm.mlir.constant(16 : i32) : i32 loc(#loc)
    %3356 = llvm.shl %3354, %3355 : i32 loc(#loc)
    %3357 = llvm.bitcast %3356 : i32 to f32 loc(#loc)
    %3358 = rocdl.cvt.scalef32.pk.bf16.fp4 %3352[0], %3357 : vector<2xbf16> loc(#loc)
    %3359 = rocdl.cvt.scalef32.pk.bf16.fp4 %3352[2], %3357 : vector<2xbf16> loc(#loc)
    %3360 = rocdl.cvt.scalef32.pk.bf16.fp4 %3352[1], %3357 : vector<2xbf16> loc(#loc)
    %3361 = rocdl.cvt.scalef32.pk.bf16.fp4 %3352[3], %3357 : vector<2xbf16> loc(#loc)
    %3362 = llvm.bitcast %3358 : vector<2xbf16> to vector<2xbf16> loc(#loc)
    %3363 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %3364 = llvm.extractelement %3362[%3363 : i32] : vector<2xbf16> loc(#loc)
    %3365 = llvm.mlir.constant(1 : i32) : i32 loc(#loc)
    %3366 = llvm.extractelement %3362[%3365 : i32] : vector<2xbf16> loc(#loc)
    %3367 = llvm.bitcast %3359 : vector<2xbf16> to vector<2xbf16> loc(#loc)
    %3368 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %3369 = llvm.extractelement %3367[%3368 : i32] : vector<2xbf16> loc(#loc)
    %3370 = llvm.mlir.constant(1 : i32) : i32 loc(#loc)
    %3371 = llvm.extractelement %3367[%3370 : i32] : vector<2xbf16> loc(#loc)
    %3372 = llvm.bitcast %3360 : vector<2xbf16> to vector<2xbf16> loc(#loc)
    %3373 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %3374 = llvm.extractelement %3372[%3373 : i32] : vector<2xbf16> loc(#loc)
    %3375 = llvm.mlir.constant(1 : i32) : i32 loc(#loc)
    %3376 = llvm.extractelement %3372[%3375 : i32] : vector<2xbf16> loc(#loc)
    %3377 = llvm.bitcast %3361 : vector<2xbf16> to vector<2xbf16> loc(#loc)
    %3378 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %3379 = llvm.extractelement %3377[%3378 : i32] : vector<2xbf16> loc(#loc)
    %3380 = llvm.mlir.constant(1 : i32) : i32 loc(#loc)
    %3381 = llvm.extractelement %3377[%3380 : i32] : vector<2xbf16> loc(#loc)
    %3382 = llvm.mlir.undef : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)> loc(#loc)
    %3383 = llvm.insertvalue %3247, %3382[0] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3384 = llvm.insertvalue %3249, %3383[1] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3385 = llvm.insertvalue %3252, %3384[2] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3386 = llvm.insertvalue %3254, %3385[3] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3387 = llvm.insertvalue %3257, %3386[4] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3388 = llvm.insertvalue %3259, %3387[5] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3389 = llvm.insertvalue %3262, %3388[6] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3390 = llvm.insertvalue %3264, %3389[7] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3391 = llvm.insertvalue %3286, %3390[8] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3392 = llvm.insertvalue %3288, %3391[9] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3393 = llvm.insertvalue %3291, %3392[10] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3394 = llvm.insertvalue %3293, %3393[11] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3395 = llvm.insertvalue %3296, %3394[12] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3396 = llvm.insertvalue %3298, %3395[13] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3397 = llvm.insertvalue %3301, %3396[14] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3398 = llvm.insertvalue %3303, %3397[15] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3399 = llvm.insertvalue %3325, %3398[16] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3400 = llvm.insertvalue %3327, %3399[17] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3401 = llvm.insertvalue %3330, %3400[18] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3402 = llvm.insertvalue %3332, %3401[19] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3403 = llvm.insertvalue %3335, %3402[20] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3404 = llvm.insertvalue %3337, %3403[21] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3405 = llvm.insertvalue %3340, %3404[22] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3406 = llvm.insertvalue %3342, %3405[23] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3407 = llvm.insertvalue %3364, %3406[24] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3408 = llvm.insertvalue %3366, %3407[25] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3409 = llvm.insertvalue %3369, %3408[26] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3410 = llvm.insertvalue %3371, %3409[27] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3411 = llvm.insertvalue %3374, %3410[28] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3412 = llvm.insertvalue %3376, %3411[29] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3413 = llvm.insertvalue %3379, %3412[30] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3414 = llvm.insertvalue %3381, %3413[31] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3415 = llvm.extractvalue %3018[0] : !llvm.struct<(i8, i8, i8, i8)>  loc(#loc)
    %3416 = llvm.extractvalue %3018[1] : !llvm.struct<(i8, i8, i8, i8)>  loc(#loc)
    %3417 = llvm.extractvalue %3018[2] : !llvm.struct<(i8, i8, i8, i8)>  loc(#loc)
    %3418 = llvm.extractvalue %3018[3] : !llvm.struct<(i8, i8, i8, i8)>  loc(#loc)
    %3419 = llvm.extractvalue %24[0] : !llvm.struct<(i8, i8, i8, i8)>  loc(#loc)
    %3420 = llvm.extractvalue %24[1] : !llvm.struct<(i8, i8, i8, i8)>  loc(#loc)
    %3421 = llvm.extractvalue %24[2] : !llvm.struct<(i8, i8, i8, i8)>  loc(#loc)
    %3422 = llvm.extractvalue %24[3] : !llvm.struct<(i8, i8, i8, i8)>  loc(#loc)
    %3423 = llvm.icmp "eq" %3415, %3419 : i8 loc(#loc)
    %3424 = llvm.icmp "eq" %3416, %3420 : i8 loc(#loc)
    %3425 = llvm.icmp "eq" %3417, %3421 : i8 loc(#loc)
    %3426 = llvm.icmp "eq" %3418, %3422 : i8 loc(#loc)
    %3427 = llvm.mlir.undef : !llvm.struct<(i1, i1, i1, i1)> loc(#loc)
    %3428 = llvm.insertvalue %3423, %3427[0] : !llvm.struct<(i1, i1, i1, i1)>  loc(#loc)
    %3429 = llvm.insertvalue %3424, %3428[1] : !llvm.struct<(i1, i1, i1, i1)>  loc(#loc)
    %3430 = llvm.insertvalue %3425, %3429[2] : !llvm.struct<(i1, i1, i1, i1)>  loc(#loc)
    %3431 = llvm.insertvalue %3426, %3430[3] : !llvm.struct<(i1, i1, i1, i1)>  loc(#loc)
    %3432 = llvm.extractvalue %3431[0] : !llvm.struct<(i1, i1, i1, i1)>  loc(#loc)
    %3433 = llvm.extractvalue %3431[1] : !llvm.struct<(i1, i1, i1, i1)>  loc(#loc)
    %3434 = llvm.extractvalue %3431[2] : !llvm.struct<(i1, i1, i1, i1)>  loc(#loc)
    %3435 = llvm.extractvalue %3431[3] : !llvm.struct<(i1, i1, i1, i1)>  loc(#loc)
    %3436 = llvm.mlir.undef : !llvm.struct<(i1, i1, i1, i1)> loc(#loc)
    %3437 = llvm.insertvalue %3432, %3436[0] : !llvm.struct<(i1, i1, i1, i1)>  loc(#loc)
    %3438 = llvm.insertvalue %3433, %3437[1] : !llvm.struct<(i1, i1, i1, i1)>  loc(#loc)
    %3439 = llvm.insertvalue %3434, %3438[2] : !llvm.struct<(i1, i1, i1, i1)>  loc(#loc)
    %3440 = llvm.insertvalue %3435, %3439[3] : !llvm.struct<(i1, i1, i1, i1)>  loc(#loc)
    %3441 = llvm.extractvalue %3440[0] : !llvm.struct<(i1, i1, i1, i1)>  loc(#loc)
    %3442 = llvm.extractvalue %3440[1] : !llvm.struct<(i1, i1, i1, i1)>  loc(#loc)
    %3443 = llvm.extractvalue %3440[2] : !llvm.struct<(i1, i1, i1, i1)>  loc(#loc)
    %3444 = llvm.extractvalue %3440[3] : !llvm.struct<(i1, i1, i1, i1)>  loc(#loc)
    %3445 = llvm.mlir.undef : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc)
    %3446 = llvm.insertvalue %3441, %3445[0] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %3447 = llvm.insertvalue %3441, %3446[1] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %3448 = llvm.insertvalue %3441, %3447[2] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %3449 = llvm.insertvalue %3441, %3448[3] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %3450 = llvm.insertvalue %3441, %3449[4] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %3451 = llvm.insertvalue %3441, %3450[5] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %3452 = llvm.insertvalue %3441, %3451[6] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %3453 = llvm.insertvalue %3441, %3452[7] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %3454 = llvm.insertvalue %3442, %3453[8] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %3455 = llvm.insertvalue %3442, %3454[9] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %3456 = llvm.insertvalue %3442, %3455[10] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %3457 = llvm.insertvalue %3442, %3456[11] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %3458 = llvm.insertvalue %3442, %3457[12] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %3459 = llvm.insertvalue %3442, %3458[13] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %3460 = llvm.insertvalue %3442, %3459[14] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %3461 = llvm.insertvalue %3442, %3460[15] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %3462 = llvm.insertvalue %3443, %3461[16] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %3463 = llvm.insertvalue %3443, %3462[17] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %3464 = llvm.insertvalue %3443, %3463[18] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %3465 = llvm.insertvalue %3443, %3464[19] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %3466 = llvm.insertvalue %3443, %3465[20] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %3467 = llvm.insertvalue %3443, %3466[21] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %3468 = llvm.insertvalue %3443, %3467[22] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %3469 = llvm.insertvalue %3443, %3468[23] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %3470 = llvm.insertvalue %3444, %3469[24] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %3471 = llvm.insertvalue %3444, %3470[25] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %3472 = llvm.insertvalue %3444, %3471[26] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %3473 = llvm.insertvalue %3444, %3472[27] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %3474 = llvm.insertvalue %3444, %3473[28] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %3475 = llvm.insertvalue %3444, %3474[29] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %3476 = llvm.insertvalue %3444, %3475[30] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %3477 = llvm.insertvalue %3444, %3476[31] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %3478 = llvm.extractvalue %3477[0] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %3479 = llvm.extractvalue %3477[1] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %3480 = llvm.extractvalue %3477[2] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %3481 = llvm.extractvalue %3477[3] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %3482 = llvm.extractvalue %3477[4] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %3483 = llvm.extractvalue %3477[5] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %3484 = llvm.extractvalue %3477[6] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %3485 = llvm.extractvalue %3477[7] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %3486 = llvm.extractvalue %3477[8] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %3487 = llvm.extractvalue %3477[9] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %3488 = llvm.extractvalue %3477[10] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %3489 = llvm.extractvalue %3477[11] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %3490 = llvm.extractvalue %3477[12] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %3491 = llvm.extractvalue %3477[13] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %3492 = llvm.extractvalue %3477[14] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %3493 = llvm.extractvalue %3477[15] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %3494 = llvm.extractvalue %3477[16] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %3495 = llvm.extractvalue %3477[17] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %3496 = llvm.extractvalue %3477[18] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %3497 = llvm.extractvalue %3477[19] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %3498 = llvm.extractvalue %3477[20] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %3499 = llvm.extractvalue %3477[21] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %3500 = llvm.extractvalue %3477[22] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %3501 = llvm.extractvalue %3477[23] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %3502 = llvm.extractvalue %3477[24] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %3503 = llvm.extractvalue %3477[25] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %3504 = llvm.extractvalue %3477[26] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %3505 = llvm.extractvalue %3477[27] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %3506 = llvm.extractvalue %3477[28] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %3507 = llvm.extractvalue %3477[29] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %3508 = llvm.extractvalue %3477[30] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %3509 = llvm.extractvalue %3477[31] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %3510 = llvm.mlir.undef : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc)
    %3511 = llvm.insertvalue %3478, %3510[0] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %3512 = llvm.insertvalue %3479, %3511[1] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %3513 = llvm.insertvalue %3480, %3512[2] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %3514 = llvm.insertvalue %3481, %3513[3] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %3515 = llvm.insertvalue %3482, %3514[4] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %3516 = llvm.insertvalue %3483, %3515[5] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %3517 = llvm.insertvalue %3484, %3516[6] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %3518 = llvm.insertvalue %3485, %3517[7] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %3519 = llvm.insertvalue %3486, %3518[8] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %3520 = llvm.insertvalue %3487, %3519[9] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %3521 = llvm.insertvalue %3488, %3520[10] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %3522 = llvm.insertvalue %3489, %3521[11] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %3523 = llvm.insertvalue %3490, %3522[12] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %3524 = llvm.insertvalue %3491, %3523[13] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %3525 = llvm.insertvalue %3492, %3524[14] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %3526 = llvm.insertvalue %3493, %3525[15] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %3527 = llvm.insertvalue %3494, %3526[16] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %3528 = llvm.insertvalue %3495, %3527[17] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %3529 = llvm.insertvalue %3496, %3528[18] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %3530 = llvm.insertvalue %3497, %3529[19] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %3531 = llvm.insertvalue %3498, %3530[20] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %3532 = llvm.insertvalue %3499, %3531[21] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %3533 = llvm.insertvalue %3500, %3532[22] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %3534 = llvm.insertvalue %3501, %3533[23] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %3535 = llvm.insertvalue %3502, %3534[24] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %3536 = llvm.insertvalue %3503, %3535[25] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %3537 = llvm.insertvalue %3504, %3536[26] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %3538 = llvm.insertvalue %3505, %3537[27] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %3539 = llvm.insertvalue %3506, %3538[28] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %3540 = llvm.insertvalue %3507, %3539[29] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %3541 = llvm.insertvalue %3508, %3540[30] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %3542 = llvm.insertvalue %3509, %3541[31] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %3543 = llvm.extractvalue %3542[0] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %3544 = llvm.extractvalue %3542[1] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %3545 = llvm.extractvalue %3542[2] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %3546 = llvm.extractvalue %3542[3] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %3547 = llvm.extractvalue %3542[4] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %3548 = llvm.extractvalue %3542[5] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %3549 = llvm.extractvalue %3542[6] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %3550 = llvm.extractvalue %3542[7] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %3551 = llvm.extractvalue %3542[8] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %3552 = llvm.extractvalue %3542[9] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %3553 = llvm.extractvalue %3542[10] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %3554 = llvm.extractvalue %3542[11] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %3555 = llvm.extractvalue %3542[12] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %3556 = llvm.extractvalue %3542[13] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %3557 = llvm.extractvalue %3542[14] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %3558 = llvm.extractvalue %3542[15] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %3559 = llvm.extractvalue %3542[16] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %3560 = llvm.extractvalue %3542[17] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %3561 = llvm.extractvalue %3542[18] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %3562 = llvm.extractvalue %3542[19] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %3563 = llvm.extractvalue %3542[20] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %3564 = llvm.extractvalue %3542[21] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %3565 = llvm.extractvalue %3542[22] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %3566 = llvm.extractvalue %3542[23] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %3567 = llvm.extractvalue %3542[24] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %3568 = llvm.extractvalue %3542[25] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %3569 = llvm.extractvalue %3542[26] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %3570 = llvm.extractvalue %3542[27] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %3571 = llvm.extractvalue %3542[28] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %3572 = llvm.extractvalue %3542[29] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %3573 = llvm.extractvalue %3542[30] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %3574 = llvm.extractvalue %3542[31] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %3575 = llvm.extractvalue %59[0] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3576 = llvm.extractvalue %59[1] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3577 = llvm.extractvalue %59[2] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3578 = llvm.extractvalue %59[3] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3579 = llvm.extractvalue %59[4] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3580 = llvm.extractvalue %59[5] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3581 = llvm.extractvalue %59[6] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3582 = llvm.extractvalue %59[7] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3583 = llvm.extractvalue %59[8] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3584 = llvm.extractvalue %59[9] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3585 = llvm.extractvalue %59[10] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3586 = llvm.extractvalue %59[11] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3587 = llvm.extractvalue %59[12] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3588 = llvm.extractvalue %59[13] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3589 = llvm.extractvalue %59[14] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3590 = llvm.extractvalue %59[15] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3591 = llvm.extractvalue %59[16] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3592 = llvm.extractvalue %59[17] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3593 = llvm.extractvalue %59[18] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3594 = llvm.extractvalue %59[19] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3595 = llvm.extractvalue %59[20] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3596 = llvm.extractvalue %59[21] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3597 = llvm.extractvalue %59[22] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3598 = llvm.extractvalue %59[23] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3599 = llvm.extractvalue %59[24] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3600 = llvm.extractvalue %59[25] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3601 = llvm.extractvalue %59[26] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3602 = llvm.extractvalue %59[27] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3603 = llvm.extractvalue %59[28] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3604 = llvm.extractvalue %59[29] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3605 = llvm.extractvalue %59[30] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3606 = llvm.extractvalue %59[31] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3607 = llvm.extractvalue %3414[0] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3608 = llvm.extractvalue %3414[1] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3609 = llvm.extractvalue %3414[2] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3610 = llvm.extractvalue %3414[3] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3611 = llvm.extractvalue %3414[4] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3612 = llvm.extractvalue %3414[5] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3613 = llvm.extractvalue %3414[6] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3614 = llvm.extractvalue %3414[7] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3615 = llvm.extractvalue %3414[8] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3616 = llvm.extractvalue %3414[9] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3617 = llvm.extractvalue %3414[10] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3618 = llvm.extractvalue %3414[11] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3619 = llvm.extractvalue %3414[12] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3620 = llvm.extractvalue %3414[13] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3621 = llvm.extractvalue %3414[14] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3622 = llvm.extractvalue %3414[15] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3623 = llvm.extractvalue %3414[16] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3624 = llvm.extractvalue %3414[17] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3625 = llvm.extractvalue %3414[18] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3626 = llvm.extractvalue %3414[19] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3627 = llvm.extractvalue %3414[20] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3628 = llvm.extractvalue %3414[21] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3629 = llvm.extractvalue %3414[22] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3630 = llvm.extractvalue %3414[23] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3631 = llvm.extractvalue %3414[24] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3632 = llvm.extractvalue %3414[25] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3633 = llvm.extractvalue %3414[26] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3634 = llvm.extractvalue %3414[27] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3635 = llvm.extractvalue %3414[28] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3636 = llvm.extractvalue %3414[29] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3637 = llvm.extractvalue %3414[30] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3638 = llvm.extractvalue %3414[31] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3639 = llvm.select %3543, %3575, %3607 : i1, bf16 loc(#loc)
    %3640 = llvm.select %3544, %3576, %3608 : i1, bf16 loc(#loc)
    %3641 = llvm.select %3545, %3577, %3609 : i1, bf16 loc(#loc)
    %3642 = llvm.select %3546, %3578, %3610 : i1, bf16 loc(#loc)
    %3643 = llvm.select %3547, %3579, %3611 : i1, bf16 loc(#loc)
    %3644 = llvm.select %3548, %3580, %3612 : i1, bf16 loc(#loc)
    %3645 = llvm.select %3549, %3581, %3613 : i1, bf16 loc(#loc)
    %3646 = llvm.select %3550, %3582, %3614 : i1, bf16 loc(#loc)
    %3647 = llvm.select %3551, %3583, %3615 : i1, bf16 loc(#loc)
    %3648 = llvm.select %3552, %3584, %3616 : i1, bf16 loc(#loc)
    %3649 = llvm.select %3553, %3585, %3617 : i1, bf16 loc(#loc)
    %3650 = llvm.select %3554, %3586, %3618 : i1, bf16 loc(#loc)
    %3651 = llvm.select %3555, %3587, %3619 : i1, bf16 loc(#loc)
    %3652 = llvm.select %3556, %3588, %3620 : i1, bf16 loc(#loc)
    %3653 = llvm.select %3557, %3589, %3621 : i1, bf16 loc(#loc)
    %3654 = llvm.select %3558, %3590, %3622 : i1, bf16 loc(#loc)
    %3655 = llvm.select %3559, %3591, %3623 : i1, bf16 loc(#loc)
    %3656 = llvm.select %3560, %3592, %3624 : i1, bf16 loc(#loc)
    %3657 = llvm.select %3561, %3593, %3625 : i1, bf16 loc(#loc)
    %3658 = llvm.select %3562, %3594, %3626 : i1, bf16 loc(#loc)
    %3659 = llvm.select %3563, %3595, %3627 : i1, bf16 loc(#loc)
    %3660 = llvm.select %3564, %3596, %3628 : i1, bf16 loc(#loc)
    %3661 = llvm.select %3565, %3597, %3629 : i1, bf16 loc(#loc)
    %3662 = llvm.select %3566, %3598, %3630 : i1, bf16 loc(#loc)
    %3663 = llvm.select %3567, %3599, %3631 : i1, bf16 loc(#loc)
    %3664 = llvm.select %3568, %3600, %3632 : i1, bf16 loc(#loc)
    %3665 = llvm.select %3569, %3601, %3633 : i1, bf16 loc(#loc)
    %3666 = llvm.select %3570, %3602, %3634 : i1, bf16 loc(#loc)
    %3667 = llvm.select %3571, %3603, %3635 : i1, bf16 loc(#loc)
    %3668 = llvm.select %3572, %3604, %3636 : i1, bf16 loc(#loc)
    %3669 = llvm.select %3573, %3605, %3637 : i1, bf16 loc(#loc)
    %3670 = llvm.select %3574, %3606, %3638 : i1, bf16 loc(#loc)
    %3671 = llvm.mlir.undef : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)> loc(#loc)
    %3672 = llvm.insertvalue %3639, %3671[0] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3673 = llvm.insertvalue %3640, %3672[1] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3674 = llvm.insertvalue %3641, %3673[2] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3675 = llvm.insertvalue %3642, %3674[3] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3676 = llvm.insertvalue %3643, %3675[4] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3677 = llvm.insertvalue %3644, %3676[5] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3678 = llvm.insertvalue %3645, %3677[6] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3679 = llvm.insertvalue %3646, %3678[7] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3680 = llvm.insertvalue %3647, %3679[8] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3681 = llvm.insertvalue %3648, %3680[9] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3682 = llvm.insertvalue %3649, %3681[10] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3683 = llvm.insertvalue %3650, %3682[11] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3684 = llvm.insertvalue %3651, %3683[12] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3685 = llvm.insertvalue %3652, %3684[13] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3686 = llvm.insertvalue %3653, %3685[14] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3687 = llvm.insertvalue %3654, %3686[15] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3688 = llvm.insertvalue %3655, %3687[16] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3689 = llvm.insertvalue %3656, %3688[17] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3690 = llvm.insertvalue %3657, %3689[18] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3691 = llvm.insertvalue %3658, %3690[19] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3692 = llvm.insertvalue %3659, %3691[20] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3693 = llvm.insertvalue %3660, %3692[21] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3694 = llvm.insertvalue %3661, %3693[22] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3695 = llvm.insertvalue %3662, %3694[23] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3696 = llvm.insertvalue %3663, %3695[24] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3697 = llvm.insertvalue %3664, %3696[25] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3698 = llvm.insertvalue %3665, %3697[26] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3699 = llvm.insertvalue %3666, %3698[27] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3700 = llvm.insertvalue %3667, %3699[28] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3701 = llvm.insertvalue %3668, %3700[29] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3702 = llvm.insertvalue %3669, %3701[30] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3703 = llvm.insertvalue %3670, %3702[31] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3704 = llvm.extractvalue %2119[0] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3705 = llvm.extractvalue %2119[1] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3706 = llvm.extractvalue %2119[2] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3707 = llvm.extractvalue %2119[3] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3708 = llvm.extractvalue %2119[4] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3709 = llvm.extractvalue %2119[5] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3710 = llvm.extractvalue %2119[6] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3711 = llvm.extractvalue %2119[7] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3712 = llvm.extractvalue %2119[8] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3713 = llvm.extractvalue %2119[9] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3714 = llvm.extractvalue %2119[10] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3715 = llvm.extractvalue %2119[11] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3716 = llvm.extractvalue %2119[12] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3717 = llvm.extractvalue %2119[13] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3718 = llvm.extractvalue %2119[14] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3719 = llvm.extractvalue %2119[15] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3720 = llvm.extractvalue %2119[16] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3721 = llvm.extractvalue %2119[17] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3722 = llvm.extractvalue %2119[18] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3723 = llvm.extractvalue %2119[19] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3724 = llvm.extractvalue %2119[20] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3725 = llvm.extractvalue %2119[21] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3726 = llvm.extractvalue %2119[22] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3727 = llvm.extractvalue %2119[23] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3728 = llvm.extractvalue %2119[24] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3729 = llvm.extractvalue %2119[25] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3730 = llvm.extractvalue %2119[26] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3731 = llvm.extractvalue %2119[27] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3732 = llvm.extractvalue %2119[28] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3733 = llvm.extractvalue %2119[29] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3734 = llvm.extractvalue %2119[30] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3735 = llvm.extractvalue %2119[31] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3736 = llvm.mlir.undef : vector<8xbf16> loc(#loc)
    %3737 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %3738 = llvm.insertelement %3704, %3736[%3737 : i32] : vector<8xbf16> loc(#loc)
    %3739 = llvm.mlir.constant(1 : i32) : i32 loc(#loc)
    %3740 = llvm.insertelement %3705, %3738[%3739 : i32] : vector<8xbf16> loc(#loc)
    %3741 = llvm.mlir.constant(2 : i32) : i32 loc(#loc)
    %3742 = llvm.insertelement %3706, %3740[%3741 : i32] : vector<8xbf16> loc(#loc)
    %3743 = llvm.mlir.constant(3 : i32) : i32 loc(#loc)
    %3744 = llvm.insertelement %3707, %3742[%3743 : i32] : vector<8xbf16> loc(#loc)
    %3745 = llvm.mlir.constant(4 : i32) : i32 loc(#loc)
    %3746 = llvm.insertelement %3708, %3744[%3745 : i32] : vector<8xbf16> loc(#loc)
    %3747 = llvm.mlir.constant(5 : i32) : i32 loc(#loc)
    %3748 = llvm.insertelement %3709, %3746[%3747 : i32] : vector<8xbf16> loc(#loc)
    %3749 = llvm.mlir.constant(6 : i32) : i32 loc(#loc)
    %3750 = llvm.insertelement %3710, %3748[%3749 : i32] : vector<8xbf16> loc(#loc)
    %3751 = llvm.mlir.constant(7 : i32) : i32 loc(#loc)
    %3752 = llvm.insertelement %3711, %3750[%3751 : i32] : vector<8xbf16> loc(#loc)
    %3753 = llvm.mlir.undef : vector<8xbf16> loc(#loc)
    %3754 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %3755 = llvm.extractelement %3752[%3754 : i32] : vector<8xbf16> loc(#loc)
    %3756 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %3757 = llvm.insertelement %3755, %3753[%3756 : i32] : vector<8xbf16> loc(#loc)
    %3758 = llvm.mlir.constant(1 : i32) : i32 loc(#loc)
    %3759 = llvm.extractelement %3752[%3758 : i32] : vector<8xbf16> loc(#loc)
    %3760 = llvm.mlir.constant(1 : i32) : i32 loc(#loc)
    %3761 = llvm.insertelement %3759, %3757[%3760 : i32] : vector<8xbf16> loc(#loc)
    %3762 = llvm.mlir.constant(2 : i32) : i32 loc(#loc)
    %3763 = llvm.extractelement %3752[%3762 : i32] : vector<8xbf16> loc(#loc)
    %3764 = llvm.mlir.constant(2 : i32) : i32 loc(#loc)
    %3765 = llvm.insertelement %3763, %3761[%3764 : i32] : vector<8xbf16> loc(#loc)
    %3766 = llvm.mlir.constant(3 : i32) : i32 loc(#loc)
    %3767 = llvm.extractelement %3752[%3766 : i32] : vector<8xbf16> loc(#loc)
    %3768 = llvm.mlir.constant(3 : i32) : i32 loc(#loc)
    %3769 = llvm.insertelement %3767, %3765[%3768 : i32] : vector<8xbf16> loc(#loc)
    %3770 = llvm.mlir.constant(4 : i32) : i32 loc(#loc)
    %3771 = llvm.extractelement %3752[%3770 : i32] : vector<8xbf16> loc(#loc)
    %3772 = llvm.mlir.constant(4 : i32) : i32 loc(#loc)
    %3773 = llvm.insertelement %3771, %3769[%3772 : i32] : vector<8xbf16> loc(#loc)
    %3774 = llvm.mlir.constant(5 : i32) : i32 loc(#loc)
    %3775 = llvm.extractelement %3752[%3774 : i32] : vector<8xbf16> loc(#loc)
    %3776 = llvm.mlir.constant(5 : i32) : i32 loc(#loc)
    %3777 = llvm.insertelement %3775, %3773[%3776 : i32] : vector<8xbf16> loc(#loc)
    %3778 = llvm.mlir.constant(6 : i32) : i32 loc(#loc)
    %3779 = llvm.extractelement %3752[%3778 : i32] : vector<8xbf16> loc(#loc)
    %3780 = llvm.mlir.constant(6 : i32) : i32 loc(#loc)
    %3781 = llvm.insertelement %3779, %3777[%3780 : i32] : vector<8xbf16> loc(#loc)
    %3782 = llvm.mlir.constant(7 : i32) : i32 loc(#loc)
    %3783 = llvm.extractelement %3752[%3782 : i32] : vector<8xbf16> loc(#loc)
    %3784 = llvm.mlir.constant(7 : i32) : i32 loc(#loc)
    %3785 = llvm.insertelement %3783, %3781[%3784 : i32] : vector<8xbf16> loc(#loc)
    %3786 = llvm.mlir.undef : vector<8xbf16> loc(#loc)
    %3787 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %3788 = llvm.insertelement %3712, %3786[%3787 : i32] : vector<8xbf16> loc(#loc)
    %3789 = llvm.mlir.constant(1 : i32) : i32 loc(#loc)
    %3790 = llvm.insertelement %3713, %3788[%3789 : i32] : vector<8xbf16> loc(#loc)
    %3791 = llvm.mlir.constant(2 : i32) : i32 loc(#loc)
    %3792 = llvm.insertelement %3714, %3790[%3791 : i32] : vector<8xbf16> loc(#loc)
    %3793 = llvm.mlir.constant(3 : i32) : i32 loc(#loc)
    %3794 = llvm.insertelement %3715, %3792[%3793 : i32] : vector<8xbf16> loc(#loc)
    %3795 = llvm.mlir.constant(4 : i32) : i32 loc(#loc)
    %3796 = llvm.insertelement %3716, %3794[%3795 : i32] : vector<8xbf16> loc(#loc)
    %3797 = llvm.mlir.constant(5 : i32) : i32 loc(#loc)
    %3798 = llvm.insertelement %3717, %3796[%3797 : i32] : vector<8xbf16> loc(#loc)
    %3799 = llvm.mlir.constant(6 : i32) : i32 loc(#loc)
    %3800 = llvm.insertelement %3718, %3798[%3799 : i32] : vector<8xbf16> loc(#loc)
    %3801 = llvm.mlir.constant(7 : i32) : i32 loc(#loc)
    %3802 = llvm.insertelement %3719, %3800[%3801 : i32] : vector<8xbf16> loc(#loc)
    %3803 = llvm.mlir.undef : vector<8xbf16> loc(#loc)
    %3804 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %3805 = llvm.extractelement %3802[%3804 : i32] : vector<8xbf16> loc(#loc)
    %3806 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %3807 = llvm.insertelement %3805, %3803[%3806 : i32] : vector<8xbf16> loc(#loc)
    %3808 = llvm.mlir.constant(1 : i32) : i32 loc(#loc)
    %3809 = llvm.extractelement %3802[%3808 : i32] : vector<8xbf16> loc(#loc)
    %3810 = llvm.mlir.constant(1 : i32) : i32 loc(#loc)
    %3811 = llvm.insertelement %3809, %3807[%3810 : i32] : vector<8xbf16> loc(#loc)
    %3812 = llvm.mlir.constant(2 : i32) : i32 loc(#loc)
    %3813 = llvm.extractelement %3802[%3812 : i32] : vector<8xbf16> loc(#loc)
    %3814 = llvm.mlir.constant(2 : i32) : i32 loc(#loc)
    %3815 = llvm.insertelement %3813, %3811[%3814 : i32] : vector<8xbf16> loc(#loc)
    %3816 = llvm.mlir.constant(3 : i32) : i32 loc(#loc)
    %3817 = llvm.extractelement %3802[%3816 : i32] : vector<8xbf16> loc(#loc)
    %3818 = llvm.mlir.constant(3 : i32) : i32 loc(#loc)
    %3819 = llvm.insertelement %3817, %3815[%3818 : i32] : vector<8xbf16> loc(#loc)
    %3820 = llvm.mlir.constant(4 : i32) : i32 loc(#loc)
    %3821 = llvm.extractelement %3802[%3820 : i32] : vector<8xbf16> loc(#loc)
    %3822 = llvm.mlir.constant(4 : i32) : i32 loc(#loc)
    %3823 = llvm.insertelement %3821, %3819[%3822 : i32] : vector<8xbf16> loc(#loc)
    %3824 = llvm.mlir.constant(5 : i32) : i32 loc(#loc)
    %3825 = llvm.extractelement %3802[%3824 : i32] : vector<8xbf16> loc(#loc)
    %3826 = llvm.mlir.constant(5 : i32) : i32 loc(#loc)
    %3827 = llvm.insertelement %3825, %3823[%3826 : i32] : vector<8xbf16> loc(#loc)
    %3828 = llvm.mlir.constant(6 : i32) : i32 loc(#loc)
    %3829 = llvm.extractelement %3802[%3828 : i32] : vector<8xbf16> loc(#loc)
    %3830 = llvm.mlir.constant(6 : i32) : i32 loc(#loc)
    %3831 = llvm.insertelement %3829, %3827[%3830 : i32] : vector<8xbf16> loc(#loc)
    %3832 = llvm.mlir.constant(7 : i32) : i32 loc(#loc)
    %3833 = llvm.extractelement %3802[%3832 : i32] : vector<8xbf16> loc(#loc)
    %3834 = llvm.mlir.constant(7 : i32) : i32 loc(#loc)
    %3835 = llvm.insertelement %3833, %3831[%3834 : i32] : vector<8xbf16> loc(#loc)
    %3836 = llvm.mlir.undef : vector<8xbf16> loc(#loc)
    %3837 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %3838 = llvm.insertelement %3720, %3836[%3837 : i32] : vector<8xbf16> loc(#loc)
    %3839 = llvm.mlir.constant(1 : i32) : i32 loc(#loc)
    %3840 = llvm.insertelement %3721, %3838[%3839 : i32] : vector<8xbf16> loc(#loc)
    %3841 = llvm.mlir.constant(2 : i32) : i32 loc(#loc)
    %3842 = llvm.insertelement %3722, %3840[%3841 : i32] : vector<8xbf16> loc(#loc)
    %3843 = llvm.mlir.constant(3 : i32) : i32 loc(#loc)
    %3844 = llvm.insertelement %3723, %3842[%3843 : i32] : vector<8xbf16> loc(#loc)
    %3845 = llvm.mlir.constant(4 : i32) : i32 loc(#loc)
    %3846 = llvm.insertelement %3724, %3844[%3845 : i32] : vector<8xbf16> loc(#loc)
    %3847 = llvm.mlir.constant(5 : i32) : i32 loc(#loc)
    %3848 = llvm.insertelement %3725, %3846[%3847 : i32] : vector<8xbf16> loc(#loc)
    %3849 = llvm.mlir.constant(6 : i32) : i32 loc(#loc)
    %3850 = llvm.insertelement %3726, %3848[%3849 : i32] : vector<8xbf16> loc(#loc)
    %3851 = llvm.mlir.constant(7 : i32) : i32 loc(#loc)
    %3852 = llvm.insertelement %3727, %3850[%3851 : i32] : vector<8xbf16> loc(#loc)
    %3853 = llvm.mlir.undef : vector<8xbf16> loc(#loc)
    %3854 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %3855 = llvm.extractelement %3852[%3854 : i32] : vector<8xbf16> loc(#loc)
    %3856 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %3857 = llvm.insertelement %3855, %3853[%3856 : i32] : vector<8xbf16> loc(#loc)
    %3858 = llvm.mlir.constant(1 : i32) : i32 loc(#loc)
    %3859 = llvm.extractelement %3852[%3858 : i32] : vector<8xbf16> loc(#loc)
    %3860 = llvm.mlir.constant(1 : i32) : i32 loc(#loc)
    %3861 = llvm.insertelement %3859, %3857[%3860 : i32] : vector<8xbf16> loc(#loc)
    %3862 = llvm.mlir.constant(2 : i32) : i32 loc(#loc)
    %3863 = llvm.extractelement %3852[%3862 : i32] : vector<8xbf16> loc(#loc)
    %3864 = llvm.mlir.constant(2 : i32) : i32 loc(#loc)
    %3865 = llvm.insertelement %3863, %3861[%3864 : i32] : vector<8xbf16> loc(#loc)
    %3866 = llvm.mlir.constant(3 : i32) : i32 loc(#loc)
    %3867 = llvm.extractelement %3852[%3866 : i32] : vector<8xbf16> loc(#loc)
    %3868 = llvm.mlir.constant(3 : i32) : i32 loc(#loc)
    %3869 = llvm.insertelement %3867, %3865[%3868 : i32] : vector<8xbf16> loc(#loc)
    %3870 = llvm.mlir.constant(4 : i32) : i32 loc(#loc)
    %3871 = llvm.extractelement %3852[%3870 : i32] : vector<8xbf16> loc(#loc)
    %3872 = llvm.mlir.constant(4 : i32) : i32 loc(#loc)
    %3873 = llvm.insertelement %3871, %3869[%3872 : i32] : vector<8xbf16> loc(#loc)
    %3874 = llvm.mlir.constant(5 : i32) : i32 loc(#loc)
    %3875 = llvm.extractelement %3852[%3874 : i32] : vector<8xbf16> loc(#loc)
    %3876 = llvm.mlir.constant(5 : i32) : i32 loc(#loc)
    %3877 = llvm.insertelement %3875, %3873[%3876 : i32] : vector<8xbf16> loc(#loc)
    %3878 = llvm.mlir.constant(6 : i32) : i32 loc(#loc)
    %3879 = llvm.extractelement %3852[%3878 : i32] : vector<8xbf16> loc(#loc)
    %3880 = llvm.mlir.constant(6 : i32) : i32 loc(#loc)
    %3881 = llvm.insertelement %3879, %3877[%3880 : i32] : vector<8xbf16> loc(#loc)
    %3882 = llvm.mlir.constant(7 : i32) : i32 loc(#loc)
    %3883 = llvm.extractelement %3852[%3882 : i32] : vector<8xbf16> loc(#loc)
    %3884 = llvm.mlir.constant(7 : i32) : i32 loc(#loc)
    %3885 = llvm.insertelement %3883, %3881[%3884 : i32] : vector<8xbf16> loc(#loc)
    %3886 = llvm.mlir.undef : vector<8xbf16> loc(#loc)
    %3887 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %3888 = llvm.insertelement %3728, %3886[%3887 : i32] : vector<8xbf16> loc(#loc)
    %3889 = llvm.mlir.constant(1 : i32) : i32 loc(#loc)
    %3890 = llvm.insertelement %3729, %3888[%3889 : i32] : vector<8xbf16> loc(#loc)
    %3891 = llvm.mlir.constant(2 : i32) : i32 loc(#loc)
    %3892 = llvm.insertelement %3730, %3890[%3891 : i32] : vector<8xbf16> loc(#loc)
    %3893 = llvm.mlir.constant(3 : i32) : i32 loc(#loc)
    %3894 = llvm.insertelement %3731, %3892[%3893 : i32] : vector<8xbf16> loc(#loc)
    %3895 = llvm.mlir.constant(4 : i32) : i32 loc(#loc)
    %3896 = llvm.insertelement %3732, %3894[%3895 : i32] : vector<8xbf16> loc(#loc)
    %3897 = llvm.mlir.constant(5 : i32) : i32 loc(#loc)
    %3898 = llvm.insertelement %3733, %3896[%3897 : i32] : vector<8xbf16> loc(#loc)
    %3899 = llvm.mlir.constant(6 : i32) : i32 loc(#loc)
    %3900 = llvm.insertelement %3734, %3898[%3899 : i32] : vector<8xbf16> loc(#loc)
    %3901 = llvm.mlir.constant(7 : i32) : i32 loc(#loc)
    %3902 = llvm.insertelement %3735, %3900[%3901 : i32] : vector<8xbf16> loc(#loc)
    %3903 = llvm.mlir.undef : vector<8xbf16> loc(#loc)
    %3904 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %3905 = llvm.extractelement %3902[%3904 : i32] : vector<8xbf16> loc(#loc)
    %3906 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %3907 = llvm.insertelement %3905, %3903[%3906 : i32] : vector<8xbf16> loc(#loc)
    %3908 = llvm.mlir.constant(1 : i32) : i32 loc(#loc)
    %3909 = llvm.extractelement %3902[%3908 : i32] : vector<8xbf16> loc(#loc)
    %3910 = llvm.mlir.constant(1 : i32) : i32 loc(#loc)
    %3911 = llvm.insertelement %3909, %3907[%3910 : i32] : vector<8xbf16> loc(#loc)
    %3912 = llvm.mlir.constant(2 : i32) : i32 loc(#loc)
    %3913 = llvm.extractelement %3902[%3912 : i32] : vector<8xbf16> loc(#loc)
    %3914 = llvm.mlir.constant(2 : i32) : i32 loc(#loc)
    %3915 = llvm.insertelement %3913, %3911[%3914 : i32] : vector<8xbf16> loc(#loc)
    %3916 = llvm.mlir.constant(3 : i32) : i32 loc(#loc)
    %3917 = llvm.extractelement %3902[%3916 : i32] : vector<8xbf16> loc(#loc)
    %3918 = llvm.mlir.constant(3 : i32) : i32 loc(#loc)
    %3919 = llvm.insertelement %3917, %3915[%3918 : i32] : vector<8xbf16> loc(#loc)
    %3920 = llvm.mlir.constant(4 : i32) : i32 loc(#loc)
    %3921 = llvm.extractelement %3902[%3920 : i32] : vector<8xbf16> loc(#loc)
    %3922 = llvm.mlir.constant(4 : i32) : i32 loc(#loc)
    %3923 = llvm.insertelement %3921, %3919[%3922 : i32] : vector<8xbf16> loc(#loc)
    %3924 = llvm.mlir.constant(5 : i32) : i32 loc(#loc)
    %3925 = llvm.extractelement %3902[%3924 : i32] : vector<8xbf16> loc(#loc)
    %3926 = llvm.mlir.constant(5 : i32) : i32 loc(#loc)
    %3927 = llvm.insertelement %3925, %3923[%3926 : i32] : vector<8xbf16> loc(#loc)
    %3928 = llvm.mlir.constant(6 : i32) : i32 loc(#loc)
    %3929 = llvm.extractelement %3902[%3928 : i32] : vector<8xbf16> loc(#loc)
    %3930 = llvm.mlir.constant(6 : i32) : i32 loc(#loc)
    %3931 = llvm.insertelement %3929, %3927[%3930 : i32] : vector<8xbf16> loc(#loc)
    %3932 = llvm.mlir.constant(7 : i32) : i32 loc(#loc)
    %3933 = llvm.extractelement %3902[%3932 : i32] : vector<8xbf16> loc(#loc)
    %3934 = llvm.mlir.constant(7 : i32) : i32 loc(#loc)
    %3935 = llvm.insertelement %3933, %3931[%3934 : i32] : vector<8xbf16> loc(#loc)
    %3936 = llvm.extractvalue %3703[0] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3937 = llvm.extractvalue %3703[1] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3938 = llvm.extractvalue %3703[2] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3939 = llvm.extractvalue %3703[3] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3940 = llvm.extractvalue %3703[4] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3941 = llvm.extractvalue %3703[5] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3942 = llvm.extractvalue %3703[6] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3943 = llvm.extractvalue %3703[7] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3944 = llvm.extractvalue %3703[8] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3945 = llvm.extractvalue %3703[9] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3946 = llvm.extractvalue %3703[10] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3947 = llvm.extractvalue %3703[11] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3948 = llvm.extractvalue %3703[12] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3949 = llvm.extractvalue %3703[13] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3950 = llvm.extractvalue %3703[14] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3951 = llvm.extractvalue %3703[15] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3952 = llvm.extractvalue %3703[16] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3953 = llvm.extractvalue %3703[17] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3954 = llvm.extractvalue %3703[18] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3955 = llvm.extractvalue %3703[19] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3956 = llvm.extractvalue %3703[20] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3957 = llvm.extractvalue %3703[21] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3958 = llvm.extractvalue %3703[22] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3959 = llvm.extractvalue %3703[23] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3960 = llvm.extractvalue %3703[24] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3961 = llvm.extractvalue %3703[25] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3962 = llvm.extractvalue %3703[26] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3963 = llvm.extractvalue %3703[27] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3964 = llvm.extractvalue %3703[28] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3965 = llvm.extractvalue %3703[29] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3966 = llvm.extractvalue %3703[30] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3967 = llvm.extractvalue %3703[31] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %3968 = llvm.mlir.undef : vector<8xbf16> loc(#loc)
    %3969 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %3970 = llvm.insertelement %3936, %3968[%3969 : i32] : vector<8xbf16> loc(#loc)
    %3971 = llvm.mlir.constant(1 : i32) : i32 loc(#loc)
    %3972 = llvm.insertelement %3937, %3970[%3971 : i32] : vector<8xbf16> loc(#loc)
    %3973 = llvm.mlir.constant(2 : i32) : i32 loc(#loc)
    %3974 = llvm.insertelement %3938, %3972[%3973 : i32] : vector<8xbf16> loc(#loc)
    %3975 = llvm.mlir.constant(3 : i32) : i32 loc(#loc)
    %3976 = llvm.insertelement %3939, %3974[%3975 : i32] : vector<8xbf16> loc(#loc)
    %3977 = llvm.mlir.constant(4 : i32) : i32 loc(#loc)
    %3978 = llvm.insertelement %3940, %3976[%3977 : i32] : vector<8xbf16> loc(#loc)
    %3979 = llvm.mlir.constant(5 : i32) : i32 loc(#loc)
    %3980 = llvm.insertelement %3941, %3978[%3979 : i32] : vector<8xbf16> loc(#loc)
    %3981 = llvm.mlir.constant(6 : i32) : i32 loc(#loc)
    %3982 = llvm.insertelement %3942, %3980[%3981 : i32] : vector<8xbf16> loc(#loc)
    %3983 = llvm.mlir.constant(7 : i32) : i32 loc(#loc)
    %3984 = llvm.insertelement %3943, %3982[%3983 : i32] : vector<8xbf16> loc(#loc)
    %3985 = llvm.mlir.undef : vector<8xbf16> loc(#loc)
    %3986 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %3987 = llvm.extractelement %3984[%3986 : i32] : vector<8xbf16> loc(#loc)
    %3988 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %3989 = llvm.insertelement %3987, %3985[%3988 : i32] : vector<8xbf16> loc(#loc)
    %3990 = llvm.mlir.constant(1 : i32) : i32 loc(#loc)
    %3991 = llvm.extractelement %3984[%3990 : i32] : vector<8xbf16> loc(#loc)
    %3992 = llvm.mlir.constant(1 : i32) : i32 loc(#loc)
    %3993 = llvm.insertelement %3991, %3989[%3992 : i32] : vector<8xbf16> loc(#loc)
    %3994 = llvm.mlir.constant(2 : i32) : i32 loc(#loc)
    %3995 = llvm.extractelement %3984[%3994 : i32] : vector<8xbf16> loc(#loc)
    %3996 = llvm.mlir.constant(2 : i32) : i32 loc(#loc)
    %3997 = llvm.insertelement %3995, %3993[%3996 : i32] : vector<8xbf16> loc(#loc)
    %3998 = llvm.mlir.constant(3 : i32) : i32 loc(#loc)
    %3999 = llvm.extractelement %3984[%3998 : i32] : vector<8xbf16> loc(#loc)
    %4000 = llvm.mlir.constant(3 : i32) : i32 loc(#loc)
    %4001 = llvm.insertelement %3999, %3997[%4000 : i32] : vector<8xbf16> loc(#loc)
    %4002 = llvm.mlir.constant(4 : i32) : i32 loc(#loc)
    %4003 = llvm.extractelement %3984[%4002 : i32] : vector<8xbf16> loc(#loc)
    %4004 = llvm.mlir.constant(4 : i32) : i32 loc(#loc)
    %4005 = llvm.insertelement %4003, %4001[%4004 : i32] : vector<8xbf16> loc(#loc)
    %4006 = llvm.mlir.constant(5 : i32) : i32 loc(#loc)
    %4007 = llvm.extractelement %3984[%4006 : i32] : vector<8xbf16> loc(#loc)
    %4008 = llvm.mlir.constant(5 : i32) : i32 loc(#loc)
    %4009 = llvm.insertelement %4007, %4005[%4008 : i32] : vector<8xbf16> loc(#loc)
    %4010 = llvm.mlir.constant(6 : i32) : i32 loc(#loc)
    %4011 = llvm.extractelement %3984[%4010 : i32] : vector<8xbf16> loc(#loc)
    %4012 = llvm.mlir.constant(6 : i32) : i32 loc(#loc)
    %4013 = llvm.insertelement %4011, %4009[%4012 : i32] : vector<8xbf16> loc(#loc)
    %4014 = llvm.mlir.constant(7 : i32) : i32 loc(#loc)
    %4015 = llvm.extractelement %3984[%4014 : i32] : vector<8xbf16> loc(#loc)
    %4016 = llvm.mlir.constant(7 : i32) : i32 loc(#loc)
    %4017 = llvm.insertelement %4015, %4013[%4016 : i32] : vector<8xbf16> loc(#loc)
    %4018 = llvm.mlir.undef : vector<8xbf16> loc(#loc)
    %4019 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %4020 = llvm.insertelement %3944, %4018[%4019 : i32] : vector<8xbf16> loc(#loc)
    %4021 = llvm.mlir.constant(1 : i32) : i32 loc(#loc)
    %4022 = llvm.insertelement %3945, %4020[%4021 : i32] : vector<8xbf16> loc(#loc)
    %4023 = llvm.mlir.constant(2 : i32) : i32 loc(#loc)
    %4024 = llvm.insertelement %3946, %4022[%4023 : i32] : vector<8xbf16> loc(#loc)
    %4025 = llvm.mlir.constant(3 : i32) : i32 loc(#loc)
    %4026 = llvm.insertelement %3947, %4024[%4025 : i32] : vector<8xbf16> loc(#loc)
    %4027 = llvm.mlir.constant(4 : i32) : i32 loc(#loc)
    %4028 = llvm.insertelement %3948, %4026[%4027 : i32] : vector<8xbf16> loc(#loc)
    %4029 = llvm.mlir.constant(5 : i32) : i32 loc(#loc)
    %4030 = llvm.insertelement %3949, %4028[%4029 : i32] : vector<8xbf16> loc(#loc)
    %4031 = llvm.mlir.constant(6 : i32) : i32 loc(#loc)
    %4032 = llvm.insertelement %3950, %4030[%4031 : i32] : vector<8xbf16> loc(#loc)
    %4033 = llvm.mlir.constant(7 : i32) : i32 loc(#loc)
    %4034 = llvm.insertelement %3951, %4032[%4033 : i32] : vector<8xbf16> loc(#loc)
    %4035 = llvm.mlir.undef : vector<8xbf16> loc(#loc)
    %4036 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %4037 = llvm.extractelement %4034[%4036 : i32] : vector<8xbf16> loc(#loc)
    %4038 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %4039 = llvm.insertelement %4037, %4035[%4038 : i32] : vector<8xbf16> loc(#loc)
    %4040 = llvm.mlir.constant(1 : i32) : i32 loc(#loc)
    %4041 = llvm.extractelement %4034[%4040 : i32] : vector<8xbf16> loc(#loc)
    %4042 = llvm.mlir.constant(1 : i32) : i32 loc(#loc)
    %4043 = llvm.insertelement %4041, %4039[%4042 : i32] : vector<8xbf16> loc(#loc)
    %4044 = llvm.mlir.constant(2 : i32) : i32 loc(#loc)
    %4045 = llvm.extractelement %4034[%4044 : i32] : vector<8xbf16> loc(#loc)
    %4046 = llvm.mlir.constant(2 : i32) : i32 loc(#loc)
    %4047 = llvm.insertelement %4045, %4043[%4046 : i32] : vector<8xbf16> loc(#loc)
    %4048 = llvm.mlir.constant(3 : i32) : i32 loc(#loc)
    %4049 = llvm.extractelement %4034[%4048 : i32] : vector<8xbf16> loc(#loc)
    %4050 = llvm.mlir.constant(3 : i32) : i32 loc(#loc)
    %4051 = llvm.insertelement %4049, %4047[%4050 : i32] : vector<8xbf16> loc(#loc)
    %4052 = llvm.mlir.constant(4 : i32) : i32 loc(#loc)
    %4053 = llvm.extractelement %4034[%4052 : i32] : vector<8xbf16> loc(#loc)
    %4054 = llvm.mlir.constant(4 : i32) : i32 loc(#loc)
    %4055 = llvm.insertelement %4053, %4051[%4054 : i32] : vector<8xbf16> loc(#loc)
    %4056 = llvm.mlir.constant(5 : i32) : i32 loc(#loc)
    %4057 = llvm.extractelement %4034[%4056 : i32] : vector<8xbf16> loc(#loc)
    %4058 = llvm.mlir.constant(5 : i32) : i32 loc(#loc)
    %4059 = llvm.insertelement %4057, %4055[%4058 : i32] : vector<8xbf16> loc(#loc)
    %4060 = llvm.mlir.constant(6 : i32) : i32 loc(#loc)
    %4061 = llvm.extractelement %4034[%4060 : i32] : vector<8xbf16> loc(#loc)
    %4062 = llvm.mlir.constant(6 : i32) : i32 loc(#loc)
    %4063 = llvm.insertelement %4061, %4059[%4062 : i32] : vector<8xbf16> loc(#loc)
    %4064 = llvm.mlir.constant(7 : i32) : i32 loc(#loc)
    %4065 = llvm.extractelement %4034[%4064 : i32] : vector<8xbf16> loc(#loc)
    %4066 = llvm.mlir.constant(7 : i32) : i32 loc(#loc)
    %4067 = llvm.insertelement %4065, %4063[%4066 : i32] : vector<8xbf16> loc(#loc)
    %4068 = llvm.mlir.undef : vector<8xbf16> loc(#loc)
    %4069 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %4070 = llvm.insertelement %3952, %4068[%4069 : i32] : vector<8xbf16> loc(#loc)
    %4071 = llvm.mlir.constant(1 : i32) : i32 loc(#loc)
    %4072 = llvm.insertelement %3953, %4070[%4071 : i32] : vector<8xbf16> loc(#loc)
    %4073 = llvm.mlir.constant(2 : i32) : i32 loc(#loc)
    %4074 = llvm.insertelement %3954, %4072[%4073 : i32] : vector<8xbf16> loc(#loc)
    %4075 = llvm.mlir.constant(3 : i32) : i32 loc(#loc)
    %4076 = llvm.insertelement %3955, %4074[%4075 : i32] : vector<8xbf16> loc(#loc)
    %4077 = llvm.mlir.constant(4 : i32) : i32 loc(#loc)
    %4078 = llvm.insertelement %3956, %4076[%4077 : i32] : vector<8xbf16> loc(#loc)
    %4079 = llvm.mlir.constant(5 : i32) : i32 loc(#loc)
    %4080 = llvm.insertelement %3957, %4078[%4079 : i32] : vector<8xbf16> loc(#loc)
    %4081 = llvm.mlir.constant(6 : i32) : i32 loc(#loc)
    %4082 = llvm.insertelement %3958, %4080[%4081 : i32] : vector<8xbf16> loc(#loc)
    %4083 = llvm.mlir.constant(7 : i32) : i32 loc(#loc)
    %4084 = llvm.insertelement %3959, %4082[%4083 : i32] : vector<8xbf16> loc(#loc)
    %4085 = llvm.mlir.undef : vector<8xbf16> loc(#loc)
    %4086 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %4087 = llvm.extractelement %4084[%4086 : i32] : vector<8xbf16> loc(#loc)
    %4088 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %4089 = llvm.insertelement %4087, %4085[%4088 : i32] : vector<8xbf16> loc(#loc)
    %4090 = llvm.mlir.constant(1 : i32) : i32 loc(#loc)
    %4091 = llvm.extractelement %4084[%4090 : i32] : vector<8xbf16> loc(#loc)
    %4092 = llvm.mlir.constant(1 : i32) : i32 loc(#loc)
    %4093 = llvm.insertelement %4091, %4089[%4092 : i32] : vector<8xbf16> loc(#loc)
    %4094 = llvm.mlir.constant(2 : i32) : i32 loc(#loc)
    %4095 = llvm.extractelement %4084[%4094 : i32] : vector<8xbf16> loc(#loc)
    %4096 = llvm.mlir.constant(2 : i32) : i32 loc(#loc)
    %4097 = llvm.insertelement %4095, %4093[%4096 : i32] : vector<8xbf16> loc(#loc)
    %4098 = llvm.mlir.constant(3 : i32) : i32 loc(#loc)
    %4099 = llvm.extractelement %4084[%4098 : i32] : vector<8xbf16> loc(#loc)
    %4100 = llvm.mlir.constant(3 : i32) : i32 loc(#loc)
    %4101 = llvm.insertelement %4099, %4097[%4100 : i32] : vector<8xbf16> loc(#loc)
    %4102 = llvm.mlir.constant(4 : i32) : i32 loc(#loc)
    %4103 = llvm.extractelement %4084[%4102 : i32] : vector<8xbf16> loc(#loc)
    %4104 = llvm.mlir.constant(4 : i32) : i32 loc(#loc)
    %4105 = llvm.insertelement %4103, %4101[%4104 : i32] : vector<8xbf16> loc(#loc)
    %4106 = llvm.mlir.constant(5 : i32) : i32 loc(#loc)
    %4107 = llvm.extractelement %4084[%4106 : i32] : vector<8xbf16> loc(#loc)
    %4108 = llvm.mlir.constant(5 : i32) : i32 loc(#loc)
    %4109 = llvm.insertelement %4107, %4105[%4108 : i32] : vector<8xbf16> loc(#loc)
    %4110 = llvm.mlir.constant(6 : i32) : i32 loc(#loc)
    %4111 = llvm.extractelement %4084[%4110 : i32] : vector<8xbf16> loc(#loc)
    %4112 = llvm.mlir.constant(6 : i32) : i32 loc(#loc)
    %4113 = llvm.insertelement %4111, %4109[%4112 : i32] : vector<8xbf16> loc(#loc)
    %4114 = llvm.mlir.constant(7 : i32) : i32 loc(#loc)
    %4115 = llvm.extractelement %4084[%4114 : i32] : vector<8xbf16> loc(#loc)
    %4116 = llvm.mlir.constant(7 : i32) : i32 loc(#loc)
    %4117 = llvm.insertelement %4115, %4113[%4116 : i32] : vector<8xbf16> loc(#loc)
    %4118 = llvm.mlir.undef : vector<8xbf16> loc(#loc)
    %4119 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %4120 = llvm.insertelement %3960, %4118[%4119 : i32] : vector<8xbf16> loc(#loc)
    %4121 = llvm.mlir.constant(1 : i32) : i32 loc(#loc)
    %4122 = llvm.insertelement %3961, %4120[%4121 : i32] : vector<8xbf16> loc(#loc)
    %4123 = llvm.mlir.constant(2 : i32) : i32 loc(#loc)
    %4124 = llvm.insertelement %3962, %4122[%4123 : i32] : vector<8xbf16> loc(#loc)
    %4125 = llvm.mlir.constant(3 : i32) : i32 loc(#loc)
    %4126 = llvm.insertelement %3963, %4124[%4125 : i32] : vector<8xbf16> loc(#loc)
    %4127 = llvm.mlir.constant(4 : i32) : i32 loc(#loc)
    %4128 = llvm.insertelement %3964, %4126[%4127 : i32] : vector<8xbf16> loc(#loc)
    %4129 = llvm.mlir.constant(5 : i32) : i32 loc(#loc)
    %4130 = llvm.insertelement %3965, %4128[%4129 : i32] : vector<8xbf16> loc(#loc)
    %4131 = llvm.mlir.constant(6 : i32) : i32 loc(#loc)
    %4132 = llvm.insertelement %3966, %4130[%4131 : i32] : vector<8xbf16> loc(#loc)
    %4133 = llvm.mlir.constant(7 : i32) : i32 loc(#loc)
    %4134 = llvm.insertelement %3967, %4132[%4133 : i32] : vector<8xbf16> loc(#loc)
    %4135 = llvm.mlir.undef : vector<8xbf16> loc(#loc)
    %4136 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %4137 = llvm.extractelement %4134[%4136 : i32] : vector<8xbf16> loc(#loc)
    %4138 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %4139 = llvm.insertelement %4137, %4135[%4138 : i32] : vector<8xbf16> loc(#loc)
    %4140 = llvm.mlir.constant(1 : i32) : i32 loc(#loc)
    %4141 = llvm.extractelement %4134[%4140 : i32] : vector<8xbf16> loc(#loc)
    %4142 = llvm.mlir.constant(1 : i32) : i32 loc(#loc)
    %4143 = llvm.insertelement %4141, %4139[%4142 : i32] : vector<8xbf16> loc(#loc)
    %4144 = llvm.mlir.constant(2 : i32) : i32 loc(#loc)
    %4145 = llvm.extractelement %4134[%4144 : i32] : vector<8xbf16> loc(#loc)
    %4146 = llvm.mlir.constant(2 : i32) : i32 loc(#loc)
    %4147 = llvm.insertelement %4145, %4143[%4146 : i32] : vector<8xbf16> loc(#loc)
    %4148 = llvm.mlir.constant(3 : i32) : i32 loc(#loc)
    %4149 = llvm.extractelement %4134[%4148 : i32] : vector<8xbf16> loc(#loc)
    %4150 = llvm.mlir.constant(3 : i32) : i32 loc(#loc)
    %4151 = llvm.insertelement %4149, %4147[%4150 : i32] : vector<8xbf16> loc(#loc)
    %4152 = llvm.mlir.constant(4 : i32) : i32 loc(#loc)
    %4153 = llvm.extractelement %4134[%4152 : i32] : vector<8xbf16> loc(#loc)
    %4154 = llvm.mlir.constant(4 : i32) : i32 loc(#loc)
    %4155 = llvm.insertelement %4153, %4151[%4154 : i32] : vector<8xbf16> loc(#loc)
    %4156 = llvm.mlir.constant(5 : i32) : i32 loc(#loc)
    %4157 = llvm.extractelement %4134[%4156 : i32] : vector<8xbf16> loc(#loc)
    %4158 = llvm.mlir.constant(5 : i32) : i32 loc(#loc)
    %4159 = llvm.insertelement %4157, %4155[%4158 : i32] : vector<8xbf16> loc(#loc)
    %4160 = llvm.mlir.constant(6 : i32) : i32 loc(#loc)
    %4161 = llvm.extractelement %4134[%4160 : i32] : vector<8xbf16> loc(#loc)
    %4162 = llvm.mlir.constant(6 : i32) : i32 loc(#loc)
    %4163 = llvm.insertelement %4161, %4159[%4162 : i32] : vector<8xbf16> loc(#loc)
    %4164 = llvm.mlir.constant(7 : i32) : i32 loc(#loc)
    %4165 = llvm.extractelement %4134[%4164 : i32] : vector<8xbf16> loc(#loc)
    %4166 = llvm.mlir.constant(7 : i32) : i32 loc(#loc)
    %4167 = llvm.insertelement %4165, %4163[%4166 : i32] : vector<8xbf16> loc(#loc)
    %4168 = llvm.extractvalue %66[0] : !llvm.struct<(f32, f32, f32, f32)>  loc(#loc)
    %4169 = llvm.extractvalue %66[1] : !llvm.struct<(f32, f32, f32, f32)>  loc(#loc)
    %4170 = llvm.extractvalue %66[2] : !llvm.struct<(f32, f32, f32, f32)>  loc(#loc)
    %4171 = llvm.extractvalue %66[3] : !llvm.struct<(f32, f32, f32, f32)>  loc(#loc)
    %4172 = llvm.mlir.undef : vector<4xf32> loc(#loc)
    %4173 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %4174 = llvm.insertelement %4168, %4172[%4173 : i32] : vector<4xf32> loc(#loc)
    %4175 = llvm.mlir.constant(1 : i32) : i32 loc(#loc)
    %4176 = llvm.insertelement %4169, %4174[%4175 : i32] : vector<4xf32> loc(#loc)
    %4177 = llvm.mlir.constant(2 : i32) : i32 loc(#loc)
    %4178 = llvm.insertelement %4170, %4176[%4177 : i32] : vector<4xf32> loc(#loc)
    %4179 = llvm.mlir.constant(3 : i32) : i32 loc(#loc)
    %4180 = llvm.insertelement %4171, %4178[%4179 : i32] : vector<4xf32> loc(#loc)
    %4181 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %4182 = rocdl.mfma.f32.16x16x32.bf16 %4017, %3785, %4180, %4181, %4181, %4181 : (vector<8xbf16>, vector<8xbf16>, vector<4xf32>, i32, i32, i32) -> vector<4xf32> loc(#loc)
    %4183 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %4184 = rocdl.mfma.f32.16x16x32.bf16 %4067, %3835, %4182, %4183, %4183, %4183 : (vector<8xbf16>, vector<8xbf16>, vector<4xf32>, i32, i32, i32) -> vector<4xf32> loc(#loc)
    %4185 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %4186 = rocdl.mfma.f32.16x16x32.bf16 %4117, %3885, %4184, %4185, %4185, %4185 : (vector<8xbf16>, vector<8xbf16>, vector<4xf32>, i32, i32, i32) -> vector<4xf32> loc(#loc)
    %4187 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %4188 = rocdl.mfma.f32.16x16x32.bf16 %4167, %3935, %4186, %4187, %4187, %4187 : (vector<8xbf16>, vector<8xbf16>, vector<4xf32>, i32, i32, i32) -> vector<4xf32> loc(#loc)
    %4189 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %4190 = llvm.extractelement %4188[%4189 : i32] : vector<4xf32> loc(#loc)
    %4191 = llvm.mlir.constant(1 : i32) : i32 loc(#loc)
    %4192 = llvm.extractelement %4188[%4191 : i32] : vector<4xf32> loc(#loc)
    %4193 = llvm.mlir.constant(2 : i32) : i32 loc(#loc)
    %4194 = llvm.extractelement %4188[%4193 : i32] : vector<4xf32> loc(#loc)
    %4195 = llvm.mlir.constant(3 : i32) : i32 loc(#loc)
    %4196 = llvm.extractelement %4188[%4195 : i32] : vector<4xf32> loc(#loc)
    %4197 = llvm.mlir.undef : !llvm.struct<(f32, f32, f32, f32)> loc(#loc)
    %4198 = llvm.insertvalue %4190, %4197[0] : !llvm.struct<(f32, f32, f32, f32)>  loc(#loc)
    %4199 = llvm.insertvalue %4192, %4198[1] : !llvm.struct<(f32, f32, f32, f32)>  loc(#loc)
    %4200 = llvm.insertvalue %4194, %4199[2] : !llvm.struct<(f32, f32, f32, f32)>  loc(#loc)
    %4201 = llvm.insertvalue %4196, %4200[3] : !llvm.struct<(f32, f32, f32, f32)>  loc(#loc)
    %4202 = llvm.extractvalue %3023[0] : !llvm.struct<(i8, i8, i8, i8)>  loc(#loc)
    %4203 = llvm.extractvalue %3023[1] : !llvm.struct<(i8, i8, i8, i8)>  loc(#loc)
    %4204 = llvm.extractvalue %3023[2] : !llvm.struct<(i8, i8, i8, i8)>  loc(#loc)
    %4205 = llvm.extractvalue %3023[3] : !llvm.struct<(i8, i8, i8, i8)>  loc(#loc)
    %4206 = llvm.zext %4202 : i8 to i16 loc(#loc)
    %4207 = llvm.zext %4203 : i8 to i16 loc(#loc)
    %4208 = llvm.zext %4204 : i8 to i16 loc(#loc)
    %4209 = llvm.zext %4205 : i8 to i16 loc(#loc)
    %4210 = llvm.mlir.undef : !llvm.struct<(i16, i16, i16, i16)> loc(#loc)
    %4211 = llvm.insertvalue %4206, %4210[0] : !llvm.struct<(i16, i16, i16, i16)>  loc(#loc)
    %4212 = llvm.insertvalue %4207, %4211[1] : !llvm.struct<(i16, i16, i16, i16)>  loc(#loc)
    %4213 = llvm.insertvalue %4208, %4212[2] : !llvm.struct<(i16, i16, i16, i16)>  loc(#loc)
    %4214 = llvm.insertvalue %4209, %4213[3] : !llvm.struct<(i16, i16, i16, i16)>  loc(#loc)
    %4215 = llvm.extractvalue %4214[0] : !llvm.struct<(i16, i16, i16, i16)>  loc(#loc)
    %4216 = llvm.extractvalue %4214[1] : !llvm.struct<(i16, i16, i16, i16)>  loc(#loc)
    %4217 = llvm.extractvalue %4214[2] : !llvm.struct<(i16, i16, i16, i16)>  loc(#loc)
    %4218 = llvm.extractvalue %4214[3] : !llvm.struct<(i16, i16, i16, i16)>  loc(#loc)
    %4219 = llvm.extractvalue %17[0] : !llvm.struct<(i16, i16, i16, i16)>  loc(#loc)
    %4220 = llvm.extractvalue %17[1] : !llvm.struct<(i16, i16, i16, i16)>  loc(#loc)
    %4221 = llvm.extractvalue %17[2] : !llvm.struct<(i16, i16, i16, i16)>  loc(#loc)
    %4222 = llvm.extractvalue %17[3] : !llvm.struct<(i16, i16, i16, i16)>  loc(#loc)
    %4223 = llvm.shl %4215, %4219 : i16 loc(#loc)
    %4224 = llvm.shl %4216, %4220 : i16 loc(#loc)
    %4225 = llvm.shl %4217, %4221 : i16 loc(#loc)
    %4226 = llvm.shl %4218, %4222 : i16 loc(#loc)
    %4227 = llvm.mlir.undef : !llvm.struct<(i16, i16, i16, i16)> loc(#loc)
    %4228 = llvm.insertvalue %4223, %4227[0] : !llvm.struct<(i16, i16, i16, i16)>  loc(#loc)
    %4229 = llvm.insertvalue %4224, %4228[1] : !llvm.struct<(i16, i16, i16, i16)>  loc(#loc)
    %4230 = llvm.insertvalue %4225, %4229[2] : !llvm.struct<(i16, i16, i16, i16)>  loc(#loc)
    %4231 = llvm.insertvalue %4226, %4230[3] : !llvm.struct<(i16, i16, i16, i16)>  loc(#loc)
    %4232 = llvm.extractvalue %4231[0] : !llvm.struct<(i16, i16, i16, i16)>  loc(#loc)
    %4233 = llvm.extractvalue %4231[1] : !llvm.struct<(i16, i16, i16, i16)>  loc(#loc)
    %4234 = llvm.extractvalue %4231[2] : !llvm.struct<(i16, i16, i16, i16)>  loc(#loc)
    %4235 = llvm.extractvalue %4231[3] : !llvm.struct<(i16, i16, i16, i16)>  loc(#loc)
    %4236 = llvm.bitcast %4232 : i16 to bf16 loc(#loc)
    %4237 = llvm.bitcast %4233 : i16 to bf16 loc(#loc)
    %4238 = llvm.bitcast %4234 : i16 to bf16 loc(#loc)
    %4239 = llvm.bitcast %4235 : i16 to bf16 loc(#loc)
    %4240 = llvm.mlir.undef : !llvm.struct<(bf16, bf16, bf16, bf16)> loc(#loc)
    %4241 = llvm.insertvalue %4236, %4240[0] : !llvm.struct<(bf16, bf16, bf16, bf16)>  loc(#loc)
    %4242 = llvm.insertvalue %4237, %4241[1] : !llvm.struct<(bf16, bf16, bf16, bf16)>  loc(#loc)
    %4243 = llvm.insertvalue %4238, %4242[2] : !llvm.struct<(bf16, bf16, bf16, bf16)>  loc(#loc)
    %4244 = llvm.insertvalue %4239, %4243[3] : !llvm.struct<(bf16, bf16, bf16, bf16)>  loc(#loc)
    %4245 = llvm.extractvalue %4244[0] : !llvm.struct<(bf16, bf16, bf16, bf16)>  loc(#loc)
    %4246 = llvm.extractvalue %4244[1] : !llvm.struct<(bf16, bf16, bf16, bf16)>  loc(#loc)
    %4247 = llvm.extractvalue %4244[2] : !llvm.struct<(bf16, bf16, bf16, bf16)>  loc(#loc)
    %4248 = llvm.extractvalue %4244[3] : !llvm.struct<(bf16, bf16, bf16, bf16)>  loc(#loc)
    %4249 = llvm.mlir.undef : !llvm.struct<(bf16, bf16, bf16, bf16)> loc(#loc)
    %4250 = llvm.insertvalue %4245, %4249[0] : !llvm.struct<(bf16, bf16, bf16, bf16)>  loc(#loc)
    %4251 = llvm.insertvalue %4246, %4250[1] : !llvm.struct<(bf16, bf16, bf16, bf16)>  loc(#loc)
    %4252 = llvm.insertvalue %4247, %4251[2] : !llvm.struct<(bf16, bf16, bf16, bf16)>  loc(#loc)
    %4253 = llvm.insertvalue %4248, %4252[3] : !llvm.struct<(bf16, bf16, bf16, bf16)>  loc(#loc)
    %4254 = llvm.extractvalue %4253[0] : !llvm.struct<(bf16, bf16, bf16, bf16)>  loc(#loc)
    %4255 = llvm.extractvalue %4253[1] : !llvm.struct<(bf16, bf16, bf16, bf16)>  loc(#loc)
    %4256 = llvm.extractvalue %4253[2] : !llvm.struct<(bf16, bf16, bf16, bf16)>  loc(#loc)
    %4257 = llvm.extractvalue %4253[3] : !llvm.struct<(bf16, bf16, bf16, bf16)>  loc(#loc)
    %4258 = llvm.mlir.undef : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)> loc(#loc)
    %4259 = llvm.insertvalue %4254, %4258[0] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4260 = llvm.insertvalue %4254, %4259[1] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4261 = llvm.insertvalue %4254, %4260[2] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4262 = llvm.insertvalue %4254, %4261[3] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4263 = llvm.insertvalue %4254, %4262[4] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4264 = llvm.insertvalue %4254, %4263[5] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4265 = llvm.insertvalue %4254, %4264[6] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4266 = llvm.insertvalue %4254, %4265[7] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4267 = llvm.insertvalue %4255, %4266[8] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4268 = llvm.insertvalue %4255, %4267[9] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4269 = llvm.insertvalue %4255, %4268[10] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4270 = llvm.insertvalue %4255, %4269[11] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4271 = llvm.insertvalue %4255, %4270[12] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4272 = llvm.insertvalue %4255, %4271[13] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4273 = llvm.insertvalue %4255, %4272[14] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4274 = llvm.insertvalue %4255, %4273[15] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4275 = llvm.insertvalue %4256, %4274[16] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4276 = llvm.insertvalue %4256, %4275[17] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4277 = llvm.insertvalue %4256, %4276[18] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4278 = llvm.insertvalue %4256, %4277[19] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4279 = llvm.insertvalue %4256, %4278[20] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4280 = llvm.insertvalue %4256, %4279[21] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4281 = llvm.insertvalue %4256, %4280[22] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4282 = llvm.insertvalue %4256, %4281[23] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4283 = llvm.insertvalue %4257, %4282[24] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4284 = llvm.insertvalue %4257, %4283[25] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4285 = llvm.insertvalue %4257, %4284[26] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4286 = llvm.insertvalue %4257, %4285[27] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4287 = llvm.insertvalue %4257, %4286[28] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4288 = llvm.insertvalue %4257, %4287[29] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4289 = llvm.insertvalue %4257, %4288[30] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4290 = llvm.insertvalue %4257, %4289[31] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4291 = llvm.extractvalue %4290[0] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4292 = llvm.extractvalue %4290[1] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4293 = llvm.extractvalue %4290[2] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4294 = llvm.extractvalue %4290[3] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4295 = llvm.extractvalue %4290[4] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4296 = llvm.extractvalue %4290[5] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4297 = llvm.extractvalue %4290[6] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4298 = llvm.extractvalue %4290[7] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4299 = llvm.extractvalue %4290[8] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4300 = llvm.extractvalue %4290[9] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4301 = llvm.extractvalue %4290[10] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4302 = llvm.extractvalue %4290[11] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4303 = llvm.extractvalue %4290[12] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4304 = llvm.extractvalue %4290[13] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4305 = llvm.extractvalue %4290[14] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4306 = llvm.extractvalue %4290[15] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4307 = llvm.extractvalue %4290[16] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4308 = llvm.extractvalue %4290[17] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4309 = llvm.extractvalue %4290[18] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4310 = llvm.extractvalue %4290[19] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4311 = llvm.extractvalue %4290[20] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4312 = llvm.extractvalue %4290[21] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4313 = llvm.extractvalue %4290[22] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4314 = llvm.extractvalue %4290[23] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4315 = llvm.extractvalue %4290[24] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4316 = llvm.extractvalue %4290[25] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4317 = llvm.extractvalue %4290[26] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4318 = llvm.extractvalue %4290[27] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4319 = llvm.extractvalue %4290[28] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4320 = llvm.extractvalue %4290[29] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4321 = llvm.extractvalue %4290[30] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4322 = llvm.extractvalue %4290[31] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4323 = llvm.mlir.undef : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)> loc(#loc)
    %4324 = llvm.insertvalue %4291, %4323[0] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4325 = llvm.insertvalue %4292, %4324[1] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4326 = llvm.insertvalue %4293, %4325[2] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4327 = llvm.insertvalue %4294, %4326[3] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4328 = llvm.insertvalue %4295, %4327[4] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4329 = llvm.insertvalue %4296, %4328[5] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4330 = llvm.insertvalue %4297, %4329[6] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4331 = llvm.insertvalue %4298, %4330[7] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4332 = llvm.insertvalue %4299, %4331[8] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4333 = llvm.insertvalue %4300, %4332[9] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4334 = llvm.insertvalue %4301, %4333[10] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4335 = llvm.insertvalue %4302, %4334[11] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4336 = llvm.insertvalue %4303, %4335[12] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4337 = llvm.insertvalue %4304, %4336[13] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4338 = llvm.insertvalue %4305, %4337[14] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4339 = llvm.insertvalue %4306, %4338[15] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4340 = llvm.insertvalue %4307, %4339[16] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4341 = llvm.insertvalue %4308, %4340[17] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4342 = llvm.insertvalue %4309, %4341[18] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4343 = llvm.insertvalue %4310, %4342[19] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4344 = llvm.insertvalue %4311, %4343[20] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4345 = llvm.insertvalue %4312, %4344[21] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4346 = llvm.insertvalue %4313, %4345[22] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4347 = llvm.insertvalue %4314, %4346[23] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4348 = llvm.insertvalue %4315, %4347[24] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4349 = llvm.insertvalue %4316, %4348[25] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4350 = llvm.insertvalue %4317, %4349[26] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4351 = llvm.insertvalue %4318, %4350[27] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4352 = llvm.insertvalue %4319, %4351[28] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4353 = llvm.insertvalue %4320, %4352[29] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4354 = llvm.insertvalue %4321, %4353[30] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4355 = llvm.insertvalue %4322, %4354[31] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4356 = llvm.extractvalue %2751[0] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %4357 = llvm.extractvalue %2751[1] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %4358 = llvm.extractvalue %2751[2] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %4359 = llvm.extractvalue %2751[3] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %4360 = llvm.extractvalue %2751[4] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %4361 = llvm.extractvalue %2751[5] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %4362 = llvm.extractvalue %2751[6] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %4363 = llvm.extractvalue %2751[7] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %4364 = llvm.extractvalue %2751[8] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %4365 = llvm.extractvalue %2751[9] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %4366 = llvm.extractvalue %2751[10] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %4367 = llvm.extractvalue %2751[11] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %4368 = llvm.extractvalue %2751[12] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %4369 = llvm.extractvalue %2751[13] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %4370 = llvm.extractvalue %2751[14] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %4371 = llvm.extractvalue %2751[15] : !llvm.struct<(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)>  loc(#loc)
    %4372 = llvm.extractvalue %4355[0] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4373 = llvm.extractvalue %4355[1] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4374 = llvm.extractvalue %4355[2] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4375 = llvm.extractvalue %4355[3] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4376 = llvm.extractvalue %4355[4] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4377 = llvm.extractvalue %4355[5] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4378 = llvm.extractvalue %4355[6] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4379 = llvm.extractvalue %4355[7] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4380 = llvm.extractvalue %4355[8] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4381 = llvm.extractvalue %4355[9] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4382 = llvm.extractvalue %4355[10] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4383 = llvm.extractvalue %4355[11] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4384 = llvm.extractvalue %4355[12] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4385 = llvm.extractvalue %4355[13] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4386 = llvm.extractvalue %4355[14] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4387 = llvm.extractvalue %4355[15] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4388 = llvm.extractvalue %4355[16] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4389 = llvm.extractvalue %4355[17] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4390 = llvm.extractvalue %4355[18] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4391 = llvm.extractvalue %4355[19] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4392 = llvm.extractvalue %4355[20] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4393 = llvm.extractvalue %4355[21] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4394 = llvm.extractvalue %4355[22] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4395 = llvm.extractvalue %4355[23] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4396 = llvm.extractvalue %4355[24] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4397 = llvm.extractvalue %4355[25] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4398 = llvm.extractvalue %4355[26] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4399 = llvm.extractvalue %4355[27] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4400 = llvm.extractvalue %4355[28] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4401 = llvm.extractvalue %4355[29] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4402 = llvm.extractvalue %4355[30] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4403 = llvm.extractvalue %4355[31] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4404 = llvm.mlir.undef : vector<4xi8> loc(#loc)
    %4405 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %4406 = llvm.insertelement %4356, %4404[%4405 : i32] : vector<4xi8> loc(#loc)
    %4407 = llvm.mlir.constant(1 : i32) : i32 loc(#loc)
    %4408 = llvm.insertelement %4357, %4406[%4407 : i32] : vector<4xi8> loc(#loc)
    %4409 = llvm.mlir.constant(2 : i32) : i32 loc(#loc)
    %4410 = llvm.insertelement %4358, %4408[%4409 : i32] : vector<4xi8> loc(#loc)
    %4411 = llvm.mlir.constant(3 : i32) : i32 loc(#loc)
    %4412 = llvm.insertelement %4359, %4410[%4411 : i32] : vector<4xi8> loc(#loc)
    %4413 = llvm.bitcast %4412 : vector<4xi8> to i32 loc(#loc)
    %4414 = llvm.bitcast %4372 : bf16 to i16 loc(#loc)
    %4415 = llvm.zext %4414 : i16 to i32 loc(#loc)
    %4416 = llvm.mlir.constant(16 : i32) : i32 loc(#loc)
    %4417 = llvm.shl %4415, %4416 : i32 loc(#loc)
    %4418 = llvm.bitcast %4417 : i32 to f32 loc(#loc)
    %4419 = rocdl.cvt.scalef32.pk.bf16.fp4 %4413[0], %4418 : vector<2xbf16> loc(#loc)
    %4420 = rocdl.cvt.scalef32.pk.bf16.fp4 %4413[2], %4418 : vector<2xbf16> loc(#loc)
    %4421 = rocdl.cvt.scalef32.pk.bf16.fp4 %4413[1], %4418 : vector<2xbf16> loc(#loc)
    %4422 = rocdl.cvt.scalef32.pk.bf16.fp4 %4413[3], %4418 : vector<2xbf16> loc(#loc)
    %4423 = llvm.bitcast %4419 : vector<2xbf16> to vector<2xbf16> loc(#loc)
    %4424 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %4425 = llvm.extractelement %4423[%4424 : i32] : vector<2xbf16> loc(#loc)
    %4426 = llvm.mlir.constant(1 : i32) : i32 loc(#loc)
    %4427 = llvm.extractelement %4423[%4426 : i32] : vector<2xbf16> loc(#loc)
    %4428 = llvm.bitcast %4420 : vector<2xbf16> to vector<2xbf16> loc(#loc)
    %4429 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %4430 = llvm.extractelement %4428[%4429 : i32] : vector<2xbf16> loc(#loc)
    %4431 = llvm.mlir.constant(1 : i32) : i32 loc(#loc)
    %4432 = llvm.extractelement %4428[%4431 : i32] : vector<2xbf16> loc(#loc)
    %4433 = llvm.bitcast %4421 : vector<2xbf16> to vector<2xbf16> loc(#loc)
    %4434 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %4435 = llvm.extractelement %4433[%4434 : i32] : vector<2xbf16> loc(#loc)
    %4436 = llvm.mlir.constant(1 : i32) : i32 loc(#loc)
    %4437 = llvm.extractelement %4433[%4436 : i32] : vector<2xbf16> loc(#loc)
    %4438 = llvm.bitcast %4422 : vector<2xbf16> to vector<2xbf16> loc(#loc)
    %4439 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %4440 = llvm.extractelement %4438[%4439 : i32] : vector<2xbf16> loc(#loc)
    %4441 = llvm.mlir.constant(1 : i32) : i32 loc(#loc)
    %4442 = llvm.extractelement %4438[%4441 : i32] : vector<2xbf16> loc(#loc)
    %4443 = llvm.mlir.undef : vector<4xi8> loc(#loc)
    %4444 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %4445 = llvm.insertelement %4360, %4443[%4444 : i32] : vector<4xi8> loc(#loc)
    %4446 = llvm.mlir.constant(1 : i32) : i32 loc(#loc)
    %4447 = llvm.insertelement %4361, %4445[%4446 : i32] : vector<4xi8> loc(#loc)
    %4448 = llvm.mlir.constant(2 : i32) : i32 loc(#loc)
    %4449 = llvm.insertelement %4362, %4447[%4448 : i32] : vector<4xi8> loc(#loc)
    %4450 = llvm.mlir.constant(3 : i32) : i32 loc(#loc)
    %4451 = llvm.insertelement %4363, %4449[%4450 : i32] : vector<4xi8> loc(#loc)
    %4452 = llvm.bitcast %4451 : vector<4xi8> to i32 loc(#loc)
    %4453 = llvm.bitcast %4380 : bf16 to i16 loc(#loc)
    %4454 = llvm.zext %4453 : i16 to i32 loc(#loc)
    %4455 = llvm.mlir.constant(16 : i32) : i32 loc(#loc)
    %4456 = llvm.shl %4454, %4455 : i32 loc(#loc)
    %4457 = llvm.bitcast %4456 : i32 to f32 loc(#loc)
    %4458 = rocdl.cvt.scalef32.pk.bf16.fp4 %4452[0], %4457 : vector<2xbf16> loc(#loc)
    %4459 = rocdl.cvt.scalef32.pk.bf16.fp4 %4452[2], %4457 : vector<2xbf16> loc(#loc)
    %4460 = rocdl.cvt.scalef32.pk.bf16.fp4 %4452[1], %4457 : vector<2xbf16> loc(#loc)
    %4461 = rocdl.cvt.scalef32.pk.bf16.fp4 %4452[3], %4457 : vector<2xbf16> loc(#loc)
    %4462 = llvm.bitcast %4458 : vector<2xbf16> to vector<2xbf16> loc(#loc)
    %4463 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %4464 = llvm.extractelement %4462[%4463 : i32] : vector<2xbf16> loc(#loc)
    %4465 = llvm.mlir.constant(1 : i32) : i32 loc(#loc)
    %4466 = llvm.extractelement %4462[%4465 : i32] : vector<2xbf16> loc(#loc)
    %4467 = llvm.bitcast %4459 : vector<2xbf16> to vector<2xbf16> loc(#loc)
    %4468 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %4469 = llvm.extractelement %4467[%4468 : i32] : vector<2xbf16> loc(#loc)
    %4470 = llvm.mlir.constant(1 : i32) : i32 loc(#loc)
    %4471 = llvm.extractelement %4467[%4470 : i32] : vector<2xbf16> loc(#loc)
    %4472 = llvm.bitcast %4460 : vector<2xbf16> to vector<2xbf16> loc(#loc)
    %4473 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %4474 = llvm.extractelement %4472[%4473 : i32] : vector<2xbf16> loc(#loc)
    %4475 = llvm.mlir.constant(1 : i32) : i32 loc(#loc)
    %4476 = llvm.extractelement %4472[%4475 : i32] : vector<2xbf16> loc(#loc)
    %4477 = llvm.bitcast %4461 : vector<2xbf16> to vector<2xbf16> loc(#loc)
    %4478 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %4479 = llvm.extractelement %4477[%4478 : i32] : vector<2xbf16> loc(#loc)
    %4480 = llvm.mlir.constant(1 : i32) : i32 loc(#loc)
    %4481 = llvm.extractelement %4477[%4480 : i32] : vector<2xbf16> loc(#loc)
    %4482 = llvm.mlir.undef : vector<4xi8> loc(#loc)
    %4483 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %4484 = llvm.insertelement %4364, %4482[%4483 : i32] : vector<4xi8> loc(#loc)
    %4485 = llvm.mlir.constant(1 : i32) : i32 loc(#loc)
    %4486 = llvm.insertelement %4365, %4484[%4485 : i32] : vector<4xi8> loc(#loc)
    %4487 = llvm.mlir.constant(2 : i32) : i32 loc(#loc)
    %4488 = llvm.insertelement %4366, %4486[%4487 : i32] : vector<4xi8> loc(#loc)
    %4489 = llvm.mlir.constant(3 : i32) : i32 loc(#loc)
    %4490 = llvm.insertelement %4367, %4488[%4489 : i32] : vector<4xi8> loc(#loc)
    %4491 = llvm.bitcast %4490 : vector<4xi8> to i32 loc(#loc)
    %4492 = llvm.bitcast %4388 : bf16 to i16 loc(#loc)
    %4493 = llvm.zext %4492 : i16 to i32 loc(#loc)
    %4494 = llvm.mlir.constant(16 : i32) : i32 loc(#loc)
    %4495 = llvm.shl %4493, %4494 : i32 loc(#loc)
    %4496 = llvm.bitcast %4495 : i32 to f32 loc(#loc)
    %4497 = rocdl.cvt.scalef32.pk.bf16.fp4 %4491[0], %4496 : vector<2xbf16> loc(#loc)
    %4498 = rocdl.cvt.scalef32.pk.bf16.fp4 %4491[2], %4496 : vector<2xbf16> loc(#loc)
    %4499 = rocdl.cvt.scalef32.pk.bf16.fp4 %4491[1], %4496 : vector<2xbf16> loc(#loc)
    %4500 = rocdl.cvt.scalef32.pk.bf16.fp4 %4491[3], %4496 : vector<2xbf16> loc(#loc)
    %4501 = llvm.bitcast %4497 : vector<2xbf16> to vector<2xbf16> loc(#loc)
    %4502 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %4503 = llvm.extractelement %4501[%4502 : i32] : vector<2xbf16> loc(#loc)
    %4504 = llvm.mlir.constant(1 : i32) : i32 loc(#loc)
    %4505 = llvm.extractelement %4501[%4504 : i32] : vector<2xbf16> loc(#loc)
    %4506 = llvm.bitcast %4498 : vector<2xbf16> to vector<2xbf16> loc(#loc)
    %4507 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %4508 = llvm.extractelement %4506[%4507 : i32] : vector<2xbf16> loc(#loc)
    %4509 = llvm.mlir.constant(1 : i32) : i32 loc(#loc)
    %4510 = llvm.extractelement %4506[%4509 : i32] : vector<2xbf16> loc(#loc)
    %4511 = llvm.bitcast %4499 : vector<2xbf16> to vector<2xbf16> loc(#loc)
    %4512 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %4513 = llvm.extractelement %4511[%4512 : i32] : vector<2xbf16> loc(#loc)
    %4514 = llvm.mlir.constant(1 : i32) : i32 loc(#loc)
    %4515 = llvm.extractelement %4511[%4514 : i32] : vector<2xbf16> loc(#loc)
    %4516 = llvm.bitcast %4500 : vector<2xbf16> to vector<2xbf16> loc(#loc)
    %4517 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %4518 = llvm.extractelement %4516[%4517 : i32] : vector<2xbf16> loc(#loc)
    %4519 = llvm.mlir.constant(1 : i32) : i32 loc(#loc)
    %4520 = llvm.extractelement %4516[%4519 : i32] : vector<2xbf16> loc(#loc)
    %4521 = llvm.mlir.undef : vector<4xi8> loc(#loc)
    %4522 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %4523 = llvm.insertelement %4368, %4521[%4522 : i32] : vector<4xi8> loc(#loc)
    %4524 = llvm.mlir.constant(1 : i32) : i32 loc(#loc)
    %4525 = llvm.insertelement %4369, %4523[%4524 : i32] : vector<4xi8> loc(#loc)
    %4526 = llvm.mlir.constant(2 : i32) : i32 loc(#loc)
    %4527 = llvm.insertelement %4370, %4525[%4526 : i32] : vector<4xi8> loc(#loc)
    %4528 = llvm.mlir.constant(3 : i32) : i32 loc(#loc)
    %4529 = llvm.insertelement %4371, %4527[%4528 : i32] : vector<4xi8> loc(#loc)
    %4530 = llvm.bitcast %4529 : vector<4xi8> to i32 loc(#loc)
    %4531 = llvm.bitcast %4396 : bf16 to i16 loc(#loc)
    %4532 = llvm.zext %4531 : i16 to i32 loc(#loc)
    %4533 = llvm.mlir.constant(16 : i32) : i32 loc(#loc)
    %4534 = llvm.shl %4532, %4533 : i32 loc(#loc)
    %4535 = llvm.bitcast %4534 : i32 to f32 loc(#loc)
    %4536 = rocdl.cvt.scalef32.pk.bf16.fp4 %4530[0], %4535 : vector<2xbf16> loc(#loc)
    %4537 = rocdl.cvt.scalef32.pk.bf16.fp4 %4530[2], %4535 : vector<2xbf16> loc(#loc)
    %4538 = rocdl.cvt.scalef32.pk.bf16.fp4 %4530[1], %4535 : vector<2xbf16> loc(#loc)
    %4539 = rocdl.cvt.scalef32.pk.bf16.fp4 %4530[3], %4535 : vector<2xbf16> loc(#loc)
    %4540 = llvm.bitcast %4536 : vector<2xbf16> to vector<2xbf16> loc(#loc)
    %4541 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %4542 = llvm.extractelement %4540[%4541 : i32] : vector<2xbf16> loc(#loc)
    %4543 = llvm.mlir.constant(1 : i32) : i32 loc(#loc)
    %4544 = llvm.extractelement %4540[%4543 : i32] : vector<2xbf16> loc(#loc)
    %4545 = llvm.bitcast %4537 : vector<2xbf16> to vector<2xbf16> loc(#loc)
    %4546 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %4547 = llvm.extractelement %4545[%4546 : i32] : vector<2xbf16> loc(#loc)
    %4548 = llvm.mlir.constant(1 : i32) : i32 loc(#loc)
    %4549 = llvm.extractelement %4545[%4548 : i32] : vector<2xbf16> loc(#loc)
    %4550 = llvm.bitcast %4538 : vector<2xbf16> to vector<2xbf16> loc(#loc)
    %4551 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %4552 = llvm.extractelement %4550[%4551 : i32] : vector<2xbf16> loc(#loc)
    %4553 = llvm.mlir.constant(1 : i32) : i32 loc(#loc)
    %4554 = llvm.extractelement %4550[%4553 : i32] : vector<2xbf16> loc(#loc)
    %4555 = llvm.bitcast %4539 : vector<2xbf16> to vector<2xbf16> loc(#loc)
    %4556 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %4557 = llvm.extractelement %4555[%4556 : i32] : vector<2xbf16> loc(#loc)
    %4558 = llvm.mlir.constant(1 : i32) : i32 loc(#loc)
    %4559 = llvm.extractelement %4555[%4558 : i32] : vector<2xbf16> loc(#loc)
    %4560 = llvm.mlir.undef : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)> loc(#loc)
    %4561 = llvm.insertvalue %4425, %4560[0] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4562 = llvm.insertvalue %4427, %4561[1] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4563 = llvm.insertvalue %4430, %4562[2] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4564 = llvm.insertvalue %4432, %4563[3] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4565 = llvm.insertvalue %4435, %4564[4] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4566 = llvm.insertvalue %4437, %4565[5] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4567 = llvm.insertvalue %4440, %4566[6] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4568 = llvm.insertvalue %4442, %4567[7] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4569 = llvm.insertvalue %4464, %4568[8] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4570 = llvm.insertvalue %4466, %4569[9] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4571 = llvm.insertvalue %4469, %4570[10] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4572 = llvm.insertvalue %4471, %4571[11] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4573 = llvm.insertvalue %4474, %4572[12] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4574 = llvm.insertvalue %4476, %4573[13] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4575 = llvm.insertvalue %4479, %4574[14] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4576 = llvm.insertvalue %4481, %4575[15] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4577 = llvm.insertvalue %4503, %4576[16] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4578 = llvm.insertvalue %4505, %4577[17] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4579 = llvm.insertvalue %4508, %4578[18] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4580 = llvm.insertvalue %4510, %4579[19] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4581 = llvm.insertvalue %4513, %4580[20] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4582 = llvm.insertvalue %4515, %4581[21] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4583 = llvm.insertvalue %4518, %4582[22] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4584 = llvm.insertvalue %4520, %4583[23] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4585 = llvm.insertvalue %4542, %4584[24] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4586 = llvm.insertvalue %4544, %4585[25] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4587 = llvm.insertvalue %4547, %4586[26] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4588 = llvm.insertvalue %4549, %4587[27] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4589 = llvm.insertvalue %4552, %4588[28] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4590 = llvm.insertvalue %4554, %4589[29] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4591 = llvm.insertvalue %4557, %4590[30] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4592 = llvm.insertvalue %4559, %4591[31] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4593 = llvm.extractvalue %3023[0] : !llvm.struct<(i8, i8, i8, i8)>  loc(#loc)
    %4594 = llvm.extractvalue %3023[1] : !llvm.struct<(i8, i8, i8, i8)>  loc(#loc)
    %4595 = llvm.extractvalue %3023[2] : !llvm.struct<(i8, i8, i8, i8)>  loc(#loc)
    %4596 = llvm.extractvalue %3023[3] : !llvm.struct<(i8, i8, i8, i8)>  loc(#loc)
    %4597 = llvm.extractvalue %24[0] : !llvm.struct<(i8, i8, i8, i8)>  loc(#loc)
    %4598 = llvm.extractvalue %24[1] : !llvm.struct<(i8, i8, i8, i8)>  loc(#loc)
    %4599 = llvm.extractvalue %24[2] : !llvm.struct<(i8, i8, i8, i8)>  loc(#loc)
    %4600 = llvm.extractvalue %24[3] : !llvm.struct<(i8, i8, i8, i8)>  loc(#loc)
    %4601 = llvm.icmp "eq" %4593, %4597 : i8 loc(#loc)
    %4602 = llvm.icmp "eq" %4594, %4598 : i8 loc(#loc)
    %4603 = llvm.icmp "eq" %4595, %4599 : i8 loc(#loc)
    %4604 = llvm.icmp "eq" %4596, %4600 : i8 loc(#loc)
    %4605 = llvm.mlir.undef : !llvm.struct<(i1, i1, i1, i1)> loc(#loc)
    %4606 = llvm.insertvalue %4601, %4605[0] : !llvm.struct<(i1, i1, i1, i1)>  loc(#loc)
    %4607 = llvm.insertvalue %4602, %4606[1] : !llvm.struct<(i1, i1, i1, i1)>  loc(#loc)
    %4608 = llvm.insertvalue %4603, %4607[2] : !llvm.struct<(i1, i1, i1, i1)>  loc(#loc)
    %4609 = llvm.insertvalue %4604, %4608[3] : !llvm.struct<(i1, i1, i1, i1)>  loc(#loc)
    %4610 = llvm.extractvalue %4609[0] : !llvm.struct<(i1, i1, i1, i1)>  loc(#loc)
    %4611 = llvm.extractvalue %4609[1] : !llvm.struct<(i1, i1, i1, i1)>  loc(#loc)
    %4612 = llvm.extractvalue %4609[2] : !llvm.struct<(i1, i1, i1, i1)>  loc(#loc)
    %4613 = llvm.extractvalue %4609[3] : !llvm.struct<(i1, i1, i1, i1)>  loc(#loc)
    %4614 = llvm.mlir.undef : !llvm.struct<(i1, i1, i1, i1)> loc(#loc)
    %4615 = llvm.insertvalue %4610, %4614[0] : !llvm.struct<(i1, i1, i1, i1)>  loc(#loc)
    %4616 = llvm.insertvalue %4611, %4615[1] : !llvm.struct<(i1, i1, i1, i1)>  loc(#loc)
    %4617 = llvm.insertvalue %4612, %4616[2] : !llvm.struct<(i1, i1, i1, i1)>  loc(#loc)
    %4618 = llvm.insertvalue %4613, %4617[3] : !llvm.struct<(i1, i1, i1, i1)>  loc(#loc)
    %4619 = llvm.extractvalue %4618[0] : !llvm.struct<(i1, i1, i1, i1)>  loc(#loc)
    %4620 = llvm.extractvalue %4618[1] : !llvm.struct<(i1, i1, i1, i1)>  loc(#loc)
    %4621 = llvm.extractvalue %4618[2] : !llvm.struct<(i1, i1, i1, i1)>  loc(#loc)
    %4622 = llvm.extractvalue %4618[3] : !llvm.struct<(i1, i1, i1, i1)>  loc(#loc)
    %4623 = llvm.mlir.undef : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc)
    %4624 = llvm.insertvalue %4619, %4623[0] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %4625 = llvm.insertvalue %4619, %4624[1] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %4626 = llvm.insertvalue %4619, %4625[2] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %4627 = llvm.insertvalue %4619, %4626[3] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %4628 = llvm.insertvalue %4619, %4627[4] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %4629 = llvm.insertvalue %4619, %4628[5] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %4630 = llvm.insertvalue %4619, %4629[6] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %4631 = llvm.insertvalue %4619, %4630[7] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %4632 = llvm.insertvalue %4620, %4631[8] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %4633 = llvm.insertvalue %4620, %4632[9] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %4634 = llvm.insertvalue %4620, %4633[10] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %4635 = llvm.insertvalue %4620, %4634[11] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %4636 = llvm.insertvalue %4620, %4635[12] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %4637 = llvm.insertvalue %4620, %4636[13] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %4638 = llvm.insertvalue %4620, %4637[14] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %4639 = llvm.insertvalue %4620, %4638[15] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %4640 = llvm.insertvalue %4621, %4639[16] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %4641 = llvm.insertvalue %4621, %4640[17] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %4642 = llvm.insertvalue %4621, %4641[18] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %4643 = llvm.insertvalue %4621, %4642[19] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %4644 = llvm.insertvalue %4621, %4643[20] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %4645 = llvm.insertvalue %4621, %4644[21] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %4646 = llvm.insertvalue %4621, %4645[22] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %4647 = llvm.insertvalue %4621, %4646[23] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %4648 = llvm.insertvalue %4622, %4647[24] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %4649 = llvm.insertvalue %4622, %4648[25] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %4650 = llvm.insertvalue %4622, %4649[26] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %4651 = llvm.insertvalue %4622, %4650[27] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %4652 = llvm.insertvalue %4622, %4651[28] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %4653 = llvm.insertvalue %4622, %4652[29] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %4654 = llvm.insertvalue %4622, %4653[30] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %4655 = llvm.insertvalue %4622, %4654[31] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %4656 = llvm.extractvalue %4655[0] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %4657 = llvm.extractvalue %4655[1] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %4658 = llvm.extractvalue %4655[2] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %4659 = llvm.extractvalue %4655[3] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %4660 = llvm.extractvalue %4655[4] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %4661 = llvm.extractvalue %4655[5] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %4662 = llvm.extractvalue %4655[6] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %4663 = llvm.extractvalue %4655[7] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %4664 = llvm.extractvalue %4655[8] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %4665 = llvm.extractvalue %4655[9] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %4666 = llvm.extractvalue %4655[10] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %4667 = llvm.extractvalue %4655[11] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %4668 = llvm.extractvalue %4655[12] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %4669 = llvm.extractvalue %4655[13] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %4670 = llvm.extractvalue %4655[14] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %4671 = llvm.extractvalue %4655[15] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %4672 = llvm.extractvalue %4655[16] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %4673 = llvm.extractvalue %4655[17] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %4674 = llvm.extractvalue %4655[18] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %4675 = llvm.extractvalue %4655[19] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %4676 = llvm.extractvalue %4655[20] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %4677 = llvm.extractvalue %4655[21] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %4678 = llvm.extractvalue %4655[22] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %4679 = llvm.extractvalue %4655[23] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %4680 = llvm.extractvalue %4655[24] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %4681 = llvm.extractvalue %4655[25] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %4682 = llvm.extractvalue %4655[26] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %4683 = llvm.extractvalue %4655[27] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %4684 = llvm.extractvalue %4655[28] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %4685 = llvm.extractvalue %4655[29] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %4686 = llvm.extractvalue %4655[30] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %4687 = llvm.extractvalue %4655[31] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %4688 = llvm.mlir.undef : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)> loc(#loc)
    %4689 = llvm.insertvalue %4656, %4688[0] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %4690 = llvm.insertvalue %4657, %4689[1] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %4691 = llvm.insertvalue %4658, %4690[2] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %4692 = llvm.insertvalue %4659, %4691[3] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %4693 = llvm.insertvalue %4660, %4692[4] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %4694 = llvm.insertvalue %4661, %4693[5] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %4695 = llvm.insertvalue %4662, %4694[6] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %4696 = llvm.insertvalue %4663, %4695[7] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %4697 = llvm.insertvalue %4664, %4696[8] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %4698 = llvm.insertvalue %4665, %4697[9] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %4699 = llvm.insertvalue %4666, %4698[10] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %4700 = llvm.insertvalue %4667, %4699[11] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %4701 = llvm.insertvalue %4668, %4700[12] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %4702 = llvm.insertvalue %4669, %4701[13] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %4703 = llvm.insertvalue %4670, %4702[14] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %4704 = llvm.insertvalue %4671, %4703[15] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %4705 = llvm.insertvalue %4672, %4704[16] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %4706 = llvm.insertvalue %4673, %4705[17] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %4707 = llvm.insertvalue %4674, %4706[18] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %4708 = llvm.insertvalue %4675, %4707[19] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %4709 = llvm.insertvalue %4676, %4708[20] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %4710 = llvm.insertvalue %4677, %4709[21] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %4711 = llvm.insertvalue %4678, %4710[22] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %4712 = llvm.insertvalue %4679, %4711[23] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %4713 = llvm.insertvalue %4680, %4712[24] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %4714 = llvm.insertvalue %4681, %4713[25] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %4715 = llvm.insertvalue %4682, %4714[26] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %4716 = llvm.insertvalue %4683, %4715[27] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %4717 = llvm.insertvalue %4684, %4716[28] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %4718 = llvm.insertvalue %4685, %4717[29] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %4719 = llvm.insertvalue %4686, %4718[30] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %4720 = llvm.insertvalue %4687, %4719[31] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %4721 = llvm.extractvalue %4720[0] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %4722 = llvm.extractvalue %4720[1] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %4723 = llvm.extractvalue %4720[2] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %4724 = llvm.extractvalue %4720[3] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %4725 = llvm.extractvalue %4720[4] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %4726 = llvm.extractvalue %4720[5] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %4727 = llvm.extractvalue %4720[6] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %4728 = llvm.extractvalue %4720[7] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %4729 = llvm.extractvalue %4720[8] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %4730 = llvm.extractvalue %4720[9] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %4731 = llvm.extractvalue %4720[10] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %4732 = llvm.extractvalue %4720[11] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %4733 = llvm.extractvalue %4720[12] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %4734 = llvm.extractvalue %4720[13] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %4735 = llvm.extractvalue %4720[14] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %4736 = llvm.extractvalue %4720[15] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %4737 = llvm.extractvalue %4720[16] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %4738 = llvm.extractvalue %4720[17] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %4739 = llvm.extractvalue %4720[18] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %4740 = llvm.extractvalue %4720[19] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %4741 = llvm.extractvalue %4720[20] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %4742 = llvm.extractvalue %4720[21] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %4743 = llvm.extractvalue %4720[22] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %4744 = llvm.extractvalue %4720[23] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %4745 = llvm.extractvalue %4720[24] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %4746 = llvm.extractvalue %4720[25] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %4747 = llvm.extractvalue %4720[26] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %4748 = llvm.extractvalue %4720[27] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %4749 = llvm.extractvalue %4720[28] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %4750 = llvm.extractvalue %4720[29] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %4751 = llvm.extractvalue %4720[30] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %4752 = llvm.extractvalue %4720[31] : !llvm.struct<(i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1, i1)>  loc(#loc)
    %4753 = llvm.extractvalue %59[0] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4754 = llvm.extractvalue %59[1] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4755 = llvm.extractvalue %59[2] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4756 = llvm.extractvalue %59[3] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4757 = llvm.extractvalue %59[4] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4758 = llvm.extractvalue %59[5] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4759 = llvm.extractvalue %59[6] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4760 = llvm.extractvalue %59[7] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4761 = llvm.extractvalue %59[8] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4762 = llvm.extractvalue %59[9] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4763 = llvm.extractvalue %59[10] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4764 = llvm.extractvalue %59[11] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4765 = llvm.extractvalue %59[12] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4766 = llvm.extractvalue %59[13] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4767 = llvm.extractvalue %59[14] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4768 = llvm.extractvalue %59[15] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4769 = llvm.extractvalue %59[16] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4770 = llvm.extractvalue %59[17] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4771 = llvm.extractvalue %59[18] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4772 = llvm.extractvalue %59[19] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4773 = llvm.extractvalue %59[20] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4774 = llvm.extractvalue %59[21] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4775 = llvm.extractvalue %59[22] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4776 = llvm.extractvalue %59[23] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4777 = llvm.extractvalue %59[24] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4778 = llvm.extractvalue %59[25] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4779 = llvm.extractvalue %59[26] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4780 = llvm.extractvalue %59[27] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4781 = llvm.extractvalue %59[28] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4782 = llvm.extractvalue %59[29] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4783 = llvm.extractvalue %59[30] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4784 = llvm.extractvalue %59[31] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4785 = llvm.extractvalue %4592[0] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4786 = llvm.extractvalue %4592[1] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4787 = llvm.extractvalue %4592[2] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4788 = llvm.extractvalue %4592[3] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4789 = llvm.extractvalue %4592[4] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4790 = llvm.extractvalue %4592[5] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4791 = llvm.extractvalue %4592[6] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4792 = llvm.extractvalue %4592[7] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4793 = llvm.extractvalue %4592[8] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4794 = llvm.extractvalue %4592[9] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4795 = llvm.extractvalue %4592[10] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4796 = llvm.extractvalue %4592[11] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4797 = llvm.extractvalue %4592[12] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4798 = llvm.extractvalue %4592[13] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4799 = llvm.extractvalue %4592[14] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4800 = llvm.extractvalue %4592[15] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4801 = llvm.extractvalue %4592[16] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4802 = llvm.extractvalue %4592[17] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4803 = llvm.extractvalue %4592[18] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4804 = llvm.extractvalue %4592[19] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4805 = llvm.extractvalue %4592[20] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4806 = llvm.extractvalue %4592[21] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4807 = llvm.extractvalue %4592[22] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4808 = llvm.extractvalue %4592[23] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4809 = llvm.extractvalue %4592[24] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4810 = llvm.extractvalue %4592[25] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4811 = llvm.extractvalue %4592[26] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4812 = llvm.extractvalue %4592[27] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4813 = llvm.extractvalue %4592[28] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4814 = llvm.extractvalue %4592[29] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4815 = llvm.extractvalue %4592[30] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4816 = llvm.extractvalue %4592[31] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4817 = llvm.select %4721, %4753, %4785 : i1, bf16 loc(#loc)
    %4818 = llvm.select %4722, %4754, %4786 : i1, bf16 loc(#loc)
    %4819 = llvm.select %4723, %4755, %4787 : i1, bf16 loc(#loc)
    %4820 = llvm.select %4724, %4756, %4788 : i1, bf16 loc(#loc)
    %4821 = llvm.select %4725, %4757, %4789 : i1, bf16 loc(#loc)
    %4822 = llvm.select %4726, %4758, %4790 : i1, bf16 loc(#loc)
    %4823 = llvm.select %4727, %4759, %4791 : i1, bf16 loc(#loc)
    %4824 = llvm.select %4728, %4760, %4792 : i1, bf16 loc(#loc)
    %4825 = llvm.select %4729, %4761, %4793 : i1, bf16 loc(#loc)
    %4826 = llvm.select %4730, %4762, %4794 : i1, bf16 loc(#loc)
    %4827 = llvm.select %4731, %4763, %4795 : i1, bf16 loc(#loc)
    %4828 = llvm.select %4732, %4764, %4796 : i1, bf16 loc(#loc)
    %4829 = llvm.select %4733, %4765, %4797 : i1, bf16 loc(#loc)
    %4830 = llvm.select %4734, %4766, %4798 : i1, bf16 loc(#loc)
    %4831 = llvm.select %4735, %4767, %4799 : i1, bf16 loc(#loc)
    %4832 = llvm.select %4736, %4768, %4800 : i1, bf16 loc(#loc)
    %4833 = llvm.select %4737, %4769, %4801 : i1, bf16 loc(#loc)
    %4834 = llvm.select %4738, %4770, %4802 : i1, bf16 loc(#loc)
    %4835 = llvm.select %4739, %4771, %4803 : i1, bf16 loc(#loc)
    %4836 = llvm.select %4740, %4772, %4804 : i1, bf16 loc(#loc)
    %4837 = llvm.select %4741, %4773, %4805 : i1, bf16 loc(#loc)
    %4838 = llvm.select %4742, %4774, %4806 : i1, bf16 loc(#loc)
    %4839 = llvm.select %4743, %4775, %4807 : i1, bf16 loc(#loc)
    %4840 = llvm.select %4744, %4776, %4808 : i1, bf16 loc(#loc)
    %4841 = llvm.select %4745, %4777, %4809 : i1, bf16 loc(#loc)
    %4842 = llvm.select %4746, %4778, %4810 : i1, bf16 loc(#loc)
    %4843 = llvm.select %4747, %4779, %4811 : i1, bf16 loc(#loc)
    %4844 = llvm.select %4748, %4780, %4812 : i1, bf16 loc(#loc)
    %4845 = llvm.select %4749, %4781, %4813 : i1, bf16 loc(#loc)
    %4846 = llvm.select %4750, %4782, %4814 : i1, bf16 loc(#loc)
    %4847 = llvm.select %4751, %4783, %4815 : i1, bf16 loc(#loc)
    %4848 = llvm.select %4752, %4784, %4816 : i1, bf16 loc(#loc)
    %4849 = llvm.mlir.undef : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)> loc(#loc)
    %4850 = llvm.insertvalue %4817, %4849[0] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4851 = llvm.insertvalue %4818, %4850[1] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4852 = llvm.insertvalue %4819, %4851[2] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4853 = llvm.insertvalue %4820, %4852[3] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4854 = llvm.insertvalue %4821, %4853[4] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4855 = llvm.insertvalue %4822, %4854[5] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4856 = llvm.insertvalue %4823, %4855[6] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4857 = llvm.insertvalue %4824, %4856[7] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4858 = llvm.insertvalue %4825, %4857[8] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4859 = llvm.insertvalue %4826, %4858[9] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4860 = llvm.insertvalue %4827, %4859[10] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4861 = llvm.insertvalue %4828, %4860[11] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4862 = llvm.insertvalue %4829, %4861[12] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4863 = llvm.insertvalue %4830, %4862[13] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4864 = llvm.insertvalue %4831, %4863[14] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4865 = llvm.insertvalue %4832, %4864[15] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4866 = llvm.insertvalue %4833, %4865[16] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4867 = llvm.insertvalue %4834, %4866[17] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4868 = llvm.insertvalue %4835, %4867[18] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4869 = llvm.insertvalue %4836, %4868[19] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4870 = llvm.insertvalue %4837, %4869[20] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4871 = llvm.insertvalue %4838, %4870[21] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4872 = llvm.insertvalue %4839, %4871[22] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4873 = llvm.insertvalue %4840, %4872[23] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4874 = llvm.insertvalue %4841, %4873[24] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4875 = llvm.insertvalue %4842, %4874[25] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4876 = llvm.insertvalue %4843, %4875[26] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4877 = llvm.insertvalue %4844, %4876[27] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4878 = llvm.insertvalue %4845, %4877[28] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4879 = llvm.insertvalue %4846, %4878[29] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4880 = llvm.insertvalue %4847, %4879[30] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4881 = llvm.insertvalue %4848, %4880[31] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4882 = llvm.extractvalue %2152[0] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4883 = llvm.extractvalue %2152[1] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4884 = llvm.extractvalue %2152[2] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4885 = llvm.extractvalue %2152[3] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4886 = llvm.extractvalue %2152[4] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4887 = llvm.extractvalue %2152[5] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4888 = llvm.extractvalue %2152[6] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4889 = llvm.extractvalue %2152[7] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4890 = llvm.extractvalue %2152[8] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4891 = llvm.extractvalue %2152[9] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4892 = llvm.extractvalue %2152[10] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4893 = llvm.extractvalue %2152[11] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4894 = llvm.extractvalue %2152[12] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4895 = llvm.extractvalue %2152[13] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4896 = llvm.extractvalue %2152[14] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4897 = llvm.extractvalue %2152[15] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4898 = llvm.extractvalue %2152[16] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4899 = llvm.extractvalue %2152[17] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4900 = llvm.extractvalue %2152[18] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4901 = llvm.extractvalue %2152[19] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4902 = llvm.extractvalue %2152[20] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4903 = llvm.extractvalue %2152[21] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4904 = llvm.extractvalue %2152[22] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4905 = llvm.extractvalue %2152[23] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4906 = llvm.extractvalue %2152[24] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4907 = llvm.extractvalue %2152[25] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4908 = llvm.extractvalue %2152[26] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4909 = llvm.extractvalue %2152[27] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4910 = llvm.extractvalue %2152[28] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4911 = llvm.extractvalue %2152[29] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4912 = llvm.extractvalue %2152[30] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4913 = llvm.extractvalue %2152[31] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %4914 = llvm.mlir.undef : vector<8xbf16> loc(#loc)
    %4915 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %4916 = llvm.insertelement %4882, %4914[%4915 : i32] : vector<8xbf16> loc(#loc)
    %4917 = llvm.mlir.constant(1 : i32) : i32 loc(#loc)
    %4918 = llvm.insertelement %4883, %4916[%4917 : i32] : vector<8xbf16> loc(#loc)
    %4919 = llvm.mlir.constant(2 : i32) : i32 loc(#loc)
    %4920 = llvm.insertelement %4884, %4918[%4919 : i32] : vector<8xbf16> loc(#loc)
    %4921 = llvm.mlir.constant(3 : i32) : i32 loc(#loc)
    %4922 = llvm.insertelement %4885, %4920[%4921 : i32] : vector<8xbf16> loc(#loc)
    %4923 = llvm.mlir.constant(4 : i32) : i32 loc(#loc)
    %4924 = llvm.insertelement %4886, %4922[%4923 : i32] : vector<8xbf16> loc(#loc)
    %4925 = llvm.mlir.constant(5 : i32) : i32 loc(#loc)
    %4926 = llvm.insertelement %4887, %4924[%4925 : i32] : vector<8xbf16> loc(#loc)
    %4927 = llvm.mlir.constant(6 : i32) : i32 loc(#loc)
    %4928 = llvm.insertelement %4888, %4926[%4927 : i32] : vector<8xbf16> loc(#loc)
    %4929 = llvm.mlir.constant(7 : i32) : i32 loc(#loc)
    %4930 = llvm.insertelement %4889, %4928[%4929 : i32] : vector<8xbf16> loc(#loc)
    %4931 = llvm.mlir.undef : vector<8xbf16> loc(#loc)
    %4932 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %4933 = llvm.extractelement %4930[%4932 : i32] : vector<8xbf16> loc(#loc)
    %4934 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %4935 = llvm.insertelement %4933, %4931[%4934 : i32] : vector<8xbf16> loc(#loc)
    %4936 = llvm.mlir.constant(1 : i32) : i32 loc(#loc)
    %4937 = llvm.extractelement %4930[%4936 : i32] : vector<8xbf16> loc(#loc)
    %4938 = llvm.mlir.constant(1 : i32) : i32 loc(#loc)
    %4939 = llvm.insertelement %4937, %4935[%4938 : i32] : vector<8xbf16> loc(#loc)
    %4940 = llvm.mlir.constant(2 : i32) : i32 loc(#loc)
    %4941 = llvm.extractelement %4930[%4940 : i32] : vector<8xbf16> loc(#loc)
    %4942 = llvm.mlir.constant(2 : i32) : i32 loc(#loc)
    %4943 = llvm.insertelement %4941, %4939[%4942 : i32] : vector<8xbf16> loc(#loc)
    %4944 = llvm.mlir.constant(3 : i32) : i32 loc(#loc)
    %4945 = llvm.extractelement %4930[%4944 : i32] : vector<8xbf16> loc(#loc)
    %4946 = llvm.mlir.constant(3 : i32) : i32 loc(#loc)
    %4947 = llvm.insertelement %4945, %4943[%4946 : i32] : vector<8xbf16> loc(#loc)
    %4948 = llvm.mlir.constant(4 : i32) : i32 loc(#loc)
    %4949 = llvm.extractelement %4930[%4948 : i32] : vector<8xbf16> loc(#loc)
    %4950 = llvm.mlir.constant(4 : i32) : i32 loc(#loc)
    %4951 = llvm.insertelement %4949, %4947[%4950 : i32] : vector<8xbf16> loc(#loc)
    %4952 = llvm.mlir.constant(5 : i32) : i32 loc(#loc)
    %4953 = llvm.extractelement %4930[%4952 : i32] : vector<8xbf16> loc(#loc)
    %4954 = llvm.mlir.constant(5 : i32) : i32 loc(#loc)
    %4955 = llvm.insertelement %4953, %4951[%4954 : i32] : vector<8xbf16> loc(#loc)
    %4956 = llvm.mlir.constant(6 : i32) : i32 loc(#loc)
    %4957 = llvm.extractelement %4930[%4956 : i32] : vector<8xbf16> loc(#loc)
    %4958 = llvm.mlir.constant(6 : i32) : i32 loc(#loc)
    %4959 = llvm.insertelement %4957, %4955[%4958 : i32] : vector<8xbf16> loc(#loc)
    %4960 = llvm.mlir.constant(7 : i32) : i32 loc(#loc)
    %4961 = llvm.extractelement %4930[%4960 : i32] : vector<8xbf16> loc(#loc)
    %4962 = llvm.mlir.constant(7 : i32) : i32 loc(#loc)
    %4963 = llvm.insertelement %4961, %4959[%4962 : i32] : vector<8xbf16> loc(#loc)
    %4964 = llvm.mlir.undef : vector<8xbf16> loc(#loc)
    %4965 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %4966 = llvm.insertelement %4890, %4964[%4965 : i32] : vector<8xbf16> loc(#loc)
    %4967 = llvm.mlir.constant(1 : i32) : i32 loc(#loc)
    %4968 = llvm.insertelement %4891, %4966[%4967 : i32] : vector<8xbf16> loc(#loc)
    %4969 = llvm.mlir.constant(2 : i32) : i32 loc(#loc)
    %4970 = llvm.insertelement %4892, %4968[%4969 : i32] : vector<8xbf16> loc(#loc)
    %4971 = llvm.mlir.constant(3 : i32) : i32 loc(#loc)
    %4972 = llvm.insertelement %4893, %4970[%4971 : i32] : vector<8xbf16> loc(#loc)
    %4973 = llvm.mlir.constant(4 : i32) : i32 loc(#loc)
    %4974 = llvm.insertelement %4894, %4972[%4973 : i32] : vector<8xbf16> loc(#loc)
    %4975 = llvm.mlir.constant(5 : i32) : i32 loc(#loc)
    %4976 = llvm.insertelement %4895, %4974[%4975 : i32] : vector<8xbf16> loc(#loc)
    %4977 = llvm.mlir.constant(6 : i32) : i32 loc(#loc)
    %4978 = llvm.insertelement %4896, %4976[%4977 : i32] : vector<8xbf16> loc(#loc)
    %4979 = llvm.mlir.constant(7 : i32) : i32 loc(#loc)
    %4980 = llvm.insertelement %4897, %4978[%4979 : i32] : vector<8xbf16> loc(#loc)
    %4981 = llvm.mlir.undef : vector<8xbf16> loc(#loc)
    %4982 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %4983 = llvm.extractelement %4980[%4982 : i32] : vector<8xbf16> loc(#loc)
    %4984 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %4985 = llvm.insertelement %4983, %4981[%4984 : i32] : vector<8xbf16> loc(#loc)
    %4986 = llvm.mlir.constant(1 : i32) : i32 loc(#loc)
    %4987 = llvm.extractelement %4980[%4986 : i32] : vector<8xbf16> loc(#loc)
    %4988 = llvm.mlir.constant(1 : i32) : i32 loc(#loc)
    %4989 = llvm.insertelement %4987, %4985[%4988 : i32] : vector<8xbf16> loc(#loc)
    %4990 = llvm.mlir.constant(2 : i32) : i32 loc(#loc)
    %4991 = llvm.extractelement %4980[%4990 : i32] : vector<8xbf16> loc(#loc)
    %4992 = llvm.mlir.constant(2 : i32) : i32 loc(#loc)
    %4993 = llvm.insertelement %4991, %4989[%4992 : i32] : vector<8xbf16> loc(#loc)
    %4994 = llvm.mlir.constant(3 : i32) : i32 loc(#loc)
    %4995 = llvm.extractelement %4980[%4994 : i32] : vector<8xbf16> loc(#loc)
    %4996 = llvm.mlir.constant(3 : i32) : i32 loc(#loc)
    %4997 = llvm.insertelement %4995, %4993[%4996 : i32] : vector<8xbf16> loc(#loc)
    %4998 = llvm.mlir.constant(4 : i32) : i32 loc(#loc)
    %4999 = llvm.extractelement %4980[%4998 : i32] : vector<8xbf16> loc(#loc)
    %5000 = llvm.mlir.constant(4 : i32) : i32 loc(#loc)
    %5001 = llvm.insertelement %4999, %4997[%5000 : i32] : vector<8xbf16> loc(#loc)
    %5002 = llvm.mlir.constant(5 : i32) : i32 loc(#loc)
    %5003 = llvm.extractelement %4980[%5002 : i32] : vector<8xbf16> loc(#loc)
    %5004 = llvm.mlir.constant(5 : i32) : i32 loc(#loc)
    %5005 = llvm.insertelement %5003, %5001[%5004 : i32] : vector<8xbf16> loc(#loc)
    %5006 = llvm.mlir.constant(6 : i32) : i32 loc(#loc)
    %5007 = llvm.extractelement %4980[%5006 : i32] : vector<8xbf16> loc(#loc)
    %5008 = llvm.mlir.constant(6 : i32) : i32 loc(#loc)
    %5009 = llvm.insertelement %5007, %5005[%5008 : i32] : vector<8xbf16> loc(#loc)
    %5010 = llvm.mlir.constant(7 : i32) : i32 loc(#loc)
    %5011 = llvm.extractelement %4980[%5010 : i32] : vector<8xbf16> loc(#loc)
    %5012 = llvm.mlir.constant(7 : i32) : i32 loc(#loc)
    %5013 = llvm.insertelement %5011, %5009[%5012 : i32] : vector<8xbf16> loc(#loc)
    %5014 = llvm.mlir.undef : vector<8xbf16> loc(#loc)
    %5015 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %5016 = llvm.insertelement %4898, %5014[%5015 : i32] : vector<8xbf16> loc(#loc)
    %5017 = llvm.mlir.constant(1 : i32) : i32 loc(#loc)
    %5018 = llvm.insertelement %4899, %5016[%5017 : i32] : vector<8xbf16> loc(#loc)
    %5019 = llvm.mlir.constant(2 : i32) : i32 loc(#loc)
    %5020 = llvm.insertelement %4900, %5018[%5019 : i32] : vector<8xbf16> loc(#loc)
    %5021 = llvm.mlir.constant(3 : i32) : i32 loc(#loc)
    %5022 = llvm.insertelement %4901, %5020[%5021 : i32] : vector<8xbf16> loc(#loc)
    %5023 = llvm.mlir.constant(4 : i32) : i32 loc(#loc)
    %5024 = llvm.insertelement %4902, %5022[%5023 : i32] : vector<8xbf16> loc(#loc)
    %5025 = llvm.mlir.constant(5 : i32) : i32 loc(#loc)
    %5026 = llvm.insertelement %4903, %5024[%5025 : i32] : vector<8xbf16> loc(#loc)
    %5027 = llvm.mlir.constant(6 : i32) : i32 loc(#loc)
    %5028 = llvm.insertelement %4904, %5026[%5027 : i32] : vector<8xbf16> loc(#loc)
    %5029 = llvm.mlir.constant(7 : i32) : i32 loc(#loc)
    %5030 = llvm.insertelement %4905, %5028[%5029 : i32] : vector<8xbf16> loc(#loc)
    %5031 = llvm.mlir.undef : vector<8xbf16> loc(#loc)
    %5032 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %5033 = llvm.extractelement %5030[%5032 : i32] : vector<8xbf16> loc(#loc)
    %5034 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %5035 = llvm.insertelement %5033, %5031[%5034 : i32] : vector<8xbf16> loc(#loc)
    %5036 = llvm.mlir.constant(1 : i32) : i32 loc(#loc)
    %5037 = llvm.extractelement %5030[%5036 : i32] : vector<8xbf16> loc(#loc)
    %5038 = llvm.mlir.constant(1 : i32) : i32 loc(#loc)
    %5039 = llvm.insertelement %5037, %5035[%5038 : i32] : vector<8xbf16> loc(#loc)
    %5040 = llvm.mlir.constant(2 : i32) : i32 loc(#loc)
    %5041 = llvm.extractelement %5030[%5040 : i32] : vector<8xbf16> loc(#loc)
    %5042 = llvm.mlir.constant(2 : i32) : i32 loc(#loc)
    %5043 = llvm.insertelement %5041, %5039[%5042 : i32] : vector<8xbf16> loc(#loc)
    %5044 = llvm.mlir.constant(3 : i32) : i32 loc(#loc)
    %5045 = llvm.extractelement %5030[%5044 : i32] : vector<8xbf16> loc(#loc)
    %5046 = llvm.mlir.constant(3 : i32) : i32 loc(#loc)
    %5047 = llvm.insertelement %5045, %5043[%5046 : i32] : vector<8xbf16> loc(#loc)
    %5048 = llvm.mlir.constant(4 : i32) : i32 loc(#loc)
    %5049 = llvm.extractelement %5030[%5048 : i32] : vector<8xbf16> loc(#loc)
    %5050 = llvm.mlir.constant(4 : i32) : i32 loc(#loc)
    %5051 = llvm.insertelement %5049, %5047[%5050 : i32] : vector<8xbf16> loc(#loc)
    %5052 = llvm.mlir.constant(5 : i32) : i32 loc(#loc)
    %5053 = llvm.extractelement %5030[%5052 : i32] : vector<8xbf16> loc(#loc)
    %5054 = llvm.mlir.constant(5 : i32) : i32 loc(#loc)
    %5055 = llvm.insertelement %5053, %5051[%5054 : i32] : vector<8xbf16> loc(#loc)
    %5056 = llvm.mlir.constant(6 : i32) : i32 loc(#loc)
    %5057 = llvm.extractelement %5030[%5056 : i32] : vector<8xbf16> loc(#loc)
    %5058 = llvm.mlir.constant(6 : i32) : i32 loc(#loc)
    %5059 = llvm.insertelement %5057, %5055[%5058 : i32] : vector<8xbf16> loc(#loc)
    %5060 = llvm.mlir.constant(7 : i32) : i32 loc(#loc)
    %5061 = llvm.extractelement %5030[%5060 : i32] : vector<8xbf16> loc(#loc)
    %5062 = llvm.mlir.constant(7 : i32) : i32 loc(#loc)
    %5063 = llvm.insertelement %5061, %5059[%5062 : i32] : vector<8xbf16> loc(#loc)
    %5064 = llvm.mlir.undef : vector<8xbf16> loc(#loc)
    %5065 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %5066 = llvm.insertelement %4906, %5064[%5065 : i32] : vector<8xbf16> loc(#loc)
    %5067 = llvm.mlir.constant(1 : i32) : i32 loc(#loc)
    %5068 = llvm.insertelement %4907, %5066[%5067 : i32] : vector<8xbf16> loc(#loc)
    %5069 = llvm.mlir.constant(2 : i32) : i32 loc(#loc)
    %5070 = llvm.insertelement %4908, %5068[%5069 : i32] : vector<8xbf16> loc(#loc)
    %5071 = llvm.mlir.constant(3 : i32) : i32 loc(#loc)
    %5072 = llvm.insertelement %4909, %5070[%5071 : i32] : vector<8xbf16> loc(#loc)
    %5073 = llvm.mlir.constant(4 : i32) : i32 loc(#loc)
    %5074 = llvm.insertelement %4910, %5072[%5073 : i32] : vector<8xbf16> loc(#loc)
    %5075 = llvm.mlir.constant(5 : i32) : i32 loc(#loc)
    %5076 = llvm.insertelement %4911, %5074[%5075 : i32] : vector<8xbf16> loc(#loc)
    %5077 = llvm.mlir.constant(6 : i32) : i32 loc(#loc)
    %5078 = llvm.insertelement %4912, %5076[%5077 : i32] : vector<8xbf16> loc(#loc)
    %5079 = llvm.mlir.constant(7 : i32) : i32 loc(#loc)
    %5080 = llvm.insertelement %4913, %5078[%5079 : i32] : vector<8xbf16> loc(#loc)
    %5081 = llvm.mlir.undef : vector<8xbf16> loc(#loc)
    %5082 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %5083 = llvm.extractelement %5080[%5082 : i32] : vector<8xbf16> loc(#loc)
    %5084 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %5085 = llvm.insertelement %5083, %5081[%5084 : i32] : vector<8xbf16> loc(#loc)
    %5086 = llvm.mlir.constant(1 : i32) : i32 loc(#loc)
    %5087 = llvm.extractelement %5080[%5086 : i32] : vector<8xbf16> loc(#loc)
    %5088 = llvm.mlir.constant(1 : i32) : i32 loc(#loc)
    %5089 = llvm.insertelement %5087, %5085[%5088 : i32] : vector<8xbf16> loc(#loc)
    %5090 = llvm.mlir.constant(2 : i32) : i32 loc(#loc)
    %5091 = llvm.extractelement %5080[%5090 : i32] : vector<8xbf16> loc(#loc)
    %5092 = llvm.mlir.constant(2 : i32) : i32 loc(#loc)
    %5093 = llvm.insertelement %5091, %5089[%5092 : i32] : vector<8xbf16> loc(#loc)
    %5094 = llvm.mlir.constant(3 : i32) : i32 loc(#loc)
    %5095 = llvm.extractelement %5080[%5094 : i32] : vector<8xbf16> loc(#loc)
    %5096 = llvm.mlir.constant(3 : i32) : i32 loc(#loc)
    %5097 = llvm.insertelement %5095, %5093[%5096 : i32] : vector<8xbf16> loc(#loc)
    %5098 = llvm.mlir.constant(4 : i32) : i32 loc(#loc)
    %5099 = llvm.extractelement %5080[%5098 : i32] : vector<8xbf16> loc(#loc)
    %5100 = llvm.mlir.constant(4 : i32) : i32 loc(#loc)
    %5101 = llvm.insertelement %5099, %5097[%5100 : i32] : vector<8xbf16> loc(#loc)
    %5102 = llvm.mlir.constant(5 : i32) : i32 loc(#loc)
    %5103 = llvm.extractelement %5080[%5102 : i32] : vector<8xbf16> loc(#loc)
    %5104 = llvm.mlir.constant(5 : i32) : i32 loc(#loc)
    %5105 = llvm.insertelement %5103, %5101[%5104 : i32] : vector<8xbf16> loc(#loc)
    %5106 = llvm.mlir.constant(6 : i32) : i32 loc(#loc)
    %5107 = llvm.extractelement %5080[%5106 : i32] : vector<8xbf16> loc(#loc)
    %5108 = llvm.mlir.constant(6 : i32) : i32 loc(#loc)
    %5109 = llvm.insertelement %5107, %5105[%5108 : i32] : vector<8xbf16> loc(#loc)
    %5110 = llvm.mlir.constant(7 : i32) : i32 loc(#loc)
    %5111 = llvm.extractelement %5080[%5110 : i32] : vector<8xbf16> loc(#loc)
    %5112 = llvm.mlir.constant(7 : i32) : i32 loc(#loc)
    %5113 = llvm.insertelement %5111, %5109[%5112 : i32] : vector<8xbf16> loc(#loc)
    %5114 = llvm.extractvalue %4881[0] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %5115 = llvm.extractvalue %4881[1] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %5116 = llvm.extractvalue %4881[2] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %5117 = llvm.extractvalue %4881[3] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %5118 = llvm.extractvalue %4881[4] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %5119 = llvm.extractvalue %4881[5] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %5120 = llvm.extractvalue %4881[6] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %5121 = llvm.extractvalue %4881[7] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %5122 = llvm.extractvalue %4881[8] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %5123 = llvm.extractvalue %4881[9] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %5124 = llvm.extractvalue %4881[10] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %5125 = llvm.extractvalue %4881[11] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %5126 = llvm.extractvalue %4881[12] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %5127 = llvm.extractvalue %4881[13] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %5128 = llvm.extractvalue %4881[14] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %5129 = llvm.extractvalue %4881[15] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %5130 = llvm.extractvalue %4881[16] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %5131 = llvm.extractvalue %4881[17] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %5132 = llvm.extractvalue %4881[18] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %5133 = llvm.extractvalue %4881[19] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %5134 = llvm.extractvalue %4881[20] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %5135 = llvm.extractvalue %4881[21] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %5136 = llvm.extractvalue %4881[22] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %5137 = llvm.extractvalue %4881[23] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %5138 = llvm.extractvalue %4881[24] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %5139 = llvm.extractvalue %4881[25] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %5140 = llvm.extractvalue %4881[26] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %5141 = llvm.extractvalue %4881[27] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %5142 = llvm.extractvalue %4881[28] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %5143 = llvm.extractvalue %4881[29] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %5144 = llvm.extractvalue %4881[30] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %5145 = llvm.extractvalue %4881[31] : !llvm.struct<(bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16, bf16)>  loc(#loc)
    %5146 = llvm.mlir.undef : vector<8xbf16> loc(#loc)
    %5147 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %5148 = llvm.insertelement %5114, %5146[%5147 : i32] : vector<8xbf16> loc(#loc)
    %5149 = llvm.mlir.constant(1 : i32) : i32 loc(#loc)
    %5150 = llvm.insertelement %5115, %5148[%5149 : i32] : vector<8xbf16> loc(#loc)
    %5151 = llvm.mlir.constant(2 : i32) : i32 loc(#loc)
    %5152 = llvm.insertelement %5116, %5150[%5151 : i32] : vector<8xbf16> loc(#loc)
    %5153 = llvm.mlir.constant(3 : i32) : i32 loc(#loc)
    %5154 = llvm.insertelement %5117, %5152[%5153 : i32] : vector<8xbf16> loc(#loc)
    %5155 = llvm.mlir.constant(4 : i32) : i32 loc(#loc)
    %5156 = llvm.insertelement %5118, %5154[%5155 : i32] : vector<8xbf16> loc(#loc)
    %5157 = llvm.mlir.constant(5 : i32) : i32 loc(#loc)
    %5158 = llvm.insertelement %5119, %5156[%5157 : i32] : vector<8xbf16> loc(#loc)
    %5159 = llvm.mlir.constant(6 : i32) : i32 loc(#loc)
    %5160 = llvm.insertelement %5120, %5158[%5159 : i32] : vector<8xbf16> loc(#loc)
    %5161 = llvm.mlir.constant(7 : i32) : i32 loc(#loc)
    %5162 = llvm.insertelement %5121, %5160[%5161 : i32] : vector<8xbf16> loc(#loc)
    %5163 = llvm.mlir.undef : vector<8xbf16> loc(#loc)
    %5164 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %5165 = llvm.extractelement %5162[%5164 : i32] : vector<8xbf16> loc(#loc)
    %5166 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %5167 = llvm.insertelement %5165, %5163[%5166 : i32] : vector<8xbf16> loc(#loc)
    %5168 = llvm.mlir.constant(1 : i32) : i32 loc(#loc)
    %5169 = llvm.extractelement %5162[%5168 : i32] : vector<8xbf16> loc(#loc)
    %5170 = llvm.mlir.constant(1 : i32) : i32 loc(#loc)
    %5171 = llvm.insertelement %5169, %5167[%5170 : i32] : vector<8xbf16> loc(#loc)
    %5172 = llvm.mlir.constant(2 : i32) : i32 loc(#loc)
    %5173 = llvm.extractelement %5162[%5172 : i32] : vector<8xbf16> loc(#loc)
    %5174 = llvm.mlir.constant(2 : i32) : i32 loc(#loc)
    %5175 = llvm.insertelement %5173, %5171[%5174 : i32] : vector<8xbf16> loc(#loc)
    %5176 = llvm.mlir.constant(3 : i32) : i32 loc(#loc)
    %5177 = llvm.extractelement %5162[%5176 : i32] : vector<8xbf16> loc(#loc)
    %5178 = llvm.mlir.constant(3 : i32) : i32 loc(#loc)
    %5179 = llvm.insertelement %5177, %5175[%5178 : i32] : vector<8xbf16> loc(#loc)
    %5180 = llvm.mlir.constant(4 : i32) : i32 loc(#loc)
    %5181 = llvm.extractelement %5162[%5180 : i32] : vector<8xbf16> loc(#loc)
    %5182 = llvm.mlir.constant(4 : i32) : i32 loc(#loc)
    %5183 = llvm.insertelement %5181, %5179[%5182 : i32] : vector<8xbf16> loc(#loc)
    %5184 = llvm.mlir.constant(5 : i32) : i32 loc(#loc)
    %5185 = llvm.extractelement %5162[%5184 : i32] : vector<8xbf16> loc(#loc)
    %5186 = llvm.mlir.constant(5 : i32) : i32 loc(#loc)
    %5187 = llvm.insertelement %5185, %5183[%5186 : i32] : vector<8xbf16> loc(#loc)
    %5188 = llvm.mlir.constant(6 : i32) : i32 loc(#loc)
    %5189 = llvm.extractelement %5162[%5188 : i32] : vector<8xbf16> loc(#loc)
    %5190 = llvm.mlir.constant(6 : i32) : i32 loc(#loc)
    %5191 = llvm.insertelement %5189, %5187[%5190 : i32] : vector<8xbf16> loc(#loc)
    %5192 = llvm.mlir.constant(7 : i32) : i32 loc(#loc)
    %5193 = llvm.extractelement %5162[%5192 : i32] : vector<8xbf16> loc(#loc)
    %5194 = llvm.mlir.constant(7 : i32) : i32 loc(#loc)
    %5195 = llvm.insertelement %5193, %5191[%5194 : i32] : vector<8xbf16> loc(#loc)
    %5196 = llvm.mlir.undef : vector<8xbf16> loc(#loc)
    %5197 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %5198 = llvm.insertelement %5122, %5196[%5197 : i32] : vector<8xbf16> loc(#loc)
    %5199 = llvm.mlir.constant(1 : i32) : i32 loc(#loc)
    %5200 = llvm.insertelement %5123, %5198[%5199 : i32] : vector<8xbf16> loc(#loc)
    %5201 = llvm.mlir.constant(2 : i32) : i32 loc(#loc)
    %5202 = llvm.insertelement %5124, %5200[%5201 : i32] : vector<8xbf16> loc(#loc)
    %5203 = llvm.mlir.constant(3 : i32) : i32 loc(#loc)
    %5204 = llvm.insertelement %5125, %5202[%5203 : i32] : vector<8xbf16> loc(#loc)
    %5205 = llvm.mlir.constant(4 : i32) : i32 loc(#loc)
    %5206 = llvm.insertelement %5126, %5204[%5205 : i32] : vector<8xbf16> loc(#loc)
    %5207 = llvm.mlir.constant(5 : i32) : i32 loc(#loc)
    %5208 = llvm.insertelement %5127, %5206[%5207 : i32] : vector<8xbf16> loc(#loc)
    %5209 = llvm.mlir.constant(6 : i32) : i32 loc(#loc)
    %5210 = llvm.insertelement %5128, %5208[%5209 : i32] : vector<8xbf16> loc(#loc)
    %5211 = llvm.mlir.constant(7 : i32) : i32 loc(#loc)
    %5212 = llvm.insertelement %5129, %5210[%5211 : i32] : vector<8xbf16> loc(#loc)
    %5213 = llvm.mlir.undef : vector<8xbf16> loc(#loc)
    %5214 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %5215 = llvm.extractelement %5212[%5214 : i32] : vector<8xbf16> loc(#loc)
    %5216 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %5217 = llvm.insertelement %5215, %5213[%5216 : i32] : vector<8xbf16> loc(#loc)
    %5218 = llvm.mlir.constant(1 : i32) : i32 loc(#loc)
    %5219 = llvm.extractelement %5212[%5218 : i32] : vector<8xbf16> loc(#loc)
    %5220 = llvm.mlir.constant(1 : i32) : i32 loc(#loc)
    %5221 = llvm.insertelement %5219, %5217[%5220 : i32] : vector<8xbf16> loc(#loc)
    %5222 = llvm.mlir.constant(2 : i32) : i32 loc(#loc)
    %5223 = llvm.extractelement %5212[%5222 : i32] : vector<8xbf16> loc(#loc)
    %5224 = llvm.mlir.constant(2 : i32) : i32 loc(#loc)
    %5225 = llvm.insertelement %5223, %5221[%5224 : i32] : vector<8xbf16> loc(#loc)
    %5226 = llvm.mlir.constant(3 : i32) : i32 loc(#loc)
    %5227 = llvm.extractelement %5212[%5226 : i32] : vector<8xbf16> loc(#loc)
    %5228 = llvm.mlir.constant(3 : i32) : i32 loc(#loc)
    %5229 = llvm.insertelement %5227, %5225[%5228 : i32] : vector<8xbf16> loc(#loc)
    %5230 = llvm.mlir.constant(4 : i32) : i32 loc(#loc)
    %5231 = llvm.extractelement %5212[%5230 : i32] : vector<8xbf16> loc(#loc)
    %5232 = llvm.mlir.constant(4 : i32) : i32 loc(#loc)
    %5233 = llvm.insertelement %5231, %5229[%5232 : i32] : vector<8xbf16> loc(#loc)
    %5234 = llvm.mlir.constant(5 : i32) : i32 loc(#loc)
    %5235 = llvm.extractelement %5212[%5234 : i32] : vector<8xbf16> loc(#loc)
    %5236 = llvm.mlir.constant(5 : i32) : i32 loc(#loc)
    %5237 = llvm.insertelement %5235, %5233[%5236 : i32] : vector<8xbf16> loc(#loc)
    %5238 = llvm.mlir.constant(6 : i32) : i32 loc(#loc)
    %5239 = llvm.extractelement %5212[%5238 : i32] : vector<8xbf16> loc(#loc)
    %5240 = llvm.mlir.constant(6 : i32) : i32 loc(#loc)
    %5241 = llvm.insertelement %5239, %5237[%5240 : i32] : vector<8xbf16> loc(#loc)
    %5242 = llvm.mlir.constant(7 : i32) : i32 loc(#loc)
    %5243 = llvm.extractelement %5212[%5242 : i32] : vector<8xbf16> loc(#loc)
    %5244 = llvm.mlir.constant(7 : i32) : i32 loc(#loc)
    %5245 = llvm.insertelement %5243, %5241[%5244 : i32] : vector<8xbf16> loc(#loc)
    %5246 = llvm.mlir.undef : vector<8xbf16> loc(#loc)
    %5247 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %5248 = llvm.insertelement %5130, %5246[%5247 : i32] : vector<8xbf16> loc(#loc)
    %5249 = llvm.mlir.constant(1 : i32) : i32 loc(#loc)
    %5250 = llvm.insertelement %5131, %5248[%5249 : i32] : vector<8xbf16> loc(#loc)
    %5251 = llvm.mlir.constant(2 : i32) : i32 loc(#loc)
    %5252 = llvm.insertelement %5132, %5250[%5251 : i32] : vector<8xbf16> loc(#loc)
    %5253 = llvm.mlir.constant(3 : i32) : i32 loc(#loc)
    %5254 = llvm.insertelement %5133, %5252[%5253 : i32] : vector<8xbf16> loc(#loc)
    %5255 = llvm.mlir.constant(4 : i32) : i32 loc(#loc)
    %5256 = llvm.insertelement %5134, %5254[%5255 : i32] : vector<8xbf16> loc(#loc)
    %5257 = llvm.mlir.constant(5 : i32) : i32 loc(#loc)
    %5258 = llvm.insertelement %5135, %5256[%5257 : i32] : vector<8xbf16> loc(#loc)
    %5259 = llvm.mlir.constant(6 : i32) : i32 loc(#loc)
    %5260 = llvm.insertelement %5136, %5258[%5259 : i32] : vector<8xbf16> loc(#loc)
    %5261 = llvm.mlir.constant(7 : i32) : i32 loc(#loc)
    %5262 = llvm.insertelement %5137, %5260[%5261 : i32] : vector<8xbf16> loc(#loc)
    %5263 = llvm.mlir.undef : vector<8xbf16> loc(#loc)
    %5264 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %5265 = llvm.extractelement %5262[%5264 : i32] : vector<8xbf16> loc(#loc)
    %5266 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %5267 = llvm.insertelement %5265, %5263[%5266 : i32] : vector<8xbf16> loc(#loc)
    %5268 = llvm.mlir.constant(1 : i32) : i32 loc(#loc)
    %5269 = llvm.extractelement %5262[%5268 : i32] : vector<8xbf16> loc(#loc)
    %5270 = llvm.mlir.constant(1 : i32) : i32 loc(#loc)
    %5271 = llvm.insertelement %5269, %5267[%5270 : i32] : vector<8xbf16> loc(#loc)
    %5272 = llvm.mlir.constant(2 : i32) : i32 loc(#loc)
    %5273 = llvm.extractelement %5262[%5272 : i32] : vector<8xbf16> loc(#loc)
    %5274 = llvm.mlir.constant(2 : i32) : i32 loc(#loc)
    %5275 = llvm.insertelement %5273, %5271[%5274 : i32] : vector<8xbf16> loc(#loc)
    %5276 = llvm.mlir.constant(3 : i32) : i32 loc(#loc)
    %5277 = llvm.extractelement %5262[%5276 : i32] : vector<8xbf16> loc(#loc)
    %5278 = llvm.mlir.constant(3 : i32) : i32 loc(#loc)
    %5279 = llvm.insertelement %5277, %5275[%5278 : i32] : vector<8xbf16> loc(#loc)
    %5280 = llvm.mlir.constant(4 : i32) : i32 loc(#loc)
    %5281 = llvm.extractelement %5262[%5280 : i32] : vector<8xbf16> loc(#loc)
    %5282 = llvm.mlir.constant(4 : i32) : i32 loc(#loc)
    %5283 = llvm.insertelement %5281, %5279[%5282 : i32] : vector<8xbf16> loc(#loc)
    %5284 = llvm.mlir.constant(5 : i32) : i32 loc(#loc)
    %5285 = llvm.extractelement %5262[%5284 : i32] : vector<8xbf16> loc(#loc)
    %5286 = llvm.mlir.constant(5 : i32) : i32 loc(#loc)
    %5287 = llvm.insertelement %5285, %5283[%5286 : i32] : vector<8xbf16> loc(#loc)
    %5288 = llvm.mlir.constant(6 : i32) : i32 loc(#loc)
    %5289 = llvm.extractelement %5262[%5288 : i32] : vector<8xbf16> loc(#loc)
    %5290 = llvm.mlir.constant(6 : i32) : i32 loc(#loc)
    %5291 = llvm.insertelement %5289, %5287[%5290 : i32] : vector<8xbf16> loc(#loc)
    %5292 = llvm.mlir.constant(7 : i32) : i32 loc(#loc)
    %5293 = llvm.extractelement %5262[%5292 : i32] : vector<8xbf16> loc(#loc)
    %5294 = llvm.mlir.constant(7 : i32) : i32 loc(#loc)
    %5295 = llvm.insertelement %5293, %5291[%5294 : i32] : vector<8xbf16> loc(#loc)
    %5296 = llvm.mlir.undef : vector<8xbf16> loc(#loc)
    %5297 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %5298 = llvm.insertelement %5138, %5296[%5297 : i32] : vector<8xbf16> loc(#loc)
    %5299 = llvm.mlir.constant(1 : i32) : i32 loc(#loc)
    %5300 = llvm.insertelement %5139, %5298[%5299 : i32] : vector<8xbf16> loc(#loc)
    %5301 = llvm.mlir.constant(2 : i32) : i32 loc(#loc)
    %5302 = llvm.insertelement %5140, %5300[%5301 : i32] : vector<8xbf16> loc(#loc)
    %5303 = llvm.mlir.constant(3 : i32) : i32 loc(#loc)
    %5304 = llvm.insertelement %5141, %5302[%5303 : i32] : vector<8xbf16> loc(#loc)
    %5305 = llvm.mlir.constant(4 : i32) : i32 loc(#loc)
    %5306 = llvm.insertelement %5142, %5304[%5305 : i32] : vector<8xbf16> loc(#loc)
    %5307 = llvm.mlir.constant(5 : i32) : i32 loc(#loc)
    %5308 = llvm.insertelement %5143, %5306[%5307 : i32] : vector<8xbf16> loc(#loc)
    %5309 = llvm.mlir.constant(6 : i32) : i32 loc(#loc)
    %5310 = llvm.insertelement %5144, %5308[%5309 : i32] : vector<8xbf16> loc(#loc)
    %5311 = llvm.mlir.constant(7 : i32) : i32 loc(#loc)
    %5312 = llvm.insertelement %5145, %5310[%5311 : i32] : vector<8xbf16> loc(#loc)
    %5313 = llvm.mlir.undef : vector<8xbf16> loc(#loc)
    %5314 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %5315 = llvm.extractelement %5312[%5314 : i32] : vector<8xbf16> loc(#loc)
    %5316 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %5317 = llvm.insertelement %5315, %5313[%5316 : i32] : vector<8xbf16> loc(#loc)
    %5318 = llvm.mlir.constant(1 : i32) : i32 loc(#loc)
    %5319 = llvm.extractelement %5312[%5318 : i32] : vector<8xbf16> loc(#loc)
    %5320 = llvm.mlir.constant(1 : i32) : i32 loc(#loc)
    %5321 = llvm.insertelement %5319, %5317[%5320 : i32] : vector<8xbf16> loc(#loc)
    %5322 = llvm.mlir.constant(2 : i32) : i32 loc(#loc)
    %5323 = llvm.extractelement %5312[%5322 : i32] : vector<8xbf16> loc(#loc)
    %5324 = llvm.mlir.constant(2 : i32) : i32 loc(#loc)
    %5325 = llvm.insertelement %5323, %5321[%5324 : i32] : vector<8xbf16> loc(#loc)
    %5326 = llvm.mlir.constant(3 : i32) : i32 loc(#loc)
    %5327 = llvm.extractelement %5312[%5326 : i32] : vector<8xbf16> loc(#loc)
    %5328 = llvm.mlir.constant(3 : i32) : i32 loc(#loc)
    %5329 = llvm.insertelement %5327, %5325[%5328 : i32] : vector<8xbf16> loc(#loc)
    %5330 = llvm.mlir.constant(4 : i32) : i32 loc(#loc)
    %5331 = llvm.extractelement %5312[%5330 : i32] : vector<8xbf16> loc(#loc)
    %5332 = llvm.mlir.constant(4 : i32) : i32 loc(#loc)
    %5333 = llvm.insertelement %5331, %5329[%5332 : i32] : vector<8xbf16> loc(#loc)
    %5334 = llvm.mlir.constant(5 : i32) : i32 loc(#loc)
    %5335 = llvm.extractelement %5312[%5334 : i32] : vector<8xbf16> loc(#loc)
    %5336 = llvm.mlir.constant(5 : i32) : i32 loc(#loc)
    %5337 = llvm.insertelement %5335, %5333[%5336 : i32] : vector<8xbf16> loc(#loc)
    %5338 = llvm.mlir.constant(6 : i32) : i32 loc(#loc)
    %5339 = llvm.extractelement %5312[%5338 : i32] : vector<8xbf16> loc(#loc)
    %5340 = llvm.mlir.constant(6 : i32) : i32 loc(#loc)
    %5341 = llvm.insertelement %5339, %5337[%5340 : i32] : vector<8xbf16> loc(#loc)
    %5342 = llvm.mlir.constant(7 : i32) : i32 loc(#loc)
    %5343 = llvm.extractelement %5312[%5342 : i32] : vector<8xbf16> loc(#loc)
    %5344 = llvm.mlir.constant(7 : i32) : i32 loc(#loc)
    %5345 = llvm.insertelement %5343, %5341[%5344 : i32] : vector<8xbf16> loc(#loc)
    %5346 = llvm.extractvalue %66[0] : !llvm.struct<(f32, f32, f32, f32)>  loc(#loc)
    %5347 = llvm.extractvalue %66[1] : !llvm.struct<(f32, f32, f32, f32)>  loc(#loc)
    %5348 = llvm.extractvalue %66[2] : !llvm.struct<(f32, f32, f32, f32)>  loc(#loc)
    %5349 = llvm.extractvalue %66[3] : !llvm.struct<(f32, f32, f32, f32)>  loc(#loc)
    %5350 = llvm.mlir.undef : vector<4xf32> loc(#loc)
    %5351 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %5352 = llvm.insertelement %5346, %5350[%5351 : i32] : vector<4xf32> loc(#loc)
    %5353 = llvm.mlir.constant(1 : i32) : i32 loc(#loc)
    %5354 = llvm.insertelement %5347, %5352[%5353 : i32] : vector<4xf32> loc(#loc)
    %5355 = llvm.mlir.constant(2 : i32) : i32 loc(#loc)
    %5356 = llvm.insertelement %5348, %5354[%5355 : i32] : vector<4xf32> loc(#loc)
    %5357 = llvm.mlir.constant(3 : i32) : i32 loc(#loc)
    %5358 = llvm.insertelement %5349, %5356[%5357 : i32] : vector<4xf32> loc(#loc)
    %5359 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %5360 = rocdl.mfma.f32.16x16x32.bf16 %5195, %4963, %5358, %5359, %5359, %5359 : (vector<8xbf16>, vector<8xbf16>, vector<4xf32>, i32, i32, i32) -> vector<4xf32> loc(#loc)
    %5361 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %5362 = rocdl.mfma.f32.16x16x32.bf16 %5245, %5013, %5360, %5361, %5361, %5361 : (vector<8xbf16>, vector<8xbf16>, vector<4xf32>, i32, i32, i32) -> vector<4xf32> loc(#loc)
    %5363 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %5364 = rocdl.mfma.f32.16x16x32.bf16 %5295, %5063, %5362, %5363, %5363, %5363 : (vector<8xbf16>, vector<8xbf16>, vector<4xf32>, i32, i32, i32) -> vector<4xf32> loc(#loc)
    %5365 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %5366 = rocdl.mfma.f32.16x16x32.bf16 %5345, %5113, %5364, %5365, %5365, %5365 : (vector<8xbf16>, vector<8xbf16>, vector<4xf32>, i32, i32, i32) -> vector<4xf32> loc(#loc)
    %5367 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %5368 = llvm.extractelement %5366[%5367 : i32] : vector<4xf32> loc(#loc)
    %5369 = llvm.mlir.constant(1 : i32) : i32 loc(#loc)
    %5370 = llvm.extractelement %5366[%5369 : i32] : vector<4xf32> loc(#loc)
    %5371 = llvm.mlir.constant(2 : i32) : i32 loc(#loc)
    %5372 = llvm.extractelement %5366[%5371 : i32] : vector<4xf32> loc(#loc)
    %5373 = llvm.mlir.constant(3 : i32) : i32 loc(#loc)
    %5374 = llvm.extractelement %5366[%5373 : i32] : vector<4xf32> loc(#loc)
    %5375 = llvm.mlir.undef : !llvm.struct<(f32, f32, f32, f32)> loc(#loc)
    %5376 = llvm.insertvalue %5368, %5375[0] : !llvm.struct<(f32, f32, f32, f32)>  loc(#loc)
    %5377 = llvm.insertvalue %5370, %5376[1] : !llvm.struct<(f32, f32, f32, f32)>  loc(#loc)
    %5378 = llvm.insertvalue %5372, %5377[2] : !llvm.struct<(f32, f32, f32, f32)>  loc(#loc)
    %5379 = llvm.insertvalue %5374, %5378[3] : !llvm.struct<(f32, f32, f32, f32)>  loc(#loc)
    %5380 = llvm.extractvalue %4201[0] : !llvm.struct<(f32, f32, f32, f32)>  loc(#loc)
    %5381 = llvm.extractvalue %4201[1] : !llvm.struct<(f32, f32, f32, f32)>  loc(#loc)
    %5382 = llvm.extractvalue %4201[2] : !llvm.struct<(f32, f32, f32, f32)>  loc(#loc)
    %5383 = llvm.extractvalue %4201[3] : !llvm.struct<(f32, f32, f32, f32)>  loc(#loc)
    %5384 = llvm.extractvalue %5379[0] : !llvm.struct<(f32, f32, f32, f32)>  loc(#loc)
    %5385 = llvm.extractvalue %5379[1] : !llvm.struct<(f32, f32, f32, f32)>  loc(#loc)
    %5386 = llvm.extractvalue %5379[2] : !llvm.struct<(f32, f32, f32, f32)>  loc(#loc)
    %5387 = llvm.extractvalue %5379[3] : !llvm.struct<(f32, f32, f32, f32)>  loc(#loc)
    %5388 = llvm.fadd %5380, %5384 : f32 loc(#loc)
    %5389 = llvm.fadd %5381, %5385 : f32 loc(#loc)
    %5390 = llvm.fadd %5382, %5386 : f32 loc(#loc)
    %5391 = llvm.fadd %5383, %5387 : f32 loc(#loc)
    %5392 = llvm.mlir.undef : !llvm.struct<(f32, f32, f32, f32)> loc(#loc)
    %5393 = llvm.insertvalue %5388, %5392[0] : !llvm.struct<(f32, f32, f32, f32)>  loc(#loc)
    %5394 = llvm.insertvalue %5389, %5393[1] : !llvm.struct<(f32, f32, f32, f32)>  loc(#loc)
    %5395 = llvm.insertvalue %5390, %5394[2] : !llvm.struct<(f32, f32, f32, f32)>  loc(#loc)
    %5396 = llvm.insertvalue %5391, %5395[3] : !llvm.struct<(f32, f32, f32, f32)>  loc(#loc)
    %5397 = llvm.extractvalue %177[0] : !llvm.struct<(i32)>  loc(#loc)
    %5398 = llvm.mlir.undef : !llvm.struct<(i32, i32, i32, i32)> loc(#loc)
    %5399 = llvm.insertvalue %5397, %5398[0] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc)
    %5400 = llvm.insertvalue %5397, %5399[1] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc)
    %5401 = llvm.insertvalue %5397, %5400[2] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc)
    %5402 = llvm.insertvalue %5397, %5401[3] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc)
    %5403 = llvm.extractvalue %5402[0] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc)
    %5404 = llvm.extractvalue %5402[1] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc)
    %5405 = llvm.extractvalue %5402[2] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc)
    %5406 = llvm.extractvalue %5402[3] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc)
    %5407 = llvm.extractvalue %6[0] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc)
    %5408 = llvm.extractvalue %6[1] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc)
    %5409 = llvm.extractvalue %6[2] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc)
    %5410 = llvm.extractvalue %6[3] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc)
    %5411 = llvm.mul %5403, %5407 : i32 loc(#loc)
    %5412 = llvm.mul %5404, %5408 : i32 loc(#loc)
    %5413 = llvm.mul %5405, %5409 : i32 loc(#loc)
    %5414 = llvm.mul %5406, %5410 : i32 loc(#loc)
    %5415 = llvm.mlir.undef : !llvm.struct<(i32, i32, i32, i32)> loc(#loc)
    %5416 = llvm.insertvalue %5411, %5415[0] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc)
    %5417 = llvm.insertvalue %5412, %5416[1] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc)
    %5418 = llvm.insertvalue %5413, %5417[2] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc)
    %5419 = llvm.insertvalue %5414, %5418[3] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc)
    %5420 = llvm.extractvalue %5419[0] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc)
    %5421 = llvm.extractvalue %5419[1] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc)
    %5422 = llvm.extractvalue %5419[2] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc)
    %5423 = llvm.extractvalue %5419[3] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc)
    %5424 = llvm.mlir.undef : !llvm.struct<(i32, i32, i32, i32)> loc(#loc)
    %5425 = llvm.insertvalue %5423, %5424[0] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc)
    %5426 = llvm.insertvalue %5423, %5425[1] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc)
    %5427 = llvm.insertvalue %5423, %5426[2] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc)
    %5428 = llvm.insertvalue %5423, %5427[3] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc)
    %5429 = llvm.extractvalue %886[0] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc)
    %5430 = llvm.extractvalue %886[1] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc)
    %5431 = llvm.extractvalue %886[2] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc)
    %5432 = llvm.extractvalue %886[3] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc)
    %5433 = llvm.mlir.undef : !llvm.struct<(i32, i32, i32, i32)> loc(#loc)
    %5434 = llvm.insertvalue %5429, %5433[0] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc)
    %5435 = llvm.insertvalue %5430, %5434[1] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc)
    %5436 = llvm.insertvalue %5431, %5435[2] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc)
    %5437 = llvm.insertvalue %5432, %5436[3] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc)
    %5438 = llvm.extractvalue %5437[0] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc)
    %5439 = llvm.extractvalue %5437[1] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc)
    %5440 = llvm.extractvalue %5437[2] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc)
    %5441 = llvm.extractvalue %5437[3] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc)
    %5442 = llvm.mlir.undef : !llvm.struct<(i32, i32, i32, i32)> loc(#loc)
    %5443 = llvm.insertvalue %5438, %5442[0] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc)
    %5444 = llvm.insertvalue %5439, %5443[1] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc)
    %5445 = llvm.insertvalue %5440, %5444[2] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc)
    %5446 = llvm.insertvalue %5441, %5445[3] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc)
    %5447 = llvm.extractvalue %5446[0] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc)
    %5448 = llvm.extractvalue %5446[1] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc)
    %5449 = llvm.extractvalue %5446[2] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc)
    %5450 = llvm.extractvalue %5446[3] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc)
    %5451 = llvm.extractvalue %5428[0] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc)
    %5452 = llvm.extractvalue %5428[1] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc)
    %5453 = llvm.extractvalue %5428[2] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc)
    %5454 = llvm.extractvalue %5428[3] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc)
    %5455 = llvm.add %5447, %5451 : i32 loc(#loc)
    %5456 = llvm.add %5448, %5452 : i32 loc(#loc)
    %5457 = llvm.add %5449, %5453 : i32 loc(#loc)
    %5458 = llvm.add %5450, %5454 : i32 loc(#loc)
    %5459 = llvm.mlir.undef : !llvm.struct<(i32, i32, i32, i32)> loc(#loc)
    %5460 = llvm.insertvalue %5455, %5459[0] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc)
    %5461 = llvm.insertvalue %5456, %5460[1] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc)
    %5462 = llvm.insertvalue %5457, %5461[2] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc)
    %5463 = llvm.insertvalue %5458, %5462[3] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc)
    %5464 = llvm.extractvalue %5396[0] : !llvm.struct<(f32, f32, f32, f32)>  loc(#loc)
    %5465 = llvm.extractvalue %5396[1] : !llvm.struct<(f32, f32, f32, f32)>  loc(#loc)
    %5466 = llvm.extractvalue %5396[2] : !llvm.struct<(f32, f32, f32, f32)>  loc(#loc)
    %5467 = llvm.extractvalue %5396[3] : !llvm.struct<(f32, f32, f32, f32)>  loc(#loc)
    %5468 = llvm.mlir.undef : vector<2xf32> loc(#loc)
    %5469 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %5470 = llvm.mlir.constant(1 : i32) : i32 loc(#loc)
    %5471 = llvm.insertelement %5464, %5468[%5469 : i32] : vector<2xf32> loc(#loc)
    %5472 = llvm.insertelement %5465, %5471[%5470 : i32] : vector<2xf32> loc(#loc)
    %5473 = llvm.fptrunc %5472 : vector<2xf32> to vector<2xbf16> loc(#loc)
    %5474 = llvm.extractelement %5473[%5469 : i32] : vector<2xbf16> loc(#loc)
    %5475 = llvm.extractelement %5473[%5470 : i32] : vector<2xbf16> loc(#loc)
    %5476 = llvm.mlir.undef : vector<2xf32> loc(#loc)
    %5477 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %5478 = llvm.mlir.constant(1 : i32) : i32 loc(#loc)
    %5479 = llvm.insertelement %5466, %5476[%5477 : i32] : vector<2xf32> loc(#loc)
    %5480 = llvm.insertelement %5467, %5479[%5478 : i32] : vector<2xf32> loc(#loc)
    %5481 = llvm.fptrunc %5480 : vector<2xf32> to vector<2xbf16> loc(#loc)
    %5482 = llvm.extractelement %5481[%5477 : i32] : vector<2xbf16> loc(#loc)
    %5483 = llvm.extractelement %5481[%5478 : i32] : vector<2xbf16> loc(#loc)
    %5484 = llvm.mlir.undef : !llvm.struct<(bf16, bf16, bf16, bf16)> loc(#loc)
    %5485 = llvm.insertvalue %5474, %5484[0] : !llvm.struct<(bf16, bf16, bf16, bf16)>  loc(#loc)
    %5486 = llvm.insertvalue %5475, %5485[1] : !llvm.struct<(bf16, bf16, bf16, bf16)>  loc(#loc)
    %5487 = llvm.insertvalue %5482, %5486[2] : !llvm.struct<(bf16, bf16, bf16, bf16)>  loc(#loc)
    %5488 = llvm.insertvalue %5483, %5487[3] : !llvm.struct<(bf16, bf16, bf16, bf16)>  loc(#loc)
    %5489 = llvm.extractvalue %5463[0] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc)
    %5490 = llvm.extractvalue %5463[1] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc)
    %5491 = llvm.extractvalue %5463[2] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc)
    %5492 = llvm.extractvalue %5463[3] : !llvm.struct<(i32, i32, i32, i32)>  loc(#loc)
    %5493 = llvm.extractvalue %5488[0] : !llvm.struct<(bf16, bf16, bf16, bf16)>  loc(#loc)
    %5494 = llvm.extractvalue %5488[1] : !llvm.struct<(bf16, bf16, bf16, bf16)>  loc(#loc)
    %5495 = llvm.extractvalue %5488[2] : !llvm.struct<(bf16, bf16, bf16, bf16)>  loc(#loc)
    %5496 = llvm.extractvalue %5488[3] : !llvm.struct<(bf16, bf16, bf16, bf16)>  loc(#loc)
    %5497 = llvm.mlir.constant(0 : i16) : i16 loc(#loc)
    %5498 = llvm.mlir.constant(159744 : i32) : i32 loc(#loc)
    %5499 = llvm.mlir.constant(2147483646 : i32) : i32 loc(#loc)
    %5500 = rocdl.make.buffer.rsrc %out, %5497, %5499, %5498 : <1> to <8> loc(#loc)
    %5501 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %5502 = rocdl.workitem.id.x : i32 loc(#loc)
    %5503 = llvm.mlir.constant(255 : i32) : i32 loc(#loc)
    %5504 = llvm.and %5502, %5503 : i32 loc(#loc)
    %5505 = llvm.mlir.constant(64 : i32) : i32 loc(#loc)
    %5506 = llvm.urem %5504, %5505 : i32 loc(#loc)
    %5507 = llvm.udiv %5504, %5505 : i32 loc(#loc)
    %5508 = llvm.mlir.constant(true) : i1 loc(#loc)
    %5509 = llvm.mlir.undef : vector<4xbf16> loc(#loc)
    %5510 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %5511 = llvm.insertelement %5493, %5509[%5510 : i32] : vector<4xbf16> loc(#loc)
    %5512 = llvm.mlir.constant(1 : i32) : i32 loc(#loc)
    %5513 = llvm.insertelement %5494, %5511[%5512 : i32] : vector<4xbf16> loc(#loc)
    %5514 = llvm.mlir.constant(2 : i32) : i32 loc(#loc)
    %5515 = llvm.insertelement %5495, %5513[%5514 : i32] : vector<4xbf16> loc(#loc)
    %5516 = llvm.mlir.constant(3 : i32) : i32 loc(#loc)
    %5517 = llvm.insertelement %5496, %5515[%5516 : i32] : vector<4xbf16> loc(#loc)
    %5518 = llvm.bitcast %5517 : vector<4xbf16> to vector<2xi32> loc(#loc)
    %5519 = llvm.mlir.constant(-2147483648 : i32) : i32 loc(#loc)
    %5520 = llvm.mlir.constant(2 : i32) : i32 loc(#loc)
    %5521 = llvm.mul %5520, %5489 : i32 loc(#loc)
    %5522 = llvm.select %5508, %5521, %5519 : i1, i32 loc(#loc)
    %5523 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %5524 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    rocdl.raw.ptr.buffer.store %5518, %5500, %5522, %5523, %5524 : vector<2xi32> loc(#loc)
    llvm.return loc(#loc)
  } loc(#loc)
} loc(#loc)


// -----// IR Dump Before CSE (cse) ('builtin.module' operation) //----- //
#loc = loc(unknown)
#loc1 = loc("a_base")
#loc2 = loc("stride_a0")
#loc3 = loc("b_base")
#loc4 = loc("stride_b1")
#loc5 = loc("b_scale")
#loc6 = loc("out")
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.shared = 16384 : i32, ttg.target = "hip:gfx950", "ttg.threads-per-warp" = 64 : i32} {
  llvm.mlir.global external @global_smem() {addr_space = 3 : i32, alignment = 16 : i64} : !llvm.array<0 x i8> loc(#loc)
  llvm.func @"__triton_hip_predicated_load_vector<8xbf16>_!llvm.ptr<1>_i1_vector<8xbf16>_"(!llvm.ptr<1>, i1, vector<8xbf16>) -> vector<8xbf16> attributes {libname = "", libpath = ""} loc(#loc)
  llvm.func @"__triton_hip_predicated_store_!llvm.void_!llvm.ptr<3>_vector<8xbf16>_i1_"(!llvm.ptr<3>, vector<8xbf16>, i1) attributes {libname = "", libpath = ""} loc(#loc)
  llvm.func @"__triton_hip_predicated_load_vector<8xbf16>_!llvm.ptr<3>_i1_vector<8xbf16>_"(!llvm.ptr<3>, i1, vector<8xbf16>) -> vector<8xbf16> attributes {libname = "", libpath = ""} loc(#loc)
  llvm.func @"__triton_hip_predicated_load_vector<16xi8>_!llvm.ptr<1>_i1_vector<16xi8>_"(!llvm.ptr<1>, i1, vector<16xi8>) -> vector<16xi8> attributes {libname = "", libpath = ""} loc(#loc)
  llvm.func @"__triton_hip_predicated_store_!llvm.void_!llvm.ptr<3>_vector<4xi8>_i1_"(!llvm.ptr<3>, vector<4xi8>, i1) attributes {libname = "", libpath = ""} loc(#loc)
  llvm.func @"__triton_hip_predicated_load_vector<4xi8>_!llvm.ptr<3>_i1_vector<4xi8>_"(!llvm.ptr<3>, i1, vector<4xi8>) -> vector<4xi8> attributes {libname = "", libpath = ""} loc(#loc)
  llvm.func @"__triton_hip_predicated_store_!llvm.void_!llvm.ptr<3>_vector<1xi8>_i1_"(!llvm.ptr<3>, vector<1xi8>, i1) attributes {libname = "", libpath = ""} loc(#loc)
  llvm.func @"__triton_hip_predicated_load_vector<1xi8>_!llvm.ptr<3>_i1_vector<1xi8>_"(!llvm.ptr<3>, i1, vector<1xi8>) -> vector<1xi8> attributes {libname = "", libpath = ""} loc(#loc)
  llvm.func @dot_scale_kernel(%a_base: !llvm.ptr<1> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("a_base"), %stride_a0: i32 {tt.divisibility = 16 : i32} loc("stride_a0"), %b_base: !llvm.ptr<1> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("b_base"), %stride_b1: i32 {tt.divisibility = 16 : i32} loc("stride_b1"), %b_scale: !llvm.ptr<1> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("b_scale"), %out: !llvm.ptr<1> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("out"), %arg6: !llvm.ptr<1> loc(unknown), %arg7: !llvm.ptr<1> loc(unknown)) attributes {noinline = false, nvvm.kernel = 1 : ui1, nvvm.reqntid = array<i32: 128>} {
    %0 = llvm.mlir.undef : vector<4xbf16> loc(#loc)
    %1 = llvm.mlir.undef : vector<2xf32> loc(#loc)
    %2 = llvm.mlir.undef : vector<4xf32> loc(#loc)
    %3 = llvm.mlir.constant(28 : i32) : i32 loc(#loc)
    %4 = llvm.mlir.constant(20 : i32) : i32 loc(#loc)
    %5 = llvm.mlir.undef : vector<1xi8> loc(#loc)
    %6 = llvm.mlir.constant(63 : i32) : i32 loc(#loc)
    %7 = llvm.mlir.constant(-2147483648 : i32) : i32 loc(#loc)
    %8 = llvm.mlir.constant(dense<0> : vector<1xi8>) : vector<1xi8> loc(#loc)
    %9 = llvm.mlir.constant(2147483646 : i32) : i32 loc(#loc)
    %10 = llvm.mlir.constant(159744 : i32) : i32 loc(#loc)
    %11 = llvm.mlir.constant(0 : i16) : i16 loc(#loc)
    %12 = llvm.mlir.constant(580 : i32) : i32 loc(#loc)
    %13 = llvm.mlir.constant(dense<0> : vector<4xi8>) : vector<4xi8> loc(#loc)
    %14 = llvm.mlir.constant(260 : i32) : i32 loc(#loc)
    %15 = llvm.mlir.constant(2048 : i32) : i32 loc(#loc)
    %16 = llvm.mlir.undef : vector<4xi8> loc(#loc)
    %17 = llvm.mlir.constant(576 : i32) : i32 loc(#loc)
    %18 = llvm.mlir.constant(1024 : i32) : i32 loc(#loc)
    %19 = llvm.mlir.constant(15 : index) : i32 loc(#loc)
    %20 = llvm.mlir.constant(14 : index) : i32 loc(#loc)
    %21 = llvm.mlir.constant(13 : index) : i32 loc(#loc)
    %22 = llvm.mlir.constant(12 : index) : i32 loc(#loc)
    %23 = llvm.mlir.constant(11 : index) : i32 loc(#loc)
    %24 = llvm.mlir.constant(10 : index) : i32 loc(#loc)
    %25 = llvm.mlir.constant(9 : index) : i32 loc(#loc)
    %26 = llvm.mlir.constant(8 : index) : i32 loc(#loc)
    %27 = llvm.mlir.constant(dense<0> : vector<16xi8>) : vector<16xi8> loc(#loc)
    %28 = llvm.mlir.constant(96 : i32) : i32 loc(#loc)
    %29 = llvm.mlir.constant(30 : i32) : i32 loc(#loc)
    %30 = llvm.mlir.constant(2112 : i32) : i32 loc(#loc)
    %31 = llvm.mlir.undef : vector<8xbf16> loc(#loc)
    %32 = llvm.mlir.constant(8192 : i32) : i32 loc(#loc)
    %33 = llvm.mlir.constant(256 : i32) : i32 loc(#loc)
    %34 = llvm.mlir.constant(4096 : i32) : i32 loc(#loc)
    %35 = llvm.mlir.constant(192 : i32) : i32 loc(#loc)
    %36 = llvm.mlir.constant(206 : i32) : i32 loc(#loc)
    %37 = llvm.mlir.addressof @global_smem : !llvm.ptr<3> loc(#loc)
    %38 = llvm.mlir.constant(7 : index) : i32 loc(#loc)
    %39 = llvm.mlir.constant(6 : index) : i32 loc(#loc)
    %40 = llvm.mlir.constant(5 : index) : i32 loc(#loc)
    %41 = llvm.mlir.constant(4 : index) : i32 loc(#loc)
    %42 = llvm.mlir.constant(3 : index) : i32 loc(#loc)
    %43 = llvm.mlir.constant(2 : index) : i32 loc(#loc)
    %44 = llvm.mlir.constant(1 : index) : i32 loc(#loc)
    %45 = llvm.mlir.constant(dense<0.000000e+00> : vector<8xbf16>) : vector<8xbf16> loc(#loc)
    %46 = llvm.mlir.constant(true) : i1 loc(#loc)
    %47 = llvm.mlir.constant(112 : i32) : i32 loc(#loc)
    %48 = llvm.mlir.constant(14 : i32) : i32 loc(#loc)
    %49 = llvm.mlir.constant(12 : i32) : i32 loc(#loc)
    %50 = llvm.mlir.constant(7 : i32) : i32 loc(#loc)
    %51 = llvm.mlir.constant(4 : i32) : i32 loc(#loc)
    %52 = llvm.mlir.constant(2 : i32) : i32 loc(#loc)
    %53 = llvm.mlir.constant(1 : i32) : i32 loc(#loc)
    %54 = llvm.mlir.constant(31 : i32) : i32 loc(#loc)
    %55 = llvm.mlir.constant(128 : i32) : i32 loc(#loc)
    %56 = llvm.mlir.constant(15 : i32) : i32 loc(#loc)
    %57 = llvm.mlir.constant(3 : i32) : i32 loc(#loc)
    %58 = llvm.mlir.constant(248 : i32) : i32 loc(#loc)
    %59 = llvm.mlir.constant(24 : i32) : i32 loc(#loc)
    %60 = llvm.mlir.constant(16 : i32) : i32 loc(#loc)
    %61 = llvm.mlir.constant(5 : i32) : i32 loc(#loc)
    %62 = llvm.mlir.constant(224 : i32) : i32 loc(#loc)
    %63 = llvm.mlir.constant(6 : i32) : i32 loc(#loc)
    %64 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %65 = llvm.mlir.constant(64 : i32) : i32 loc(#loc)
    %66 = llvm.mlir.constant(255 : i32) : i32 loc(#loc)
    %67 = llvm.mlir.constant(0 : index) : i32 loc(#loc)
    %68 = llvm.mlir.constant(0.000000e+00 : f32) : f32 loc(#loc)
    %69 = llvm.mlir.constant(0x7FC0 : bf16) : bf16 loc(#loc)
    %70 = llvm.mlir.constant(-1 : i8) : i8 loc(#loc)
    %71 = llvm.mlir.constant(7 : i16) : i16 loc(#loc)
    %72 = llvm.mlir.constant(8 : i32) : i32 loc(#loc)
    %73 = llvm.mlir.constant(32 : i32) : i32 loc(#loc)
    %74 = rocdl.workitem.id.x : i32 loc(#loc)
    %75 = llvm.and %74, %66 : i32 loc(#loc)
    %76 = llvm.urem %75, %65 : i32 loc(#loc)
    %77 = llvm.udiv %75, %65 : i32 loc(#loc)
    %78 = llvm.shl %76, %64 : i32 loc(#loc)
    %79 = llvm.or %64, %78 : i32 loc(#loc)
    %80 = llvm.shl %77, %63 : i32 loc(#loc)
    %81 = llvm.or %79, %80 : i32 loc(#loc)
    %82 = llvm.and %81, %62 : i32 loc(#loc)
    %83 = llvm.lshr %82, %61 : i32 loc(#loc)
    %84 = llvm.xor %64, %83 : i32 loc(#loc)
    %85 = llvm.xor %64, %84 : i32 loc(#loc)
    %86 = llvm.xor %85, %64 : i32 loc(#loc)
    %87 = llvm.xor %85, %72 : i32 loc(#loc)
    %88 = llvm.xor %85, %60 : i32 loc(#loc)
    %89 = llvm.xor %85, %59 : i32 loc(#loc)
    %90 = llvm.add %86, %67 : i32 loc(#loc)
    %91 = llvm.add %87, %67 : i32 loc(#loc)
    %92 = llvm.add %88, %67 : i32 loc(#loc)
    %93 = llvm.add %89, %67 : i32 loc(#loc)
    %94 = rocdl.workitem.id.x : i32 loc(#loc)
    %95 = llvm.and %94, %66 : i32 loc(#loc)
    %96 = llvm.urem %95, %65 : i32 loc(#loc)
    %97 = llvm.udiv %95, %65 : i32 loc(#loc)
    %98 = llvm.shl %96, %64 : i32 loc(#loc)
    %99 = llvm.or %64, %98 : i32 loc(#loc)
    %100 = llvm.shl %97, %63 : i32 loc(#loc)
    %101 = llvm.or %99, %100 : i32 loc(#loc)
    %102 = llvm.and %101, %58 : i32 loc(#loc)
    %103 = llvm.lshr %102, %57 : i32 loc(#loc)
    %104 = llvm.xor %64, %103 : i32 loc(#loc)
    %105 = llvm.xor %64, %104 : i32 loc(#loc)
    %106 = llvm.xor %105, %64 : i32 loc(#loc)
    %107 = llvm.add %106, %67 : i32 loc(#loc)
    %108 = rocdl.workitem.id.x : i32 loc(#loc)
    %109 = llvm.and %108, %66 : i32 loc(#loc)
    %110 = llvm.urem %109, %65 : i32 loc(#loc)
    %111 = llvm.udiv %109, %65 : i32 loc(#loc)
    %112 = llvm.shl %110, %64 : i32 loc(#loc)
    %113 = llvm.or %64, %112 : i32 loc(#loc)
    %114 = llvm.shl %111, %63 : i32 loc(#loc)
    %115 = llvm.or %113, %114 : i32 loc(#loc)
    %116 = llvm.and %115, %56 : i32 loc(#loc)
    %117 = llvm.lshr %116, %64 : i32 loc(#loc)
    %118 = llvm.xor %64, %117 : i32 loc(#loc)
    %119 = llvm.and %115, %55 : i32 loc(#loc)
    %120 = llvm.icmp "eq" %119, %64 : i32 loc(#loc)
    %121 = llvm.select %120, %64, %60 : i1, i32 loc(#loc)
    %122 = llvm.xor %118, %121 : i32 loc(#loc)
    %123 = llvm.xor %64, %122 : i32 loc(#loc)
    %124 = llvm.xor %123, %64 : i32 loc(#loc)
    %125 = llvm.add %124, %67 : i32 loc(#loc)
    %126 = llvm.mul %90, %stride_a0 : i32 loc(#loc)
    %127 = llvm.mul %91, %stride_a0 : i32 loc(#loc)
    %128 = llvm.mul %92, %stride_a0 : i32 loc(#loc)
    %129 = llvm.mul %93, %stride_a0 : i32 loc(#loc)
    %130 = rocdl.workitem.id.x : i32 loc(#loc)
    %131 = llvm.and %130, %66 : i32 loc(#loc)
    %132 = llvm.urem %131, %65 : i32 loc(#loc)
    %133 = llvm.udiv %131, %65 : i32 loc(#loc)
    %134 = llvm.shl %132, %64 : i32 loc(#loc)
    %135 = llvm.or %64, %134 : i32 loc(#loc)
    %136 = llvm.shl %133, %63 : i32 loc(#loc)
    %137 = llvm.or %135, %136 : i32 loc(#loc)
    %138 = llvm.and %137, %54 : i32 loc(#loc)
    %139 = llvm.shl %138, %57 : i32 loc(#loc)
    %140 = llvm.xor %64, %139 : i32 loc(#loc)
    %141 = llvm.xor %64, %140 : i32 loc(#loc)
    %142 = llvm.xor %141, %64 : i32 loc(#loc)
    %143 = llvm.add %142, %67 : i32 loc(#loc)
    %144 = llvm.add %143, %126 : i32 loc(#loc)
    %145 = llvm.add %143, %127 : i32 loc(#loc)
    %146 = llvm.add %143, %128 : i32 loc(#loc)
    %147 = llvm.add %143, %129 : i32 loc(#loc)
    %148 = rocdl.workitem.id.x : i32 loc(#loc)
    %149 = llvm.and %148, %66 : i32 loc(#loc)
    %150 = llvm.urem %149, %65 : i32 loc(#loc)
    %151 = llvm.udiv %149, %65 : i32 loc(#loc)
    %152 = llvm.shl %150, %64 : i32 loc(#loc)
    %153 = llvm.or %64, %152 : i32 loc(#loc)
    %154 = llvm.shl %151, %63 : i32 loc(#loc)
    %155 = llvm.or %153, %154 : i32 loc(#loc)
    %156 = llvm.and %155, %50 : i32 loc(#loc)
    %157 = llvm.shl %156, %51 : i32 loc(#loc)
    %158 = llvm.xor %64, %157 : i32 loc(#loc)
    %159 = llvm.xor %64, %158 : i32 loc(#loc)
    %160 = llvm.xor %159, %64 : i32 loc(#loc)
    %161 = llvm.add %160, %67 : i32 loc(#loc)
    %162 = rocdl.workitem.id.x : i32 loc(#loc)
    %163 = llvm.and %162, %66 : i32 loc(#loc)
    %164 = llvm.urem %163, %65 : i32 loc(#loc)
    %165 = llvm.udiv %163, %65 : i32 loc(#loc)
    %166 = llvm.shl %164, %64 : i32 loc(#loc)
    %167 = llvm.or %64, %166 : i32 loc(#loc)
    %168 = llvm.shl %165, %63 : i32 loc(#loc)
    %169 = llvm.or %167, %168 : i32 loc(#loc)
    %170 = llvm.and %169, %58 : i32 loc(#loc)
    %171 = llvm.lshr %170, %57 : i32 loc(#loc)
    %172 = llvm.xor %64, %171 : i32 loc(#loc)
    %173 = llvm.xor %64, %172 : i32 loc(#loc)
    %174 = llvm.xor %173, %64 : i32 loc(#loc)
    %175 = llvm.add %174, %67 : i32 loc(#loc)
    %176 = rocdl.workitem.id.x : i32 loc(#loc)
    %177 = llvm.and %176, %66 : i32 loc(#loc)
    %178 = llvm.urem %177, %65 : i32 loc(#loc)
    %179 = llvm.udiv %177, %65 : i32 loc(#loc)
    %180 = llvm.shl %178, %64 : i32 loc(#loc)
    %181 = llvm.or %64, %180 : i32 loc(#loc)
    %182 = llvm.shl %179, %63 : i32 loc(#loc)
    %183 = llvm.or %181, %182 : i32 loc(#loc)
    %184 = llvm.and %183, %47 : i32 loc(#loc)
    %185 = llvm.lshr %184, %52 : i32 loc(#loc)
    %186 = llvm.xor %64, %185 : i32 loc(#loc)
    %187 = llvm.xor %64, %186 : i32 loc(#loc)
    %188 = llvm.xor %187, %64 : i32 loc(#loc)
    %189 = llvm.add %188, %67 : i32 loc(#loc)
    %190 = llvm.mul %175, %stride_b1 : i32 loc(#loc)
    %191 = llvm.add %190, %161 : i32 loc(#loc)
    %192 = llvm.getelementptr %a_base[%144] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc)
    %193 = llvm.getelementptr %a_base[%145] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc)
    %194 = llvm.getelementptr %a_base[%146] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc)
    %195 = llvm.getelementptr %a_base[%147] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc)
    %196 = llvm.call @"__triton_hip_predicated_load_vector<8xbf16>_!llvm.ptr<1>_i1_vector<8xbf16>_"(%192, %46, %45) : (!llvm.ptr<1>, i1, vector<8xbf16>) -> vector<8xbf16> loc(#loc)
    %197 = llvm.extractelement %196[%67 : i32] : vector<8xbf16> loc(#loc)
    %198 = llvm.extractelement %196[%44 : i32] : vector<8xbf16> loc(#loc)
    %199 = llvm.extractelement %196[%43 : i32] : vector<8xbf16> loc(#loc)
    %200 = llvm.extractelement %196[%42 : i32] : vector<8xbf16> loc(#loc)
    %201 = llvm.extractelement %196[%41 : i32] : vector<8xbf16> loc(#loc)
    %202 = llvm.extractelement %196[%40 : i32] : vector<8xbf16> loc(#loc)
    %203 = llvm.extractelement %196[%39 : i32] : vector<8xbf16> loc(#loc)
    %204 = llvm.extractelement %196[%38 : i32] : vector<8xbf16> loc(#loc)
    %205 = llvm.call @"__triton_hip_predicated_load_vector<8xbf16>_!llvm.ptr<1>_i1_vector<8xbf16>_"(%193, %46, %45) : (!llvm.ptr<1>, i1, vector<8xbf16>) -> vector<8xbf16> loc(#loc)
    %206 = llvm.extractelement %205[%67 : i32] : vector<8xbf16> loc(#loc)
    %207 = llvm.extractelement %205[%44 : i32] : vector<8xbf16> loc(#loc)
    %208 = llvm.extractelement %205[%43 : i32] : vector<8xbf16> loc(#loc)
    %209 = llvm.extractelement %205[%42 : i32] : vector<8xbf16> loc(#loc)
    %210 = llvm.extractelement %205[%41 : i32] : vector<8xbf16> loc(#loc)
    %211 = llvm.extractelement %205[%40 : i32] : vector<8xbf16> loc(#loc)
    %212 = llvm.extractelement %205[%39 : i32] : vector<8xbf16> loc(#loc)
    %213 = llvm.extractelement %205[%38 : i32] : vector<8xbf16> loc(#loc)
    %214 = llvm.call @"__triton_hip_predicated_load_vector<8xbf16>_!llvm.ptr<1>_i1_vector<8xbf16>_"(%194, %46, %45) : (!llvm.ptr<1>, i1, vector<8xbf16>) -> vector<8xbf16> loc(#loc)
    %215 = llvm.extractelement %214[%67 : i32] : vector<8xbf16> loc(#loc)
    %216 = llvm.extractelement %214[%44 : i32] : vector<8xbf16> loc(#loc)
    %217 = llvm.extractelement %214[%43 : i32] : vector<8xbf16> loc(#loc)
    %218 = llvm.extractelement %214[%42 : i32] : vector<8xbf16> loc(#loc)
    %219 = llvm.extractelement %214[%41 : i32] : vector<8xbf16> loc(#loc)
    %220 = llvm.extractelement %214[%40 : i32] : vector<8xbf16> loc(#loc)
    %221 = llvm.extractelement %214[%39 : i32] : vector<8xbf16> loc(#loc)
    %222 = llvm.extractelement %214[%38 : i32] : vector<8xbf16> loc(#loc)
    %223 = llvm.call @"__triton_hip_predicated_load_vector<8xbf16>_!llvm.ptr<1>_i1_vector<8xbf16>_"(%195, %46, %45) : (!llvm.ptr<1>, i1, vector<8xbf16>) -> vector<8xbf16> loc(#loc)
    %224 = llvm.extractelement %223[%67 : i32] : vector<8xbf16> loc(#loc)
    %225 = llvm.extractelement %223[%44 : i32] : vector<8xbf16> loc(#loc)
    %226 = llvm.extractelement %223[%43 : i32] : vector<8xbf16> loc(#loc)
    %227 = llvm.extractelement %223[%42 : i32] : vector<8xbf16> loc(#loc)
    %228 = llvm.extractelement %223[%41 : i32] : vector<8xbf16> loc(#loc)
    %229 = llvm.extractelement %223[%40 : i32] : vector<8xbf16> loc(#loc)
    %230 = llvm.extractelement %223[%39 : i32] : vector<8xbf16> loc(#loc)
    %231 = llvm.extractelement %223[%38 : i32] : vector<8xbf16> loc(#loc)
    %232 = rocdl.workitem.id.x : i32 loc(#loc)
    %233 = llvm.and %232, %66 : i32 loc(#loc)
    %234 = llvm.urem %233, %65 : i32 loc(#loc)
    %235 = llvm.udiv %233, %65 : i32 loc(#loc)
    %236 = llvm.shl %234, %64 : i32 loc(#loc)
    %237 = llvm.or %64, %236 : i32 loc(#loc)
    %238 = llvm.shl %235, %63 : i32 loc(#loc)
    %239 = llvm.or %237, %238 : i32 loc(#loc)
    %240 = llvm.and %239, %36 : i32 loc(#loc)
    %241 = llvm.shl %240, %57 : i32 loc(#loc)
    %242 = llvm.xor %64, %241 : i32 loc(#loc)
    %243 = llvm.and %239, %35 : i32 loc(#loc)
    %244 = llvm.lshr %243, %52 : i32 loc(#loc)
    %245 = llvm.xor %242, %244 : i32 loc(#loc)
    %246 = llvm.and %239, %53 : i32 loc(#loc)
    %247 = llvm.icmp "eq" %246, %64 : i32 loc(#loc)
    %248 = llvm.select %247, %64, %34 : i1, i32 loc(#loc)
    %249 = llvm.xor %245, %248 : i32 loc(#loc)
    %250 = llvm.and %239, %60 : i32 loc(#loc)
    %251 = llvm.icmp "eq" %250, %64 : i32 loc(#loc)
    %252 = llvm.select %251, %64, %33 : i1, i32 loc(#loc)
    %253 = llvm.xor %249, %252 : i32 loc(#loc)
    %254 = llvm.and %239, %73 : i32 loc(#loc)
    %255 = llvm.icmp "eq" %254, %64 : i32 loc(#loc)
    %256 = llvm.select %255, %64, %32 : i1, i32 loc(#loc)
    %257 = llvm.xor %253, %256 : i32 loc(#loc)
    %258 = llvm.xor %64, %257 : i32 loc(#loc)
    %259 = llvm.mul %64, %52 : i32 loc(#loc)
    %260 = llvm.xor %258, %259 : i32 loc(#loc)
    %261 = llvm.xor %260, %64 : i32 loc(#loc)
    %262 = llvm.add %261, %64 : i32 loc(#loc)
    %263 = llvm.getelementptr inbounds %37[%262] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %264 = llvm.insertelement %197, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %265 = llvm.insertelement %198, %264[%53 : i32] : vector<8xbf16> loc(#loc)
    %266 = llvm.insertelement %199, %265[%52 : i32] : vector<8xbf16> loc(#loc)
    %267 = llvm.insertelement %200, %266[%57 : i32] : vector<8xbf16> loc(#loc)
    %268 = llvm.insertelement %201, %267[%51 : i32] : vector<8xbf16> loc(#loc)
    %269 = llvm.insertelement %202, %268[%61 : i32] : vector<8xbf16> loc(#loc)
    %270 = llvm.insertelement %203, %269[%63 : i32] : vector<8xbf16> loc(#loc)
    %271 = llvm.insertelement %204, %270[%50 : i32] : vector<8xbf16> loc(#loc)
    llvm.call @"__triton_hip_predicated_store_!llvm.void_!llvm.ptr<3>_vector<8xbf16>_i1_"(%263, %271, %46) : (!llvm.ptr<3>, vector<8xbf16>, i1) -> () loc(#loc)
    %272 = llvm.add %261, %55 : i32 loc(#loc)
    %273 = llvm.getelementptr inbounds %37[%272] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %274 = llvm.insertelement %215, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %275 = llvm.insertelement %216, %274[%53 : i32] : vector<8xbf16> loc(#loc)
    %276 = llvm.insertelement %217, %275[%52 : i32] : vector<8xbf16> loc(#loc)
    %277 = llvm.insertelement %218, %276[%57 : i32] : vector<8xbf16> loc(#loc)
    %278 = llvm.insertelement %219, %277[%51 : i32] : vector<8xbf16> loc(#loc)
    %279 = llvm.insertelement %220, %278[%61 : i32] : vector<8xbf16> loc(#loc)
    %280 = llvm.insertelement %221, %279[%63 : i32] : vector<8xbf16> loc(#loc)
    %281 = llvm.insertelement %222, %280[%50 : i32] : vector<8xbf16> loc(#loc)
    llvm.call @"__triton_hip_predicated_store_!llvm.void_!llvm.ptr<3>_vector<8xbf16>_i1_"(%273, %281, %46) : (!llvm.ptr<3>, vector<8xbf16>, i1) -> () loc(#loc)
    %282 = llvm.xor %260, %30 : i32 loc(#loc)
    %283 = llvm.add %282, %64 : i32 loc(#loc)
    %284 = llvm.getelementptr inbounds %37[%283] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %285 = llvm.insertelement %206, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %286 = llvm.insertelement %207, %285[%53 : i32] : vector<8xbf16> loc(#loc)
    %287 = llvm.insertelement %208, %286[%52 : i32] : vector<8xbf16> loc(#loc)
    %288 = llvm.insertelement %209, %287[%57 : i32] : vector<8xbf16> loc(#loc)
    %289 = llvm.insertelement %210, %288[%51 : i32] : vector<8xbf16> loc(#loc)
    %290 = llvm.insertelement %211, %289[%61 : i32] : vector<8xbf16> loc(#loc)
    %291 = llvm.insertelement %212, %290[%63 : i32] : vector<8xbf16> loc(#loc)
    %292 = llvm.insertelement %213, %291[%50 : i32] : vector<8xbf16> loc(#loc)
    llvm.call @"__triton_hip_predicated_store_!llvm.void_!llvm.ptr<3>_vector<8xbf16>_i1_"(%284, %292, %46) : (!llvm.ptr<3>, vector<8xbf16>, i1) -> () loc(#loc)
    %293 = llvm.add %282, %55 : i32 loc(#loc)
    %294 = llvm.getelementptr inbounds %37[%293] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %295 = llvm.insertelement %224, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %296 = llvm.insertelement %225, %295[%53 : i32] : vector<8xbf16> loc(#loc)
    %297 = llvm.insertelement %226, %296[%52 : i32] : vector<8xbf16> loc(#loc)
    %298 = llvm.insertelement %227, %297[%57 : i32] : vector<8xbf16> loc(#loc)
    %299 = llvm.insertelement %228, %298[%51 : i32] : vector<8xbf16> loc(#loc)
    %300 = llvm.insertelement %229, %299[%61 : i32] : vector<8xbf16> loc(#loc)
    %301 = llvm.insertelement %230, %300[%63 : i32] : vector<8xbf16> loc(#loc)
    %302 = llvm.insertelement %231, %301[%50 : i32] : vector<8xbf16> loc(#loc)
    llvm.call @"__triton_hip_predicated_store_!llvm.void_!llvm.ptr<3>_vector<8xbf16>_i1_"(%294, %302, %46) : (!llvm.ptr<3>, vector<8xbf16>, i1) -> () loc(#loc)
    rocdl.barrier loc(#loc)
    %303 = rocdl.workitem.id.x : i32 loc(#loc)
    %304 = llvm.and %303, %66 : i32 loc(#loc)
    %305 = llvm.urem %304, %65 : i32 loc(#loc)
    %306 = llvm.udiv %304, %65 : i32 loc(#loc)
    %307 = llvm.shl %305, %64 : i32 loc(#loc)
    %308 = llvm.or %64, %307 : i32 loc(#loc)
    %309 = llvm.shl %306, %63 : i32 loc(#loc)
    %310 = llvm.or %308, %309 : i32 loc(#loc)
    %311 = llvm.and %310, %29 : i32 loc(#loc)
    %312 = llvm.shl %311, %72 : i32 loc(#loc)
    %313 = llvm.xor %64, %312 : i32 loc(#loc)
    %314 = llvm.and %310, %48 : i32 loc(#loc)
    %315 = llvm.shl %314, %57 : i32 loc(#loc)
    %316 = llvm.xor %313, %315 : i32 loc(#loc)
    %317 = llvm.and %310, %53 : i32 loc(#loc)
    %318 = llvm.icmp "eq" %317, %64 : i32 loc(#loc)
    %319 = llvm.select %318, %64, %32 : i1, i32 loc(#loc)
    %320 = llvm.xor %316, %319 : i32 loc(#loc)
    %321 = llvm.and %310, %73 : i32 loc(#loc)
    %322 = llvm.icmp "eq" %321, %64 : i32 loc(#loc)
    %323 = llvm.select %322, %64, %60 : i1, i32 loc(#loc)
    %324 = llvm.xor %320, %323 : i32 loc(#loc)
    %325 = llvm.and %310, %55 : i32 loc(#loc)
    %326 = llvm.icmp "eq" %325, %64 : i32 loc(#loc)
    %327 = llvm.select %326, %64, %55 : i1, i32 loc(#loc)
    %328 = llvm.xor %324, %327 : i32 loc(#loc)
    %329 = llvm.xor %64, %328 : i32 loc(#loc)
    %330 = llvm.mul %64, %52 : i32 loc(#loc)
    %331 = llvm.xor %329, %330 : i32 loc(#loc)
    %332 = llvm.xor %331, %64 : i32 loc(#loc)
    %333 = llvm.add %332, %64 : i32 loc(#loc)
    %334 = llvm.getelementptr inbounds %37[%333] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %335 = llvm.call @"__triton_hip_predicated_load_vector<8xbf16>_!llvm.ptr<3>_i1_vector<8xbf16>_"(%334, %46, %45) : (!llvm.ptr<3>, i1, vector<8xbf16>) -> vector<8xbf16> loc(#loc)
    %336 = llvm.extractelement %335[%64 : i32] : vector<8xbf16> loc(#loc)
    %337 = llvm.extractelement %335[%53 : i32] : vector<8xbf16> loc(#loc)
    %338 = llvm.extractelement %335[%52 : i32] : vector<8xbf16> loc(#loc)
    %339 = llvm.extractelement %335[%57 : i32] : vector<8xbf16> loc(#loc)
    %340 = llvm.extractelement %335[%51 : i32] : vector<8xbf16> loc(#loc)
    %341 = llvm.extractelement %335[%61 : i32] : vector<8xbf16> loc(#loc)
    %342 = llvm.extractelement %335[%63 : i32] : vector<8xbf16> loc(#loc)
    %343 = llvm.extractelement %335[%50 : i32] : vector<8xbf16> loc(#loc)
    %344 = llvm.add %332, %33 : i32 loc(#loc)
    %345 = llvm.getelementptr inbounds %37[%344] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %346 = llvm.call @"__triton_hip_predicated_load_vector<8xbf16>_!llvm.ptr<3>_i1_vector<8xbf16>_"(%345, %46, %45) : (!llvm.ptr<3>, i1, vector<8xbf16>) -> vector<8xbf16> loc(#loc)
    %347 = llvm.extractelement %346[%64 : i32] : vector<8xbf16> loc(#loc)
    %348 = llvm.extractelement %346[%53 : i32] : vector<8xbf16> loc(#loc)
    %349 = llvm.extractelement %346[%52 : i32] : vector<8xbf16> loc(#loc)
    %350 = llvm.extractelement %346[%57 : i32] : vector<8xbf16> loc(#loc)
    %351 = llvm.extractelement %346[%51 : i32] : vector<8xbf16> loc(#loc)
    %352 = llvm.extractelement %346[%61 : i32] : vector<8xbf16> loc(#loc)
    %353 = llvm.extractelement %346[%63 : i32] : vector<8xbf16> loc(#loc)
    %354 = llvm.extractelement %346[%50 : i32] : vector<8xbf16> loc(#loc)
    %355 = llvm.xor %331, %73 : i32 loc(#loc)
    %356 = llvm.add %355, %64 : i32 loc(#loc)
    %357 = llvm.getelementptr inbounds %37[%356] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %358 = llvm.call @"__triton_hip_predicated_load_vector<8xbf16>_!llvm.ptr<3>_i1_vector<8xbf16>_"(%357, %46, %45) : (!llvm.ptr<3>, i1, vector<8xbf16>) -> vector<8xbf16> loc(#loc)
    %359 = llvm.extractelement %358[%64 : i32] : vector<8xbf16> loc(#loc)
    %360 = llvm.extractelement %358[%53 : i32] : vector<8xbf16> loc(#loc)
    %361 = llvm.extractelement %358[%52 : i32] : vector<8xbf16> loc(#loc)
    %362 = llvm.extractelement %358[%57 : i32] : vector<8xbf16> loc(#loc)
    %363 = llvm.extractelement %358[%51 : i32] : vector<8xbf16> loc(#loc)
    %364 = llvm.extractelement %358[%61 : i32] : vector<8xbf16> loc(#loc)
    %365 = llvm.extractelement %358[%63 : i32] : vector<8xbf16> loc(#loc)
    %366 = llvm.extractelement %358[%50 : i32] : vector<8xbf16> loc(#loc)
    %367 = llvm.add %355, %33 : i32 loc(#loc)
    %368 = llvm.getelementptr inbounds %37[%367] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %369 = llvm.call @"__triton_hip_predicated_load_vector<8xbf16>_!llvm.ptr<3>_i1_vector<8xbf16>_"(%368, %46, %45) : (!llvm.ptr<3>, i1, vector<8xbf16>) -> vector<8xbf16> loc(#loc)
    %370 = llvm.extractelement %369[%64 : i32] : vector<8xbf16> loc(#loc)
    %371 = llvm.extractelement %369[%53 : i32] : vector<8xbf16> loc(#loc)
    %372 = llvm.extractelement %369[%52 : i32] : vector<8xbf16> loc(#loc)
    %373 = llvm.extractelement %369[%57 : i32] : vector<8xbf16> loc(#loc)
    %374 = llvm.extractelement %369[%51 : i32] : vector<8xbf16> loc(#loc)
    %375 = llvm.extractelement %369[%61 : i32] : vector<8xbf16> loc(#loc)
    %376 = llvm.extractelement %369[%63 : i32] : vector<8xbf16> loc(#loc)
    %377 = llvm.extractelement %369[%50 : i32] : vector<8xbf16> loc(#loc)
    %378 = llvm.xor %331, %65 : i32 loc(#loc)
    %379 = llvm.add %378, %64 : i32 loc(#loc)
    %380 = llvm.getelementptr inbounds %37[%379] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %381 = llvm.call @"__triton_hip_predicated_load_vector<8xbf16>_!llvm.ptr<3>_i1_vector<8xbf16>_"(%380, %46, %45) : (!llvm.ptr<3>, i1, vector<8xbf16>) -> vector<8xbf16> loc(#loc)
    %382 = llvm.extractelement %381[%64 : i32] : vector<8xbf16> loc(#loc)
    %383 = llvm.extractelement %381[%53 : i32] : vector<8xbf16> loc(#loc)
    %384 = llvm.extractelement %381[%52 : i32] : vector<8xbf16> loc(#loc)
    %385 = llvm.extractelement %381[%57 : i32] : vector<8xbf16> loc(#loc)
    %386 = llvm.extractelement %381[%51 : i32] : vector<8xbf16> loc(#loc)
    %387 = llvm.extractelement %381[%61 : i32] : vector<8xbf16> loc(#loc)
    %388 = llvm.extractelement %381[%63 : i32] : vector<8xbf16> loc(#loc)
    %389 = llvm.extractelement %381[%50 : i32] : vector<8xbf16> loc(#loc)
    %390 = llvm.add %378, %33 : i32 loc(#loc)
    %391 = llvm.getelementptr inbounds %37[%390] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %392 = llvm.call @"__triton_hip_predicated_load_vector<8xbf16>_!llvm.ptr<3>_i1_vector<8xbf16>_"(%391, %46, %45) : (!llvm.ptr<3>, i1, vector<8xbf16>) -> vector<8xbf16> loc(#loc)
    %393 = llvm.extractelement %392[%64 : i32] : vector<8xbf16> loc(#loc)
    %394 = llvm.extractelement %392[%53 : i32] : vector<8xbf16> loc(#loc)
    %395 = llvm.extractelement %392[%52 : i32] : vector<8xbf16> loc(#loc)
    %396 = llvm.extractelement %392[%57 : i32] : vector<8xbf16> loc(#loc)
    %397 = llvm.extractelement %392[%51 : i32] : vector<8xbf16> loc(#loc)
    %398 = llvm.extractelement %392[%61 : i32] : vector<8xbf16> loc(#loc)
    %399 = llvm.extractelement %392[%63 : i32] : vector<8xbf16> loc(#loc)
    %400 = llvm.extractelement %392[%50 : i32] : vector<8xbf16> loc(#loc)
    %401 = llvm.xor %331, %28 : i32 loc(#loc)
    %402 = llvm.add %401, %64 : i32 loc(#loc)
    %403 = llvm.getelementptr inbounds %37[%402] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %404 = llvm.call @"__triton_hip_predicated_load_vector<8xbf16>_!llvm.ptr<3>_i1_vector<8xbf16>_"(%403, %46, %45) : (!llvm.ptr<3>, i1, vector<8xbf16>) -> vector<8xbf16> loc(#loc)
    %405 = llvm.extractelement %404[%64 : i32] : vector<8xbf16> loc(#loc)
    %406 = llvm.extractelement %404[%53 : i32] : vector<8xbf16> loc(#loc)
    %407 = llvm.extractelement %404[%52 : i32] : vector<8xbf16> loc(#loc)
    %408 = llvm.extractelement %404[%57 : i32] : vector<8xbf16> loc(#loc)
    %409 = llvm.extractelement %404[%51 : i32] : vector<8xbf16> loc(#loc)
    %410 = llvm.extractelement %404[%61 : i32] : vector<8xbf16> loc(#loc)
    %411 = llvm.extractelement %404[%63 : i32] : vector<8xbf16> loc(#loc)
    %412 = llvm.extractelement %404[%50 : i32] : vector<8xbf16> loc(#loc)
    %413 = llvm.add %401, %33 : i32 loc(#loc)
    %414 = llvm.getelementptr inbounds %37[%413] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %415 = llvm.call @"__triton_hip_predicated_load_vector<8xbf16>_!llvm.ptr<3>_i1_vector<8xbf16>_"(%414, %46, %45) : (!llvm.ptr<3>, i1, vector<8xbf16>) -> vector<8xbf16> loc(#loc)
    %416 = llvm.extractelement %415[%64 : i32] : vector<8xbf16> loc(#loc)
    %417 = llvm.extractelement %415[%53 : i32] : vector<8xbf16> loc(#loc)
    %418 = llvm.extractelement %415[%52 : i32] : vector<8xbf16> loc(#loc)
    %419 = llvm.extractelement %415[%57 : i32] : vector<8xbf16> loc(#loc)
    %420 = llvm.extractelement %415[%51 : i32] : vector<8xbf16> loc(#loc)
    %421 = llvm.extractelement %415[%61 : i32] : vector<8xbf16> loc(#loc)
    %422 = llvm.extractelement %415[%63 : i32] : vector<8xbf16> loc(#loc)
    %423 = llvm.extractelement %415[%50 : i32] : vector<8xbf16> loc(#loc)
    %424 = llvm.getelementptr %b_base[%191] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, i8 loc(#loc)
    %425 = llvm.call @"__triton_hip_predicated_load_vector<16xi8>_!llvm.ptr<1>_i1_vector<16xi8>_"(%424, %46, %27) : (!llvm.ptr<1>, i1, vector<16xi8>) -> vector<16xi8> loc(#loc)
    %426 = llvm.extractelement %425[%67 : i32] : vector<16xi8> loc(#loc)
    %427 = llvm.extractelement %425[%44 : i32] : vector<16xi8> loc(#loc)
    %428 = llvm.extractelement %425[%43 : i32] : vector<16xi8> loc(#loc)
    %429 = llvm.extractelement %425[%42 : i32] : vector<16xi8> loc(#loc)
    %430 = llvm.extractelement %425[%41 : i32] : vector<16xi8> loc(#loc)
    %431 = llvm.extractelement %425[%40 : i32] : vector<16xi8> loc(#loc)
    %432 = llvm.extractelement %425[%39 : i32] : vector<16xi8> loc(#loc)
    %433 = llvm.extractelement %425[%38 : i32] : vector<16xi8> loc(#loc)
    %434 = llvm.extractelement %425[%26 : i32] : vector<16xi8> loc(#loc)
    %435 = llvm.extractelement %425[%25 : i32] : vector<16xi8> loc(#loc)
    %436 = llvm.extractelement %425[%24 : i32] : vector<16xi8> loc(#loc)
    %437 = llvm.extractelement %425[%23 : i32] : vector<16xi8> loc(#loc)
    %438 = llvm.extractelement %425[%22 : i32] : vector<16xi8> loc(#loc)
    %439 = llvm.extractelement %425[%21 : i32] : vector<16xi8> loc(#loc)
    %440 = llvm.extractelement %425[%20 : i32] : vector<16xi8> loc(#loc)
    %441 = llvm.extractelement %425[%19 : i32] : vector<16xi8> loc(#loc)
    rocdl.barrier loc(#loc)
    %442 = rocdl.workitem.id.x : i32 loc(#loc)
    %443 = llvm.and %442, %66 : i32 loc(#loc)
    %444 = llvm.urem %443, %65 : i32 loc(#loc)
    %445 = llvm.udiv %443, %65 : i32 loc(#loc)
    %446 = llvm.shl %444, %64 : i32 loc(#loc)
    %447 = llvm.or %64, %446 : i32 loc(#loc)
    %448 = llvm.shl %445, %63 : i32 loc(#loc)
    %449 = llvm.or %447, %448 : i32 loc(#loc)
    %450 = llvm.and %449, %58 : i32 loc(#loc)
    %451 = llvm.lshr %450, %64 : i32 loc(#loc)
    %452 = llvm.xor %64, %451 : i32 loc(#loc)
    %453 = llvm.and %449, %53 : i32 loc(#loc)
    %454 = llvm.icmp "eq" %453, %64 : i32 loc(#loc)
    %455 = llvm.select %454, %64, %18 : i1, i32 loc(#loc)
    %456 = llvm.xor %452, %455 : i32 loc(#loc)
    %457 = llvm.and %449, %52 : i32 loc(#loc)
    %458 = llvm.icmp "eq" %457, %64 : i32 loc(#loc)
    %459 = llvm.select %458, %64, %51 : i1, i32 loc(#loc)
    %460 = llvm.xor %456, %459 : i32 loc(#loc)
    %461 = llvm.and %449, %51 : i32 loc(#loc)
    %462 = llvm.icmp "eq" %461, %64 : i32 loc(#loc)
    %463 = llvm.select %462, %64, %17 : i1, i32 loc(#loc)
    %464 = llvm.xor %460, %463 : i32 loc(#loc)
    %465 = llvm.xor %64, %464 : i32 loc(#loc)
    %466 = llvm.mul %64, %53 : i32 loc(#loc)
    %467 = llvm.xor %465, %466 : i32 loc(#loc)
    %468 = llvm.xor %467, %64 : i32 loc(#loc)
    %469 = llvm.add %468, %64 : i32 loc(#loc)
    %470 = llvm.getelementptr inbounds %37[%469] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %471 = llvm.insertelement %426, %16[%64 : i32] : vector<4xi8> loc(#loc)
    %472 = llvm.insertelement %427, %471[%53 : i32] : vector<4xi8> loc(#loc)
    %473 = llvm.insertelement %428, %472[%52 : i32] : vector<4xi8> loc(#loc)
    %474 = llvm.insertelement %429, %473[%57 : i32] : vector<4xi8> loc(#loc)
    llvm.call @"__triton_hip_predicated_store_!llvm.void_!llvm.ptr<3>_vector<4xi8>_i1_"(%470, %474, %46) : (!llvm.ptr<3>, vector<4xi8>, i1) -> () loc(#loc)
    %475 = llvm.add %468, %15 : i32 loc(#loc)
    %476 = llvm.getelementptr inbounds %37[%475] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %477 = llvm.insertelement %430, %16[%64 : i32] : vector<4xi8> loc(#loc)
    %478 = llvm.insertelement %431, %477[%53 : i32] : vector<4xi8> loc(#loc)
    %479 = llvm.insertelement %432, %478[%52 : i32] : vector<4xi8> loc(#loc)
    %480 = llvm.insertelement %433, %479[%57 : i32] : vector<4xi8> loc(#loc)
    llvm.call @"__triton_hip_predicated_store_!llvm.void_!llvm.ptr<3>_vector<4xi8>_i1_"(%476, %480, %46) : (!llvm.ptr<3>, vector<4xi8>, i1) -> () loc(#loc)
    %481 = llvm.xor %467, %14 : i32 loc(#loc)
    %482 = llvm.add %481, %64 : i32 loc(#loc)
    %483 = llvm.getelementptr inbounds %37[%482] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %484 = llvm.insertelement %434, %16[%64 : i32] : vector<4xi8> loc(#loc)
    %485 = llvm.insertelement %435, %484[%53 : i32] : vector<4xi8> loc(#loc)
    %486 = llvm.insertelement %436, %485[%52 : i32] : vector<4xi8> loc(#loc)
    %487 = llvm.insertelement %437, %486[%57 : i32] : vector<4xi8> loc(#loc)
    llvm.call @"__triton_hip_predicated_store_!llvm.void_!llvm.ptr<3>_vector<4xi8>_i1_"(%483, %487, %46) : (!llvm.ptr<3>, vector<4xi8>, i1) -> () loc(#loc)
    %488 = llvm.add %481, %15 : i32 loc(#loc)
    %489 = llvm.getelementptr inbounds %37[%488] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %490 = llvm.insertelement %438, %16[%64 : i32] : vector<4xi8> loc(#loc)
    %491 = llvm.insertelement %439, %490[%53 : i32] : vector<4xi8> loc(#loc)
    %492 = llvm.insertelement %440, %491[%52 : i32] : vector<4xi8> loc(#loc)
    %493 = llvm.insertelement %441, %492[%57 : i32] : vector<4xi8> loc(#loc)
    llvm.call @"__triton_hip_predicated_store_!llvm.void_!llvm.ptr<3>_vector<4xi8>_i1_"(%489, %493, %46) : (!llvm.ptr<3>, vector<4xi8>, i1) -> () loc(#loc)
    rocdl.barrier loc(#loc)
    %494 = rocdl.workitem.id.x : i32 loc(#loc)
    %495 = llvm.and %494, %66 : i32 loc(#loc)
    %496 = llvm.urem %495, %65 : i32 loc(#loc)
    %497 = llvm.udiv %495, %65 : i32 loc(#loc)
    %498 = llvm.shl %496, %64 : i32 loc(#loc)
    %499 = llvm.or %64, %498 : i32 loc(#loc)
    %500 = llvm.shl %497, %63 : i32 loc(#loc)
    %501 = llvm.or %499, %500 : i32 loc(#loc)
    %502 = llvm.and %501, %56 : i32 loc(#loc)
    %503 = llvm.shl %502, %57 : i32 loc(#loc)
    %504 = llvm.xor %64, %503 : i32 loc(#loc)
    %505 = llvm.and %501, %60 : i32 loc(#loc)
    %506 = llvm.icmp "eq" %505, %64 : i32 loc(#loc)
    %507 = llvm.select %506, %64, %15 : i1, i32 loc(#loc)
    %508 = llvm.xor %504, %507 : i32 loc(#loc)
    %509 = llvm.and %501, %73 : i32 loc(#loc)
    %510 = llvm.icmp "eq" %509, %64 : i32 loc(#loc)
    %511 = llvm.select %510, %64, %14 : i1, i32 loc(#loc)
    %512 = llvm.xor %508, %511 : i32 loc(#loc)
    %513 = llvm.and %501, %65 : i32 loc(#loc)
    %514 = llvm.icmp "eq" %513, %64 : i32 loc(#loc)
    %515 = llvm.select %514, %64, %55 : i1, i32 loc(#loc)
    %516 = llvm.xor %512, %515 : i32 loc(#loc)
    %517 = llvm.xor %64, %516 : i32 loc(#loc)
    %518 = llvm.mul %64, %53 : i32 loc(#loc)
    %519 = llvm.xor %517, %518 : i32 loc(#loc)
    %520 = llvm.xor %519, %64 : i32 loc(#loc)
    %521 = llvm.add %520, %64 : i32 loc(#loc)
    %522 = llvm.getelementptr inbounds %37[%521] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %523 = llvm.call @"__triton_hip_predicated_load_vector<4xi8>_!llvm.ptr<3>_i1_vector<4xi8>_"(%522, %46, %13) : (!llvm.ptr<3>, i1, vector<4xi8>) -> vector<4xi8> loc(#loc)
    %524 = llvm.extractelement %523[%64 : i32] : vector<4xi8> loc(#loc)
    %525 = llvm.extractelement %523[%53 : i32] : vector<4xi8> loc(#loc)
    %526 = llvm.extractelement %523[%52 : i32] : vector<4xi8> loc(#loc)
    %527 = llvm.extractelement %523[%57 : i32] : vector<4xi8> loc(#loc)
    %528 = llvm.add %520, %18 : i32 loc(#loc)
    %529 = llvm.getelementptr inbounds %37[%528] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %530 = llvm.call @"__triton_hip_predicated_load_vector<4xi8>_!llvm.ptr<3>_i1_vector<4xi8>_"(%529, %46, %13) : (!llvm.ptr<3>, i1, vector<4xi8>) -> vector<4xi8> loc(#loc)
    %531 = llvm.extractelement %530[%64 : i32] : vector<4xi8> loc(#loc)
    %532 = llvm.extractelement %530[%53 : i32] : vector<4xi8> loc(#loc)
    %533 = llvm.extractelement %530[%52 : i32] : vector<4xi8> loc(#loc)
    %534 = llvm.extractelement %530[%57 : i32] : vector<4xi8> loc(#loc)
    %535 = llvm.xor %519, %17 : i32 loc(#loc)
    %536 = llvm.add %535, %64 : i32 loc(#loc)
    %537 = llvm.getelementptr inbounds %37[%536] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %538 = llvm.call @"__triton_hip_predicated_load_vector<4xi8>_!llvm.ptr<3>_i1_vector<4xi8>_"(%537, %46, %13) : (!llvm.ptr<3>, i1, vector<4xi8>) -> vector<4xi8> loc(#loc)
    %539 = llvm.extractelement %538[%64 : i32] : vector<4xi8> loc(#loc)
    %540 = llvm.extractelement %538[%53 : i32] : vector<4xi8> loc(#loc)
    %541 = llvm.extractelement %538[%52 : i32] : vector<4xi8> loc(#loc)
    %542 = llvm.extractelement %538[%57 : i32] : vector<4xi8> loc(#loc)
    %543 = llvm.add %535, %18 : i32 loc(#loc)
    %544 = llvm.getelementptr inbounds %37[%543] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %545 = llvm.call @"__triton_hip_predicated_load_vector<4xi8>_!llvm.ptr<3>_i1_vector<4xi8>_"(%544, %46, %13) : (!llvm.ptr<3>, i1, vector<4xi8>) -> vector<4xi8> loc(#loc)
    %546 = llvm.extractelement %545[%64 : i32] : vector<4xi8> loc(#loc)
    %547 = llvm.extractelement %545[%53 : i32] : vector<4xi8> loc(#loc)
    %548 = llvm.extractelement %545[%52 : i32] : vector<4xi8> loc(#loc)
    %549 = llvm.extractelement %545[%57 : i32] : vector<4xi8> loc(#loc)
    %550 = llvm.xor %519, %51 : i32 loc(#loc)
    %551 = llvm.add %550, %64 : i32 loc(#loc)
    %552 = llvm.getelementptr inbounds %37[%551] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %553 = llvm.call @"__triton_hip_predicated_load_vector<4xi8>_!llvm.ptr<3>_i1_vector<4xi8>_"(%552, %46, %13) : (!llvm.ptr<3>, i1, vector<4xi8>) -> vector<4xi8> loc(#loc)
    %554 = llvm.extractelement %553[%64 : i32] : vector<4xi8> loc(#loc)
    %555 = llvm.extractelement %553[%53 : i32] : vector<4xi8> loc(#loc)
    %556 = llvm.extractelement %553[%52 : i32] : vector<4xi8> loc(#loc)
    %557 = llvm.extractelement %553[%57 : i32] : vector<4xi8> loc(#loc)
    %558 = llvm.add %550, %18 : i32 loc(#loc)
    %559 = llvm.getelementptr inbounds %37[%558] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %560 = llvm.call @"__triton_hip_predicated_load_vector<4xi8>_!llvm.ptr<3>_i1_vector<4xi8>_"(%559, %46, %13) : (!llvm.ptr<3>, i1, vector<4xi8>) -> vector<4xi8> loc(#loc)
    %561 = llvm.extractelement %560[%64 : i32] : vector<4xi8> loc(#loc)
    %562 = llvm.extractelement %560[%53 : i32] : vector<4xi8> loc(#loc)
    %563 = llvm.extractelement %560[%52 : i32] : vector<4xi8> loc(#loc)
    %564 = llvm.extractelement %560[%57 : i32] : vector<4xi8> loc(#loc)
    %565 = llvm.xor %519, %12 : i32 loc(#loc)
    %566 = llvm.add %565, %64 : i32 loc(#loc)
    %567 = llvm.getelementptr inbounds %37[%566] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %568 = llvm.call @"__triton_hip_predicated_load_vector<4xi8>_!llvm.ptr<3>_i1_vector<4xi8>_"(%567, %46, %13) : (!llvm.ptr<3>, i1, vector<4xi8>) -> vector<4xi8> loc(#loc)
    %569 = llvm.extractelement %568[%64 : i32] : vector<4xi8> loc(#loc)
    %570 = llvm.extractelement %568[%53 : i32] : vector<4xi8> loc(#loc)
    %571 = llvm.extractelement %568[%52 : i32] : vector<4xi8> loc(#loc)
    %572 = llvm.extractelement %568[%57 : i32] : vector<4xi8> loc(#loc)
    %573 = llvm.add %565, %18 : i32 loc(#loc)
    %574 = llvm.getelementptr inbounds %37[%573] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %575 = llvm.call @"__triton_hip_predicated_load_vector<4xi8>_!llvm.ptr<3>_i1_vector<4xi8>_"(%574, %46, %13) : (!llvm.ptr<3>, i1, vector<4xi8>) -> vector<4xi8> loc(#loc)
    %576 = llvm.extractelement %575[%64 : i32] : vector<4xi8> loc(#loc)
    %577 = llvm.extractelement %575[%53 : i32] : vector<4xi8> loc(#loc)
    %578 = llvm.extractelement %575[%52 : i32] : vector<4xi8> loc(#loc)
    %579 = llvm.extractelement %575[%57 : i32] : vector<4xi8> loc(#loc)
    %580 = llvm.mul %107, %72 : i32 loc(#loc)
    %581 = rocdl.workitem.id.x : i32 loc(#loc)
    %582 = llvm.and %581, %66 : i32 loc(#loc)
    %583 = llvm.urem %582, %65 : i32 loc(#loc)
    %584 = llvm.udiv %582, %65 : i32 loc(#loc)
    %585 = llvm.shl %583, %64 : i32 loc(#loc)
    %586 = llvm.or %64, %585 : i32 loc(#loc)
    %587 = llvm.shl %584, %63 : i32 loc(#loc)
    %588 = llvm.or %586, %587 : i32 loc(#loc)
    %589 = llvm.and %588, %50 : i32 loc(#loc)
    %590 = llvm.lshr %589, %64 : i32 loc(#loc)
    %591 = llvm.xor %64, %590 : i32 loc(#loc)
    %592 = llvm.xor %64, %591 : i32 loc(#loc)
    %593 = llvm.xor %592, %64 : i32 loc(#loc)
    %594 = llvm.add %593, %67 : i32 loc(#loc)
    %595 = llvm.add %594, %580 : i32 loc(#loc)
    %596 = rocdl.make.buffer.rsrc %b_scale, %11, %9, %10 : <1> to <8> loc(#loc)
    %597 = llvm.mul %595, %53 : i32 loc(#loc)
    %598 = llvm.select %46, %597, %7 : i1, i32 loc(#loc)
    %599 = rocdl.raw.ptr.buffer.load %596, %598, %64, %64 : i8 loc(#loc)
    %600 = llvm.bitcast %599 : i8 to vector<1xi8> loc(#loc)
    %601 = llvm.extractelement %600[%67 : i32] : vector<1xi8> loc(#loc)
    rocdl.barrier loc(#loc)
    %602 = rocdl.workitem.id.x : i32 loc(#loc)
    %603 = llvm.and %602, %66 : i32 loc(#loc)
    %604 = llvm.urem %603, %65 : i32 loc(#loc)
    %605 = llvm.udiv %603, %65 : i32 loc(#loc)
    %606 = llvm.shl %604, %64 : i32 loc(#loc)
    %607 = llvm.or %64, %606 : i32 loc(#loc)
    %608 = llvm.shl %605, %63 : i32 loc(#loc)
    %609 = llvm.or %607, %608 : i32 loc(#loc)
    %610 = llvm.and %609, %6 : i32 loc(#loc)
    %611 = llvm.shl %610, %52 : i32 loc(#loc)
    %612 = llvm.xor %64, %611 : i32 loc(#loc)
    %613 = llvm.and %609, %65 : i32 loc(#loc)
    %614 = llvm.icmp "eq" %613, %64 : i32 loc(#loc)
    %615 = llvm.select %614, %64, %52 : i1, i32 loc(#loc)
    %616 = llvm.xor %612, %615 : i32 loc(#loc)
    %617 = llvm.and %609, %55 : i32 loc(#loc)
    %618 = llvm.icmp "eq" %617, %64 : i32 loc(#loc)
    %619 = llvm.select %618, %64, %53 : i1, i32 loc(#loc)
    %620 = llvm.xor %616, %619 : i32 loc(#loc)
    %621 = llvm.xor %64, %620 : i32 loc(#loc)
    %622 = llvm.mul %64, %53 : i32 loc(#loc)
    %623 = llvm.xor %621, %622 : i32 loc(#loc)
    %624 = llvm.xor %623, %64 : i32 loc(#loc)
    %625 = llvm.add %624, %64 : i32 loc(#loc)
    %626 = llvm.getelementptr inbounds %37[%625] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %627 = llvm.insertelement %601, %5[%64 : i32] : vector<1xi8> loc(#loc)
    llvm.call @"__triton_hip_predicated_store_!llvm.void_!llvm.ptr<3>_vector<1xi8>_i1_"(%626, %627, %46) : (!llvm.ptr<3>, vector<1xi8>, i1) -> () loc(#loc)
    rocdl.barrier loc(#loc)
    %628 = rocdl.workitem.id.x : i32 loc(#loc)
    %629 = llvm.and %628, %66 : i32 loc(#loc)
    %630 = llvm.urem %629, %65 : i32 loc(#loc)
    %631 = llvm.udiv %629, %65 : i32 loc(#loc)
    %632 = llvm.shl %630, %64 : i32 loc(#loc)
    %633 = llvm.or %64, %632 : i32 loc(#loc)
    %634 = llvm.shl %631, %63 : i32 loc(#loc)
    %635 = llvm.or %633, %634 : i32 loc(#loc)
    %636 = llvm.and %635, %50 : i32 loc(#loc)
    %637 = llvm.shl %636, %61 : i32 loc(#loc)
    %638 = llvm.xor %64, %637 : i32 loc(#loc)
    %639 = llvm.and %635, %72 : i32 loc(#loc)
    %640 = llvm.icmp "eq" %639, %64 : i32 loc(#loc)
    %641 = llvm.select %640, %64, %52 : i1, i32 loc(#loc)
    %642 = llvm.xor %638, %641 : i32 loc(#loc)
    %643 = llvm.and %635, %65 : i32 loc(#loc)
    %644 = llvm.icmp "eq" %643, %64 : i32 loc(#loc)
    %645 = llvm.select %644, %64, %53 : i1, i32 loc(#loc)
    %646 = llvm.xor %642, %645 : i32 loc(#loc)
    %647 = llvm.xor %64, %646 : i32 loc(#loc)
    %648 = llvm.mul %64, %53 : i32 loc(#loc)
    %649 = llvm.xor %647, %648 : i32 loc(#loc)
    %650 = llvm.xor %649, %64 : i32 loc(#loc)
    %651 = llvm.add %650, %64 : i32 loc(#loc)
    %652 = llvm.getelementptr inbounds %37[%651] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %653 = llvm.call @"__triton_hip_predicated_load_vector<1xi8>_!llvm.ptr<3>_i1_vector<1xi8>_"(%652, %46, %8) : (!llvm.ptr<3>, i1, vector<1xi8>) -> vector<1xi8> loc(#loc)
    %654 = llvm.extractelement %653[%64 : i32] : vector<1xi8> loc(#loc)
    %655 = llvm.add %650, %60 : i32 loc(#loc)
    %656 = llvm.getelementptr inbounds %37[%655] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %657 = llvm.call @"__triton_hip_predicated_load_vector<1xi8>_!llvm.ptr<3>_i1_vector<1xi8>_"(%656, %46, %8) : (!llvm.ptr<3>, i1, vector<1xi8>) -> vector<1xi8> loc(#loc)
    %658 = llvm.extractelement %657[%64 : i32] : vector<1xi8> loc(#loc)
    %659 = llvm.add %650, %51 : i32 loc(#loc)
    %660 = llvm.getelementptr inbounds %37[%659] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %661 = llvm.call @"__triton_hip_predicated_load_vector<1xi8>_!llvm.ptr<3>_i1_vector<1xi8>_"(%660, %46, %8) : (!llvm.ptr<3>, i1, vector<1xi8>) -> vector<1xi8> loc(#loc)
    %662 = llvm.extractelement %661[%64 : i32] : vector<1xi8> loc(#loc)
    %663 = llvm.add %650, %4 : i32 loc(#loc)
    %664 = llvm.getelementptr inbounds %37[%663] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %665 = llvm.call @"__triton_hip_predicated_load_vector<1xi8>_!llvm.ptr<3>_i1_vector<1xi8>_"(%664, %46, %8) : (!llvm.ptr<3>, i1, vector<1xi8>) -> vector<1xi8> loc(#loc)
    %666 = llvm.extractelement %665[%64 : i32] : vector<1xi8> loc(#loc)
    %667 = llvm.add %650, %72 : i32 loc(#loc)
    %668 = llvm.getelementptr inbounds %37[%667] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %669 = llvm.call @"__triton_hip_predicated_load_vector<1xi8>_!llvm.ptr<3>_i1_vector<1xi8>_"(%668, %46, %8) : (!llvm.ptr<3>, i1, vector<1xi8>) -> vector<1xi8> loc(#loc)
    %670 = llvm.extractelement %669[%64 : i32] : vector<1xi8> loc(#loc)
    %671 = llvm.add %650, %59 : i32 loc(#loc)
    %672 = llvm.getelementptr inbounds %37[%671] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %673 = llvm.call @"__triton_hip_predicated_load_vector<1xi8>_!llvm.ptr<3>_i1_vector<1xi8>_"(%672, %46, %8) : (!llvm.ptr<3>, i1, vector<1xi8>) -> vector<1xi8> loc(#loc)
    %674 = llvm.extractelement %673[%64 : i32] : vector<1xi8> loc(#loc)
    %675 = llvm.add %650, %49 : i32 loc(#loc)
    %676 = llvm.getelementptr inbounds %37[%675] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %677 = llvm.call @"__triton_hip_predicated_load_vector<1xi8>_!llvm.ptr<3>_i1_vector<1xi8>_"(%676, %46, %8) : (!llvm.ptr<3>, i1, vector<1xi8>) -> vector<1xi8> loc(#loc)
    %678 = llvm.extractelement %677[%64 : i32] : vector<1xi8> loc(#loc)
    %679 = llvm.add %650, %3 : i32 loc(#loc)
    %680 = llvm.getelementptr inbounds %37[%679] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %681 = llvm.call @"__triton_hip_predicated_load_vector<1xi8>_!llvm.ptr<3>_i1_vector<1xi8>_"(%680, %46, %8) : (!llvm.ptr<3>, i1, vector<1xi8>) -> vector<1xi8> loc(#loc)
    %682 = llvm.extractelement %681[%64 : i32] : vector<1xi8> loc(#loc)
    %683 = llvm.zext %654 : i8 to i16 loc(#loc)
    %684 = llvm.zext %662 : i8 to i16 loc(#loc)
    %685 = llvm.zext %670 : i8 to i16 loc(#loc)
    %686 = llvm.zext %678 : i8 to i16 loc(#loc)
    %687 = llvm.shl %683, %71 : i16 loc(#loc)
    %688 = llvm.shl %684, %71 : i16 loc(#loc)
    %689 = llvm.shl %685, %71 : i16 loc(#loc)
    %690 = llvm.shl %686, %71 : i16 loc(#loc)
    %691 = llvm.insertelement %524, %16[%64 : i32] : vector<4xi8> loc(#loc)
    %692 = llvm.insertelement %525, %691[%53 : i32] : vector<4xi8> loc(#loc)
    %693 = llvm.insertelement %526, %692[%52 : i32] : vector<4xi8> loc(#loc)
    %694 = llvm.insertelement %527, %693[%57 : i32] : vector<4xi8> loc(#loc)
    %695 = llvm.bitcast %694 : vector<4xi8> to i32 loc(#loc)
    %696 = llvm.zext %687 : i16 to i32 loc(#loc)
    %697 = llvm.shl %696, %60 : i32 loc(#loc)
    %698 = llvm.bitcast %697 : i32 to f32 loc(#loc)
    %699 = rocdl.cvt.scalef32.pk.bf16.fp4 %695[0], %698 : vector<2xbf16> loc(#loc)
    %700 = rocdl.cvt.scalef32.pk.bf16.fp4 %695[2], %698 : vector<2xbf16> loc(#loc)
    %701 = rocdl.cvt.scalef32.pk.bf16.fp4 %695[1], %698 : vector<2xbf16> loc(#loc)
    %702 = rocdl.cvt.scalef32.pk.bf16.fp4 %695[3], %698 : vector<2xbf16> loc(#loc)
    %703 = llvm.extractelement %699[%64 : i32] : vector<2xbf16> loc(#loc)
    %704 = llvm.extractelement %699[%53 : i32] : vector<2xbf16> loc(#loc)
    %705 = llvm.extractelement %700[%64 : i32] : vector<2xbf16> loc(#loc)
    %706 = llvm.extractelement %700[%53 : i32] : vector<2xbf16> loc(#loc)
    %707 = llvm.extractelement %701[%64 : i32] : vector<2xbf16> loc(#loc)
    %708 = llvm.extractelement %701[%53 : i32] : vector<2xbf16> loc(#loc)
    %709 = llvm.extractelement %702[%64 : i32] : vector<2xbf16> loc(#loc)
    %710 = llvm.extractelement %702[%53 : i32] : vector<2xbf16> loc(#loc)
    %711 = llvm.insertelement %531, %16[%64 : i32] : vector<4xi8> loc(#loc)
    %712 = llvm.insertelement %532, %711[%53 : i32] : vector<4xi8> loc(#loc)
    %713 = llvm.insertelement %533, %712[%52 : i32] : vector<4xi8> loc(#loc)
    %714 = llvm.insertelement %534, %713[%57 : i32] : vector<4xi8> loc(#loc)
    %715 = llvm.bitcast %714 : vector<4xi8> to i32 loc(#loc)
    %716 = llvm.zext %688 : i16 to i32 loc(#loc)
    %717 = llvm.shl %716, %60 : i32 loc(#loc)
    %718 = llvm.bitcast %717 : i32 to f32 loc(#loc)
    %719 = rocdl.cvt.scalef32.pk.bf16.fp4 %715[0], %718 : vector<2xbf16> loc(#loc)
    %720 = rocdl.cvt.scalef32.pk.bf16.fp4 %715[2], %718 : vector<2xbf16> loc(#loc)
    %721 = rocdl.cvt.scalef32.pk.bf16.fp4 %715[1], %718 : vector<2xbf16> loc(#loc)
    %722 = rocdl.cvt.scalef32.pk.bf16.fp4 %715[3], %718 : vector<2xbf16> loc(#loc)
    %723 = llvm.extractelement %719[%64 : i32] : vector<2xbf16> loc(#loc)
    %724 = llvm.extractelement %719[%53 : i32] : vector<2xbf16> loc(#loc)
    %725 = llvm.extractelement %720[%64 : i32] : vector<2xbf16> loc(#loc)
    %726 = llvm.extractelement %720[%53 : i32] : vector<2xbf16> loc(#loc)
    %727 = llvm.extractelement %721[%64 : i32] : vector<2xbf16> loc(#loc)
    %728 = llvm.extractelement %721[%53 : i32] : vector<2xbf16> loc(#loc)
    %729 = llvm.extractelement %722[%64 : i32] : vector<2xbf16> loc(#loc)
    %730 = llvm.extractelement %722[%53 : i32] : vector<2xbf16> loc(#loc)
    %731 = llvm.insertelement %554, %16[%64 : i32] : vector<4xi8> loc(#loc)
    %732 = llvm.insertelement %555, %731[%53 : i32] : vector<4xi8> loc(#loc)
    %733 = llvm.insertelement %556, %732[%52 : i32] : vector<4xi8> loc(#loc)
    %734 = llvm.insertelement %557, %733[%57 : i32] : vector<4xi8> loc(#loc)
    %735 = llvm.bitcast %734 : vector<4xi8> to i32 loc(#loc)
    %736 = llvm.zext %689 : i16 to i32 loc(#loc)
    %737 = llvm.shl %736, %60 : i32 loc(#loc)
    %738 = llvm.bitcast %737 : i32 to f32 loc(#loc)
    %739 = rocdl.cvt.scalef32.pk.bf16.fp4 %735[0], %738 : vector<2xbf16> loc(#loc)
    %740 = rocdl.cvt.scalef32.pk.bf16.fp4 %735[2], %738 : vector<2xbf16> loc(#loc)
    %741 = rocdl.cvt.scalef32.pk.bf16.fp4 %735[1], %738 : vector<2xbf16> loc(#loc)
    %742 = rocdl.cvt.scalef32.pk.bf16.fp4 %735[3], %738 : vector<2xbf16> loc(#loc)
    %743 = llvm.extractelement %739[%64 : i32] : vector<2xbf16> loc(#loc)
    %744 = llvm.extractelement %739[%53 : i32] : vector<2xbf16> loc(#loc)
    %745 = llvm.extractelement %740[%64 : i32] : vector<2xbf16> loc(#loc)
    %746 = llvm.extractelement %740[%53 : i32] : vector<2xbf16> loc(#loc)
    %747 = llvm.extractelement %741[%64 : i32] : vector<2xbf16> loc(#loc)
    %748 = llvm.extractelement %741[%53 : i32] : vector<2xbf16> loc(#loc)
    %749 = llvm.extractelement %742[%64 : i32] : vector<2xbf16> loc(#loc)
    %750 = llvm.extractelement %742[%53 : i32] : vector<2xbf16> loc(#loc)
    %751 = llvm.insertelement %561, %16[%64 : i32] : vector<4xi8> loc(#loc)
    %752 = llvm.insertelement %562, %751[%53 : i32] : vector<4xi8> loc(#loc)
    %753 = llvm.insertelement %563, %752[%52 : i32] : vector<4xi8> loc(#loc)
    %754 = llvm.insertelement %564, %753[%57 : i32] : vector<4xi8> loc(#loc)
    %755 = llvm.bitcast %754 : vector<4xi8> to i32 loc(#loc)
    %756 = llvm.zext %690 : i16 to i32 loc(#loc)
    %757 = llvm.shl %756, %60 : i32 loc(#loc)
    %758 = llvm.bitcast %757 : i32 to f32 loc(#loc)
    %759 = rocdl.cvt.scalef32.pk.bf16.fp4 %755[0], %758 : vector<2xbf16> loc(#loc)
    %760 = rocdl.cvt.scalef32.pk.bf16.fp4 %755[2], %758 : vector<2xbf16> loc(#loc)
    %761 = rocdl.cvt.scalef32.pk.bf16.fp4 %755[1], %758 : vector<2xbf16> loc(#loc)
    %762 = rocdl.cvt.scalef32.pk.bf16.fp4 %755[3], %758 : vector<2xbf16> loc(#loc)
    %763 = llvm.extractelement %759[%64 : i32] : vector<2xbf16> loc(#loc)
    %764 = llvm.extractelement %759[%53 : i32] : vector<2xbf16> loc(#loc)
    %765 = llvm.extractelement %760[%64 : i32] : vector<2xbf16> loc(#loc)
    %766 = llvm.extractelement %760[%53 : i32] : vector<2xbf16> loc(#loc)
    %767 = llvm.extractelement %761[%64 : i32] : vector<2xbf16> loc(#loc)
    %768 = llvm.extractelement %761[%53 : i32] : vector<2xbf16> loc(#loc)
    %769 = llvm.extractelement %762[%64 : i32] : vector<2xbf16> loc(#loc)
    %770 = llvm.extractelement %762[%53 : i32] : vector<2xbf16> loc(#loc)
    %771 = llvm.icmp "eq" %654, %70 : i8 loc(#loc)
    %772 = llvm.icmp "eq" %662, %70 : i8 loc(#loc)
    %773 = llvm.icmp "eq" %670, %70 : i8 loc(#loc)
    %774 = llvm.icmp "eq" %678, %70 : i8 loc(#loc)
    %775 = llvm.select %771, %69, %703 : i1, bf16 loc(#loc)
    %776 = llvm.select %771, %69, %704 : i1, bf16 loc(#loc)
    %777 = llvm.select %771, %69, %705 : i1, bf16 loc(#loc)
    %778 = llvm.select %771, %69, %706 : i1, bf16 loc(#loc)
    %779 = llvm.select %771, %69, %707 : i1, bf16 loc(#loc)
    %780 = llvm.select %771, %69, %708 : i1, bf16 loc(#loc)
    %781 = llvm.select %771, %69, %709 : i1, bf16 loc(#loc)
    %782 = llvm.select %771, %69, %710 : i1, bf16 loc(#loc)
    %783 = llvm.select %772, %69, %723 : i1, bf16 loc(#loc)
    %784 = llvm.select %772, %69, %724 : i1, bf16 loc(#loc)
    %785 = llvm.select %772, %69, %725 : i1, bf16 loc(#loc)
    %786 = llvm.select %772, %69, %726 : i1, bf16 loc(#loc)
    %787 = llvm.select %772, %69, %727 : i1, bf16 loc(#loc)
    %788 = llvm.select %772, %69, %728 : i1, bf16 loc(#loc)
    %789 = llvm.select %772, %69, %729 : i1, bf16 loc(#loc)
    %790 = llvm.select %772, %69, %730 : i1, bf16 loc(#loc)
    %791 = llvm.select %773, %69, %743 : i1, bf16 loc(#loc)
    %792 = llvm.select %773, %69, %744 : i1, bf16 loc(#loc)
    %793 = llvm.select %773, %69, %745 : i1, bf16 loc(#loc)
    %794 = llvm.select %773, %69, %746 : i1, bf16 loc(#loc)
    %795 = llvm.select %773, %69, %747 : i1, bf16 loc(#loc)
    %796 = llvm.select %773, %69, %748 : i1, bf16 loc(#loc)
    %797 = llvm.select %773, %69, %749 : i1, bf16 loc(#loc)
    %798 = llvm.select %773, %69, %750 : i1, bf16 loc(#loc)
    %799 = llvm.select %774, %69, %763 : i1, bf16 loc(#loc)
    %800 = llvm.select %774, %69, %764 : i1, bf16 loc(#loc)
    %801 = llvm.select %774, %69, %765 : i1, bf16 loc(#loc)
    %802 = llvm.select %774, %69, %766 : i1, bf16 loc(#loc)
    %803 = llvm.select %774, %69, %767 : i1, bf16 loc(#loc)
    %804 = llvm.select %774, %69, %768 : i1, bf16 loc(#loc)
    %805 = llvm.select %774, %69, %769 : i1, bf16 loc(#loc)
    %806 = llvm.select %774, %69, %770 : i1, bf16 loc(#loc)
    %807 = llvm.insertelement %336, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %808 = llvm.insertelement %337, %807[%53 : i32] : vector<8xbf16> loc(#loc)
    %809 = llvm.insertelement %338, %808[%52 : i32] : vector<8xbf16> loc(#loc)
    %810 = llvm.insertelement %339, %809[%57 : i32] : vector<8xbf16> loc(#loc)
    %811 = llvm.insertelement %340, %810[%51 : i32] : vector<8xbf16> loc(#loc)
    %812 = llvm.insertelement %341, %811[%61 : i32] : vector<8xbf16> loc(#loc)
    %813 = llvm.insertelement %342, %812[%63 : i32] : vector<8xbf16> loc(#loc)
    %814 = llvm.insertelement %343, %813[%50 : i32] : vector<8xbf16> loc(#loc)
    %815 = llvm.extractelement %814[%64 : i32] : vector<8xbf16> loc(#loc)
    %816 = llvm.insertelement %815, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %817 = llvm.extractelement %814[%53 : i32] : vector<8xbf16> loc(#loc)
    %818 = llvm.insertelement %817, %816[%53 : i32] : vector<8xbf16> loc(#loc)
    %819 = llvm.extractelement %814[%52 : i32] : vector<8xbf16> loc(#loc)
    %820 = llvm.insertelement %819, %818[%52 : i32] : vector<8xbf16> loc(#loc)
    %821 = llvm.extractelement %814[%57 : i32] : vector<8xbf16> loc(#loc)
    %822 = llvm.insertelement %821, %820[%57 : i32] : vector<8xbf16> loc(#loc)
    %823 = llvm.extractelement %814[%51 : i32] : vector<8xbf16> loc(#loc)
    %824 = llvm.insertelement %823, %822[%51 : i32] : vector<8xbf16> loc(#loc)
    %825 = llvm.extractelement %814[%61 : i32] : vector<8xbf16> loc(#loc)
    %826 = llvm.insertelement %825, %824[%61 : i32] : vector<8xbf16> loc(#loc)
    %827 = llvm.extractelement %814[%63 : i32] : vector<8xbf16> loc(#loc)
    %828 = llvm.insertelement %827, %826[%63 : i32] : vector<8xbf16> loc(#loc)
    %829 = llvm.extractelement %814[%50 : i32] : vector<8xbf16> loc(#loc)
    %830 = llvm.insertelement %829, %828[%50 : i32] : vector<8xbf16> loc(#loc)
    %831 = llvm.insertelement %359, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %832 = llvm.insertelement %360, %831[%53 : i32] : vector<8xbf16> loc(#loc)
    %833 = llvm.insertelement %361, %832[%52 : i32] : vector<8xbf16> loc(#loc)
    %834 = llvm.insertelement %362, %833[%57 : i32] : vector<8xbf16> loc(#loc)
    %835 = llvm.insertelement %363, %834[%51 : i32] : vector<8xbf16> loc(#loc)
    %836 = llvm.insertelement %364, %835[%61 : i32] : vector<8xbf16> loc(#loc)
    %837 = llvm.insertelement %365, %836[%63 : i32] : vector<8xbf16> loc(#loc)
    %838 = llvm.insertelement %366, %837[%50 : i32] : vector<8xbf16> loc(#loc)
    %839 = llvm.extractelement %838[%64 : i32] : vector<8xbf16> loc(#loc)
    %840 = llvm.insertelement %839, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %841 = llvm.extractelement %838[%53 : i32] : vector<8xbf16> loc(#loc)
    %842 = llvm.insertelement %841, %840[%53 : i32] : vector<8xbf16> loc(#loc)
    %843 = llvm.extractelement %838[%52 : i32] : vector<8xbf16> loc(#loc)
    %844 = llvm.insertelement %843, %842[%52 : i32] : vector<8xbf16> loc(#loc)
    %845 = llvm.extractelement %838[%57 : i32] : vector<8xbf16> loc(#loc)
    %846 = llvm.insertelement %845, %844[%57 : i32] : vector<8xbf16> loc(#loc)
    %847 = llvm.extractelement %838[%51 : i32] : vector<8xbf16> loc(#loc)
    %848 = llvm.insertelement %847, %846[%51 : i32] : vector<8xbf16> loc(#loc)
    %849 = llvm.extractelement %838[%61 : i32] : vector<8xbf16> loc(#loc)
    %850 = llvm.insertelement %849, %848[%61 : i32] : vector<8xbf16> loc(#loc)
    %851 = llvm.extractelement %838[%63 : i32] : vector<8xbf16> loc(#loc)
    %852 = llvm.insertelement %851, %850[%63 : i32] : vector<8xbf16> loc(#loc)
    %853 = llvm.extractelement %838[%50 : i32] : vector<8xbf16> loc(#loc)
    %854 = llvm.insertelement %853, %852[%50 : i32] : vector<8xbf16> loc(#loc)
    %855 = llvm.insertelement %382, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %856 = llvm.insertelement %383, %855[%53 : i32] : vector<8xbf16> loc(#loc)
    %857 = llvm.insertelement %384, %856[%52 : i32] : vector<8xbf16> loc(#loc)
    %858 = llvm.insertelement %385, %857[%57 : i32] : vector<8xbf16> loc(#loc)
    %859 = llvm.insertelement %386, %858[%51 : i32] : vector<8xbf16> loc(#loc)
    %860 = llvm.insertelement %387, %859[%61 : i32] : vector<8xbf16> loc(#loc)
    %861 = llvm.insertelement %388, %860[%63 : i32] : vector<8xbf16> loc(#loc)
    %862 = llvm.insertelement %389, %861[%50 : i32] : vector<8xbf16> loc(#loc)
    %863 = llvm.extractelement %862[%64 : i32] : vector<8xbf16> loc(#loc)
    %864 = llvm.insertelement %863, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %865 = llvm.extractelement %862[%53 : i32] : vector<8xbf16> loc(#loc)
    %866 = llvm.insertelement %865, %864[%53 : i32] : vector<8xbf16> loc(#loc)
    %867 = llvm.extractelement %862[%52 : i32] : vector<8xbf16> loc(#loc)
    %868 = llvm.insertelement %867, %866[%52 : i32] : vector<8xbf16> loc(#loc)
    %869 = llvm.extractelement %862[%57 : i32] : vector<8xbf16> loc(#loc)
    %870 = llvm.insertelement %869, %868[%57 : i32] : vector<8xbf16> loc(#loc)
    %871 = llvm.extractelement %862[%51 : i32] : vector<8xbf16> loc(#loc)
    %872 = llvm.insertelement %871, %870[%51 : i32] : vector<8xbf16> loc(#loc)
    %873 = llvm.extractelement %862[%61 : i32] : vector<8xbf16> loc(#loc)
    %874 = llvm.insertelement %873, %872[%61 : i32] : vector<8xbf16> loc(#loc)
    %875 = llvm.extractelement %862[%63 : i32] : vector<8xbf16> loc(#loc)
    %876 = llvm.insertelement %875, %874[%63 : i32] : vector<8xbf16> loc(#loc)
    %877 = llvm.extractelement %862[%50 : i32] : vector<8xbf16> loc(#loc)
    %878 = llvm.insertelement %877, %876[%50 : i32] : vector<8xbf16> loc(#loc)
    %879 = llvm.insertelement %405, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %880 = llvm.insertelement %406, %879[%53 : i32] : vector<8xbf16> loc(#loc)
    %881 = llvm.insertelement %407, %880[%52 : i32] : vector<8xbf16> loc(#loc)
    %882 = llvm.insertelement %408, %881[%57 : i32] : vector<8xbf16> loc(#loc)
    %883 = llvm.insertelement %409, %882[%51 : i32] : vector<8xbf16> loc(#loc)
    %884 = llvm.insertelement %410, %883[%61 : i32] : vector<8xbf16> loc(#loc)
    %885 = llvm.insertelement %411, %884[%63 : i32] : vector<8xbf16> loc(#loc)
    %886 = llvm.insertelement %412, %885[%50 : i32] : vector<8xbf16> loc(#loc)
    %887 = llvm.extractelement %886[%64 : i32] : vector<8xbf16> loc(#loc)
    %888 = llvm.insertelement %887, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %889 = llvm.extractelement %886[%53 : i32] : vector<8xbf16> loc(#loc)
    %890 = llvm.insertelement %889, %888[%53 : i32] : vector<8xbf16> loc(#loc)
    %891 = llvm.extractelement %886[%52 : i32] : vector<8xbf16> loc(#loc)
    %892 = llvm.insertelement %891, %890[%52 : i32] : vector<8xbf16> loc(#loc)
    %893 = llvm.extractelement %886[%57 : i32] : vector<8xbf16> loc(#loc)
    %894 = llvm.insertelement %893, %892[%57 : i32] : vector<8xbf16> loc(#loc)
    %895 = llvm.extractelement %886[%51 : i32] : vector<8xbf16> loc(#loc)
    %896 = llvm.insertelement %895, %894[%51 : i32] : vector<8xbf16> loc(#loc)
    %897 = llvm.extractelement %886[%61 : i32] : vector<8xbf16> loc(#loc)
    %898 = llvm.insertelement %897, %896[%61 : i32] : vector<8xbf16> loc(#loc)
    %899 = llvm.extractelement %886[%63 : i32] : vector<8xbf16> loc(#loc)
    %900 = llvm.insertelement %899, %898[%63 : i32] : vector<8xbf16> loc(#loc)
    %901 = llvm.extractelement %886[%50 : i32] : vector<8xbf16> loc(#loc)
    %902 = llvm.insertelement %901, %900[%50 : i32] : vector<8xbf16> loc(#loc)
    %903 = llvm.insertelement %775, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %904 = llvm.insertelement %776, %903[%53 : i32] : vector<8xbf16> loc(#loc)
    %905 = llvm.insertelement %777, %904[%52 : i32] : vector<8xbf16> loc(#loc)
    %906 = llvm.insertelement %778, %905[%57 : i32] : vector<8xbf16> loc(#loc)
    %907 = llvm.insertelement %779, %906[%51 : i32] : vector<8xbf16> loc(#loc)
    %908 = llvm.insertelement %780, %907[%61 : i32] : vector<8xbf16> loc(#loc)
    %909 = llvm.insertelement %781, %908[%63 : i32] : vector<8xbf16> loc(#loc)
    %910 = llvm.insertelement %782, %909[%50 : i32] : vector<8xbf16> loc(#loc)
    %911 = llvm.extractelement %910[%64 : i32] : vector<8xbf16> loc(#loc)
    %912 = llvm.insertelement %911, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %913 = llvm.extractelement %910[%53 : i32] : vector<8xbf16> loc(#loc)
    %914 = llvm.insertelement %913, %912[%53 : i32] : vector<8xbf16> loc(#loc)
    %915 = llvm.extractelement %910[%52 : i32] : vector<8xbf16> loc(#loc)
    %916 = llvm.insertelement %915, %914[%52 : i32] : vector<8xbf16> loc(#loc)
    %917 = llvm.extractelement %910[%57 : i32] : vector<8xbf16> loc(#loc)
    %918 = llvm.insertelement %917, %916[%57 : i32] : vector<8xbf16> loc(#loc)
    %919 = llvm.extractelement %910[%51 : i32] : vector<8xbf16> loc(#loc)
    %920 = llvm.insertelement %919, %918[%51 : i32] : vector<8xbf16> loc(#loc)
    %921 = llvm.extractelement %910[%61 : i32] : vector<8xbf16> loc(#loc)
    %922 = llvm.insertelement %921, %920[%61 : i32] : vector<8xbf16> loc(#loc)
    %923 = llvm.extractelement %910[%63 : i32] : vector<8xbf16> loc(#loc)
    %924 = llvm.insertelement %923, %922[%63 : i32] : vector<8xbf16> loc(#loc)
    %925 = llvm.extractelement %910[%50 : i32] : vector<8xbf16> loc(#loc)
    %926 = llvm.insertelement %925, %924[%50 : i32] : vector<8xbf16> loc(#loc)
    %927 = llvm.insertelement %783, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %928 = llvm.insertelement %784, %927[%53 : i32] : vector<8xbf16> loc(#loc)
    %929 = llvm.insertelement %785, %928[%52 : i32] : vector<8xbf16> loc(#loc)
    %930 = llvm.insertelement %786, %929[%57 : i32] : vector<8xbf16> loc(#loc)
    %931 = llvm.insertelement %787, %930[%51 : i32] : vector<8xbf16> loc(#loc)
    %932 = llvm.insertelement %788, %931[%61 : i32] : vector<8xbf16> loc(#loc)
    %933 = llvm.insertelement %789, %932[%63 : i32] : vector<8xbf16> loc(#loc)
    %934 = llvm.insertelement %790, %933[%50 : i32] : vector<8xbf16> loc(#loc)
    %935 = llvm.extractelement %934[%64 : i32] : vector<8xbf16> loc(#loc)
    %936 = llvm.insertelement %935, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %937 = llvm.extractelement %934[%53 : i32] : vector<8xbf16> loc(#loc)
    %938 = llvm.insertelement %937, %936[%53 : i32] : vector<8xbf16> loc(#loc)
    %939 = llvm.extractelement %934[%52 : i32] : vector<8xbf16> loc(#loc)
    %940 = llvm.insertelement %939, %938[%52 : i32] : vector<8xbf16> loc(#loc)
    %941 = llvm.extractelement %934[%57 : i32] : vector<8xbf16> loc(#loc)
    %942 = llvm.insertelement %941, %940[%57 : i32] : vector<8xbf16> loc(#loc)
    %943 = llvm.extractelement %934[%51 : i32] : vector<8xbf16> loc(#loc)
    %944 = llvm.insertelement %943, %942[%51 : i32] : vector<8xbf16> loc(#loc)
    %945 = llvm.extractelement %934[%61 : i32] : vector<8xbf16> loc(#loc)
    %946 = llvm.insertelement %945, %944[%61 : i32] : vector<8xbf16> loc(#loc)
    %947 = llvm.extractelement %934[%63 : i32] : vector<8xbf16> loc(#loc)
    %948 = llvm.insertelement %947, %946[%63 : i32] : vector<8xbf16> loc(#loc)
    %949 = llvm.extractelement %934[%50 : i32] : vector<8xbf16> loc(#loc)
    %950 = llvm.insertelement %949, %948[%50 : i32] : vector<8xbf16> loc(#loc)
    %951 = llvm.insertelement %791, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %952 = llvm.insertelement %792, %951[%53 : i32] : vector<8xbf16> loc(#loc)
    %953 = llvm.insertelement %793, %952[%52 : i32] : vector<8xbf16> loc(#loc)
    %954 = llvm.insertelement %794, %953[%57 : i32] : vector<8xbf16> loc(#loc)
    %955 = llvm.insertelement %795, %954[%51 : i32] : vector<8xbf16> loc(#loc)
    %956 = llvm.insertelement %796, %955[%61 : i32] : vector<8xbf16> loc(#loc)
    %957 = llvm.insertelement %797, %956[%63 : i32] : vector<8xbf16> loc(#loc)
    %958 = llvm.insertelement %798, %957[%50 : i32] : vector<8xbf16> loc(#loc)
    %959 = llvm.extractelement %958[%64 : i32] : vector<8xbf16> loc(#loc)
    %960 = llvm.insertelement %959, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %961 = llvm.extractelement %958[%53 : i32] : vector<8xbf16> loc(#loc)
    %962 = llvm.insertelement %961, %960[%53 : i32] : vector<8xbf16> loc(#loc)
    %963 = llvm.extractelement %958[%52 : i32] : vector<8xbf16> loc(#loc)
    %964 = llvm.insertelement %963, %962[%52 : i32] : vector<8xbf16> loc(#loc)
    %965 = llvm.extractelement %958[%57 : i32] : vector<8xbf16> loc(#loc)
    %966 = llvm.insertelement %965, %964[%57 : i32] : vector<8xbf16> loc(#loc)
    %967 = llvm.extractelement %958[%51 : i32] : vector<8xbf16> loc(#loc)
    %968 = llvm.insertelement %967, %966[%51 : i32] : vector<8xbf16> loc(#loc)
    %969 = llvm.extractelement %958[%61 : i32] : vector<8xbf16> loc(#loc)
    %970 = llvm.insertelement %969, %968[%61 : i32] : vector<8xbf16> loc(#loc)
    %971 = llvm.extractelement %958[%63 : i32] : vector<8xbf16> loc(#loc)
    %972 = llvm.insertelement %971, %970[%63 : i32] : vector<8xbf16> loc(#loc)
    %973 = llvm.extractelement %958[%50 : i32] : vector<8xbf16> loc(#loc)
    %974 = llvm.insertelement %973, %972[%50 : i32] : vector<8xbf16> loc(#loc)
    %975 = llvm.insertelement %799, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %976 = llvm.insertelement %800, %975[%53 : i32] : vector<8xbf16> loc(#loc)
    %977 = llvm.insertelement %801, %976[%52 : i32] : vector<8xbf16> loc(#loc)
    %978 = llvm.insertelement %802, %977[%57 : i32] : vector<8xbf16> loc(#loc)
    %979 = llvm.insertelement %803, %978[%51 : i32] : vector<8xbf16> loc(#loc)
    %980 = llvm.insertelement %804, %979[%61 : i32] : vector<8xbf16> loc(#loc)
    %981 = llvm.insertelement %805, %980[%63 : i32] : vector<8xbf16> loc(#loc)
    %982 = llvm.insertelement %806, %981[%50 : i32] : vector<8xbf16> loc(#loc)
    %983 = llvm.extractelement %982[%64 : i32] : vector<8xbf16> loc(#loc)
    %984 = llvm.insertelement %983, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %985 = llvm.extractelement %982[%53 : i32] : vector<8xbf16> loc(#loc)
    %986 = llvm.insertelement %985, %984[%53 : i32] : vector<8xbf16> loc(#loc)
    %987 = llvm.extractelement %982[%52 : i32] : vector<8xbf16> loc(#loc)
    %988 = llvm.insertelement %987, %986[%52 : i32] : vector<8xbf16> loc(#loc)
    %989 = llvm.extractelement %982[%57 : i32] : vector<8xbf16> loc(#loc)
    %990 = llvm.insertelement %989, %988[%57 : i32] : vector<8xbf16> loc(#loc)
    %991 = llvm.extractelement %982[%51 : i32] : vector<8xbf16> loc(#loc)
    %992 = llvm.insertelement %991, %990[%51 : i32] : vector<8xbf16> loc(#loc)
    %993 = llvm.extractelement %982[%61 : i32] : vector<8xbf16> loc(#loc)
    %994 = llvm.insertelement %993, %992[%61 : i32] : vector<8xbf16> loc(#loc)
    %995 = llvm.extractelement %982[%63 : i32] : vector<8xbf16> loc(#loc)
    %996 = llvm.insertelement %995, %994[%63 : i32] : vector<8xbf16> loc(#loc)
    %997 = llvm.extractelement %982[%50 : i32] : vector<8xbf16> loc(#loc)
    %998 = llvm.insertelement %997, %996[%50 : i32] : vector<8xbf16> loc(#loc)
    %999 = llvm.insertelement %68, %2[%64 : i32] : vector<4xf32> loc(#loc)
    %1000 = llvm.insertelement %68, %999[%53 : i32] : vector<4xf32> loc(#loc)
    %1001 = llvm.insertelement %68, %1000[%52 : i32] : vector<4xf32> loc(#loc)
    %1002 = llvm.insertelement %68, %1001[%57 : i32] : vector<4xf32> loc(#loc)
    %1003 = rocdl.mfma.f32.16x16x32.bf16 %926, %830, %1002, %64, %64, %64 : (vector<8xbf16>, vector<8xbf16>, vector<4xf32>, i32, i32, i32) -> vector<4xf32> loc(#loc)
    %1004 = rocdl.mfma.f32.16x16x32.bf16 %950, %854, %1003, %64, %64, %64 : (vector<8xbf16>, vector<8xbf16>, vector<4xf32>, i32, i32, i32) -> vector<4xf32> loc(#loc)
    %1005 = rocdl.mfma.f32.16x16x32.bf16 %974, %878, %1004, %64, %64, %64 : (vector<8xbf16>, vector<8xbf16>, vector<4xf32>, i32, i32, i32) -> vector<4xf32> loc(#loc)
    %1006 = rocdl.mfma.f32.16x16x32.bf16 %998, %902, %1005, %64, %64, %64 : (vector<8xbf16>, vector<8xbf16>, vector<4xf32>, i32, i32, i32) -> vector<4xf32> loc(#loc)
    %1007 = llvm.extractelement %1006[%64 : i32] : vector<4xf32> loc(#loc)
    %1008 = llvm.extractelement %1006[%53 : i32] : vector<4xf32> loc(#loc)
    %1009 = llvm.extractelement %1006[%52 : i32] : vector<4xf32> loc(#loc)
    %1010 = llvm.extractelement %1006[%57 : i32] : vector<4xf32> loc(#loc)
    %1011 = llvm.zext %658 : i8 to i16 loc(#loc)
    %1012 = llvm.zext %666 : i8 to i16 loc(#loc)
    %1013 = llvm.zext %674 : i8 to i16 loc(#loc)
    %1014 = llvm.zext %682 : i8 to i16 loc(#loc)
    %1015 = llvm.shl %1011, %71 : i16 loc(#loc)
    %1016 = llvm.shl %1012, %71 : i16 loc(#loc)
    %1017 = llvm.shl %1013, %71 : i16 loc(#loc)
    %1018 = llvm.shl %1014, %71 : i16 loc(#loc)
    %1019 = llvm.insertelement %539, %16[%64 : i32] : vector<4xi8> loc(#loc)
    %1020 = llvm.insertelement %540, %1019[%53 : i32] : vector<4xi8> loc(#loc)
    %1021 = llvm.insertelement %541, %1020[%52 : i32] : vector<4xi8> loc(#loc)
    %1022 = llvm.insertelement %542, %1021[%57 : i32] : vector<4xi8> loc(#loc)
    %1023 = llvm.bitcast %1022 : vector<4xi8> to i32 loc(#loc)
    %1024 = llvm.zext %1015 : i16 to i32 loc(#loc)
    %1025 = llvm.shl %1024, %60 : i32 loc(#loc)
    %1026 = llvm.bitcast %1025 : i32 to f32 loc(#loc)
    %1027 = rocdl.cvt.scalef32.pk.bf16.fp4 %1023[0], %1026 : vector<2xbf16> loc(#loc)
    %1028 = rocdl.cvt.scalef32.pk.bf16.fp4 %1023[2], %1026 : vector<2xbf16> loc(#loc)
    %1029 = rocdl.cvt.scalef32.pk.bf16.fp4 %1023[1], %1026 : vector<2xbf16> loc(#loc)
    %1030 = rocdl.cvt.scalef32.pk.bf16.fp4 %1023[3], %1026 : vector<2xbf16> loc(#loc)
    %1031 = llvm.extractelement %1027[%64 : i32] : vector<2xbf16> loc(#loc)
    %1032 = llvm.extractelement %1027[%53 : i32] : vector<2xbf16> loc(#loc)
    %1033 = llvm.extractelement %1028[%64 : i32] : vector<2xbf16> loc(#loc)
    %1034 = llvm.extractelement %1028[%53 : i32] : vector<2xbf16> loc(#loc)
    %1035 = llvm.extractelement %1029[%64 : i32] : vector<2xbf16> loc(#loc)
    %1036 = llvm.extractelement %1029[%53 : i32] : vector<2xbf16> loc(#loc)
    %1037 = llvm.extractelement %1030[%64 : i32] : vector<2xbf16> loc(#loc)
    %1038 = llvm.extractelement %1030[%53 : i32] : vector<2xbf16> loc(#loc)
    %1039 = llvm.insertelement %546, %16[%64 : i32] : vector<4xi8> loc(#loc)
    %1040 = llvm.insertelement %547, %1039[%53 : i32] : vector<4xi8> loc(#loc)
    %1041 = llvm.insertelement %548, %1040[%52 : i32] : vector<4xi8> loc(#loc)
    %1042 = llvm.insertelement %549, %1041[%57 : i32] : vector<4xi8> loc(#loc)
    %1043 = llvm.bitcast %1042 : vector<4xi8> to i32 loc(#loc)
    %1044 = llvm.zext %1016 : i16 to i32 loc(#loc)
    %1045 = llvm.shl %1044, %60 : i32 loc(#loc)
    %1046 = llvm.bitcast %1045 : i32 to f32 loc(#loc)
    %1047 = rocdl.cvt.scalef32.pk.bf16.fp4 %1043[0], %1046 : vector<2xbf16> loc(#loc)
    %1048 = rocdl.cvt.scalef32.pk.bf16.fp4 %1043[2], %1046 : vector<2xbf16> loc(#loc)
    %1049 = rocdl.cvt.scalef32.pk.bf16.fp4 %1043[1], %1046 : vector<2xbf16> loc(#loc)
    %1050 = rocdl.cvt.scalef32.pk.bf16.fp4 %1043[3], %1046 : vector<2xbf16> loc(#loc)
    %1051 = llvm.extractelement %1047[%64 : i32] : vector<2xbf16> loc(#loc)
    %1052 = llvm.extractelement %1047[%53 : i32] : vector<2xbf16> loc(#loc)
    %1053 = llvm.extractelement %1048[%64 : i32] : vector<2xbf16> loc(#loc)
    %1054 = llvm.extractelement %1048[%53 : i32] : vector<2xbf16> loc(#loc)
    %1055 = llvm.extractelement %1049[%64 : i32] : vector<2xbf16> loc(#loc)
    %1056 = llvm.extractelement %1049[%53 : i32] : vector<2xbf16> loc(#loc)
    %1057 = llvm.extractelement %1050[%64 : i32] : vector<2xbf16> loc(#loc)
    %1058 = llvm.extractelement %1050[%53 : i32] : vector<2xbf16> loc(#loc)
    %1059 = llvm.insertelement %569, %16[%64 : i32] : vector<4xi8> loc(#loc)
    %1060 = llvm.insertelement %570, %1059[%53 : i32] : vector<4xi8> loc(#loc)
    %1061 = llvm.insertelement %571, %1060[%52 : i32] : vector<4xi8> loc(#loc)
    %1062 = llvm.insertelement %572, %1061[%57 : i32] : vector<4xi8> loc(#loc)
    %1063 = llvm.bitcast %1062 : vector<4xi8> to i32 loc(#loc)
    %1064 = llvm.zext %1017 : i16 to i32 loc(#loc)
    %1065 = llvm.shl %1064, %60 : i32 loc(#loc)
    %1066 = llvm.bitcast %1065 : i32 to f32 loc(#loc)
    %1067 = rocdl.cvt.scalef32.pk.bf16.fp4 %1063[0], %1066 : vector<2xbf16> loc(#loc)
    %1068 = rocdl.cvt.scalef32.pk.bf16.fp4 %1063[2], %1066 : vector<2xbf16> loc(#loc)
    %1069 = rocdl.cvt.scalef32.pk.bf16.fp4 %1063[1], %1066 : vector<2xbf16> loc(#loc)
    %1070 = rocdl.cvt.scalef32.pk.bf16.fp4 %1063[3], %1066 : vector<2xbf16> loc(#loc)
    %1071 = llvm.extractelement %1067[%64 : i32] : vector<2xbf16> loc(#loc)
    %1072 = llvm.extractelement %1067[%53 : i32] : vector<2xbf16> loc(#loc)
    %1073 = llvm.extractelement %1068[%64 : i32] : vector<2xbf16> loc(#loc)
    %1074 = llvm.extractelement %1068[%53 : i32] : vector<2xbf16> loc(#loc)
    %1075 = llvm.extractelement %1069[%64 : i32] : vector<2xbf16> loc(#loc)
    %1076 = llvm.extractelement %1069[%53 : i32] : vector<2xbf16> loc(#loc)
    %1077 = llvm.extractelement %1070[%64 : i32] : vector<2xbf16> loc(#loc)
    %1078 = llvm.extractelement %1070[%53 : i32] : vector<2xbf16> loc(#loc)
    %1079 = llvm.insertelement %576, %16[%64 : i32] : vector<4xi8> loc(#loc)
    %1080 = llvm.insertelement %577, %1079[%53 : i32] : vector<4xi8> loc(#loc)
    %1081 = llvm.insertelement %578, %1080[%52 : i32] : vector<4xi8> loc(#loc)
    %1082 = llvm.insertelement %579, %1081[%57 : i32] : vector<4xi8> loc(#loc)
    %1083 = llvm.bitcast %1082 : vector<4xi8> to i32 loc(#loc)
    %1084 = llvm.zext %1018 : i16 to i32 loc(#loc)
    %1085 = llvm.shl %1084, %60 : i32 loc(#loc)
    %1086 = llvm.bitcast %1085 : i32 to f32 loc(#loc)
    %1087 = rocdl.cvt.scalef32.pk.bf16.fp4 %1083[0], %1086 : vector<2xbf16> loc(#loc)
    %1088 = rocdl.cvt.scalef32.pk.bf16.fp4 %1083[2], %1086 : vector<2xbf16> loc(#loc)
    %1089 = rocdl.cvt.scalef32.pk.bf16.fp4 %1083[1], %1086 : vector<2xbf16> loc(#loc)
    %1090 = rocdl.cvt.scalef32.pk.bf16.fp4 %1083[3], %1086 : vector<2xbf16> loc(#loc)
    %1091 = llvm.extractelement %1087[%64 : i32] : vector<2xbf16> loc(#loc)
    %1092 = llvm.extractelement %1087[%53 : i32] : vector<2xbf16> loc(#loc)
    %1093 = llvm.extractelement %1088[%64 : i32] : vector<2xbf16> loc(#loc)
    %1094 = llvm.extractelement %1088[%53 : i32] : vector<2xbf16> loc(#loc)
    %1095 = llvm.extractelement %1089[%64 : i32] : vector<2xbf16> loc(#loc)
    %1096 = llvm.extractelement %1089[%53 : i32] : vector<2xbf16> loc(#loc)
    %1097 = llvm.extractelement %1090[%64 : i32] : vector<2xbf16> loc(#loc)
    %1098 = llvm.extractelement %1090[%53 : i32] : vector<2xbf16> loc(#loc)
    %1099 = llvm.icmp "eq" %658, %70 : i8 loc(#loc)
    %1100 = llvm.icmp "eq" %666, %70 : i8 loc(#loc)
    %1101 = llvm.icmp "eq" %674, %70 : i8 loc(#loc)
    %1102 = llvm.icmp "eq" %682, %70 : i8 loc(#loc)
    %1103 = llvm.select %1099, %69, %1031 : i1, bf16 loc(#loc)
    %1104 = llvm.select %1099, %69, %1032 : i1, bf16 loc(#loc)
    %1105 = llvm.select %1099, %69, %1033 : i1, bf16 loc(#loc)
    %1106 = llvm.select %1099, %69, %1034 : i1, bf16 loc(#loc)
    %1107 = llvm.select %1099, %69, %1035 : i1, bf16 loc(#loc)
    %1108 = llvm.select %1099, %69, %1036 : i1, bf16 loc(#loc)
    %1109 = llvm.select %1099, %69, %1037 : i1, bf16 loc(#loc)
    %1110 = llvm.select %1099, %69, %1038 : i1, bf16 loc(#loc)
    %1111 = llvm.select %1100, %69, %1051 : i1, bf16 loc(#loc)
    %1112 = llvm.select %1100, %69, %1052 : i1, bf16 loc(#loc)
    %1113 = llvm.select %1100, %69, %1053 : i1, bf16 loc(#loc)
    %1114 = llvm.select %1100, %69, %1054 : i1, bf16 loc(#loc)
    %1115 = llvm.select %1100, %69, %1055 : i1, bf16 loc(#loc)
    %1116 = llvm.select %1100, %69, %1056 : i1, bf16 loc(#loc)
    %1117 = llvm.select %1100, %69, %1057 : i1, bf16 loc(#loc)
    %1118 = llvm.select %1100, %69, %1058 : i1, bf16 loc(#loc)
    %1119 = llvm.select %1101, %69, %1071 : i1, bf16 loc(#loc)
    %1120 = llvm.select %1101, %69, %1072 : i1, bf16 loc(#loc)
    %1121 = llvm.select %1101, %69, %1073 : i1, bf16 loc(#loc)
    %1122 = llvm.select %1101, %69, %1074 : i1, bf16 loc(#loc)
    %1123 = llvm.select %1101, %69, %1075 : i1, bf16 loc(#loc)
    %1124 = llvm.select %1101, %69, %1076 : i1, bf16 loc(#loc)
    %1125 = llvm.select %1101, %69, %1077 : i1, bf16 loc(#loc)
    %1126 = llvm.select %1101, %69, %1078 : i1, bf16 loc(#loc)
    %1127 = llvm.select %1102, %69, %1091 : i1, bf16 loc(#loc)
    %1128 = llvm.select %1102, %69, %1092 : i1, bf16 loc(#loc)
    %1129 = llvm.select %1102, %69, %1093 : i1, bf16 loc(#loc)
    %1130 = llvm.select %1102, %69, %1094 : i1, bf16 loc(#loc)
    %1131 = llvm.select %1102, %69, %1095 : i1, bf16 loc(#loc)
    %1132 = llvm.select %1102, %69, %1096 : i1, bf16 loc(#loc)
    %1133 = llvm.select %1102, %69, %1097 : i1, bf16 loc(#loc)
    %1134 = llvm.select %1102, %69, %1098 : i1, bf16 loc(#loc)
    %1135 = llvm.insertelement %347, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %1136 = llvm.insertelement %348, %1135[%53 : i32] : vector<8xbf16> loc(#loc)
    %1137 = llvm.insertelement %349, %1136[%52 : i32] : vector<8xbf16> loc(#loc)
    %1138 = llvm.insertelement %350, %1137[%57 : i32] : vector<8xbf16> loc(#loc)
    %1139 = llvm.insertelement %351, %1138[%51 : i32] : vector<8xbf16> loc(#loc)
    %1140 = llvm.insertelement %352, %1139[%61 : i32] : vector<8xbf16> loc(#loc)
    %1141 = llvm.insertelement %353, %1140[%63 : i32] : vector<8xbf16> loc(#loc)
    %1142 = llvm.insertelement %354, %1141[%50 : i32] : vector<8xbf16> loc(#loc)
    %1143 = llvm.extractelement %1142[%64 : i32] : vector<8xbf16> loc(#loc)
    %1144 = llvm.insertelement %1143, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %1145 = llvm.extractelement %1142[%53 : i32] : vector<8xbf16> loc(#loc)
    %1146 = llvm.insertelement %1145, %1144[%53 : i32] : vector<8xbf16> loc(#loc)
    %1147 = llvm.extractelement %1142[%52 : i32] : vector<8xbf16> loc(#loc)
    %1148 = llvm.insertelement %1147, %1146[%52 : i32] : vector<8xbf16> loc(#loc)
    %1149 = llvm.extractelement %1142[%57 : i32] : vector<8xbf16> loc(#loc)
    %1150 = llvm.insertelement %1149, %1148[%57 : i32] : vector<8xbf16> loc(#loc)
    %1151 = llvm.extractelement %1142[%51 : i32] : vector<8xbf16> loc(#loc)
    %1152 = llvm.insertelement %1151, %1150[%51 : i32] : vector<8xbf16> loc(#loc)
    %1153 = llvm.extractelement %1142[%61 : i32] : vector<8xbf16> loc(#loc)
    %1154 = llvm.insertelement %1153, %1152[%61 : i32] : vector<8xbf16> loc(#loc)
    %1155 = llvm.extractelement %1142[%63 : i32] : vector<8xbf16> loc(#loc)
    %1156 = llvm.insertelement %1155, %1154[%63 : i32] : vector<8xbf16> loc(#loc)
    %1157 = llvm.extractelement %1142[%50 : i32] : vector<8xbf16> loc(#loc)
    %1158 = llvm.insertelement %1157, %1156[%50 : i32] : vector<8xbf16> loc(#loc)
    %1159 = llvm.insertelement %370, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %1160 = llvm.insertelement %371, %1159[%53 : i32] : vector<8xbf16> loc(#loc)
    %1161 = llvm.insertelement %372, %1160[%52 : i32] : vector<8xbf16> loc(#loc)
    %1162 = llvm.insertelement %373, %1161[%57 : i32] : vector<8xbf16> loc(#loc)
    %1163 = llvm.insertelement %374, %1162[%51 : i32] : vector<8xbf16> loc(#loc)
    %1164 = llvm.insertelement %375, %1163[%61 : i32] : vector<8xbf16> loc(#loc)
    %1165 = llvm.insertelement %376, %1164[%63 : i32] : vector<8xbf16> loc(#loc)
    %1166 = llvm.insertelement %377, %1165[%50 : i32] : vector<8xbf16> loc(#loc)
    %1167 = llvm.extractelement %1166[%64 : i32] : vector<8xbf16> loc(#loc)
    %1168 = llvm.insertelement %1167, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %1169 = llvm.extractelement %1166[%53 : i32] : vector<8xbf16> loc(#loc)
    %1170 = llvm.insertelement %1169, %1168[%53 : i32] : vector<8xbf16> loc(#loc)
    %1171 = llvm.extractelement %1166[%52 : i32] : vector<8xbf16> loc(#loc)
    %1172 = llvm.insertelement %1171, %1170[%52 : i32] : vector<8xbf16> loc(#loc)
    %1173 = llvm.extractelement %1166[%57 : i32] : vector<8xbf16> loc(#loc)
    %1174 = llvm.insertelement %1173, %1172[%57 : i32] : vector<8xbf16> loc(#loc)
    %1175 = llvm.extractelement %1166[%51 : i32] : vector<8xbf16> loc(#loc)
    %1176 = llvm.insertelement %1175, %1174[%51 : i32] : vector<8xbf16> loc(#loc)
    %1177 = llvm.extractelement %1166[%61 : i32] : vector<8xbf16> loc(#loc)
    %1178 = llvm.insertelement %1177, %1176[%61 : i32] : vector<8xbf16> loc(#loc)
    %1179 = llvm.extractelement %1166[%63 : i32] : vector<8xbf16> loc(#loc)
    %1180 = llvm.insertelement %1179, %1178[%63 : i32] : vector<8xbf16> loc(#loc)
    %1181 = llvm.extractelement %1166[%50 : i32] : vector<8xbf16> loc(#loc)
    %1182 = llvm.insertelement %1181, %1180[%50 : i32] : vector<8xbf16> loc(#loc)
    %1183 = llvm.insertelement %393, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %1184 = llvm.insertelement %394, %1183[%53 : i32] : vector<8xbf16> loc(#loc)
    %1185 = llvm.insertelement %395, %1184[%52 : i32] : vector<8xbf16> loc(#loc)
    %1186 = llvm.insertelement %396, %1185[%57 : i32] : vector<8xbf16> loc(#loc)
    %1187 = llvm.insertelement %397, %1186[%51 : i32] : vector<8xbf16> loc(#loc)
    %1188 = llvm.insertelement %398, %1187[%61 : i32] : vector<8xbf16> loc(#loc)
    %1189 = llvm.insertelement %399, %1188[%63 : i32] : vector<8xbf16> loc(#loc)
    %1190 = llvm.insertelement %400, %1189[%50 : i32] : vector<8xbf16> loc(#loc)
    %1191 = llvm.extractelement %1190[%64 : i32] : vector<8xbf16> loc(#loc)
    %1192 = llvm.insertelement %1191, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %1193 = llvm.extractelement %1190[%53 : i32] : vector<8xbf16> loc(#loc)
    %1194 = llvm.insertelement %1193, %1192[%53 : i32] : vector<8xbf16> loc(#loc)
    %1195 = llvm.extractelement %1190[%52 : i32] : vector<8xbf16> loc(#loc)
    %1196 = llvm.insertelement %1195, %1194[%52 : i32] : vector<8xbf16> loc(#loc)
    %1197 = llvm.extractelement %1190[%57 : i32] : vector<8xbf16> loc(#loc)
    %1198 = llvm.insertelement %1197, %1196[%57 : i32] : vector<8xbf16> loc(#loc)
    %1199 = llvm.extractelement %1190[%51 : i32] : vector<8xbf16> loc(#loc)
    %1200 = llvm.insertelement %1199, %1198[%51 : i32] : vector<8xbf16> loc(#loc)
    %1201 = llvm.extractelement %1190[%61 : i32] : vector<8xbf16> loc(#loc)
    %1202 = llvm.insertelement %1201, %1200[%61 : i32] : vector<8xbf16> loc(#loc)
    %1203 = llvm.extractelement %1190[%63 : i32] : vector<8xbf16> loc(#loc)
    %1204 = llvm.insertelement %1203, %1202[%63 : i32] : vector<8xbf16> loc(#loc)
    %1205 = llvm.extractelement %1190[%50 : i32] : vector<8xbf16> loc(#loc)
    %1206 = llvm.insertelement %1205, %1204[%50 : i32] : vector<8xbf16> loc(#loc)
    %1207 = llvm.insertelement %416, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %1208 = llvm.insertelement %417, %1207[%53 : i32] : vector<8xbf16> loc(#loc)
    %1209 = llvm.insertelement %418, %1208[%52 : i32] : vector<8xbf16> loc(#loc)
    %1210 = llvm.insertelement %419, %1209[%57 : i32] : vector<8xbf16> loc(#loc)
    %1211 = llvm.insertelement %420, %1210[%51 : i32] : vector<8xbf16> loc(#loc)
    %1212 = llvm.insertelement %421, %1211[%61 : i32] : vector<8xbf16> loc(#loc)
    %1213 = llvm.insertelement %422, %1212[%63 : i32] : vector<8xbf16> loc(#loc)
    %1214 = llvm.insertelement %423, %1213[%50 : i32] : vector<8xbf16> loc(#loc)
    %1215 = llvm.extractelement %1214[%64 : i32] : vector<8xbf16> loc(#loc)
    %1216 = llvm.insertelement %1215, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %1217 = llvm.extractelement %1214[%53 : i32] : vector<8xbf16> loc(#loc)
    %1218 = llvm.insertelement %1217, %1216[%53 : i32] : vector<8xbf16> loc(#loc)
    %1219 = llvm.extractelement %1214[%52 : i32] : vector<8xbf16> loc(#loc)
    %1220 = llvm.insertelement %1219, %1218[%52 : i32] : vector<8xbf16> loc(#loc)
    %1221 = llvm.extractelement %1214[%57 : i32] : vector<8xbf16> loc(#loc)
    %1222 = llvm.insertelement %1221, %1220[%57 : i32] : vector<8xbf16> loc(#loc)
    %1223 = llvm.extractelement %1214[%51 : i32] : vector<8xbf16> loc(#loc)
    %1224 = llvm.insertelement %1223, %1222[%51 : i32] : vector<8xbf16> loc(#loc)
    %1225 = llvm.extractelement %1214[%61 : i32] : vector<8xbf16> loc(#loc)
    %1226 = llvm.insertelement %1225, %1224[%61 : i32] : vector<8xbf16> loc(#loc)
    %1227 = llvm.extractelement %1214[%63 : i32] : vector<8xbf16> loc(#loc)
    %1228 = llvm.insertelement %1227, %1226[%63 : i32] : vector<8xbf16> loc(#loc)
    %1229 = llvm.extractelement %1214[%50 : i32] : vector<8xbf16> loc(#loc)
    %1230 = llvm.insertelement %1229, %1228[%50 : i32] : vector<8xbf16> loc(#loc)
    %1231 = llvm.insertelement %1103, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %1232 = llvm.insertelement %1104, %1231[%53 : i32] : vector<8xbf16> loc(#loc)
    %1233 = llvm.insertelement %1105, %1232[%52 : i32] : vector<8xbf16> loc(#loc)
    %1234 = llvm.insertelement %1106, %1233[%57 : i32] : vector<8xbf16> loc(#loc)
    %1235 = llvm.insertelement %1107, %1234[%51 : i32] : vector<8xbf16> loc(#loc)
    %1236 = llvm.insertelement %1108, %1235[%61 : i32] : vector<8xbf16> loc(#loc)
    %1237 = llvm.insertelement %1109, %1236[%63 : i32] : vector<8xbf16> loc(#loc)
    %1238 = llvm.insertelement %1110, %1237[%50 : i32] : vector<8xbf16> loc(#loc)
    %1239 = llvm.extractelement %1238[%64 : i32] : vector<8xbf16> loc(#loc)
    %1240 = llvm.insertelement %1239, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %1241 = llvm.extractelement %1238[%53 : i32] : vector<8xbf16> loc(#loc)
    %1242 = llvm.insertelement %1241, %1240[%53 : i32] : vector<8xbf16> loc(#loc)
    %1243 = llvm.extractelement %1238[%52 : i32] : vector<8xbf16> loc(#loc)
    %1244 = llvm.insertelement %1243, %1242[%52 : i32] : vector<8xbf16> loc(#loc)
    %1245 = llvm.extractelement %1238[%57 : i32] : vector<8xbf16> loc(#loc)
    %1246 = llvm.insertelement %1245, %1244[%57 : i32] : vector<8xbf16> loc(#loc)
    %1247 = llvm.extractelement %1238[%51 : i32] : vector<8xbf16> loc(#loc)
    %1248 = llvm.insertelement %1247, %1246[%51 : i32] : vector<8xbf16> loc(#loc)
    %1249 = llvm.extractelement %1238[%61 : i32] : vector<8xbf16> loc(#loc)
    %1250 = llvm.insertelement %1249, %1248[%61 : i32] : vector<8xbf16> loc(#loc)
    %1251 = llvm.extractelement %1238[%63 : i32] : vector<8xbf16> loc(#loc)
    %1252 = llvm.insertelement %1251, %1250[%63 : i32] : vector<8xbf16> loc(#loc)
    %1253 = llvm.extractelement %1238[%50 : i32] : vector<8xbf16> loc(#loc)
    %1254 = llvm.insertelement %1253, %1252[%50 : i32] : vector<8xbf16> loc(#loc)
    %1255 = llvm.insertelement %1111, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %1256 = llvm.insertelement %1112, %1255[%53 : i32] : vector<8xbf16> loc(#loc)
    %1257 = llvm.insertelement %1113, %1256[%52 : i32] : vector<8xbf16> loc(#loc)
    %1258 = llvm.insertelement %1114, %1257[%57 : i32] : vector<8xbf16> loc(#loc)
    %1259 = llvm.insertelement %1115, %1258[%51 : i32] : vector<8xbf16> loc(#loc)
    %1260 = llvm.insertelement %1116, %1259[%61 : i32] : vector<8xbf16> loc(#loc)
    %1261 = llvm.insertelement %1117, %1260[%63 : i32] : vector<8xbf16> loc(#loc)
    %1262 = llvm.insertelement %1118, %1261[%50 : i32] : vector<8xbf16> loc(#loc)
    %1263 = llvm.extractelement %1262[%64 : i32] : vector<8xbf16> loc(#loc)
    %1264 = llvm.insertelement %1263, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %1265 = llvm.extractelement %1262[%53 : i32] : vector<8xbf16> loc(#loc)
    %1266 = llvm.insertelement %1265, %1264[%53 : i32] : vector<8xbf16> loc(#loc)
    %1267 = llvm.extractelement %1262[%52 : i32] : vector<8xbf16> loc(#loc)
    %1268 = llvm.insertelement %1267, %1266[%52 : i32] : vector<8xbf16> loc(#loc)
    %1269 = llvm.extractelement %1262[%57 : i32] : vector<8xbf16> loc(#loc)
    %1270 = llvm.insertelement %1269, %1268[%57 : i32] : vector<8xbf16> loc(#loc)
    %1271 = llvm.extractelement %1262[%51 : i32] : vector<8xbf16> loc(#loc)
    %1272 = llvm.insertelement %1271, %1270[%51 : i32] : vector<8xbf16> loc(#loc)
    %1273 = llvm.extractelement %1262[%61 : i32] : vector<8xbf16> loc(#loc)
    %1274 = llvm.insertelement %1273, %1272[%61 : i32] : vector<8xbf16> loc(#loc)
    %1275 = llvm.extractelement %1262[%63 : i32] : vector<8xbf16> loc(#loc)
    %1276 = llvm.insertelement %1275, %1274[%63 : i32] : vector<8xbf16> loc(#loc)
    %1277 = llvm.extractelement %1262[%50 : i32] : vector<8xbf16> loc(#loc)
    %1278 = llvm.insertelement %1277, %1276[%50 : i32] : vector<8xbf16> loc(#loc)
    %1279 = llvm.insertelement %1119, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %1280 = llvm.insertelement %1120, %1279[%53 : i32] : vector<8xbf16> loc(#loc)
    %1281 = llvm.insertelement %1121, %1280[%52 : i32] : vector<8xbf16> loc(#loc)
    %1282 = llvm.insertelement %1122, %1281[%57 : i32] : vector<8xbf16> loc(#loc)
    %1283 = llvm.insertelement %1123, %1282[%51 : i32] : vector<8xbf16> loc(#loc)
    %1284 = llvm.insertelement %1124, %1283[%61 : i32] : vector<8xbf16> loc(#loc)
    %1285 = llvm.insertelement %1125, %1284[%63 : i32] : vector<8xbf16> loc(#loc)
    %1286 = llvm.insertelement %1126, %1285[%50 : i32] : vector<8xbf16> loc(#loc)
    %1287 = llvm.extractelement %1286[%64 : i32] : vector<8xbf16> loc(#loc)
    %1288 = llvm.insertelement %1287, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %1289 = llvm.extractelement %1286[%53 : i32] : vector<8xbf16> loc(#loc)
    %1290 = llvm.insertelement %1289, %1288[%53 : i32] : vector<8xbf16> loc(#loc)
    %1291 = llvm.extractelement %1286[%52 : i32] : vector<8xbf16> loc(#loc)
    %1292 = llvm.insertelement %1291, %1290[%52 : i32] : vector<8xbf16> loc(#loc)
    %1293 = llvm.extractelement %1286[%57 : i32] : vector<8xbf16> loc(#loc)
    %1294 = llvm.insertelement %1293, %1292[%57 : i32] : vector<8xbf16> loc(#loc)
    %1295 = llvm.extractelement %1286[%51 : i32] : vector<8xbf16> loc(#loc)
    %1296 = llvm.insertelement %1295, %1294[%51 : i32] : vector<8xbf16> loc(#loc)
    %1297 = llvm.extractelement %1286[%61 : i32] : vector<8xbf16> loc(#loc)
    %1298 = llvm.insertelement %1297, %1296[%61 : i32] : vector<8xbf16> loc(#loc)
    %1299 = llvm.extractelement %1286[%63 : i32] : vector<8xbf16> loc(#loc)
    %1300 = llvm.insertelement %1299, %1298[%63 : i32] : vector<8xbf16> loc(#loc)
    %1301 = llvm.extractelement %1286[%50 : i32] : vector<8xbf16> loc(#loc)
    %1302 = llvm.insertelement %1301, %1300[%50 : i32] : vector<8xbf16> loc(#loc)
    %1303 = llvm.insertelement %1127, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %1304 = llvm.insertelement %1128, %1303[%53 : i32] : vector<8xbf16> loc(#loc)
    %1305 = llvm.insertelement %1129, %1304[%52 : i32] : vector<8xbf16> loc(#loc)
    %1306 = llvm.insertelement %1130, %1305[%57 : i32] : vector<8xbf16> loc(#loc)
    %1307 = llvm.insertelement %1131, %1306[%51 : i32] : vector<8xbf16> loc(#loc)
    %1308 = llvm.insertelement %1132, %1307[%61 : i32] : vector<8xbf16> loc(#loc)
    %1309 = llvm.insertelement %1133, %1308[%63 : i32] : vector<8xbf16> loc(#loc)
    %1310 = llvm.insertelement %1134, %1309[%50 : i32] : vector<8xbf16> loc(#loc)
    %1311 = llvm.extractelement %1310[%64 : i32] : vector<8xbf16> loc(#loc)
    %1312 = llvm.insertelement %1311, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %1313 = llvm.extractelement %1310[%53 : i32] : vector<8xbf16> loc(#loc)
    %1314 = llvm.insertelement %1313, %1312[%53 : i32] : vector<8xbf16> loc(#loc)
    %1315 = llvm.extractelement %1310[%52 : i32] : vector<8xbf16> loc(#loc)
    %1316 = llvm.insertelement %1315, %1314[%52 : i32] : vector<8xbf16> loc(#loc)
    %1317 = llvm.extractelement %1310[%57 : i32] : vector<8xbf16> loc(#loc)
    %1318 = llvm.insertelement %1317, %1316[%57 : i32] : vector<8xbf16> loc(#loc)
    %1319 = llvm.extractelement %1310[%51 : i32] : vector<8xbf16> loc(#loc)
    %1320 = llvm.insertelement %1319, %1318[%51 : i32] : vector<8xbf16> loc(#loc)
    %1321 = llvm.extractelement %1310[%61 : i32] : vector<8xbf16> loc(#loc)
    %1322 = llvm.insertelement %1321, %1320[%61 : i32] : vector<8xbf16> loc(#loc)
    %1323 = llvm.extractelement %1310[%63 : i32] : vector<8xbf16> loc(#loc)
    %1324 = llvm.insertelement %1323, %1322[%63 : i32] : vector<8xbf16> loc(#loc)
    %1325 = llvm.extractelement %1310[%50 : i32] : vector<8xbf16> loc(#loc)
    %1326 = llvm.insertelement %1325, %1324[%50 : i32] : vector<8xbf16> loc(#loc)
    %1327 = llvm.insertelement %68, %2[%64 : i32] : vector<4xf32> loc(#loc)
    %1328 = llvm.insertelement %68, %1327[%53 : i32] : vector<4xf32> loc(#loc)
    %1329 = llvm.insertelement %68, %1328[%52 : i32] : vector<4xf32> loc(#loc)
    %1330 = llvm.insertelement %68, %1329[%57 : i32] : vector<4xf32> loc(#loc)
    %1331 = rocdl.mfma.f32.16x16x32.bf16 %1254, %1158, %1330, %64, %64, %64 : (vector<8xbf16>, vector<8xbf16>, vector<4xf32>, i32, i32, i32) -> vector<4xf32> loc(#loc)
    %1332 = rocdl.mfma.f32.16x16x32.bf16 %1278, %1182, %1331, %64, %64, %64 : (vector<8xbf16>, vector<8xbf16>, vector<4xf32>, i32, i32, i32) -> vector<4xf32> loc(#loc)
    %1333 = rocdl.mfma.f32.16x16x32.bf16 %1302, %1206, %1332, %64, %64, %64 : (vector<8xbf16>, vector<8xbf16>, vector<4xf32>, i32, i32, i32) -> vector<4xf32> loc(#loc)
    %1334 = rocdl.mfma.f32.16x16x32.bf16 %1326, %1230, %1333, %64, %64, %64 : (vector<8xbf16>, vector<8xbf16>, vector<4xf32>, i32, i32, i32) -> vector<4xf32> loc(#loc)
    %1335 = llvm.extractelement %1334[%64 : i32] : vector<4xf32> loc(#loc)
    %1336 = llvm.extractelement %1334[%53 : i32] : vector<4xf32> loc(#loc)
    %1337 = llvm.extractelement %1334[%52 : i32] : vector<4xf32> loc(#loc)
    %1338 = llvm.extractelement %1334[%57 : i32] : vector<4xf32> loc(#loc)
    %1339 = llvm.fadd %1007, %1335 : f32 loc(#loc)
    %1340 = llvm.fadd %1008, %1336 : f32 loc(#loc)
    %1341 = llvm.fadd %1009, %1337 : f32 loc(#loc)
    %1342 = llvm.fadd %1010, %1338 : f32 loc(#loc)
    %1343 = llvm.mul %125, %73 : i32 loc(#loc)
    %1344 = llvm.add %189, %1343 : i32 loc(#loc)
    %1345 = llvm.insertelement %1339, %1[%64 : i32] : vector<2xf32> loc(#loc)
    %1346 = llvm.insertelement %1340, %1345[%53 : i32] : vector<2xf32> loc(#loc)
    %1347 = llvm.fptrunc %1346 : vector<2xf32> to vector<2xbf16> loc(#loc)
    %1348 = llvm.extractelement %1347[%64 : i32] : vector<2xbf16> loc(#loc)
    %1349 = llvm.extractelement %1347[%53 : i32] : vector<2xbf16> loc(#loc)
    %1350 = llvm.insertelement %1341, %1[%64 : i32] : vector<2xf32> loc(#loc)
    %1351 = llvm.insertelement %1342, %1350[%53 : i32] : vector<2xf32> loc(#loc)
    %1352 = llvm.fptrunc %1351 : vector<2xf32> to vector<2xbf16> loc(#loc)
    %1353 = llvm.extractelement %1352[%64 : i32] : vector<2xbf16> loc(#loc)
    %1354 = llvm.extractelement %1352[%53 : i32] : vector<2xbf16> loc(#loc)
    %1355 = rocdl.make.buffer.rsrc %out, %11, %9, %10 : <1> to <8> loc(#loc)
    %1356 = llvm.insertelement %1348, %0[%64 : i32] : vector<4xbf16> loc(#loc)
    %1357 = llvm.insertelement %1349, %1356[%53 : i32] : vector<4xbf16> loc(#loc)
    %1358 = llvm.insertelement %1353, %1357[%52 : i32] : vector<4xbf16> loc(#loc)
    %1359 = llvm.insertelement %1354, %1358[%57 : i32] : vector<4xbf16> loc(#loc)
    %1360 = llvm.bitcast %1359 : vector<4xbf16> to vector<2xi32> loc(#loc)
    %1361 = llvm.mul %1344, %52 : i32 loc(#loc)
    %1362 = llvm.select %46, %1361, %7 : i1, i32 loc(#loc)
    rocdl.raw.ptr.buffer.store %1360, %1355, %1362, %64, %64 : vector<2xi32> loc(#loc)
    llvm.return loc(#loc)
  } loc(#loc)
} loc(#loc)


// -----// IR Dump Before ConvertControlFlowToLLVMPass (convert-cf-to-llvm) ('builtin.module' operation) //----- //
#loc = loc(unknown)
#loc1 = loc("a_base")
#loc2 = loc("stride_a0")
#loc3 = loc("b_base")
#loc4 = loc("stride_b1")
#loc5 = loc("b_scale")
#loc6 = loc("out")
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.shared = 16384 : i32, ttg.target = "hip:gfx950", "ttg.threads-per-warp" = 64 : i32} {
  llvm.mlir.global external @global_smem() {addr_space = 3 : i32, alignment = 16 : i64} : !llvm.array<0 x i8> loc(#loc)
  llvm.func @"__triton_hip_predicated_load_vector<8xbf16>_!llvm.ptr<1>_i1_vector<8xbf16>_"(!llvm.ptr<1>, i1, vector<8xbf16>) -> vector<8xbf16> attributes {libname = "", libpath = ""} loc(#loc)
  llvm.func @"__triton_hip_predicated_store_!llvm.void_!llvm.ptr<3>_vector<8xbf16>_i1_"(!llvm.ptr<3>, vector<8xbf16>, i1) attributes {libname = "", libpath = ""} loc(#loc)
  llvm.func @"__triton_hip_predicated_load_vector<8xbf16>_!llvm.ptr<3>_i1_vector<8xbf16>_"(!llvm.ptr<3>, i1, vector<8xbf16>) -> vector<8xbf16> attributes {libname = "", libpath = ""} loc(#loc)
  llvm.func @"__triton_hip_predicated_load_vector<16xi8>_!llvm.ptr<1>_i1_vector<16xi8>_"(!llvm.ptr<1>, i1, vector<16xi8>) -> vector<16xi8> attributes {libname = "", libpath = ""} loc(#loc)
  llvm.func @"__triton_hip_predicated_store_!llvm.void_!llvm.ptr<3>_vector<4xi8>_i1_"(!llvm.ptr<3>, vector<4xi8>, i1) attributes {libname = "", libpath = ""} loc(#loc)
  llvm.func @"__triton_hip_predicated_load_vector<4xi8>_!llvm.ptr<3>_i1_vector<4xi8>_"(!llvm.ptr<3>, i1, vector<4xi8>) -> vector<4xi8> attributes {libname = "", libpath = ""} loc(#loc)
  llvm.func @"__triton_hip_predicated_store_!llvm.void_!llvm.ptr<3>_vector<1xi8>_i1_"(!llvm.ptr<3>, vector<1xi8>, i1) attributes {libname = "", libpath = ""} loc(#loc)
  llvm.func @"__triton_hip_predicated_load_vector<1xi8>_!llvm.ptr<3>_i1_vector<1xi8>_"(!llvm.ptr<3>, i1, vector<1xi8>) -> vector<1xi8> attributes {libname = "", libpath = ""} loc(#loc)
  llvm.func @dot_scale_kernel(%a_base: !llvm.ptr<1> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("a_base"), %stride_a0: i32 {tt.divisibility = 16 : i32} loc("stride_a0"), %b_base: !llvm.ptr<1> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("b_base"), %stride_b1: i32 {tt.divisibility = 16 : i32} loc("stride_b1"), %b_scale: !llvm.ptr<1> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("b_scale"), %out: !llvm.ptr<1> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("out"), %arg6: !llvm.ptr<1> loc(unknown), %arg7: !llvm.ptr<1> loc(unknown)) attributes {noinline = false, nvvm.kernel = 1 : ui1, nvvm.reqntid = array<i32: 128>} {
    %0 = llvm.mlir.undef : vector<4xbf16> loc(#loc)
    %1 = llvm.mlir.undef : vector<2xf32> loc(#loc)
    %2 = llvm.mlir.undef : vector<4xf32> loc(#loc)
    %3 = llvm.mlir.constant(28 : i32) : i32 loc(#loc)
    %4 = llvm.mlir.constant(20 : i32) : i32 loc(#loc)
    %5 = llvm.mlir.undef : vector<1xi8> loc(#loc)
    %6 = llvm.mlir.constant(63 : i32) : i32 loc(#loc)
    %7 = llvm.mlir.constant(-2147483648 : i32) : i32 loc(#loc)
    %8 = llvm.mlir.constant(dense<0> : vector<1xi8>) : vector<1xi8> loc(#loc)
    %9 = llvm.mlir.constant(2147483646 : i32) : i32 loc(#loc)
    %10 = llvm.mlir.constant(159744 : i32) : i32 loc(#loc)
    %11 = llvm.mlir.constant(0 : i16) : i16 loc(#loc)
    %12 = llvm.mlir.constant(580 : i32) : i32 loc(#loc)
    %13 = llvm.mlir.constant(dense<0> : vector<4xi8>) : vector<4xi8> loc(#loc)
    %14 = llvm.mlir.constant(260 : i32) : i32 loc(#loc)
    %15 = llvm.mlir.constant(2048 : i32) : i32 loc(#loc)
    %16 = llvm.mlir.undef : vector<4xi8> loc(#loc)
    %17 = llvm.mlir.constant(576 : i32) : i32 loc(#loc)
    %18 = llvm.mlir.constant(1024 : i32) : i32 loc(#loc)
    %19 = llvm.mlir.constant(15 : index) : i32 loc(#loc)
    %20 = llvm.mlir.constant(14 : index) : i32 loc(#loc)
    %21 = llvm.mlir.constant(13 : index) : i32 loc(#loc)
    %22 = llvm.mlir.constant(12 : index) : i32 loc(#loc)
    %23 = llvm.mlir.constant(11 : index) : i32 loc(#loc)
    %24 = llvm.mlir.constant(10 : index) : i32 loc(#loc)
    %25 = llvm.mlir.constant(9 : index) : i32 loc(#loc)
    %26 = llvm.mlir.constant(8 : index) : i32 loc(#loc)
    %27 = llvm.mlir.constant(dense<0> : vector<16xi8>) : vector<16xi8> loc(#loc)
    %28 = llvm.mlir.constant(96 : i32) : i32 loc(#loc)
    %29 = llvm.mlir.constant(30 : i32) : i32 loc(#loc)
    %30 = llvm.mlir.constant(2112 : i32) : i32 loc(#loc)
    %31 = llvm.mlir.undef : vector<8xbf16> loc(#loc)
    %32 = llvm.mlir.constant(8192 : i32) : i32 loc(#loc)
    %33 = llvm.mlir.constant(256 : i32) : i32 loc(#loc)
    %34 = llvm.mlir.constant(4096 : i32) : i32 loc(#loc)
    %35 = llvm.mlir.constant(192 : i32) : i32 loc(#loc)
    %36 = llvm.mlir.constant(206 : i32) : i32 loc(#loc)
    %37 = llvm.mlir.addressof @global_smem : !llvm.ptr<3> loc(#loc)
    %38 = llvm.mlir.constant(7 : index) : i32 loc(#loc)
    %39 = llvm.mlir.constant(6 : index) : i32 loc(#loc)
    %40 = llvm.mlir.constant(5 : index) : i32 loc(#loc)
    %41 = llvm.mlir.constant(4 : index) : i32 loc(#loc)
    %42 = llvm.mlir.constant(3 : index) : i32 loc(#loc)
    %43 = llvm.mlir.constant(2 : index) : i32 loc(#loc)
    %44 = llvm.mlir.constant(1 : index) : i32 loc(#loc)
    %45 = llvm.mlir.constant(dense<0.000000e+00> : vector<8xbf16>) : vector<8xbf16> loc(#loc)
    %46 = llvm.mlir.constant(true) : i1 loc(#loc)
    %47 = llvm.mlir.constant(112 : i32) : i32 loc(#loc)
    %48 = llvm.mlir.constant(14 : i32) : i32 loc(#loc)
    %49 = llvm.mlir.constant(12 : i32) : i32 loc(#loc)
    %50 = llvm.mlir.constant(7 : i32) : i32 loc(#loc)
    %51 = llvm.mlir.constant(4 : i32) : i32 loc(#loc)
    %52 = llvm.mlir.constant(2 : i32) : i32 loc(#loc)
    %53 = llvm.mlir.constant(1 : i32) : i32 loc(#loc)
    %54 = llvm.mlir.constant(31 : i32) : i32 loc(#loc)
    %55 = llvm.mlir.constant(128 : i32) : i32 loc(#loc)
    %56 = llvm.mlir.constant(15 : i32) : i32 loc(#loc)
    %57 = llvm.mlir.constant(3 : i32) : i32 loc(#loc)
    %58 = llvm.mlir.constant(248 : i32) : i32 loc(#loc)
    %59 = llvm.mlir.constant(24 : i32) : i32 loc(#loc)
    %60 = llvm.mlir.constant(16 : i32) : i32 loc(#loc)
    %61 = llvm.mlir.constant(5 : i32) : i32 loc(#loc)
    %62 = llvm.mlir.constant(224 : i32) : i32 loc(#loc)
    %63 = llvm.mlir.constant(6 : i32) : i32 loc(#loc)
    %64 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %65 = llvm.mlir.constant(64 : i32) : i32 loc(#loc)
    %66 = llvm.mlir.constant(255 : i32) : i32 loc(#loc)
    %67 = llvm.mlir.constant(0 : index) : i32 loc(#loc)
    %68 = llvm.mlir.constant(0.000000e+00 : f32) : f32 loc(#loc)
    %69 = llvm.mlir.constant(0x7FC0 : bf16) : bf16 loc(#loc)
    %70 = llvm.mlir.constant(-1 : i8) : i8 loc(#loc)
    %71 = llvm.mlir.constant(7 : i16) : i16 loc(#loc)
    %72 = llvm.mlir.constant(8 : i32) : i32 loc(#loc)
    %73 = llvm.mlir.constant(32 : i32) : i32 loc(#loc)
    %74 = rocdl.workitem.id.x : i32 loc(#loc)
    %75 = llvm.and %74, %66 : i32 loc(#loc)
    %76 = llvm.urem %75, %65 : i32 loc(#loc)
    %77 = llvm.udiv %75, %65 : i32 loc(#loc)
    %78 = llvm.shl %76, %64 : i32 loc(#loc)
    %79 = llvm.or %64, %78 : i32 loc(#loc)
    %80 = llvm.shl %77, %63 : i32 loc(#loc)
    %81 = llvm.or %79, %80 : i32 loc(#loc)
    %82 = llvm.and %81, %62 : i32 loc(#loc)
    %83 = llvm.lshr %82, %61 : i32 loc(#loc)
    %84 = llvm.xor %64, %83 : i32 loc(#loc)
    %85 = llvm.xor %64, %84 : i32 loc(#loc)
    %86 = llvm.xor %85, %64 : i32 loc(#loc)
    %87 = llvm.xor %85, %72 : i32 loc(#loc)
    %88 = llvm.xor %85, %60 : i32 loc(#loc)
    %89 = llvm.xor %85, %59 : i32 loc(#loc)
    %90 = llvm.add %86, %67 : i32 loc(#loc)
    %91 = llvm.add %87, %67 : i32 loc(#loc)
    %92 = llvm.add %88, %67 : i32 loc(#loc)
    %93 = llvm.add %89, %67 : i32 loc(#loc)
    %94 = llvm.and %81, %58 : i32 loc(#loc)
    %95 = llvm.lshr %94, %57 : i32 loc(#loc)
    %96 = llvm.xor %64, %95 : i32 loc(#loc)
    %97 = llvm.xor %64, %96 : i32 loc(#loc)
    %98 = llvm.xor %97, %64 : i32 loc(#loc)
    %99 = llvm.add %98, %67 : i32 loc(#loc)
    %100 = llvm.and %81, %56 : i32 loc(#loc)
    %101 = llvm.lshr %100, %64 : i32 loc(#loc)
    %102 = llvm.xor %64, %101 : i32 loc(#loc)
    %103 = llvm.and %81, %55 : i32 loc(#loc)
    %104 = llvm.icmp "eq" %103, %64 : i32 loc(#loc)
    %105 = llvm.select %104, %64, %60 : i1, i32 loc(#loc)
    %106 = llvm.xor %102, %105 : i32 loc(#loc)
    %107 = llvm.xor %64, %106 : i32 loc(#loc)
    %108 = llvm.xor %107, %64 : i32 loc(#loc)
    %109 = llvm.add %108, %67 : i32 loc(#loc)
    %110 = llvm.mul %90, %stride_a0 : i32 loc(#loc)
    %111 = llvm.mul %91, %stride_a0 : i32 loc(#loc)
    %112 = llvm.mul %92, %stride_a0 : i32 loc(#loc)
    %113 = llvm.mul %93, %stride_a0 : i32 loc(#loc)
    %114 = llvm.and %81, %54 : i32 loc(#loc)
    %115 = llvm.shl %114, %57 : i32 loc(#loc)
    %116 = llvm.xor %64, %115 : i32 loc(#loc)
    %117 = llvm.xor %64, %116 : i32 loc(#loc)
    %118 = llvm.xor %117, %64 : i32 loc(#loc)
    %119 = llvm.add %118, %67 : i32 loc(#loc)
    %120 = llvm.add %119, %110 : i32 loc(#loc)
    %121 = llvm.add %119, %111 : i32 loc(#loc)
    %122 = llvm.add %119, %112 : i32 loc(#loc)
    %123 = llvm.add %119, %113 : i32 loc(#loc)
    %124 = llvm.and %81, %50 : i32 loc(#loc)
    %125 = llvm.shl %124, %51 : i32 loc(#loc)
    %126 = llvm.xor %64, %125 : i32 loc(#loc)
    %127 = llvm.xor %64, %126 : i32 loc(#loc)
    %128 = llvm.xor %127, %64 : i32 loc(#loc)
    %129 = llvm.add %128, %67 : i32 loc(#loc)
    %130 = llvm.and %81, %47 : i32 loc(#loc)
    %131 = llvm.lshr %130, %52 : i32 loc(#loc)
    %132 = llvm.xor %64, %131 : i32 loc(#loc)
    %133 = llvm.xor %64, %132 : i32 loc(#loc)
    %134 = llvm.xor %133, %64 : i32 loc(#loc)
    %135 = llvm.add %134, %67 : i32 loc(#loc)
    %136 = llvm.mul %99, %stride_b1 : i32 loc(#loc)
    %137 = llvm.add %136, %129 : i32 loc(#loc)
    %138 = llvm.getelementptr %a_base[%120] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc)
    %139 = llvm.getelementptr %a_base[%121] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc)
    %140 = llvm.getelementptr %a_base[%122] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc)
    %141 = llvm.getelementptr %a_base[%123] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc)
    %142 = llvm.call @"__triton_hip_predicated_load_vector<8xbf16>_!llvm.ptr<1>_i1_vector<8xbf16>_"(%138, %46, %45) : (!llvm.ptr<1>, i1, vector<8xbf16>) -> vector<8xbf16> loc(#loc)
    %143 = llvm.extractelement %142[%67 : i32] : vector<8xbf16> loc(#loc)
    %144 = llvm.extractelement %142[%44 : i32] : vector<8xbf16> loc(#loc)
    %145 = llvm.extractelement %142[%43 : i32] : vector<8xbf16> loc(#loc)
    %146 = llvm.extractelement %142[%42 : i32] : vector<8xbf16> loc(#loc)
    %147 = llvm.extractelement %142[%41 : i32] : vector<8xbf16> loc(#loc)
    %148 = llvm.extractelement %142[%40 : i32] : vector<8xbf16> loc(#loc)
    %149 = llvm.extractelement %142[%39 : i32] : vector<8xbf16> loc(#loc)
    %150 = llvm.extractelement %142[%38 : i32] : vector<8xbf16> loc(#loc)
    %151 = llvm.call @"__triton_hip_predicated_load_vector<8xbf16>_!llvm.ptr<1>_i1_vector<8xbf16>_"(%139, %46, %45) : (!llvm.ptr<1>, i1, vector<8xbf16>) -> vector<8xbf16> loc(#loc)
    %152 = llvm.extractelement %151[%67 : i32] : vector<8xbf16> loc(#loc)
    %153 = llvm.extractelement %151[%44 : i32] : vector<8xbf16> loc(#loc)
    %154 = llvm.extractelement %151[%43 : i32] : vector<8xbf16> loc(#loc)
    %155 = llvm.extractelement %151[%42 : i32] : vector<8xbf16> loc(#loc)
    %156 = llvm.extractelement %151[%41 : i32] : vector<8xbf16> loc(#loc)
    %157 = llvm.extractelement %151[%40 : i32] : vector<8xbf16> loc(#loc)
    %158 = llvm.extractelement %151[%39 : i32] : vector<8xbf16> loc(#loc)
    %159 = llvm.extractelement %151[%38 : i32] : vector<8xbf16> loc(#loc)
    %160 = llvm.call @"__triton_hip_predicated_load_vector<8xbf16>_!llvm.ptr<1>_i1_vector<8xbf16>_"(%140, %46, %45) : (!llvm.ptr<1>, i1, vector<8xbf16>) -> vector<8xbf16> loc(#loc)
    %161 = llvm.extractelement %160[%67 : i32] : vector<8xbf16> loc(#loc)
    %162 = llvm.extractelement %160[%44 : i32] : vector<8xbf16> loc(#loc)
    %163 = llvm.extractelement %160[%43 : i32] : vector<8xbf16> loc(#loc)
    %164 = llvm.extractelement %160[%42 : i32] : vector<8xbf16> loc(#loc)
    %165 = llvm.extractelement %160[%41 : i32] : vector<8xbf16> loc(#loc)
    %166 = llvm.extractelement %160[%40 : i32] : vector<8xbf16> loc(#loc)
    %167 = llvm.extractelement %160[%39 : i32] : vector<8xbf16> loc(#loc)
    %168 = llvm.extractelement %160[%38 : i32] : vector<8xbf16> loc(#loc)
    %169 = llvm.call @"__triton_hip_predicated_load_vector<8xbf16>_!llvm.ptr<1>_i1_vector<8xbf16>_"(%141, %46, %45) : (!llvm.ptr<1>, i1, vector<8xbf16>) -> vector<8xbf16> loc(#loc)
    %170 = llvm.extractelement %169[%67 : i32] : vector<8xbf16> loc(#loc)
    %171 = llvm.extractelement %169[%44 : i32] : vector<8xbf16> loc(#loc)
    %172 = llvm.extractelement %169[%43 : i32] : vector<8xbf16> loc(#loc)
    %173 = llvm.extractelement %169[%42 : i32] : vector<8xbf16> loc(#loc)
    %174 = llvm.extractelement %169[%41 : i32] : vector<8xbf16> loc(#loc)
    %175 = llvm.extractelement %169[%40 : i32] : vector<8xbf16> loc(#loc)
    %176 = llvm.extractelement %169[%39 : i32] : vector<8xbf16> loc(#loc)
    %177 = llvm.extractelement %169[%38 : i32] : vector<8xbf16> loc(#loc)
    %178 = llvm.and %81, %36 : i32 loc(#loc)
    %179 = llvm.shl %178, %57 : i32 loc(#loc)
    %180 = llvm.xor %64, %179 : i32 loc(#loc)
    %181 = llvm.and %81, %35 : i32 loc(#loc)
    %182 = llvm.lshr %181, %52 : i32 loc(#loc)
    %183 = llvm.xor %180, %182 : i32 loc(#loc)
    %184 = llvm.and %81, %53 : i32 loc(#loc)
    %185 = llvm.icmp "eq" %184, %64 : i32 loc(#loc)
    %186 = llvm.select %185, %64, %34 : i1, i32 loc(#loc)
    %187 = llvm.xor %183, %186 : i32 loc(#loc)
    %188 = llvm.and %81, %60 : i32 loc(#loc)
    %189 = llvm.icmp "eq" %188, %64 : i32 loc(#loc)
    %190 = llvm.select %189, %64, %33 : i1, i32 loc(#loc)
    %191 = llvm.xor %187, %190 : i32 loc(#loc)
    %192 = llvm.and %81, %73 : i32 loc(#loc)
    %193 = llvm.icmp "eq" %192, %64 : i32 loc(#loc)
    %194 = llvm.select %193, %64, %32 : i1, i32 loc(#loc)
    %195 = llvm.xor %191, %194 : i32 loc(#loc)
    %196 = llvm.xor %64, %195 : i32 loc(#loc)
    %197 = llvm.mul %64, %52 : i32 loc(#loc)
    %198 = llvm.xor %196, %197 : i32 loc(#loc)
    %199 = llvm.xor %198, %64 : i32 loc(#loc)
    %200 = llvm.add %199, %64 : i32 loc(#loc)
    %201 = llvm.getelementptr inbounds %37[%200] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %202 = llvm.insertelement %143, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %203 = llvm.insertelement %144, %202[%53 : i32] : vector<8xbf16> loc(#loc)
    %204 = llvm.insertelement %145, %203[%52 : i32] : vector<8xbf16> loc(#loc)
    %205 = llvm.insertelement %146, %204[%57 : i32] : vector<8xbf16> loc(#loc)
    %206 = llvm.insertelement %147, %205[%51 : i32] : vector<8xbf16> loc(#loc)
    %207 = llvm.insertelement %148, %206[%61 : i32] : vector<8xbf16> loc(#loc)
    %208 = llvm.insertelement %149, %207[%63 : i32] : vector<8xbf16> loc(#loc)
    %209 = llvm.insertelement %150, %208[%50 : i32] : vector<8xbf16> loc(#loc)
    llvm.call @"__triton_hip_predicated_store_!llvm.void_!llvm.ptr<3>_vector<8xbf16>_i1_"(%201, %209, %46) : (!llvm.ptr<3>, vector<8xbf16>, i1) -> () loc(#loc)
    %210 = llvm.add %199, %55 : i32 loc(#loc)
    %211 = llvm.getelementptr inbounds %37[%210] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %212 = llvm.insertelement %161, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %213 = llvm.insertelement %162, %212[%53 : i32] : vector<8xbf16> loc(#loc)
    %214 = llvm.insertelement %163, %213[%52 : i32] : vector<8xbf16> loc(#loc)
    %215 = llvm.insertelement %164, %214[%57 : i32] : vector<8xbf16> loc(#loc)
    %216 = llvm.insertelement %165, %215[%51 : i32] : vector<8xbf16> loc(#loc)
    %217 = llvm.insertelement %166, %216[%61 : i32] : vector<8xbf16> loc(#loc)
    %218 = llvm.insertelement %167, %217[%63 : i32] : vector<8xbf16> loc(#loc)
    %219 = llvm.insertelement %168, %218[%50 : i32] : vector<8xbf16> loc(#loc)
    llvm.call @"__triton_hip_predicated_store_!llvm.void_!llvm.ptr<3>_vector<8xbf16>_i1_"(%211, %219, %46) : (!llvm.ptr<3>, vector<8xbf16>, i1) -> () loc(#loc)
    %220 = llvm.xor %198, %30 : i32 loc(#loc)
    %221 = llvm.add %220, %64 : i32 loc(#loc)
    %222 = llvm.getelementptr inbounds %37[%221] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %223 = llvm.insertelement %152, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %224 = llvm.insertelement %153, %223[%53 : i32] : vector<8xbf16> loc(#loc)
    %225 = llvm.insertelement %154, %224[%52 : i32] : vector<8xbf16> loc(#loc)
    %226 = llvm.insertelement %155, %225[%57 : i32] : vector<8xbf16> loc(#loc)
    %227 = llvm.insertelement %156, %226[%51 : i32] : vector<8xbf16> loc(#loc)
    %228 = llvm.insertelement %157, %227[%61 : i32] : vector<8xbf16> loc(#loc)
    %229 = llvm.insertelement %158, %228[%63 : i32] : vector<8xbf16> loc(#loc)
    %230 = llvm.insertelement %159, %229[%50 : i32] : vector<8xbf16> loc(#loc)
    llvm.call @"__triton_hip_predicated_store_!llvm.void_!llvm.ptr<3>_vector<8xbf16>_i1_"(%222, %230, %46) : (!llvm.ptr<3>, vector<8xbf16>, i1) -> () loc(#loc)
    %231 = llvm.add %220, %55 : i32 loc(#loc)
    %232 = llvm.getelementptr inbounds %37[%231] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %233 = llvm.insertelement %170, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %234 = llvm.insertelement %171, %233[%53 : i32] : vector<8xbf16> loc(#loc)
    %235 = llvm.insertelement %172, %234[%52 : i32] : vector<8xbf16> loc(#loc)
    %236 = llvm.insertelement %173, %235[%57 : i32] : vector<8xbf16> loc(#loc)
    %237 = llvm.insertelement %174, %236[%51 : i32] : vector<8xbf16> loc(#loc)
    %238 = llvm.insertelement %175, %237[%61 : i32] : vector<8xbf16> loc(#loc)
    %239 = llvm.insertelement %176, %238[%63 : i32] : vector<8xbf16> loc(#loc)
    %240 = llvm.insertelement %177, %239[%50 : i32] : vector<8xbf16> loc(#loc)
    llvm.call @"__triton_hip_predicated_store_!llvm.void_!llvm.ptr<3>_vector<8xbf16>_i1_"(%232, %240, %46) : (!llvm.ptr<3>, vector<8xbf16>, i1) -> () loc(#loc)
    rocdl.barrier loc(#loc)
    %241 = llvm.and %81, %29 : i32 loc(#loc)
    %242 = llvm.shl %241, %72 : i32 loc(#loc)
    %243 = llvm.xor %64, %242 : i32 loc(#loc)
    %244 = llvm.and %81, %48 : i32 loc(#loc)
    %245 = llvm.shl %244, %57 : i32 loc(#loc)
    %246 = llvm.xor %243, %245 : i32 loc(#loc)
    %247 = llvm.select %185, %64, %32 : i1, i32 loc(#loc)
    %248 = llvm.xor %246, %247 : i32 loc(#loc)
    %249 = llvm.select %193, %64, %60 : i1, i32 loc(#loc)
    %250 = llvm.xor %248, %249 : i32 loc(#loc)
    %251 = llvm.select %104, %64, %55 : i1, i32 loc(#loc)
    %252 = llvm.xor %250, %251 : i32 loc(#loc)
    %253 = llvm.xor %64, %252 : i32 loc(#loc)
    %254 = llvm.xor %253, %197 : i32 loc(#loc)
    %255 = llvm.xor %254, %64 : i32 loc(#loc)
    %256 = llvm.add %255, %64 : i32 loc(#loc)
    %257 = llvm.getelementptr inbounds %37[%256] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %258 = llvm.call @"__triton_hip_predicated_load_vector<8xbf16>_!llvm.ptr<3>_i1_vector<8xbf16>_"(%257, %46, %45) : (!llvm.ptr<3>, i1, vector<8xbf16>) -> vector<8xbf16> loc(#loc)
    %259 = llvm.extractelement %258[%64 : i32] : vector<8xbf16> loc(#loc)
    %260 = llvm.extractelement %258[%53 : i32] : vector<8xbf16> loc(#loc)
    %261 = llvm.extractelement %258[%52 : i32] : vector<8xbf16> loc(#loc)
    %262 = llvm.extractelement %258[%57 : i32] : vector<8xbf16> loc(#loc)
    %263 = llvm.extractelement %258[%51 : i32] : vector<8xbf16> loc(#loc)
    %264 = llvm.extractelement %258[%61 : i32] : vector<8xbf16> loc(#loc)
    %265 = llvm.extractelement %258[%63 : i32] : vector<8xbf16> loc(#loc)
    %266 = llvm.extractelement %258[%50 : i32] : vector<8xbf16> loc(#loc)
    %267 = llvm.add %255, %33 : i32 loc(#loc)
    %268 = llvm.getelementptr inbounds %37[%267] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %269 = llvm.call @"__triton_hip_predicated_load_vector<8xbf16>_!llvm.ptr<3>_i1_vector<8xbf16>_"(%268, %46, %45) : (!llvm.ptr<3>, i1, vector<8xbf16>) -> vector<8xbf16> loc(#loc)
    %270 = llvm.extractelement %269[%64 : i32] : vector<8xbf16> loc(#loc)
    %271 = llvm.extractelement %269[%53 : i32] : vector<8xbf16> loc(#loc)
    %272 = llvm.extractelement %269[%52 : i32] : vector<8xbf16> loc(#loc)
    %273 = llvm.extractelement %269[%57 : i32] : vector<8xbf16> loc(#loc)
    %274 = llvm.extractelement %269[%51 : i32] : vector<8xbf16> loc(#loc)
    %275 = llvm.extractelement %269[%61 : i32] : vector<8xbf16> loc(#loc)
    %276 = llvm.extractelement %269[%63 : i32] : vector<8xbf16> loc(#loc)
    %277 = llvm.extractelement %269[%50 : i32] : vector<8xbf16> loc(#loc)
    %278 = llvm.xor %254, %73 : i32 loc(#loc)
    %279 = llvm.add %278, %64 : i32 loc(#loc)
    %280 = llvm.getelementptr inbounds %37[%279] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %281 = llvm.call @"__triton_hip_predicated_load_vector<8xbf16>_!llvm.ptr<3>_i1_vector<8xbf16>_"(%280, %46, %45) : (!llvm.ptr<3>, i1, vector<8xbf16>) -> vector<8xbf16> loc(#loc)
    %282 = llvm.extractelement %281[%64 : i32] : vector<8xbf16> loc(#loc)
    %283 = llvm.extractelement %281[%53 : i32] : vector<8xbf16> loc(#loc)
    %284 = llvm.extractelement %281[%52 : i32] : vector<8xbf16> loc(#loc)
    %285 = llvm.extractelement %281[%57 : i32] : vector<8xbf16> loc(#loc)
    %286 = llvm.extractelement %281[%51 : i32] : vector<8xbf16> loc(#loc)
    %287 = llvm.extractelement %281[%61 : i32] : vector<8xbf16> loc(#loc)
    %288 = llvm.extractelement %281[%63 : i32] : vector<8xbf16> loc(#loc)
    %289 = llvm.extractelement %281[%50 : i32] : vector<8xbf16> loc(#loc)
    %290 = llvm.add %278, %33 : i32 loc(#loc)
    %291 = llvm.getelementptr inbounds %37[%290] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %292 = llvm.call @"__triton_hip_predicated_load_vector<8xbf16>_!llvm.ptr<3>_i1_vector<8xbf16>_"(%291, %46, %45) : (!llvm.ptr<3>, i1, vector<8xbf16>) -> vector<8xbf16> loc(#loc)
    %293 = llvm.extractelement %292[%64 : i32] : vector<8xbf16> loc(#loc)
    %294 = llvm.extractelement %292[%53 : i32] : vector<8xbf16> loc(#loc)
    %295 = llvm.extractelement %292[%52 : i32] : vector<8xbf16> loc(#loc)
    %296 = llvm.extractelement %292[%57 : i32] : vector<8xbf16> loc(#loc)
    %297 = llvm.extractelement %292[%51 : i32] : vector<8xbf16> loc(#loc)
    %298 = llvm.extractelement %292[%61 : i32] : vector<8xbf16> loc(#loc)
    %299 = llvm.extractelement %292[%63 : i32] : vector<8xbf16> loc(#loc)
    %300 = llvm.extractelement %292[%50 : i32] : vector<8xbf16> loc(#loc)
    %301 = llvm.xor %254, %65 : i32 loc(#loc)
    %302 = llvm.add %301, %64 : i32 loc(#loc)
    %303 = llvm.getelementptr inbounds %37[%302] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %304 = llvm.call @"__triton_hip_predicated_load_vector<8xbf16>_!llvm.ptr<3>_i1_vector<8xbf16>_"(%303, %46, %45) : (!llvm.ptr<3>, i1, vector<8xbf16>) -> vector<8xbf16> loc(#loc)
    %305 = llvm.extractelement %304[%64 : i32] : vector<8xbf16> loc(#loc)
    %306 = llvm.extractelement %304[%53 : i32] : vector<8xbf16> loc(#loc)
    %307 = llvm.extractelement %304[%52 : i32] : vector<8xbf16> loc(#loc)
    %308 = llvm.extractelement %304[%57 : i32] : vector<8xbf16> loc(#loc)
    %309 = llvm.extractelement %304[%51 : i32] : vector<8xbf16> loc(#loc)
    %310 = llvm.extractelement %304[%61 : i32] : vector<8xbf16> loc(#loc)
    %311 = llvm.extractelement %304[%63 : i32] : vector<8xbf16> loc(#loc)
    %312 = llvm.extractelement %304[%50 : i32] : vector<8xbf16> loc(#loc)
    %313 = llvm.add %301, %33 : i32 loc(#loc)
    %314 = llvm.getelementptr inbounds %37[%313] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %315 = llvm.call @"__triton_hip_predicated_load_vector<8xbf16>_!llvm.ptr<3>_i1_vector<8xbf16>_"(%314, %46, %45) : (!llvm.ptr<3>, i1, vector<8xbf16>) -> vector<8xbf16> loc(#loc)
    %316 = llvm.extractelement %315[%64 : i32] : vector<8xbf16> loc(#loc)
    %317 = llvm.extractelement %315[%53 : i32] : vector<8xbf16> loc(#loc)
    %318 = llvm.extractelement %315[%52 : i32] : vector<8xbf16> loc(#loc)
    %319 = llvm.extractelement %315[%57 : i32] : vector<8xbf16> loc(#loc)
    %320 = llvm.extractelement %315[%51 : i32] : vector<8xbf16> loc(#loc)
    %321 = llvm.extractelement %315[%61 : i32] : vector<8xbf16> loc(#loc)
    %322 = llvm.extractelement %315[%63 : i32] : vector<8xbf16> loc(#loc)
    %323 = llvm.extractelement %315[%50 : i32] : vector<8xbf16> loc(#loc)
    %324 = llvm.xor %254, %28 : i32 loc(#loc)
    %325 = llvm.add %324, %64 : i32 loc(#loc)
    %326 = llvm.getelementptr inbounds %37[%325] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %327 = llvm.call @"__triton_hip_predicated_load_vector<8xbf16>_!llvm.ptr<3>_i1_vector<8xbf16>_"(%326, %46, %45) : (!llvm.ptr<3>, i1, vector<8xbf16>) -> vector<8xbf16> loc(#loc)
    %328 = llvm.extractelement %327[%64 : i32] : vector<8xbf16> loc(#loc)
    %329 = llvm.extractelement %327[%53 : i32] : vector<8xbf16> loc(#loc)
    %330 = llvm.extractelement %327[%52 : i32] : vector<8xbf16> loc(#loc)
    %331 = llvm.extractelement %327[%57 : i32] : vector<8xbf16> loc(#loc)
    %332 = llvm.extractelement %327[%51 : i32] : vector<8xbf16> loc(#loc)
    %333 = llvm.extractelement %327[%61 : i32] : vector<8xbf16> loc(#loc)
    %334 = llvm.extractelement %327[%63 : i32] : vector<8xbf16> loc(#loc)
    %335 = llvm.extractelement %327[%50 : i32] : vector<8xbf16> loc(#loc)
    %336 = llvm.add %324, %33 : i32 loc(#loc)
    %337 = llvm.getelementptr inbounds %37[%336] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %338 = llvm.call @"__triton_hip_predicated_load_vector<8xbf16>_!llvm.ptr<3>_i1_vector<8xbf16>_"(%337, %46, %45) : (!llvm.ptr<3>, i1, vector<8xbf16>) -> vector<8xbf16> loc(#loc)
    %339 = llvm.extractelement %338[%64 : i32] : vector<8xbf16> loc(#loc)
    %340 = llvm.extractelement %338[%53 : i32] : vector<8xbf16> loc(#loc)
    %341 = llvm.extractelement %338[%52 : i32] : vector<8xbf16> loc(#loc)
    %342 = llvm.extractelement %338[%57 : i32] : vector<8xbf16> loc(#loc)
    %343 = llvm.extractelement %338[%51 : i32] : vector<8xbf16> loc(#loc)
    %344 = llvm.extractelement %338[%61 : i32] : vector<8xbf16> loc(#loc)
    %345 = llvm.extractelement %338[%63 : i32] : vector<8xbf16> loc(#loc)
    %346 = llvm.extractelement %338[%50 : i32] : vector<8xbf16> loc(#loc)
    %347 = llvm.getelementptr %b_base[%137] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, i8 loc(#loc)
    %348 = llvm.call @"__triton_hip_predicated_load_vector<16xi8>_!llvm.ptr<1>_i1_vector<16xi8>_"(%347, %46, %27) : (!llvm.ptr<1>, i1, vector<16xi8>) -> vector<16xi8> loc(#loc)
    %349 = llvm.extractelement %348[%67 : i32] : vector<16xi8> loc(#loc)
    %350 = llvm.extractelement %348[%44 : i32] : vector<16xi8> loc(#loc)
    %351 = llvm.extractelement %348[%43 : i32] : vector<16xi8> loc(#loc)
    %352 = llvm.extractelement %348[%42 : i32] : vector<16xi8> loc(#loc)
    %353 = llvm.extractelement %348[%41 : i32] : vector<16xi8> loc(#loc)
    %354 = llvm.extractelement %348[%40 : i32] : vector<16xi8> loc(#loc)
    %355 = llvm.extractelement %348[%39 : i32] : vector<16xi8> loc(#loc)
    %356 = llvm.extractelement %348[%38 : i32] : vector<16xi8> loc(#loc)
    %357 = llvm.extractelement %348[%26 : i32] : vector<16xi8> loc(#loc)
    %358 = llvm.extractelement %348[%25 : i32] : vector<16xi8> loc(#loc)
    %359 = llvm.extractelement %348[%24 : i32] : vector<16xi8> loc(#loc)
    %360 = llvm.extractelement %348[%23 : i32] : vector<16xi8> loc(#loc)
    %361 = llvm.extractelement %348[%22 : i32] : vector<16xi8> loc(#loc)
    %362 = llvm.extractelement %348[%21 : i32] : vector<16xi8> loc(#loc)
    %363 = llvm.extractelement %348[%20 : i32] : vector<16xi8> loc(#loc)
    %364 = llvm.extractelement %348[%19 : i32] : vector<16xi8> loc(#loc)
    rocdl.barrier loc(#loc)
    %365 = llvm.lshr %94, %64 : i32 loc(#loc)
    %366 = llvm.xor %64, %365 : i32 loc(#loc)
    %367 = llvm.select %185, %64, %18 : i1, i32 loc(#loc)
    %368 = llvm.xor %366, %367 : i32 loc(#loc)
    %369 = llvm.and %81, %52 : i32 loc(#loc)
    %370 = llvm.icmp "eq" %369, %64 : i32 loc(#loc)
    %371 = llvm.select %370, %64, %51 : i1, i32 loc(#loc)
    %372 = llvm.xor %368, %371 : i32 loc(#loc)
    %373 = llvm.and %81, %51 : i32 loc(#loc)
    %374 = llvm.icmp "eq" %373, %64 : i32 loc(#loc)
    %375 = llvm.select %374, %64, %17 : i1, i32 loc(#loc)
    %376 = llvm.xor %372, %375 : i32 loc(#loc)
    %377 = llvm.xor %64, %376 : i32 loc(#loc)
    %378 = llvm.mul %64, %53 : i32 loc(#loc)
    %379 = llvm.xor %377, %378 : i32 loc(#loc)
    %380 = llvm.xor %379, %64 : i32 loc(#loc)
    %381 = llvm.add %380, %64 : i32 loc(#loc)
    %382 = llvm.getelementptr inbounds %37[%381] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %383 = llvm.insertelement %349, %16[%64 : i32] : vector<4xi8> loc(#loc)
    %384 = llvm.insertelement %350, %383[%53 : i32] : vector<4xi8> loc(#loc)
    %385 = llvm.insertelement %351, %384[%52 : i32] : vector<4xi8> loc(#loc)
    %386 = llvm.insertelement %352, %385[%57 : i32] : vector<4xi8> loc(#loc)
    llvm.call @"__triton_hip_predicated_store_!llvm.void_!llvm.ptr<3>_vector<4xi8>_i1_"(%382, %386, %46) : (!llvm.ptr<3>, vector<4xi8>, i1) -> () loc(#loc)
    %387 = llvm.add %380, %15 : i32 loc(#loc)
    %388 = llvm.getelementptr inbounds %37[%387] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %389 = llvm.insertelement %353, %16[%64 : i32] : vector<4xi8> loc(#loc)
    %390 = llvm.insertelement %354, %389[%53 : i32] : vector<4xi8> loc(#loc)
    %391 = llvm.insertelement %355, %390[%52 : i32] : vector<4xi8> loc(#loc)
    %392 = llvm.insertelement %356, %391[%57 : i32] : vector<4xi8> loc(#loc)
    llvm.call @"__triton_hip_predicated_store_!llvm.void_!llvm.ptr<3>_vector<4xi8>_i1_"(%388, %392, %46) : (!llvm.ptr<3>, vector<4xi8>, i1) -> () loc(#loc)
    %393 = llvm.xor %379, %14 : i32 loc(#loc)
    %394 = llvm.add %393, %64 : i32 loc(#loc)
    %395 = llvm.getelementptr inbounds %37[%394] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %396 = llvm.insertelement %357, %16[%64 : i32] : vector<4xi8> loc(#loc)
    %397 = llvm.insertelement %358, %396[%53 : i32] : vector<4xi8> loc(#loc)
    %398 = llvm.insertelement %359, %397[%52 : i32] : vector<4xi8> loc(#loc)
    %399 = llvm.insertelement %360, %398[%57 : i32] : vector<4xi8> loc(#loc)
    llvm.call @"__triton_hip_predicated_store_!llvm.void_!llvm.ptr<3>_vector<4xi8>_i1_"(%395, %399, %46) : (!llvm.ptr<3>, vector<4xi8>, i1) -> () loc(#loc)
    %400 = llvm.add %393, %15 : i32 loc(#loc)
    %401 = llvm.getelementptr inbounds %37[%400] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %402 = llvm.insertelement %361, %16[%64 : i32] : vector<4xi8> loc(#loc)
    %403 = llvm.insertelement %362, %402[%53 : i32] : vector<4xi8> loc(#loc)
    %404 = llvm.insertelement %363, %403[%52 : i32] : vector<4xi8> loc(#loc)
    %405 = llvm.insertelement %364, %404[%57 : i32] : vector<4xi8> loc(#loc)
    llvm.call @"__triton_hip_predicated_store_!llvm.void_!llvm.ptr<3>_vector<4xi8>_i1_"(%401, %405, %46) : (!llvm.ptr<3>, vector<4xi8>, i1) -> () loc(#loc)
    rocdl.barrier loc(#loc)
    %406 = llvm.shl %100, %57 : i32 loc(#loc)
    %407 = llvm.xor %64, %406 : i32 loc(#loc)
    %408 = llvm.select %189, %64, %15 : i1, i32 loc(#loc)
    %409 = llvm.xor %407, %408 : i32 loc(#loc)
    %410 = llvm.select %193, %64, %14 : i1, i32 loc(#loc)
    %411 = llvm.xor %409, %410 : i32 loc(#loc)
    %412 = llvm.and %81, %65 : i32 loc(#loc)
    %413 = llvm.icmp "eq" %412, %64 : i32 loc(#loc)
    %414 = llvm.select %413, %64, %55 : i1, i32 loc(#loc)
    %415 = llvm.xor %411, %414 : i32 loc(#loc)
    %416 = llvm.xor %64, %415 : i32 loc(#loc)
    %417 = llvm.xor %416, %378 : i32 loc(#loc)
    %418 = llvm.xor %417, %64 : i32 loc(#loc)
    %419 = llvm.add %418, %64 : i32 loc(#loc)
    %420 = llvm.getelementptr inbounds %37[%419] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %421 = llvm.call @"__triton_hip_predicated_load_vector<4xi8>_!llvm.ptr<3>_i1_vector<4xi8>_"(%420, %46, %13) : (!llvm.ptr<3>, i1, vector<4xi8>) -> vector<4xi8> loc(#loc)
    %422 = llvm.extractelement %421[%64 : i32] : vector<4xi8> loc(#loc)
    %423 = llvm.extractelement %421[%53 : i32] : vector<4xi8> loc(#loc)
    %424 = llvm.extractelement %421[%52 : i32] : vector<4xi8> loc(#loc)
    %425 = llvm.extractelement %421[%57 : i32] : vector<4xi8> loc(#loc)
    %426 = llvm.add %418, %18 : i32 loc(#loc)
    %427 = llvm.getelementptr inbounds %37[%426] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %428 = llvm.call @"__triton_hip_predicated_load_vector<4xi8>_!llvm.ptr<3>_i1_vector<4xi8>_"(%427, %46, %13) : (!llvm.ptr<3>, i1, vector<4xi8>) -> vector<4xi8> loc(#loc)
    %429 = llvm.extractelement %428[%64 : i32] : vector<4xi8> loc(#loc)
    %430 = llvm.extractelement %428[%53 : i32] : vector<4xi8> loc(#loc)
    %431 = llvm.extractelement %428[%52 : i32] : vector<4xi8> loc(#loc)
    %432 = llvm.extractelement %428[%57 : i32] : vector<4xi8> loc(#loc)
    %433 = llvm.xor %417, %17 : i32 loc(#loc)
    %434 = llvm.add %433, %64 : i32 loc(#loc)
    %435 = llvm.getelementptr inbounds %37[%434] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %436 = llvm.call @"__triton_hip_predicated_load_vector<4xi8>_!llvm.ptr<3>_i1_vector<4xi8>_"(%435, %46, %13) : (!llvm.ptr<3>, i1, vector<4xi8>) -> vector<4xi8> loc(#loc)
    %437 = llvm.extractelement %436[%64 : i32] : vector<4xi8> loc(#loc)
    %438 = llvm.extractelement %436[%53 : i32] : vector<4xi8> loc(#loc)
    %439 = llvm.extractelement %436[%52 : i32] : vector<4xi8> loc(#loc)
    %440 = llvm.extractelement %436[%57 : i32] : vector<4xi8> loc(#loc)
    %441 = llvm.add %433, %18 : i32 loc(#loc)
    %442 = llvm.getelementptr inbounds %37[%441] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %443 = llvm.call @"__triton_hip_predicated_load_vector<4xi8>_!llvm.ptr<3>_i1_vector<4xi8>_"(%442, %46, %13) : (!llvm.ptr<3>, i1, vector<4xi8>) -> vector<4xi8> loc(#loc)
    %444 = llvm.extractelement %443[%64 : i32] : vector<4xi8> loc(#loc)
    %445 = llvm.extractelement %443[%53 : i32] : vector<4xi8> loc(#loc)
    %446 = llvm.extractelement %443[%52 : i32] : vector<4xi8> loc(#loc)
    %447 = llvm.extractelement %443[%57 : i32] : vector<4xi8> loc(#loc)
    %448 = llvm.xor %417, %51 : i32 loc(#loc)
    %449 = llvm.add %448, %64 : i32 loc(#loc)
    %450 = llvm.getelementptr inbounds %37[%449] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %451 = llvm.call @"__triton_hip_predicated_load_vector<4xi8>_!llvm.ptr<3>_i1_vector<4xi8>_"(%450, %46, %13) : (!llvm.ptr<3>, i1, vector<4xi8>) -> vector<4xi8> loc(#loc)
    %452 = llvm.extractelement %451[%64 : i32] : vector<4xi8> loc(#loc)
    %453 = llvm.extractelement %451[%53 : i32] : vector<4xi8> loc(#loc)
    %454 = llvm.extractelement %451[%52 : i32] : vector<4xi8> loc(#loc)
    %455 = llvm.extractelement %451[%57 : i32] : vector<4xi8> loc(#loc)
    %456 = llvm.add %448, %18 : i32 loc(#loc)
    %457 = llvm.getelementptr inbounds %37[%456] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %458 = llvm.call @"__triton_hip_predicated_load_vector<4xi8>_!llvm.ptr<3>_i1_vector<4xi8>_"(%457, %46, %13) : (!llvm.ptr<3>, i1, vector<4xi8>) -> vector<4xi8> loc(#loc)
    %459 = llvm.extractelement %458[%64 : i32] : vector<4xi8> loc(#loc)
    %460 = llvm.extractelement %458[%53 : i32] : vector<4xi8> loc(#loc)
    %461 = llvm.extractelement %458[%52 : i32] : vector<4xi8> loc(#loc)
    %462 = llvm.extractelement %458[%57 : i32] : vector<4xi8> loc(#loc)
    %463 = llvm.xor %417, %12 : i32 loc(#loc)
    %464 = llvm.add %463, %64 : i32 loc(#loc)
    %465 = llvm.getelementptr inbounds %37[%464] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %466 = llvm.call @"__triton_hip_predicated_load_vector<4xi8>_!llvm.ptr<3>_i1_vector<4xi8>_"(%465, %46, %13) : (!llvm.ptr<3>, i1, vector<4xi8>) -> vector<4xi8> loc(#loc)
    %467 = llvm.extractelement %466[%64 : i32] : vector<4xi8> loc(#loc)
    %468 = llvm.extractelement %466[%53 : i32] : vector<4xi8> loc(#loc)
    %469 = llvm.extractelement %466[%52 : i32] : vector<4xi8> loc(#loc)
    %470 = llvm.extractelement %466[%57 : i32] : vector<4xi8> loc(#loc)
    %471 = llvm.add %463, %18 : i32 loc(#loc)
    %472 = llvm.getelementptr inbounds %37[%471] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %473 = llvm.call @"__triton_hip_predicated_load_vector<4xi8>_!llvm.ptr<3>_i1_vector<4xi8>_"(%472, %46, %13) : (!llvm.ptr<3>, i1, vector<4xi8>) -> vector<4xi8> loc(#loc)
    %474 = llvm.extractelement %473[%64 : i32] : vector<4xi8> loc(#loc)
    %475 = llvm.extractelement %473[%53 : i32] : vector<4xi8> loc(#loc)
    %476 = llvm.extractelement %473[%52 : i32] : vector<4xi8> loc(#loc)
    %477 = llvm.extractelement %473[%57 : i32] : vector<4xi8> loc(#loc)
    %478 = llvm.mul %99, %72 : i32 loc(#loc)
    %479 = llvm.lshr %124, %64 : i32 loc(#loc)
    %480 = llvm.xor %64, %479 : i32 loc(#loc)
    %481 = llvm.xor %64, %480 : i32 loc(#loc)
    %482 = llvm.xor %481, %64 : i32 loc(#loc)
    %483 = llvm.add %482, %67 : i32 loc(#loc)
    %484 = llvm.add %483, %478 : i32 loc(#loc)
    %485 = rocdl.make.buffer.rsrc %b_scale, %11, %9, %10 : <1> to <8> loc(#loc)
    %486 = llvm.mul %484, %53 : i32 loc(#loc)
    %487 = llvm.select %46, %486, %7 : i1, i32 loc(#loc)
    %488 = rocdl.raw.ptr.buffer.load %485, %487, %64, %64 : i8 loc(#loc)
    %489 = llvm.bitcast %488 : i8 to vector<1xi8> loc(#loc)
    %490 = llvm.extractelement %489[%67 : i32] : vector<1xi8> loc(#loc)
    rocdl.barrier loc(#loc)
    %491 = llvm.and %81, %6 : i32 loc(#loc)
    %492 = llvm.shl %491, %52 : i32 loc(#loc)
    %493 = llvm.xor %64, %492 : i32 loc(#loc)
    %494 = llvm.select %413, %64, %52 : i1, i32 loc(#loc)
    %495 = llvm.xor %493, %494 : i32 loc(#loc)
    %496 = llvm.select %104, %64, %53 : i1, i32 loc(#loc)
    %497 = llvm.xor %495, %496 : i32 loc(#loc)
    %498 = llvm.xor %64, %497 : i32 loc(#loc)
    %499 = llvm.xor %498, %378 : i32 loc(#loc)
    %500 = llvm.xor %499, %64 : i32 loc(#loc)
    %501 = llvm.add %500, %64 : i32 loc(#loc)
    %502 = llvm.getelementptr inbounds %37[%501] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %503 = llvm.insertelement %490, %5[%64 : i32] : vector<1xi8> loc(#loc)
    llvm.call @"__triton_hip_predicated_store_!llvm.void_!llvm.ptr<3>_vector<1xi8>_i1_"(%502, %503, %46) : (!llvm.ptr<3>, vector<1xi8>, i1) -> () loc(#loc)
    rocdl.barrier loc(#loc)
    %504 = llvm.shl %124, %61 : i32 loc(#loc)
    %505 = llvm.xor %64, %504 : i32 loc(#loc)
    %506 = llvm.and %81, %72 : i32 loc(#loc)
    %507 = llvm.icmp "eq" %506, %64 : i32 loc(#loc)
    %508 = llvm.select %507, %64, %52 : i1, i32 loc(#loc)
    %509 = llvm.xor %505, %508 : i32 loc(#loc)
    %510 = llvm.select %413, %64, %53 : i1, i32 loc(#loc)
    %511 = llvm.xor %509, %510 : i32 loc(#loc)
    %512 = llvm.xor %64, %511 : i32 loc(#loc)
    %513 = llvm.xor %512, %378 : i32 loc(#loc)
    %514 = llvm.xor %513, %64 : i32 loc(#loc)
    %515 = llvm.add %514, %64 : i32 loc(#loc)
    %516 = llvm.getelementptr inbounds %37[%515] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %517 = llvm.call @"__triton_hip_predicated_load_vector<1xi8>_!llvm.ptr<3>_i1_vector<1xi8>_"(%516, %46, %8) : (!llvm.ptr<3>, i1, vector<1xi8>) -> vector<1xi8> loc(#loc)
    %518 = llvm.extractelement %517[%64 : i32] : vector<1xi8> loc(#loc)
    %519 = llvm.add %514, %60 : i32 loc(#loc)
    %520 = llvm.getelementptr inbounds %37[%519] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %521 = llvm.call @"__triton_hip_predicated_load_vector<1xi8>_!llvm.ptr<3>_i1_vector<1xi8>_"(%520, %46, %8) : (!llvm.ptr<3>, i1, vector<1xi8>) -> vector<1xi8> loc(#loc)
    %522 = llvm.extractelement %521[%64 : i32] : vector<1xi8> loc(#loc)
    %523 = llvm.add %514, %51 : i32 loc(#loc)
    %524 = llvm.getelementptr inbounds %37[%523] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %525 = llvm.call @"__triton_hip_predicated_load_vector<1xi8>_!llvm.ptr<3>_i1_vector<1xi8>_"(%524, %46, %8) : (!llvm.ptr<3>, i1, vector<1xi8>) -> vector<1xi8> loc(#loc)
    %526 = llvm.extractelement %525[%64 : i32] : vector<1xi8> loc(#loc)
    %527 = llvm.add %514, %4 : i32 loc(#loc)
    %528 = llvm.getelementptr inbounds %37[%527] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %529 = llvm.call @"__triton_hip_predicated_load_vector<1xi8>_!llvm.ptr<3>_i1_vector<1xi8>_"(%528, %46, %8) : (!llvm.ptr<3>, i1, vector<1xi8>) -> vector<1xi8> loc(#loc)
    %530 = llvm.extractelement %529[%64 : i32] : vector<1xi8> loc(#loc)
    %531 = llvm.add %514, %72 : i32 loc(#loc)
    %532 = llvm.getelementptr inbounds %37[%531] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %533 = llvm.call @"__triton_hip_predicated_load_vector<1xi8>_!llvm.ptr<3>_i1_vector<1xi8>_"(%532, %46, %8) : (!llvm.ptr<3>, i1, vector<1xi8>) -> vector<1xi8> loc(#loc)
    %534 = llvm.extractelement %533[%64 : i32] : vector<1xi8> loc(#loc)
    %535 = llvm.add %514, %59 : i32 loc(#loc)
    %536 = llvm.getelementptr inbounds %37[%535] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %537 = llvm.call @"__triton_hip_predicated_load_vector<1xi8>_!llvm.ptr<3>_i1_vector<1xi8>_"(%536, %46, %8) : (!llvm.ptr<3>, i1, vector<1xi8>) -> vector<1xi8> loc(#loc)
    %538 = llvm.extractelement %537[%64 : i32] : vector<1xi8> loc(#loc)
    %539 = llvm.add %514, %49 : i32 loc(#loc)
    %540 = llvm.getelementptr inbounds %37[%539] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %541 = llvm.call @"__triton_hip_predicated_load_vector<1xi8>_!llvm.ptr<3>_i1_vector<1xi8>_"(%540, %46, %8) : (!llvm.ptr<3>, i1, vector<1xi8>) -> vector<1xi8> loc(#loc)
    %542 = llvm.extractelement %541[%64 : i32] : vector<1xi8> loc(#loc)
    %543 = llvm.add %514, %3 : i32 loc(#loc)
    %544 = llvm.getelementptr inbounds %37[%543] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %545 = llvm.call @"__triton_hip_predicated_load_vector<1xi8>_!llvm.ptr<3>_i1_vector<1xi8>_"(%544, %46, %8) : (!llvm.ptr<3>, i1, vector<1xi8>) -> vector<1xi8> loc(#loc)
    %546 = llvm.extractelement %545[%64 : i32] : vector<1xi8> loc(#loc)
    %547 = llvm.zext %518 : i8 to i16 loc(#loc)
    %548 = llvm.zext %526 : i8 to i16 loc(#loc)
    %549 = llvm.zext %534 : i8 to i16 loc(#loc)
    %550 = llvm.zext %542 : i8 to i16 loc(#loc)
    %551 = llvm.shl %547, %71 : i16 loc(#loc)
    %552 = llvm.shl %548, %71 : i16 loc(#loc)
    %553 = llvm.shl %549, %71 : i16 loc(#loc)
    %554 = llvm.shl %550, %71 : i16 loc(#loc)
    %555 = llvm.insertelement %422, %16[%64 : i32] : vector<4xi8> loc(#loc)
    %556 = llvm.insertelement %423, %555[%53 : i32] : vector<4xi8> loc(#loc)
    %557 = llvm.insertelement %424, %556[%52 : i32] : vector<4xi8> loc(#loc)
    %558 = llvm.insertelement %425, %557[%57 : i32] : vector<4xi8> loc(#loc)
    %559 = llvm.bitcast %558 : vector<4xi8> to i32 loc(#loc)
    %560 = llvm.zext %551 : i16 to i32 loc(#loc)
    %561 = llvm.shl %560, %60 : i32 loc(#loc)
    %562 = llvm.bitcast %561 : i32 to f32 loc(#loc)
    %563 = rocdl.cvt.scalef32.pk.bf16.fp4 %559[0], %562 : vector<2xbf16> loc(#loc)
    %564 = rocdl.cvt.scalef32.pk.bf16.fp4 %559[2], %562 : vector<2xbf16> loc(#loc)
    %565 = rocdl.cvt.scalef32.pk.bf16.fp4 %559[1], %562 : vector<2xbf16> loc(#loc)
    %566 = rocdl.cvt.scalef32.pk.bf16.fp4 %559[3], %562 : vector<2xbf16> loc(#loc)
    %567 = llvm.extractelement %563[%64 : i32] : vector<2xbf16> loc(#loc)
    %568 = llvm.extractelement %563[%53 : i32] : vector<2xbf16> loc(#loc)
    %569 = llvm.extractelement %564[%64 : i32] : vector<2xbf16> loc(#loc)
    %570 = llvm.extractelement %564[%53 : i32] : vector<2xbf16> loc(#loc)
    %571 = llvm.extractelement %565[%64 : i32] : vector<2xbf16> loc(#loc)
    %572 = llvm.extractelement %565[%53 : i32] : vector<2xbf16> loc(#loc)
    %573 = llvm.extractelement %566[%64 : i32] : vector<2xbf16> loc(#loc)
    %574 = llvm.extractelement %566[%53 : i32] : vector<2xbf16> loc(#loc)
    %575 = llvm.insertelement %429, %16[%64 : i32] : vector<4xi8> loc(#loc)
    %576 = llvm.insertelement %430, %575[%53 : i32] : vector<4xi8> loc(#loc)
    %577 = llvm.insertelement %431, %576[%52 : i32] : vector<4xi8> loc(#loc)
    %578 = llvm.insertelement %432, %577[%57 : i32] : vector<4xi8> loc(#loc)
    %579 = llvm.bitcast %578 : vector<4xi8> to i32 loc(#loc)
    %580 = llvm.zext %552 : i16 to i32 loc(#loc)
    %581 = llvm.shl %580, %60 : i32 loc(#loc)
    %582 = llvm.bitcast %581 : i32 to f32 loc(#loc)
    %583 = rocdl.cvt.scalef32.pk.bf16.fp4 %579[0], %582 : vector<2xbf16> loc(#loc)
    %584 = rocdl.cvt.scalef32.pk.bf16.fp4 %579[2], %582 : vector<2xbf16> loc(#loc)
    %585 = rocdl.cvt.scalef32.pk.bf16.fp4 %579[1], %582 : vector<2xbf16> loc(#loc)
    %586 = rocdl.cvt.scalef32.pk.bf16.fp4 %579[3], %582 : vector<2xbf16> loc(#loc)
    %587 = llvm.extractelement %583[%64 : i32] : vector<2xbf16> loc(#loc)
    %588 = llvm.extractelement %583[%53 : i32] : vector<2xbf16> loc(#loc)
    %589 = llvm.extractelement %584[%64 : i32] : vector<2xbf16> loc(#loc)
    %590 = llvm.extractelement %584[%53 : i32] : vector<2xbf16> loc(#loc)
    %591 = llvm.extractelement %585[%64 : i32] : vector<2xbf16> loc(#loc)
    %592 = llvm.extractelement %585[%53 : i32] : vector<2xbf16> loc(#loc)
    %593 = llvm.extractelement %586[%64 : i32] : vector<2xbf16> loc(#loc)
    %594 = llvm.extractelement %586[%53 : i32] : vector<2xbf16> loc(#loc)
    %595 = llvm.insertelement %452, %16[%64 : i32] : vector<4xi8> loc(#loc)
    %596 = llvm.insertelement %453, %595[%53 : i32] : vector<4xi8> loc(#loc)
    %597 = llvm.insertelement %454, %596[%52 : i32] : vector<4xi8> loc(#loc)
    %598 = llvm.insertelement %455, %597[%57 : i32] : vector<4xi8> loc(#loc)
    %599 = llvm.bitcast %598 : vector<4xi8> to i32 loc(#loc)
    %600 = llvm.zext %553 : i16 to i32 loc(#loc)
    %601 = llvm.shl %600, %60 : i32 loc(#loc)
    %602 = llvm.bitcast %601 : i32 to f32 loc(#loc)
    %603 = rocdl.cvt.scalef32.pk.bf16.fp4 %599[0], %602 : vector<2xbf16> loc(#loc)
    %604 = rocdl.cvt.scalef32.pk.bf16.fp4 %599[2], %602 : vector<2xbf16> loc(#loc)
    %605 = rocdl.cvt.scalef32.pk.bf16.fp4 %599[1], %602 : vector<2xbf16> loc(#loc)
    %606 = rocdl.cvt.scalef32.pk.bf16.fp4 %599[3], %602 : vector<2xbf16> loc(#loc)
    %607 = llvm.extractelement %603[%64 : i32] : vector<2xbf16> loc(#loc)
    %608 = llvm.extractelement %603[%53 : i32] : vector<2xbf16> loc(#loc)
    %609 = llvm.extractelement %604[%64 : i32] : vector<2xbf16> loc(#loc)
    %610 = llvm.extractelement %604[%53 : i32] : vector<2xbf16> loc(#loc)
    %611 = llvm.extractelement %605[%64 : i32] : vector<2xbf16> loc(#loc)
    %612 = llvm.extractelement %605[%53 : i32] : vector<2xbf16> loc(#loc)
    %613 = llvm.extractelement %606[%64 : i32] : vector<2xbf16> loc(#loc)
    %614 = llvm.extractelement %606[%53 : i32] : vector<2xbf16> loc(#loc)
    %615 = llvm.insertelement %459, %16[%64 : i32] : vector<4xi8> loc(#loc)
    %616 = llvm.insertelement %460, %615[%53 : i32] : vector<4xi8> loc(#loc)
    %617 = llvm.insertelement %461, %616[%52 : i32] : vector<4xi8> loc(#loc)
    %618 = llvm.insertelement %462, %617[%57 : i32] : vector<4xi8> loc(#loc)
    %619 = llvm.bitcast %618 : vector<4xi8> to i32 loc(#loc)
    %620 = llvm.zext %554 : i16 to i32 loc(#loc)
    %621 = llvm.shl %620, %60 : i32 loc(#loc)
    %622 = llvm.bitcast %621 : i32 to f32 loc(#loc)
    %623 = rocdl.cvt.scalef32.pk.bf16.fp4 %619[0], %622 : vector<2xbf16> loc(#loc)
    %624 = rocdl.cvt.scalef32.pk.bf16.fp4 %619[2], %622 : vector<2xbf16> loc(#loc)
    %625 = rocdl.cvt.scalef32.pk.bf16.fp4 %619[1], %622 : vector<2xbf16> loc(#loc)
    %626 = rocdl.cvt.scalef32.pk.bf16.fp4 %619[3], %622 : vector<2xbf16> loc(#loc)
    %627 = llvm.extractelement %623[%64 : i32] : vector<2xbf16> loc(#loc)
    %628 = llvm.extractelement %623[%53 : i32] : vector<2xbf16> loc(#loc)
    %629 = llvm.extractelement %624[%64 : i32] : vector<2xbf16> loc(#loc)
    %630 = llvm.extractelement %624[%53 : i32] : vector<2xbf16> loc(#loc)
    %631 = llvm.extractelement %625[%64 : i32] : vector<2xbf16> loc(#loc)
    %632 = llvm.extractelement %625[%53 : i32] : vector<2xbf16> loc(#loc)
    %633 = llvm.extractelement %626[%64 : i32] : vector<2xbf16> loc(#loc)
    %634 = llvm.extractelement %626[%53 : i32] : vector<2xbf16> loc(#loc)
    %635 = llvm.icmp "eq" %518, %70 : i8 loc(#loc)
    %636 = llvm.icmp "eq" %526, %70 : i8 loc(#loc)
    %637 = llvm.icmp "eq" %534, %70 : i8 loc(#loc)
    %638 = llvm.icmp "eq" %542, %70 : i8 loc(#loc)
    %639 = llvm.select %635, %69, %567 : i1, bf16 loc(#loc)
    %640 = llvm.select %635, %69, %568 : i1, bf16 loc(#loc)
    %641 = llvm.select %635, %69, %569 : i1, bf16 loc(#loc)
    %642 = llvm.select %635, %69, %570 : i1, bf16 loc(#loc)
    %643 = llvm.select %635, %69, %571 : i1, bf16 loc(#loc)
    %644 = llvm.select %635, %69, %572 : i1, bf16 loc(#loc)
    %645 = llvm.select %635, %69, %573 : i1, bf16 loc(#loc)
    %646 = llvm.select %635, %69, %574 : i1, bf16 loc(#loc)
    %647 = llvm.select %636, %69, %587 : i1, bf16 loc(#loc)
    %648 = llvm.select %636, %69, %588 : i1, bf16 loc(#loc)
    %649 = llvm.select %636, %69, %589 : i1, bf16 loc(#loc)
    %650 = llvm.select %636, %69, %590 : i1, bf16 loc(#loc)
    %651 = llvm.select %636, %69, %591 : i1, bf16 loc(#loc)
    %652 = llvm.select %636, %69, %592 : i1, bf16 loc(#loc)
    %653 = llvm.select %636, %69, %593 : i1, bf16 loc(#loc)
    %654 = llvm.select %636, %69, %594 : i1, bf16 loc(#loc)
    %655 = llvm.select %637, %69, %607 : i1, bf16 loc(#loc)
    %656 = llvm.select %637, %69, %608 : i1, bf16 loc(#loc)
    %657 = llvm.select %637, %69, %609 : i1, bf16 loc(#loc)
    %658 = llvm.select %637, %69, %610 : i1, bf16 loc(#loc)
    %659 = llvm.select %637, %69, %611 : i1, bf16 loc(#loc)
    %660 = llvm.select %637, %69, %612 : i1, bf16 loc(#loc)
    %661 = llvm.select %637, %69, %613 : i1, bf16 loc(#loc)
    %662 = llvm.select %637, %69, %614 : i1, bf16 loc(#loc)
    %663 = llvm.select %638, %69, %627 : i1, bf16 loc(#loc)
    %664 = llvm.select %638, %69, %628 : i1, bf16 loc(#loc)
    %665 = llvm.select %638, %69, %629 : i1, bf16 loc(#loc)
    %666 = llvm.select %638, %69, %630 : i1, bf16 loc(#loc)
    %667 = llvm.select %638, %69, %631 : i1, bf16 loc(#loc)
    %668 = llvm.select %638, %69, %632 : i1, bf16 loc(#loc)
    %669 = llvm.select %638, %69, %633 : i1, bf16 loc(#loc)
    %670 = llvm.select %638, %69, %634 : i1, bf16 loc(#loc)
    %671 = llvm.insertelement %259, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %672 = llvm.insertelement %260, %671[%53 : i32] : vector<8xbf16> loc(#loc)
    %673 = llvm.insertelement %261, %672[%52 : i32] : vector<8xbf16> loc(#loc)
    %674 = llvm.insertelement %262, %673[%57 : i32] : vector<8xbf16> loc(#loc)
    %675 = llvm.insertelement %263, %674[%51 : i32] : vector<8xbf16> loc(#loc)
    %676 = llvm.insertelement %264, %675[%61 : i32] : vector<8xbf16> loc(#loc)
    %677 = llvm.insertelement %265, %676[%63 : i32] : vector<8xbf16> loc(#loc)
    %678 = llvm.insertelement %266, %677[%50 : i32] : vector<8xbf16> loc(#loc)
    %679 = llvm.extractelement %678[%64 : i32] : vector<8xbf16> loc(#loc)
    %680 = llvm.insertelement %679, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %681 = llvm.extractelement %678[%53 : i32] : vector<8xbf16> loc(#loc)
    %682 = llvm.insertelement %681, %680[%53 : i32] : vector<8xbf16> loc(#loc)
    %683 = llvm.extractelement %678[%52 : i32] : vector<8xbf16> loc(#loc)
    %684 = llvm.insertelement %683, %682[%52 : i32] : vector<8xbf16> loc(#loc)
    %685 = llvm.extractelement %678[%57 : i32] : vector<8xbf16> loc(#loc)
    %686 = llvm.insertelement %685, %684[%57 : i32] : vector<8xbf16> loc(#loc)
    %687 = llvm.extractelement %678[%51 : i32] : vector<8xbf16> loc(#loc)
    %688 = llvm.insertelement %687, %686[%51 : i32] : vector<8xbf16> loc(#loc)
    %689 = llvm.extractelement %678[%61 : i32] : vector<8xbf16> loc(#loc)
    %690 = llvm.insertelement %689, %688[%61 : i32] : vector<8xbf16> loc(#loc)
    %691 = llvm.extractelement %678[%63 : i32] : vector<8xbf16> loc(#loc)
    %692 = llvm.insertelement %691, %690[%63 : i32] : vector<8xbf16> loc(#loc)
    %693 = llvm.extractelement %678[%50 : i32] : vector<8xbf16> loc(#loc)
    %694 = llvm.insertelement %693, %692[%50 : i32] : vector<8xbf16> loc(#loc)
    %695 = llvm.insertelement %282, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %696 = llvm.insertelement %283, %695[%53 : i32] : vector<8xbf16> loc(#loc)
    %697 = llvm.insertelement %284, %696[%52 : i32] : vector<8xbf16> loc(#loc)
    %698 = llvm.insertelement %285, %697[%57 : i32] : vector<8xbf16> loc(#loc)
    %699 = llvm.insertelement %286, %698[%51 : i32] : vector<8xbf16> loc(#loc)
    %700 = llvm.insertelement %287, %699[%61 : i32] : vector<8xbf16> loc(#loc)
    %701 = llvm.insertelement %288, %700[%63 : i32] : vector<8xbf16> loc(#loc)
    %702 = llvm.insertelement %289, %701[%50 : i32] : vector<8xbf16> loc(#loc)
    %703 = llvm.extractelement %702[%64 : i32] : vector<8xbf16> loc(#loc)
    %704 = llvm.insertelement %703, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %705 = llvm.extractelement %702[%53 : i32] : vector<8xbf16> loc(#loc)
    %706 = llvm.insertelement %705, %704[%53 : i32] : vector<8xbf16> loc(#loc)
    %707 = llvm.extractelement %702[%52 : i32] : vector<8xbf16> loc(#loc)
    %708 = llvm.insertelement %707, %706[%52 : i32] : vector<8xbf16> loc(#loc)
    %709 = llvm.extractelement %702[%57 : i32] : vector<8xbf16> loc(#loc)
    %710 = llvm.insertelement %709, %708[%57 : i32] : vector<8xbf16> loc(#loc)
    %711 = llvm.extractelement %702[%51 : i32] : vector<8xbf16> loc(#loc)
    %712 = llvm.insertelement %711, %710[%51 : i32] : vector<8xbf16> loc(#loc)
    %713 = llvm.extractelement %702[%61 : i32] : vector<8xbf16> loc(#loc)
    %714 = llvm.insertelement %713, %712[%61 : i32] : vector<8xbf16> loc(#loc)
    %715 = llvm.extractelement %702[%63 : i32] : vector<8xbf16> loc(#loc)
    %716 = llvm.insertelement %715, %714[%63 : i32] : vector<8xbf16> loc(#loc)
    %717 = llvm.extractelement %702[%50 : i32] : vector<8xbf16> loc(#loc)
    %718 = llvm.insertelement %717, %716[%50 : i32] : vector<8xbf16> loc(#loc)
    %719 = llvm.insertelement %305, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %720 = llvm.insertelement %306, %719[%53 : i32] : vector<8xbf16> loc(#loc)
    %721 = llvm.insertelement %307, %720[%52 : i32] : vector<8xbf16> loc(#loc)
    %722 = llvm.insertelement %308, %721[%57 : i32] : vector<8xbf16> loc(#loc)
    %723 = llvm.insertelement %309, %722[%51 : i32] : vector<8xbf16> loc(#loc)
    %724 = llvm.insertelement %310, %723[%61 : i32] : vector<8xbf16> loc(#loc)
    %725 = llvm.insertelement %311, %724[%63 : i32] : vector<8xbf16> loc(#loc)
    %726 = llvm.insertelement %312, %725[%50 : i32] : vector<8xbf16> loc(#loc)
    %727 = llvm.extractelement %726[%64 : i32] : vector<8xbf16> loc(#loc)
    %728 = llvm.insertelement %727, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %729 = llvm.extractelement %726[%53 : i32] : vector<8xbf16> loc(#loc)
    %730 = llvm.insertelement %729, %728[%53 : i32] : vector<8xbf16> loc(#loc)
    %731 = llvm.extractelement %726[%52 : i32] : vector<8xbf16> loc(#loc)
    %732 = llvm.insertelement %731, %730[%52 : i32] : vector<8xbf16> loc(#loc)
    %733 = llvm.extractelement %726[%57 : i32] : vector<8xbf16> loc(#loc)
    %734 = llvm.insertelement %733, %732[%57 : i32] : vector<8xbf16> loc(#loc)
    %735 = llvm.extractelement %726[%51 : i32] : vector<8xbf16> loc(#loc)
    %736 = llvm.insertelement %735, %734[%51 : i32] : vector<8xbf16> loc(#loc)
    %737 = llvm.extractelement %726[%61 : i32] : vector<8xbf16> loc(#loc)
    %738 = llvm.insertelement %737, %736[%61 : i32] : vector<8xbf16> loc(#loc)
    %739 = llvm.extractelement %726[%63 : i32] : vector<8xbf16> loc(#loc)
    %740 = llvm.insertelement %739, %738[%63 : i32] : vector<8xbf16> loc(#loc)
    %741 = llvm.extractelement %726[%50 : i32] : vector<8xbf16> loc(#loc)
    %742 = llvm.insertelement %741, %740[%50 : i32] : vector<8xbf16> loc(#loc)
    %743 = llvm.insertelement %328, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %744 = llvm.insertelement %329, %743[%53 : i32] : vector<8xbf16> loc(#loc)
    %745 = llvm.insertelement %330, %744[%52 : i32] : vector<8xbf16> loc(#loc)
    %746 = llvm.insertelement %331, %745[%57 : i32] : vector<8xbf16> loc(#loc)
    %747 = llvm.insertelement %332, %746[%51 : i32] : vector<8xbf16> loc(#loc)
    %748 = llvm.insertelement %333, %747[%61 : i32] : vector<8xbf16> loc(#loc)
    %749 = llvm.insertelement %334, %748[%63 : i32] : vector<8xbf16> loc(#loc)
    %750 = llvm.insertelement %335, %749[%50 : i32] : vector<8xbf16> loc(#loc)
    %751 = llvm.extractelement %750[%64 : i32] : vector<8xbf16> loc(#loc)
    %752 = llvm.insertelement %751, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %753 = llvm.extractelement %750[%53 : i32] : vector<8xbf16> loc(#loc)
    %754 = llvm.insertelement %753, %752[%53 : i32] : vector<8xbf16> loc(#loc)
    %755 = llvm.extractelement %750[%52 : i32] : vector<8xbf16> loc(#loc)
    %756 = llvm.insertelement %755, %754[%52 : i32] : vector<8xbf16> loc(#loc)
    %757 = llvm.extractelement %750[%57 : i32] : vector<8xbf16> loc(#loc)
    %758 = llvm.insertelement %757, %756[%57 : i32] : vector<8xbf16> loc(#loc)
    %759 = llvm.extractelement %750[%51 : i32] : vector<8xbf16> loc(#loc)
    %760 = llvm.insertelement %759, %758[%51 : i32] : vector<8xbf16> loc(#loc)
    %761 = llvm.extractelement %750[%61 : i32] : vector<8xbf16> loc(#loc)
    %762 = llvm.insertelement %761, %760[%61 : i32] : vector<8xbf16> loc(#loc)
    %763 = llvm.extractelement %750[%63 : i32] : vector<8xbf16> loc(#loc)
    %764 = llvm.insertelement %763, %762[%63 : i32] : vector<8xbf16> loc(#loc)
    %765 = llvm.extractelement %750[%50 : i32] : vector<8xbf16> loc(#loc)
    %766 = llvm.insertelement %765, %764[%50 : i32] : vector<8xbf16> loc(#loc)
    %767 = llvm.insertelement %639, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %768 = llvm.insertelement %640, %767[%53 : i32] : vector<8xbf16> loc(#loc)
    %769 = llvm.insertelement %641, %768[%52 : i32] : vector<8xbf16> loc(#loc)
    %770 = llvm.insertelement %642, %769[%57 : i32] : vector<8xbf16> loc(#loc)
    %771 = llvm.insertelement %643, %770[%51 : i32] : vector<8xbf16> loc(#loc)
    %772 = llvm.insertelement %644, %771[%61 : i32] : vector<8xbf16> loc(#loc)
    %773 = llvm.insertelement %645, %772[%63 : i32] : vector<8xbf16> loc(#loc)
    %774 = llvm.insertelement %646, %773[%50 : i32] : vector<8xbf16> loc(#loc)
    %775 = llvm.extractelement %774[%64 : i32] : vector<8xbf16> loc(#loc)
    %776 = llvm.insertelement %775, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %777 = llvm.extractelement %774[%53 : i32] : vector<8xbf16> loc(#loc)
    %778 = llvm.insertelement %777, %776[%53 : i32] : vector<8xbf16> loc(#loc)
    %779 = llvm.extractelement %774[%52 : i32] : vector<8xbf16> loc(#loc)
    %780 = llvm.insertelement %779, %778[%52 : i32] : vector<8xbf16> loc(#loc)
    %781 = llvm.extractelement %774[%57 : i32] : vector<8xbf16> loc(#loc)
    %782 = llvm.insertelement %781, %780[%57 : i32] : vector<8xbf16> loc(#loc)
    %783 = llvm.extractelement %774[%51 : i32] : vector<8xbf16> loc(#loc)
    %784 = llvm.insertelement %783, %782[%51 : i32] : vector<8xbf16> loc(#loc)
    %785 = llvm.extractelement %774[%61 : i32] : vector<8xbf16> loc(#loc)
    %786 = llvm.insertelement %785, %784[%61 : i32] : vector<8xbf16> loc(#loc)
    %787 = llvm.extractelement %774[%63 : i32] : vector<8xbf16> loc(#loc)
    %788 = llvm.insertelement %787, %786[%63 : i32] : vector<8xbf16> loc(#loc)
    %789 = llvm.extractelement %774[%50 : i32] : vector<8xbf16> loc(#loc)
    %790 = llvm.insertelement %789, %788[%50 : i32] : vector<8xbf16> loc(#loc)
    %791 = llvm.insertelement %647, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %792 = llvm.insertelement %648, %791[%53 : i32] : vector<8xbf16> loc(#loc)
    %793 = llvm.insertelement %649, %792[%52 : i32] : vector<8xbf16> loc(#loc)
    %794 = llvm.insertelement %650, %793[%57 : i32] : vector<8xbf16> loc(#loc)
    %795 = llvm.insertelement %651, %794[%51 : i32] : vector<8xbf16> loc(#loc)
    %796 = llvm.insertelement %652, %795[%61 : i32] : vector<8xbf16> loc(#loc)
    %797 = llvm.insertelement %653, %796[%63 : i32] : vector<8xbf16> loc(#loc)
    %798 = llvm.insertelement %654, %797[%50 : i32] : vector<8xbf16> loc(#loc)
    %799 = llvm.extractelement %798[%64 : i32] : vector<8xbf16> loc(#loc)
    %800 = llvm.insertelement %799, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %801 = llvm.extractelement %798[%53 : i32] : vector<8xbf16> loc(#loc)
    %802 = llvm.insertelement %801, %800[%53 : i32] : vector<8xbf16> loc(#loc)
    %803 = llvm.extractelement %798[%52 : i32] : vector<8xbf16> loc(#loc)
    %804 = llvm.insertelement %803, %802[%52 : i32] : vector<8xbf16> loc(#loc)
    %805 = llvm.extractelement %798[%57 : i32] : vector<8xbf16> loc(#loc)
    %806 = llvm.insertelement %805, %804[%57 : i32] : vector<8xbf16> loc(#loc)
    %807 = llvm.extractelement %798[%51 : i32] : vector<8xbf16> loc(#loc)
    %808 = llvm.insertelement %807, %806[%51 : i32] : vector<8xbf16> loc(#loc)
    %809 = llvm.extractelement %798[%61 : i32] : vector<8xbf16> loc(#loc)
    %810 = llvm.insertelement %809, %808[%61 : i32] : vector<8xbf16> loc(#loc)
    %811 = llvm.extractelement %798[%63 : i32] : vector<8xbf16> loc(#loc)
    %812 = llvm.insertelement %811, %810[%63 : i32] : vector<8xbf16> loc(#loc)
    %813 = llvm.extractelement %798[%50 : i32] : vector<8xbf16> loc(#loc)
    %814 = llvm.insertelement %813, %812[%50 : i32] : vector<8xbf16> loc(#loc)
    %815 = llvm.insertelement %655, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %816 = llvm.insertelement %656, %815[%53 : i32] : vector<8xbf16> loc(#loc)
    %817 = llvm.insertelement %657, %816[%52 : i32] : vector<8xbf16> loc(#loc)
    %818 = llvm.insertelement %658, %817[%57 : i32] : vector<8xbf16> loc(#loc)
    %819 = llvm.insertelement %659, %818[%51 : i32] : vector<8xbf16> loc(#loc)
    %820 = llvm.insertelement %660, %819[%61 : i32] : vector<8xbf16> loc(#loc)
    %821 = llvm.insertelement %661, %820[%63 : i32] : vector<8xbf16> loc(#loc)
    %822 = llvm.insertelement %662, %821[%50 : i32] : vector<8xbf16> loc(#loc)
    %823 = llvm.extractelement %822[%64 : i32] : vector<8xbf16> loc(#loc)
    %824 = llvm.insertelement %823, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %825 = llvm.extractelement %822[%53 : i32] : vector<8xbf16> loc(#loc)
    %826 = llvm.insertelement %825, %824[%53 : i32] : vector<8xbf16> loc(#loc)
    %827 = llvm.extractelement %822[%52 : i32] : vector<8xbf16> loc(#loc)
    %828 = llvm.insertelement %827, %826[%52 : i32] : vector<8xbf16> loc(#loc)
    %829 = llvm.extractelement %822[%57 : i32] : vector<8xbf16> loc(#loc)
    %830 = llvm.insertelement %829, %828[%57 : i32] : vector<8xbf16> loc(#loc)
    %831 = llvm.extractelement %822[%51 : i32] : vector<8xbf16> loc(#loc)
    %832 = llvm.insertelement %831, %830[%51 : i32] : vector<8xbf16> loc(#loc)
    %833 = llvm.extractelement %822[%61 : i32] : vector<8xbf16> loc(#loc)
    %834 = llvm.insertelement %833, %832[%61 : i32] : vector<8xbf16> loc(#loc)
    %835 = llvm.extractelement %822[%63 : i32] : vector<8xbf16> loc(#loc)
    %836 = llvm.insertelement %835, %834[%63 : i32] : vector<8xbf16> loc(#loc)
    %837 = llvm.extractelement %822[%50 : i32] : vector<8xbf16> loc(#loc)
    %838 = llvm.insertelement %837, %836[%50 : i32] : vector<8xbf16> loc(#loc)
    %839 = llvm.insertelement %663, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %840 = llvm.insertelement %664, %839[%53 : i32] : vector<8xbf16> loc(#loc)
    %841 = llvm.insertelement %665, %840[%52 : i32] : vector<8xbf16> loc(#loc)
    %842 = llvm.insertelement %666, %841[%57 : i32] : vector<8xbf16> loc(#loc)
    %843 = llvm.insertelement %667, %842[%51 : i32] : vector<8xbf16> loc(#loc)
    %844 = llvm.insertelement %668, %843[%61 : i32] : vector<8xbf16> loc(#loc)
    %845 = llvm.insertelement %669, %844[%63 : i32] : vector<8xbf16> loc(#loc)
    %846 = llvm.insertelement %670, %845[%50 : i32] : vector<8xbf16> loc(#loc)
    %847 = llvm.extractelement %846[%64 : i32] : vector<8xbf16> loc(#loc)
    %848 = llvm.insertelement %847, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %849 = llvm.extractelement %846[%53 : i32] : vector<8xbf16> loc(#loc)
    %850 = llvm.insertelement %849, %848[%53 : i32] : vector<8xbf16> loc(#loc)
    %851 = llvm.extractelement %846[%52 : i32] : vector<8xbf16> loc(#loc)
    %852 = llvm.insertelement %851, %850[%52 : i32] : vector<8xbf16> loc(#loc)
    %853 = llvm.extractelement %846[%57 : i32] : vector<8xbf16> loc(#loc)
    %854 = llvm.insertelement %853, %852[%57 : i32] : vector<8xbf16> loc(#loc)
    %855 = llvm.extractelement %846[%51 : i32] : vector<8xbf16> loc(#loc)
    %856 = llvm.insertelement %855, %854[%51 : i32] : vector<8xbf16> loc(#loc)
    %857 = llvm.extractelement %846[%61 : i32] : vector<8xbf16> loc(#loc)
    %858 = llvm.insertelement %857, %856[%61 : i32] : vector<8xbf16> loc(#loc)
    %859 = llvm.extractelement %846[%63 : i32] : vector<8xbf16> loc(#loc)
    %860 = llvm.insertelement %859, %858[%63 : i32] : vector<8xbf16> loc(#loc)
    %861 = llvm.extractelement %846[%50 : i32] : vector<8xbf16> loc(#loc)
    %862 = llvm.insertelement %861, %860[%50 : i32] : vector<8xbf16> loc(#loc)
    %863 = llvm.insertelement %68, %2[%64 : i32] : vector<4xf32> loc(#loc)
    %864 = llvm.insertelement %68, %863[%53 : i32] : vector<4xf32> loc(#loc)
    %865 = llvm.insertelement %68, %864[%52 : i32] : vector<4xf32> loc(#loc)
    %866 = llvm.insertelement %68, %865[%57 : i32] : vector<4xf32> loc(#loc)
    %867 = rocdl.mfma.f32.16x16x32.bf16 %790, %694, %866, %64, %64, %64 : (vector<8xbf16>, vector<8xbf16>, vector<4xf32>, i32, i32, i32) -> vector<4xf32> loc(#loc)
    %868 = rocdl.mfma.f32.16x16x32.bf16 %814, %718, %867, %64, %64, %64 : (vector<8xbf16>, vector<8xbf16>, vector<4xf32>, i32, i32, i32) -> vector<4xf32> loc(#loc)
    %869 = rocdl.mfma.f32.16x16x32.bf16 %838, %742, %868, %64, %64, %64 : (vector<8xbf16>, vector<8xbf16>, vector<4xf32>, i32, i32, i32) -> vector<4xf32> loc(#loc)
    %870 = rocdl.mfma.f32.16x16x32.bf16 %862, %766, %869, %64, %64, %64 : (vector<8xbf16>, vector<8xbf16>, vector<4xf32>, i32, i32, i32) -> vector<4xf32> loc(#loc)
    %871 = llvm.extractelement %870[%64 : i32] : vector<4xf32> loc(#loc)
    %872 = llvm.extractelement %870[%53 : i32] : vector<4xf32> loc(#loc)
    %873 = llvm.extractelement %870[%52 : i32] : vector<4xf32> loc(#loc)
    %874 = llvm.extractelement %870[%57 : i32] : vector<4xf32> loc(#loc)
    %875 = llvm.zext %522 : i8 to i16 loc(#loc)
    %876 = llvm.zext %530 : i8 to i16 loc(#loc)
    %877 = llvm.zext %538 : i8 to i16 loc(#loc)
    %878 = llvm.zext %546 : i8 to i16 loc(#loc)
    %879 = llvm.shl %875, %71 : i16 loc(#loc)
    %880 = llvm.shl %876, %71 : i16 loc(#loc)
    %881 = llvm.shl %877, %71 : i16 loc(#loc)
    %882 = llvm.shl %878, %71 : i16 loc(#loc)
    %883 = llvm.insertelement %437, %16[%64 : i32] : vector<4xi8> loc(#loc)
    %884 = llvm.insertelement %438, %883[%53 : i32] : vector<4xi8> loc(#loc)
    %885 = llvm.insertelement %439, %884[%52 : i32] : vector<4xi8> loc(#loc)
    %886 = llvm.insertelement %440, %885[%57 : i32] : vector<4xi8> loc(#loc)
    %887 = llvm.bitcast %886 : vector<4xi8> to i32 loc(#loc)
    %888 = llvm.zext %879 : i16 to i32 loc(#loc)
    %889 = llvm.shl %888, %60 : i32 loc(#loc)
    %890 = llvm.bitcast %889 : i32 to f32 loc(#loc)
    %891 = rocdl.cvt.scalef32.pk.bf16.fp4 %887[0], %890 : vector<2xbf16> loc(#loc)
    %892 = rocdl.cvt.scalef32.pk.bf16.fp4 %887[2], %890 : vector<2xbf16> loc(#loc)
    %893 = rocdl.cvt.scalef32.pk.bf16.fp4 %887[1], %890 : vector<2xbf16> loc(#loc)
    %894 = rocdl.cvt.scalef32.pk.bf16.fp4 %887[3], %890 : vector<2xbf16> loc(#loc)
    %895 = llvm.extractelement %891[%64 : i32] : vector<2xbf16> loc(#loc)
    %896 = llvm.extractelement %891[%53 : i32] : vector<2xbf16> loc(#loc)
    %897 = llvm.extractelement %892[%64 : i32] : vector<2xbf16> loc(#loc)
    %898 = llvm.extractelement %892[%53 : i32] : vector<2xbf16> loc(#loc)
    %899 = llvm.extractelement %893[%64 : i32] : vector<2xbf16> loc(#loc)
    %900 = llvm.extractelement %893[%53 : i32] : vector<2xbf16> loc(#loc)
    %901 = llvm.extractelement %894[%64 : i32] : vector<2xbf16> loc(#loc)
    %902 = llvm.extractelement %894[%53 : i32] : vector<2xbf16> loc(#loc)
    %903 = llvm.insertelement %444, %16[%64 : i32] : vector<4xi8> loc(#loc)
    %904 = llvm.insertelement %445, %903[%53 : i32] : vector<4xi8> loc(#loc)
    %905 = llvm.insertelement %446, %904[%52 : i32] : vector<4xi8> loc(#loc)
    %906 = llvm.insertelement %447, %905[%57 : i32] : vector<4xi8> loc(#loc)
    %907 = llvm.bitcast %906 : vector<4xi8> to i32 loc(#loc)
    %908 = llvm.zext %880 : i16 to i32 loc(#loc)
    %909 = llvm.shl %908, %60 : i32 loc(#loc)
    %910 = llvm.bitcast %909 : i32 to f32 loc(#loc)
    %911 = rocdl.cvt.scalef32.pk.bf16.fp4 %907[0], %910 : vector<2xbf16> loc(#loc)
    %912 = rocdl.cvt.scalef32.pk.bf16.fp4 %907[2], %910 : vector<2xbf16> loc(#loc)
    %913 = rocdl.cvt.scalef32.pk.bf16.fp4 %907[1], %910 : vector<2xbf16> loc(#loc)
    %914 = rocdl.cvt.scalef32.pk.bf16.fp4 %907[3], %910 : vector<2xbf16> loc(#loc)
    %915 = llvm.extractelement %911[%64 : i32] : vector<2xbf16> loc(#loc)
    %916 = llvm.extractelement %911[%53 : i32] : vector<2xbf16> loc(#loc)
    %917 = llvm.extractelement %912[%64 : i32] : vector<2xbf16> loc(#loc)
    %918 = llvm.extractelement %912[%53 : i32] : vector<2xbf16> loc(#loc)
    %919 = llvm.extractelement %913[%64 : i32] : vector<2xbf16> loc(#loc)
    %920 = llvm.extractelement %913[%53 : i32] : vector<2xbf16> loc(#loc)
    %921 = llvm.extractelement %914[%64 : i32] : vector<2xbf16> loc(#loc)
    %922 = llvm.extractelement %914[%53 : i32] : vector<2xbf16> loc(#loc)
    %923 = llvm.insertelement %467, %16[%64 : i32] : vector<4xi8> loc(#loc)
    %924 = llvm.insertelement %468, %923[%53 : i32] : vector<4xi8> loc(#loc)
    %925 = llvm.insertelement %469, %924[%52 : i32] : vector<4xi8> loc(#loc)
    %926 = llvm.insertelement %470, %925[%57 : i32] : vector<4xi8> loc(#loc)
    %927 = llvm.bitcast %926 : vector<4xi8> to i32 loc(#loc)
    %928 = llvm.zext %881 : i16 to i32 loc(#loc)
    %929 = llvm.shl %928, %60 : i32 loc(#loc)
    %930 = llvm.bitcast %929 : i32 to f32 loc(#loc)
    %931 = rocdl.cvt.scalef32.pk.bf16.fp4 %927[0], %930 : vector<2xbf16> loc(#loc)
    %932 = rocdl.cvt.scalef32.pk.bf16.fp4 %927[2], %930 : vector<2xbf16> loc(#loc)
    %933 = rocdl.cvt.scalef32.pk.bf16.fp4 %927[1], %930 : vector<2xbf16> loc(#loc)
    %934 = rocdl.cvt.scalef32.pk.bf16.fp4 %927[3], %930 : vector<2xbf16> loc(#loc)
    %935 = llvm.extractelement %931[%64 : i32] : vector<2xbf16> loc(#loc)
    %936 = llvm.extractelement %931[%53 : i32] : vector<2xbf16> loc(#loc)
    %937 = llvm.extractelement %932[%64 : i32] : vector<2xbf16> loc(#loc)
    %938 = llvm.extractelement %932[%53 : i32] : vector<2xbf16> loc(#loc)
    %939 = llvm.extractelement %933[%64 : i32] : vector<2xbf16> loc(#loc)
    %940 = llvm.extractelement %933[%53 : i32] : vector<2xbf16> loc(#loc)
    %941 = llvm.extractelement %934[%64 : i32] : vector<2xbf16> loc(#loc)
    %942 = llvm.extractelement %934[%53 : i32] : vector<2xbf16> loc(#loc)
    %943 = llvm.insertelement %474, %16[%64 : i32] : vector<4xi8> loc(#loc)
    %944 = llvm.insertelement %475, %943[%53 : i32] : vector<4xi8> loc(#loc)
    %945 = llvm.insertelement %476, %944[%52 : i32] : vector<4xi8> loc(#loc)
    %946 = llvm.insertelement %477, %945[%57 : i32] : vector<4xi8> loc(#loc)
    %947 = llvm.bitcast %946 : vector<4xi8> to i32 loc(#loc)
    %948 = llvm.zext %882 : i16 to i32 loc(#loc)
    %949 = llvm.shl %948, %60 : i32 loc(#loc)
    %950 = llvm.bitcast %949 : i32 to f32 loc(#loc)
    %951 = rocdl.cvt.scalef32.pk.bf16.fp4 %947[0], %950 : vector<2xbf16> loc(#loc)
    %952 = rocdl.cvt.scalef32.pk.bf16.fp4 %947[2], %950 : vector<2xbf16> loc(#loc)
    %953 = rocdl.cvt.scalef32.pk.bf16.fp4 %947[1], %950 : vector<2xbf16> loc(#loc)
    %954 = rocdl.cvt.scalef32.pk.bf16.fp4 %947[3], %950 : vector<2xbf16> loc(#loc)
    %955 = llvm.extractelement %951[%64 : i32] : vector<2xbf16> loc(#loc)
    %956 = llvm.extractelement %951[%53 : i32] : vector<2xbf16> loc(#loc)
    %957 = llvm.extractelement %952[%64 : i32] : vector<2xbf16> loc(#loc)
    %958 = llvm.extractelement %952[%53 : i32] : vector<2xbf16> loc(#loc)
    %959 = llvm.extractelement %953[%64 : i32] : vector<2xbf16> loc(#loc)
    %960 = llvm.extractelement %953[%53 : i32] : vector<2xbf16> loc(#loc)
    %961 = llvm.extractelement %954[%64 : i32] : vector<2xbf16> loc(#loc)
    %962 = llvm.extractelement %954[%53 : i32] : vector<2xbf16> loc(#loc)
    %963 = llvm.icmp "eq" %522, %70 : i8 loc(#loc)
    %964 = llvm.icmp "eq" %530, %70 : i8 loc(#loc)
    %965 = llvm.icmp "eq" %538, %70 : i8 loc(#loc)
    %966 = llvm.icmp "eq" %546, %70 : i8 loc(#loc)
    %967 = llvm.select %963, %69, %895 : i1, bf16 loc(#loc)
    %968 = llvm.select %963, %69, %896 : i1, bf16 loc(#loc)
    %969 = llvm.select %963, %69, %897 : i1, bf16 loc(#loc)
    %970 = llvm.select %963, %69, %898 : i1, bf16 loc(#loc)
    %971 = llvm.select %963, %69, %899 : i1, bf16 loc(#loc)
    %972 = llvm.select %963, %69, %900 : i1, bf16 loc(#loc)
    %973 = llvm.select %963, %69, %901 : i1, bf16 loc(#loc)
    %974 = llvm.select %963, %69, %902 : i1, bf16 loc(#loc)
    %975 = llvm.select %964, %69, %915 : i1, bf16 loc(#loc)
    %976 = llvm.select %964, %69, %916 : i1, bf16 loc(#loc)
    %977 = llvm.select %964, %69, %917 : i1, bf16 loc(#loc)
    %978 = llvm.select %964, %69, %918 : i1, bf16 loc(#loc)
    %979 = llvm.select %964, %69, %919 : i1, bf16 loc(#loc)
    %980 = llvm.select %964, %69, %920 : i1, bf16 loc(#loc)
    %981 = llvm.select %964, %69, %921 : i1, bf16 loc(#loc)
    %982 = llvm.select %964, %69, %922 : i1, bf16 loc(#loc)
    %983 = llvm.select %965, %69, %935 : i1, bf16 loc(#loc)
    %984 = llvm.select %965, %69, %936 : i1, bf16 loc(#loc)
    %985 = llvm.select %965, %69, %937 : i1, bf16 loc(#loc)
    %986 = llvm.select %965, %69, %938 : i1, bf16 loc(#loc)
    %987 = llvm.select %965, %69, %939 : i1, bf16 loc(#loc)
    %988 = llvm.select %965, %69, %940 : i1, bf16 loc(#loc)
    %989 = llvm.select %965, %69, %941 : i1, bf16 loc(#loc)
    %990 = llvm.select %965, %69, %942 : i1, bf16 loc(#loc)
    %991 = llvm.select %966, %69, %955 : i1, bf16 loc(#loc)
    %992 = llvm.select %966, %69, %956 : i1, bf16 loc(#loc)
    %993 = llvm.select %966, %69, %957 : i1, bf16 loc(#loc)
    %994 = llvm.select %966, %69, %958 : i1, bf16 loc(#loc)
    %995 = llvm.select %966, %69, %959 : i1, bf16 loc(#loc)
    %996 = llvm.select %966, %69, %960 : i1, bf16 loc(#loc)
    %997 = llvm.select %966, %69, %961 : i1, bf16 loc(#loc)
    %998 = llvm.select %966, %69, %962 : i1, bf16 loc(#loc)
    %999 = llvm.insertelement %270, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %1000 = llvm.insertelement %271, %999[%53 : i32] : vector<8xbf16> loc(#loc)
    %1001 = llvm.insertelement %272, %1000[%52 : i32] : vector<8xbf16> loc(#loc)
    %1002 = llvm.insertelement %273, %1001[%57 : i32] : vector<8xbf16> loc(#loc)
    %1003 = llvm.insertelement %274, %1002[%51 : i32] : vector<8xbf16> loc(#loc)
    %1004 = llvm.insertelement %275, %1003[%61 : i32] : vector<8xbf16> loc(#loc)
    %1005 = llvm.insertelement %276, %1004[%63 : i32] : vector<8xbf16> loc(#loc)
    %1006 = llvm.insertelement %277, %1005[%50 : i32] : vector<8xbf16> loc(#loc)
    %1007 = llvm.extractelement %1006[%64 : i32] : vector<8xbf16> loc(#loc)
    %1008 = llvm.insertelement %1007, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %1009 = llvm.extractelement %1006[%53 : i32] : vector<8xbf16> loc(#loc)
    %1010 = llvm.insertelement %1009, %1008[%53 : i32] : vector<8xbf16> loc(#loc)
    %1011 = llvm.extractelement %1006[%52 : i32] : vector<8xbf16> loc(#loc)
    %1012 = llvm.insertelement %1011, %1010[%52 : i32] : vector<8xbf16> loc(#loc)
    %1013 = llvm.extractelement %1006[%57 : i32] : vector<8xbf16> loc(#loc)
    %1014 = llvm.insertelement %1013, %1012[%57 : i32] : vector<8xbf16> loc(#loc)
    %1015 = llvm.extractelement %1006[%51 : i32] : vector<8xbf16> loc(#loc)
    %1016 = llvm.insertelement %1015, %1014[%51 : i32] : vector<8xbf16> loc(#loc)
    %1017 = llvm.extractelement %1006[%61 : i32] : vector<8xbf16> loc(#loc)
    %1018 = llvm.insertelement %1017, %1016[%61 : i32] : vector<8xbf16> loc(#loc)
    %1019 = llvm.extractelement %1006[%63 : i32] : vector<8xbf16> loc(#loc)
    %1020 = llvm.insertelement %1019, %1018[%63 : i32] : vector<8xbf16> loc(#loc)
    %1021 = llvm.extractelement %1006[%50 : i32] : vector<8xbf16> loc(#loc)
    %1022 = llvm.insertelement %1021, %1020[%50 : i32] : vector<8xbf16> loc(#loc)
    %1023 = llvm.insertelement %293, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %1024 = llvm.insertelement %294, %1023[%53 : i32] : vector<8xbf16> loc(#loc)
    %1025 = llvm.insertelement %295, %1024[%52 : i32] : vector<8xbf16> loc(#loc)
    %1026 = llvm.insertelement %296, %1025[%57 : i32] : vector<8xbf16> loc(#loc)
    %1027 = llvm.insertelement %297, %1026[%51 : i32] : vector<8xbf16> loc(#loc)
    %1028 = llvm.insertelement %298, %1027[%61 : i32] : vector<8xbf16> loc(#loc)
    %1029 = llvm.insertelement %299, %1028[%63 : i32] : vector<8xbf16> loc(#loc)
    %1030 = llvm.insertelement %300, %1029[%50 : i32] : vector<8xbf16> loc(#loc)
    %1031 = llvm.extractelement %1030[%64 : i32] : vector<8xbf16> loc(#loc)
    %1032 = llvm.insertelement %1031, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %1033 = llvm.extractelement %1030[%53 : i32] : vector<8xbf16> loc(#loc)
    %1034 = llvm.insertelement %1033, %1032[%53 : i32] : vector<8xbf16> loc(#loc)
    %1035 = llvm.extractelement %1030[%52 : i32] : vector<8xbf16> loc(#loc)
    %1036 = llvm.insertelement %1035, %1034[%52 : i32] : vector<8xbf16> loc(#loc)
    %1037 = llvm.extractelement %1030[%57 : i32] : vector<8xbf16> loc(#loc)
    %1038 = llvm.insertelement %1037, %1036[%57 : i32] : vector<8xbf16> loc(#loc)
    %1039 = llvm.extractelement %1030[%51 : i32] : vector<8xbf16> loc(#loc)
    %1040 = llvm.insertelement %1039, %1038[%51 : i32] : vector<8xbf16> loc(#loc)
    %1041 = llvm.extractelement %1030[%61 : i32] : vector<8xbf16> loc(#loc)
    %1042 = llvm.insertelement %1041, %1040[%61 : i32] : vector<8xbf16> loc(#loc)
    %1043 = llvm.extractelement %1030[%63 : i32] : vector<8xbf16> loc(#loc)
    %1044 = llvm.insertelement %1043, %1042[%63 : i32] : vector<8xbf16> loc(#loc)
    %1045 = llvm.extractelement %1030[%50 : i32] : vector<8xbf16> loc(#loc)
    %1046 = llvm.insertelement %1045, %1044[%50 : i32] : vector<8xbf16> loc(#loc)
    %1047 = llvm.insertelement %316, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %1048 = llvm.insertelement %317, %1047[%53 : i32] : vector<8xbf16> loc(#loc)
    %1049 = llvm.insertelement %318, %1048[%52 : i32] : vector<8xbf16> loc(#loc)
    %1050 = llvm.insertelement %319, %1049[%57 : i32] : vector<8xbf16> loc(#loc)
    %1051 = llvm.insertelement %320, %1050[%51 : i32] : vector<8xbf16> loc(#loc)
    %1052 = llvm.insertelement %321, %1051[%61 : i32] : vector<8xbf16> loc(#loc)
    %1053 = llvm.insertelement %322, %1052[%63 : i32] : vector<8xbf16> loc(#loc)
    %1054 = llvm.insertelement %323, %1053[%50 : i32] : vector<8xbf16> loc(#loc)
    %1055 = llvm.extractelement %1054[%64 : i32] : vector<8xbf16> loc(#loc)
    %1056 = llvm.insertelement %1055, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %1057 = llvm.extractelement %1054[%53 : i32] : vector<8xbf16> loc(#loc)
    %1058 = llvm.insertelement %1057, %1056[%53 : i32] : vector<8xbf16> loc(#loc)
    %1059 = llvm.extractelement %1054[%52 : i32] : vector<8xbf16> loc(#loc)
    %1060 = llvm.insertelement %1059, %1058[%52 : i32] : vector<8xbf16> loc(#loc)
    %1061 = llvm.extractelement %1054[%57 : i32] : vector<8xbf16> loc(#loc)
    %1062 = llvm.insertelement %1061, %1060[%57 : i32] : vector<8xbf16> loc(#loc)
    %1063 = llvm.extractelement %1054[%51 : i32] : vector<8xbf16> loc(#loc)
    %1064 = llvm.insertelement %1063, %1062[%51 : i32] : vector<8xbf16> loc(#loc)
    %1065 = llvm.extractelement %1054[%61 : i32] : vector<8xbf16> loc(#loc)
    %1066 = llvm.insertelement %1065, %1064[%61 : i32] : vector<8xbf16> loc(#loc)
    %1067 = llvm.extractelement %1054[%63 : i32] : vector<8xbf16> loc(#loc)
    %1068 = llvm.insertelement %1067, %1066[%63 : i32] : vector<8xbf16> loc(#loc)
    %1069 = llvm.extractelement %1054[%50 : i32] : vector<8xbf16> loc(#loc)
    %1070 = llvm.insertelement %1069, %1068[%50 : i32] : vector<8xbf16> loc(#loc)
    %1071 = llvm.insertelement %339, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %1072 = llvm.insertelement %340, %1071[%53 : i32] : vector<8xbf16> loc(#loc)
    %1073 = llvm.insertelement %341, %1072[%52 : i32] : vector<8xbf16> loc(#loc)
    %1074 = llvm.insertelement %342, %1073[%57 : i32] : vector<8xbf16> loc(#loc)
    %1075 = llvm.insertelement %343, %1074[%51 : i32] : vector<8xbf16> loc(#loc)
    %1076 = llvm.insertelement %344, %1075[%61 : i32] : vector<8xbf16> loc(#loc)
    %1077 = llvm.insertelement %345, %1076[%63 : i32] : vector<8xbf16> loc(#loc)
    %1078 = llvm.insertelement %346, %1077[%50 : i32] : vector<8xbf16> loc(#loc)
    %1079 = llvm.extractelement %1078[%64 : i32] : vector<8xbf16> loc(#loc)
    %1080 = llvm.insertelement %1079, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %1081 = llvm.extractelement %1078[%53 : i32] : vector<8xbf16> loc(#loc)
    %1082 = llvm.insertelement %1081, %1080[%53 : i32] : vector<8xbf16> loc(#loc)
    %1083 = llvm.extractelement %1078[%52 : i32] : vector<8xbf16> loc(#loc)
    %1084 = llvm.insertelement %1083, %1082[%52 : i32] : vector<8xbf16> loc(#loc)
    %1085 = llvm.extractelement %1078[%57 : i32] : vector<8xbf16> loc(#loc)
    %1086 = llvm.insertelement %1085, %1084[%57 : i32] : vector<8xbf16> loc(#loc)
    %1087 = llvm.extractelement %1078[%51 : i32] : vector<8xbf16> loc(#loc)
    %1088 = llvm.insertelement %1087, %1086[%51 : i32] : vector<8xbf16> loc(#loc)
    %1089 = llvm.extractelement %1078[%61 : i32] : vector<8xbf16> loc(#loc)
    %1090 = llvm.insertelement %1089, %1088[%61 : i32] : vector<8xbf16> loc(#loc)
    %1091 = llvm.extractelement %1078[%63 : i32] : vector<8xbf16> loc(#loc)
    %1092 = llvm.insertelement %1091, %1090[%63 : i32] : vector<8xbf16> loc(#loc)
    %1093 = llvm.extractelement %1078[%50 : i32] : vector<8xbf16> loc(#loc)
    %1094 = llvm.insertelement %1093, %1092[%50 : i32] : vector<8xbf16> loc(#loc)
    %1095 = llvm.insertelement %967, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %1096 = llvm.insertelement %968, %1095[%53 : i32] : vector<8xbf16> loc(#loc)
    %1097 = llvm.insertelement %969, %1096[%52 : i32] : vector<8xbf16> loc(#loc)
    %1098 = llvm.insertelement %970, %1097[%57 : i32] : vector<8xbf16> loc(#loc)
    %1099 = llvm.insertelement %971, %1098[%51 : i32] : vector<8xbf16> loc(#loc)
    %1100 = llvm.insertelement %972, %1099[%61 : i32] : vector<8xbf16> loc(#loc)
    %1101 = llvm.insertelement %973, %1100[%63 : i32] : vector<8xbf16> loc(#loc)
    %1102 = llvm.insertelement %974, %1101[%50 : i32] : vector<8xbf16> loc(#loc)
    %1103 = llvm.extractelement %1102[%64 : i32] : vector<8xbf16> loc(#loc)
    %1104 = llvm.insertelement %1103, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %1105 = llvm.extractelement %1102[%53 : i32] : vector<8xbf16> loc(#loc)
    %1106 = llvm.insertelement %1105, %1104[%53 : i32] : vector<8xbf16> loc(#loc)
    %1107 = llvm.extractelement %1102[%52 : i32] : vector<8xbf16> loc(#loc)
    %1108 = llvm.insertelement %1107, %1106[%52 : i32] : vector<8xbf16> loc(#loc)
    %1109 = llvm.extractelement %1102[%57 : i32] : vector<8xbf16> loc(#loc)
    %1110 = llvm.insertelement %1109, %1108[%57 : i32] : vector<8xbf16> loc(#loc)
    %1111 = llvm.extractelement %1102[%51 : i32] : vector<8xbf16> loc(#loc)
    %1112 = llvm.insertelement %1111, %1110[%51 : i32] : vector<8xbf16> loc(#loc)
    %1113 = llvm.extractelement %1102[%61 : i32] : vector<8xbf16> loc(#loc)
    %1114 = llvm.insertelement %1113, %1112[%61 : i32] : vector<8xbf16> loc(#loc)
    %1115 = llvm.extractelement %1102[%63 : i32] : vector<8xbf16> loc(#loc)
    %1116 = llvm.insertelement %1115, %1114[%63 : i32] : vector<8xbf16> loc(#loc)
    %1117 = llvm.extractelement %1102[%50 : i32] : vector<8xbf16> loc(#loc)
    %1118 = llvm.insertelement %1117, %1116[%50 : i32] : vector<8xbf16> loc(#loc)
    %1119 = llvm.insertelement %975, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %1120 = llvm.insertelement %976, %1119[%53 : i32] : vector<8xbf16> loc(#loc)
    %1121 = llvm.insertelement %977, %1120[%52 : i32] : vector<8xbf16> loc(#loc)
    %1122 = llvm.insertelement %978, %1121[%57 : i32] : vector<8xbf16> loc(#loc)
    %1123 = llvm.insertelement %979, %1122[%51 : i32] : vector<8xbf16> loc(#loc)
    %1124 = llvm.insertelement %980, %1123[%61 : i32] : vector<8xbf16> loc(#loc)
    %1125 = llvm.insertelement %981, %1124[%63 : i32] : vector<8xbf16> loc(#loc)
    %1126 = llvm.insertelement %982, %1125[%50 : i32] : vector<8xbf16> loc(#loc)
    %1127 = llvm.extractelement %1126[%64 : i32] : vector<8xbf16> loc(#loc)
    %1128 = llvm.insertelement %1127, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %1129 = llvm.extractelement %1126[%53 : i32] : vector<8xbf16> loc(#loc)
    %1130 = llvm.insertelement %1129, %1128[%53 : i32] : vector<8xbf16> loc(#loc)
    %1131 = llvm.extractelement %1126[%52 : i32] : vector<8xbf16> loc(#loc)
    %1132 = llvm.insertelement %1131, %1130[%52 : i32] : vector<8xbf16> loc(#loc)
    %1133 = llvm.extractelement %1126[%57 : i32] : vector<8xbf16> loc(#loc)
    %1134 = llvm.insertelement %1133, %1132[%57 : i32] : vector<8xbf16> loc(#loc)
    %1135 = llvm.extractelement %1126[%51 : i32] : vector<8xbf16> loc(#loc)
    %1136 = llvm.insertelement %1135, %1134[%51 : i32] : vector<8xbf16> loc(#loc)
    %1137 = llvm.extractelement %1126[%61 : i32] : vector<8xbf16> loc(#loc)
    %1138 = llvm.insertelement %1137, %1136[%61 : i32] : vector<8xbf16> loc(#loc)
    %1139 = llvm.extractelement %1126[%63 : i32] : vector<8xbf16> loc(#loc)
    %1140 = llvm.insertelement %1139, %1138[%63 : i32] : vector<8xbf16> loc(#loc)
    %1141 = llvm.extractelement %1126[%50 : i32] : vector<8xbf16> loc(#loc)
    %1142 = llvm.insertelement %1141, %1140[%50 : i32] : vector<8xbf16> loc(#loc)
    %1143 = llvm.insertelement %983, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %1144 = llvm.insertelement %984, %1143[%53 : i32] : vector<8xbf16> loc(#loc)
    %1145 = llvm.insertelement %985, %1144[%52 : i32] : vector<8xbf16> loc(#loc)
    %1146 = llvm.insertelement %986, %1145[%57 : i32] : vector<8xbf16> loc(#loc)
    %1147 = llvm.insertelement %987, %1146[%51 : i32] : vector<8xbf16> loc(#loc)
    %1148 = llvm.insertelement %988, %1147[%61 : i32] : vector<8xbf16> loc(#loc)
    %1149 = llvm.insertelement %989, %1148[%63 : i32] : vector<8xbf16> loc(#loc)
    %1150 = llvm.insertelement %990, %1149[%50 : i32] : vector<8xbf16> loc(#loc)
    %1151 = llvm.extractelement %1150[%64 : i32] : vector<8xbf16> loc(#loc)
    %1152 = llvm.insertelement %1151, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %1153 = llvm.extractelement %1150[%53 : i32] : vector<8xbf16> loc(#loc)
    %1154 = llvm.insertelement %1153, %1152[%53 : i32] : vector<8xbf16> loc(#loc)
    %1155 = llvm.extractelement %1150[%52 : i32] : vector<8xbf16> loc(#loc)
    %1156 = llvm.insertelement %1155, %1154[%52 : i32] : vector<8xbf16> loc(#loc)
    %1157 = llvm.extractelement %1150[%57 : i32] : vector<8xbf16> loc(#loc)
    %1158 = llvm.insertelement %1157, %1156[%57 : i32] : vector<8xbf16> loc(#loc)
    %1159 = llvm.extractelement %1150[%51 : i32] : vector<8xbf16> loc(#loc)
    %1160 = llvm.insertelement %1159, %1158[%51 : i32] : vector<8xbf16> loc(#loc)
    %1161 = llvm.extractelement %1150[%61 : i32] : vector<8xbf16> loc(#loc)
    %1162 = llvm.insertelement %1161, %1160[%61 : i32] : vector<8xbf16> loc(#loc)
    %1163 = llvm.extractelement %1150[%63 : i32] : vector<8xbf16> loc(#loc)
    %1164 = llvm.insertelement %1163, %1162[%63 : i32] : vector<8xbf16> loc(#loc)
    %1165 = llvm.extractelement %1150[%50 : i32] : vector<8xbf16> loc(#loc)
    %1166 = llvm.insertelement %1165, %1164[%50 : i32] : vector<8xbf16> loc(#loc)
    %1167 = llvm.insertelement %991, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %1168 = llvm.insertelement %992, %1167[%53 : i32] : vector<8xbf16> loc(#loc)
    %1169 = llvm.insertelement %993, %1168[%52 : i32] : vector<8xbf16> loc(#loc)
    %1170 = llvm.insertelement %994, %1169[%57 : i32] : vector<8xbf16> loc(#loc)
    %1171 = llvm.insertelement %995, %1170[%51 : i32] : vector<8xbf16> loc(#loc)
    %1172 = llvm.insertelement %996, %1171[%61 : i32] : vector<8xbf16> loc(#loc)
    %1173 = llvm.insertelement %997, %1172[%63 : i32] : vector<8xbf16> loc(#loc)
    %1174 = llvm.insertelement %998, %1173[%50 : i32] : vector<8xbf16> loc(#loc)
    %1175 = llvm.extractelement %1174[%64 : i32] : vector<8xbf16> loc(#loc)
    %1176 = llvm.insertelement %1175, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %1177 = llvm.extractelement %1174[%53 : i32] : vector<8xbf16> loc(#loc)
    %1178 = llvm.insertelement %1177, %1176[%53 : i32] : vector<8xbf16> loc(#loc)
    %1179 = llvm.extractelement %1174[%52 : i32] : vector<8xbf16> loc(#loc)
    %1180 = llvm.insertelement %1179, %1178[%52 : i32] : vector<8xbf16> loc(#loc)
    %1181 = llvm.extractelement %1174[%57 : i32] : vector<8xbf16> loc(#loc)
    %1182 = llvm.insertelement %1181, %1180[%57 : i32] : vector<8xbf16> loc(#loc)
    %1183 = llvm.extractelement %1174[%51 : i32] : vector<8xbf16> loc(#loc)
    %1184 = llvm.insertelement %1183, %1182[%51 : i32] : vector<8xbf16> loc(#loc)
    %1185 = llvm.extractelement %1174[%61 : i32] : vector<8xbf16> loc(#loc)
    %1186 = llvm.insertelement %1185, %1184[%61 : i32] : vector<8xbf16> loc(#loc)
    %1187 = llvm.extractelement %1174[%63 : i32] : vector<8xbf16> loc(#loc)
    %1188 = llvm.insertelement %1187, %1186[%63 : i32] : vector<8xbf16> loc(#loc)
    %1189 = llvm.extractelement %1174[%50 : i32] : vector<8xbf16> loc(#loc)
    %1190 = llvm.insertelement %1189, %1188[%50 : i32] : vector<8xbf16> loc(#loc)
    %1191 = rocdl.mfma.f32.16x16x32.bf16 %1118, %1022, %866, %64, %64, %64 : (vector<8xbf16>, vector<8xbf16>, vector<4xf32>, i32, i32, i32) -> vector<4xf32> loc(#loc)
    %1192 = rocdl.mfma.f32.16x16x32.bf16 %1142, %1046, %1191, %64, %64, %64 : (vector<8xbf16>, vector<8xbf16>, vector<4xf32>, i32, i32, i32) -> vector<4xf32> loc(#loc)
    %1193 = rocdl.mfma.f32.16x16x32.bf16 %1166, %1070, %1192, %64, %64, %64 : (vector<8xbf16>, vector<8xbf16>, vector<4xf32>, i32, i32, i32) -> vector<4xf32> loc(#loc)
    %1194 = rocdl.mfma.f32.16x16x32.bf16 %1190, %1094, %1193, %64, %64, %64 : (vector<8xbf16>, vector<8xbf16>, vector<4xf32>, i32, i32, i32) -> vector<4xf32> loc(#loc)
    %1195 = llvm.extractelement %1194[%64 : i32] : vector<4xf32> loc(#loc)
    %1196 = llvm.extractelement %1194[%53 : i32] : vector<4xf32> loc(#loc)
    %1197 = llvm.extractelement %1194[%52 : i32] : vector<4xf32> loc(#loc)
    %1198 = llvm.extractelement %1194[%57 : i32] : vector<4xf32> loc(#loc)
    %1199 = llvm.fadd %871, %1195 : f32 loc(#loc)
    %1200 = llvm.fadd %872, %1196 : f32 loc(#loc)
    %1201 = llvm.fadd %873, %1197 : f32 loc(#loc)
    %1202 = llvm.fadd %874, %1198 : f32 loc(#loc)
    %1203 = llvm.mul %109, %73 : i32 loc(#loc)
    %1204 = llvm.add %135, %1203 : i32 loc(#loc)
    %1205 = llvm.insertelement %1199, %1[%64 : i32] : vector<2xf32> loc(#loc)
    %1206 = llvm.insertelement %1200, %1205[%53 : i32] : vector<2xf32> loc(#loc)
    %1207 = llvm.fptrunc %1206 : vector<2xf32> to vector<2xbf16> loc(#loc)
    %1208 = llvm.extractelement %1207[%64 : i32] : vector<2xbf16> loc(#loc)
    %1209 = llvm.extractelement %1207[%53 : i32] : vector<2xbf16> loc(#loc)
    %1210 = llvm.insertelement %1201, %1[%64 : i32] : vector<2xf32> loc(#loc)
    %1211 = llvm.insertelement %1202, %1210[%53 : i32] : vector<2xf32> loc(#loc)
    %1212 = llvm.fptrunc %1211 : vector<2xf32> to vector<2xbf16> loc(#loc)
    %1213 = llvm.extractelement %1212[%64 : i32] : vector<2xbf16> loc(#loc)
    %1214 = llvm.extractelement %1212[%53 : i32] : vector<2xbf16> loc(#loc)
    %1215 = rocdl.make.buffer.rsrc %out, %11, %9, %10 : <1> to <8> loc(#loc)
    %1216 = llvm.insertelement %1208, %0[%64 : i32] : vector<4xbf16> loc(#loc)
    %1217 = llvm.insertelement %1209, %1216[%53 : i32] : vector<4xbf16> loc(#loc)
    %1218 = llvm.insertelement %1213, %1217[%52 : i32] : vector<4xbf16> loc(#loc)
    %1219 = llvm.insertelement %1214, %1218[%57 : i32] : vector<4xbf16> loc(#loc)
    %1220 = llvm.bitcast %1219 : vector<4xbf16> to vector<2xi32> loc(#loc)
    %1221 = llvm.mul %1204, %52 : i32 loc(#loc)
    %1222 = llvm.select %46, %1221, %7 : i1, i32 loc(#loc)
    rocdl.raw.ptr.buffer.store %1220, %1215, %1222, %64, %64 : vector<2xi32> loc(#loc)
    llvm.return loc(#loc)
  } loc(#loc)
} loc(#loc)


// -----// IR Dump Before ArithToLLVMConversionPass (convert-arith-to-llvm) ('builtin.module' operation) //----- //
#loc = loc(unknown)
#loc1 = loc("a_base")
#loc2 = loc("stride_a0")
#loc3 = loc("b_base")
#loc4 = loc("stride_b1")
#loc5 = loc("b_scale")
#loc6 = loc("out")
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.shared = 16384 : i32, ttg.target = "hip:gfx950", "ttg.threads-per-warp" = 64 : i32} {
  llvm.mlir.global external @global_smem() {addr_space = 3 : i32, alignment = 16 : i64} : !llvm.array<0 x i8> loc(#loc)
  llvm.func @"__triton_hip_predicated_load_vector<8xbf16>_!llvm.ptr<1>_i1_vector<8xbf16>_"(!llvm.ptr<1>, i1, vector<8xbf16>) -> vector<8xbf16> attributes {libname = "", libpath = ""} loc(#loc)
  llvm.func @"__triton_hip_predicated_store_!llvm.void_!llvm.ptr<3>_vector<8xbf16>_i1_"(!llvm.ptr<3>, vector<8xbf16>, i1) attributes {libname = "", libpath = ""} loc(#loc)
  llvm.func @"__triton_hip_predicated_load_vector<8xbf16>_!llvm.ptr<3>_i1_vector<8xbf16>_"(!llvm.ptr<3>, i1, vector<8xbf16>) -> vector<8xbf16> attributes {libname = "", libpath = ""} loc(#loc)
  llvm.func @"__triton_hip_predicated_load_vector<16xi8>_!llvm.ptr<1>_i1_vector<16xi8>_"(!llvm.ptr<1>, i1, vector<16xi8>) -> vector<16xi8> attributes {libname = "", libpath = ""} loc(#loc)
  llvm.func @"__triton_hip_predicated_store_!llvm.void_!llvm.ptr<3>_vector<4xi8>_i1_"(!llvm.ptr<3>, vector<4xi8>, i1) attributes {libname = "", libpath = ""} loc(#loc)
  llvm.func @"__triton_hip_predicated_load_vector<4xi8>_!llvm.ptr<3>_i1_vector<4xi8>_"(!llvm.ptr<3>, i1, vector<4xi8>) -> vector<4xi8> attributes {libname = "", libpath = ""} loc(#loc)
  llvm.func @"__triton_hip_predicated_store_!llvm.void_!llvm.ptr<3>_vector<1xi8>_i1_"(!llvm.ptr<3>, vector<1xi8>, i1) attributes {libname = "", libpath = ""} loc(#loc)
  llvm.func @"__triton_hip_predicated_load_vector<1xi8>_!llvm.ptr<3>_i1_vector<1xi8>_"(!llvm.ptr<3>, i1, vector<1xi8>) -> vector<1xi8> attributes {libname = "", libpath = ""} loc(#loc)
  llvm.func @dot_scale_kernel(%a_base: !llvm.ptr<1> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("a_base"), %stride_a0: i32 {tt.divisibility = 16 : i32} loc("stride_a0"), %b_base: !llvm.ptr<1> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("b_base"), %stride_b1: i32 {tt.divisibility = 16 : i32} loc("stride_b1"), %b_scale: !llvm.ptr<1> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("b_scale"), %out: !llvm.ptr<1> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("out"), %arg6: !llvm.ptr<1> loc(unknown), %arg7: !llvm.ptr<1> loc(unknown)) attributes {noinline = false, nvvm.kernel = 1 : ui1, nvvm.reqntid = array<i32: 128>} {
    %0 = llvm.mlir.undef : vector<4xbf16> loc(#loc)
    %1 = llvm.mlir.undef : vector<2xf32> loc(#loc)
    %2 = llvm.mlir.undef : vector<4xf32> loc(#loc)
    %3 = llvm.mlir.constant(28 : i32) : i32 loc(#loc)
    %4 = llvm.mlir.constant(20 : i32) : i32 loc(#loc)
    %5 = llvm.mlir.undef : vector<1xi8> loc(#loc)
    %6 = llvm.mlir.constant(63 : i32) : i32 loc(#loc)
    %7 = llvm.mlir.constant(-2147483648 : i32) : i32 loc(#loc)
    %8 = llvm.mlir.constant(dense<0> : vector<1xi8>) : vector<1xi8> loc(#loc)
    %9 = llvm.mlir.constant(2147483646 : i32) : i32 loc(#loc)
    %10 = llvm.mlir.constant(159744 : i32) : i32 loc(#loc)
    %11 = llvm.mlir.constant(0 : i16) : i16 loc(#loc)
    %12 = llvm.mlir.constant(580 : i32) : i32 loc(#loc)
    %13 = llvm.mlir.constant(dense<0> : vector<4xi8>) : vector<4xi8> loc(#loc)
    %14 = llvm.mlir.constant(260 : i32) : i32 loc(#loc)
    %15 = llvm.mlir.constant(2048 : i32) : i32 loc(#loc)
    %16 = llvm.mlir.undef : vector<4xi8> loc(#loc)
    %17 = llvm.mlir.constant(576 : i32) : i32 loc(#loc)
    %18 = llvm.mlir.constant(1024 : i32) : i32 loc(#loc)
    %19 = llvm.mlir.constant(15 : index) : i32 loc(#loc)
    %20 = llvm.mlir.constant(14 : index) : i32 loc(#loc)
    %21 = llvm.mlir.constant(13 : index) : i32 loc(#loc)
    %22 = llvm.mlir.constant(12 : index) : i32 loc(#loc)
    %23 = llvm.mlir.constant(11 : index) : i32 loc(#loc)
    %24 = llvm.mlir.constant(10 : index) : i32 loc(#loc)
    %25 = llvm.mlir.constant(9 : index) : i32 loc(#loc)
    %26 = llvm.mlir.constant(8 : index) : i32 loc(#loc)
    %27 = llvm.mlir.constant(dense<0> : vector<16xi8>) : vector<16xi8> loc(#loc)
    %28 = llvm.mlir.constant(96 : i32) : i32 loc(#loc)
    %29 = llvm.mlir.constant(30 : i32) : i32 loc(#loc)
    %30 = llvm.mlir.constant(2112 : i32) : i32 loc(#loc)
    %31 = llvm.mlir.undef : vector<8xbf16> loc(#loc)
    %32 = llvm.mlir.constant(8192 : i32) : i32 loc(#loc)
    %33 = llvm.mlir.constant(256 : i32) : i32 loc(#loc)
    %34 = llvm.mlir.constant(4096 : i32) : i32 loc(#loc)
    %35 = llvm.mlir.constant(192 : i32) : i32 loc(#loc)
    %36 = llvm.mlir.constant(206 : i32) : i32 loc(#loc)
    %37 = llvm.mlir.addressof @global_smem : !llvm.ptr<3> loc(#loc)
    %38 = llvm.mlir.constant(7 : index) : i32 loc(#loc)
    %39 = llvm.mlir.constant(6 : index) : i32 loc(#loc)
    %40 = llvm.mlir.constant(5 : index) : i32 loc(#loc)
    %41 = llvm.mlir.constant(4 : index) : i32 loc(#loc)
    %42 = llvm.mlir.constant(3 : index) : i32 loc(#loc)
    %43 = llvm.mlir.constant(2 : index) : i32 loc(#loc)
    %44 = llvm.mlir.constant(1 : index) : i32 loc(#loc)
    %45 = llvm.mlir.constant(dense<0.000000e+00> : vector<8xbf16>) : vector<8xbf16> loc(#loc)
    %46 = llvm.mlir.constant(true) : i1 loc(#loc)
    %47 = llvm.mlir.constant(112 : i32) : i32 loc(#loc)
    %48 = llvm.mlir.constant(14 : i32) : i32 loc(#loc)
    %49 = llvm.mlir.constant(12 : i32) : i32 loc(#loc)
    %50 = llvm.mlir.constant(7 : i32) : i32 loc(#loc)
    %51 = llvm.mlir.constant(4 : i32) : i32 loc(#loc)
    %52 = llvm.mlir.constant(2 : i32) : i32 loc(#loc)
    %53 = llvm.mlir.constant(1 : i32) : i32 loc(#loc)
    %54 = llvm.mlir.constant(31 : i32) : i32 loc(#loc)
    %55 = llvm.mlir.constant(128 : i32) : i32 loc(#loc)
    %56 = llvm.mlir.constant(15 : i32) : i32 loc(#loc)
    %57 = llvm.mlir.constant(3 : i32) : i32 loc(#loc)
    %58 = llvm.mlir.constant(248 : i32) : i32 loc(#loc)
    %59 = llvm.mlir.constant(24 : i32) : i32 loc(#loc)
    %60 = llvm.mlir.constant(16 : i32) : i32 loc(#loc)
    %61 = llvm.mlir.constant(5 : i32) : i32 loc(#loc)
    %62 = llvm.mlir.constant(224 : i32) : i32 loc(#loc)
    %63 = llvm.mlir.constant(6 : i32) : i32 loc(#loc)
    %64 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %65 = llvm.mlir.constant(64 : i32) : i32 loc(#loc)
    %66 = llvm.mlir.constant(255 : i32) : i32 loc(#loc)
    %67 = llvm.mlir.constant(0 : index) : i32 loc(#loc)
    %68 = llvm.mlir.constant(0.000000e+00 : f32) : f32 loc(#loc)
    %69 = llvm.mlir.constant(0x7FC0 : bf16) : bf16 loc(#loc)
    %70 = llvm.mlir.constant(-1 : i8) : i8 loc(#loc)
    %71 = llvm.mlir.constant(7 : i16) : i16 loc(#loc)
    %72 = llvm.mlir.constant(8 : i32) : i32 loc(#loc)
    %73 = llvm.mlir.constant(32 : i32) : i32 loc(#loc)
    %74 = rocdl.workitem.id.x : i32 loc(#loc)
    %75 = llvm.and %74, %66 : i32 loc(#loc)
    %76 = llvm.urem %75, %65 : i32 loc(#loc)
    %77 = llvm.udiv %75, %65 : i32 loc(#loc)
    %78 = llvm.shl %76, %64 : i32 loc(#loc)
    %79 = llvm.or %64, %78 : i32 loc(#loc)
    %80 = llvm.shl %77, %63 : i32 loc(#loc)
    %81 = llvm.or %79, %80 : i32 loc(#loc)
    %82 = llvm.and %81, %62 : i32 loc(#loc)
    %83 = llvm.lshr %82, %61 : i32 loc(#loc)
    %84 = llvm.xor %64, %83 : i32 loc(#loc)
    %85 = llvm.xor %64, %84 : i32 loc(#loc)
    %86 = llvm.xor %85, %64 : i32 loc(#loc)
    %87 = llvm.xor %85, %72 : i32 loc(#loc)
    %88 = llvm.xor %85, %60 : i32 loc(#loc)
    %89 = llvm.xor %85, %59 : i32 loc(#loc)
    %90 = llvm.add %86, %67 : i32 loc(#loc)
    %91 = llvm.add %87, %67 : i32 loc(#loc)
    %92 = llvm.add %88, %67 : i32 loc(#loc)
    %93 = llvm.add %89, %67 : i32 loc(#loc)
    %94 = llvm.and %81, %58 : i32 loc(#loc)
    %95 = llvm.lshr %94, %57 : i32 loc(#loc)
    %96 = llvm.xor %64, %95 : i32 loc(#loc)
    %97 = llvm.xor %64, %96 : i32 loc(#loc)
    %98 = llvm.xor %97, %64 : i32 loc(#loc)
    %99 = llvm.add %98, %67 : i32 loc(#loc)
    %100 = llvm.and %81, %56 : i32 loc(#loc)
    %101 = llvm.lshr %100, %64 : i32 loc(#loc)
    %102 = llvm.xor %64, %101 : i32 loc(#loc)
    %103 = llvm.and %81, %55 : i32 loc(#loc)
    %104 = llvm.icmp "eq" %103, %64 : i32 loc(#loc)
    %105 = llvm.select %104, %64, %60 : i1, i32 loc(#loc)
    %106 = llvm.xor %102, %105 : i32 loc(#loc)
    %107 = llvm.xor %64, %106 : i32 loc(#loc)
    %108 = llvm.xor %107, %64 : i32 loc(#loc)
    %109 = llvm.add %108, %67 : i32 loc(#loc)
    %110 = llvm.mul %90, %stride_a0 : i32 loc(#loc)
    %111 = llvm.mul %91, %stride_a0 : i32 loc(#loc)
    %112 = llvm.mul %92, %stride_a0 : i32 loc(#loc)
    %113 = llvm.mul %93, %stride_a0 : i32 loc(#loc)
    %114 = llvm.and %81, %54 : i32 loc(#loc)
    %115 = llvm.shl %114, %57 : i32 loc(#loc)
    %116 = llvm.xor %64, %115 : i32 loc(#loc)
    %117 = llvm.xor %64, %116 : i32 loc(#loc)
    %118 = llvm.xor %117, %64 : i32 loc(#loc)
    %119 = llvm.add %118, %67 : i32 loc(#loc)
    %120 = llvm.add %119, %110 : i32 loc(#loc)
    %121 = llvm.add %119, %111 : i32 loc(#loc)
    %122 = llvm.add %119, %112 : i32 loc(#loc)
    %123 = llvm.add %119, %113 : i32 loc(#loc)
    %124 = llvm.and %81, %50 : i32 loc(#loc)
    %125 = llvm.shl %124, %51 : i32 loc(#loc)
    %126 = llvm.xor %64, %125 : i32 loc(#loc)
    %127 = llvm.xor %64, %126 : i32 loc(#loc)
    %128 = llvm.xor %127, %64 : i32 loc(#loc)
    %129 = llvm.add %128, %67 : i32 loc(#loc)
    %130 = llvm.and %81, %47 : i32 loc(#loc)
    %131 = llvm.lshr %130, %52 : i32 loc(#loc)
    %132 = llvm.xor %64, %131 : i32 loc(#loc)
    %133 = llvm.xor %64, %132 : i32 loc(#loc)
    %134 = llvm.xor %133, %64 : i32 loc(#loc)
    %135 = llvm.add %134, %67 : i32 loc(#loc)
    %136 = llvm.mul %99, %stride_b1 : i32 loc(#loc)
    %137 = llvm.add %136, %129 : i32 loc(#loc)
    %138 = llvm.getelementptr %a_base[%120] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc)
    %139 = llvm.getelementptr %a_base[%121] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc)
    %140 = llvm.getelementptr %a_base[%122] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc)
    %141 = llvm.getelementptr %a_base[%123] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc)
    %142 = llvm.call @"__triton_hip_predicated_load_vector<8xbf16>_!llvm.ptr<1>_i1_vector<8xbf16>_"(%138, %46, %45) : (!llvm.ptr<1>, i1, vector<8xbf16>) -> vector<8xbf16> loc(#loc)
    %143 = llvm.extractelement %142[%67 : i32] : vector<8xbf16> loc(#loc)
    %144 = llvm.extractelement %142[%44 : i32] : vector<8xbf16> loc(#loc)
    %145 = llvm.extractelement %142[%43 : i32] : vector<8xbf16> loc(#loc)
    %146 = llvm.extractelement %142[%42 : i32] : vector<8xbf16> loc(#loc)
    %147 = llvm.extractelement %142[%41 : i32] : vector<8xbf16> loc(#loc)
    %148 = llvm.extractelement %142[%40 : i32] : vector<8xbf16> loc(#loc)
    %149 = llvm.extractelement %142[%39 : i32] : vector<8xbf16> loc(#loc)
    %150 = llvm.extractelement %142[%38 : i32] : vector<8xbf16> loc(#loc)
    %151 = llvm.call @"__triton_hip_predicated_load_vector<8xbf16>_!llvm.ptr<1>_i1_vector<8xbf16>_"(%139, %46, %45) : (!llvm.ptr<1>, i1, vector<8xbf16>) -> vector<8xbf16> loc(#loc)
    %152 = llvm.extractelement %151[%67 : i32] : vector<8xbf16> loc(#loc)
    %153 = llvm.extractelement %151[%44 : i32] : vector<8xbf16> loc(#loc)
    %154 = llvm.extractelement %151[%43 : i32] : vector<8xbf16> loc(#loc)
    %155 = llvm.extractelement %151[%42 : i32] : vector<8xbf16> loc(#loc)
    %156 = llvm.extractelement %151[%41 : i32] : vector<8xbf16> loc(#loc)
    %157 = llvm.extractelement %151[%40 : i32] : vector<8xbf16> loc(#loc)
    %158 = llvm.extractelement %151[%39 : i32] : vector<8xbf16> loc(#loc)
    %159 = llvm.extractelement %151[%38 : i32] : vector<8xbf16> loc(#loc)
    %160 = llvm.call @"__triton_hip_predicated_load_vector<8xbf16>_!llvm.ptr<1>_i1_vector<8xbf16>_"(%140, %46, %45) : (!llvm.ptr<1>, i1, vector<8xbf16>) -> vector<8xbf16> loc(#loc)
    %161 = llvm.extractelement %160[%67 : i32] : vector<8xbf16> loc(#loc)
    %162 = llvm.extractelement %160[%44 : i32] : vector<8xbf16> loc(#loc)
    %163 = llvm.extractelement %160[%43 : i32] : vector<8xbf16> loc(#loc)
    %164 = llvm.extractelement %160[%42 : i32] : vector<8xbf16> loc(#loc)
    %165 = llvm.extractelement %160[%41 : i32] : vector<8xbf16> loc(#loc)
    %166 = llvm.extractelement %160[%40 : i32] : vector<8xbf16> loc(#loc)
    %167 = llvm.extractelement %160[%39 : i32] : vector<8xbf16> loc(#loc)
    %168 = llvm.extractelement %160[%38 : i32] : vector<8xbf16> loc(#loc)
    %169 = llvm.call @"__triton_hip_predicated_load_vector<8xbf16>_!llvm.ptr<1>_i1_vector<8xbf16>_"(%141, %46, %45) : (!llvm.ptr<1>, i1, vector<8xbf16>) -> vector<8xbf16> loc(#loc)
    %170 = llvm.extractelement %169[%67 : i32] : vector<8xbf16> loc(#loc)
    %171 = llvm.extractelement %169[%44 : i32] : vector<8xbf16> loc(#loc)
    %172 = llvm.extractelement %169[%43 : i32] : vector<8xbf16> loc(#loc)
    %173 = llvm.extractelement %169[%42 : i32] : vector<8xbf16> loc(#loc)
    %174 = llvm.extractelement %169[%41 : i32] : vector<8xbf16> loc(#loc)
    %175 = llvm.extractelement %169[%40 : i32] : vector<8xbf16> loc(#loc)
    %176 = llvm.extractelement %169[%39 : i32] : vector<8xbf16> loc(#loc)
    %177 = llvm.extractelement %169[%38 : i32] : vector<8xbf16> loc(#loc)
    %178 = llvm.and %81, %36 : i32 loc(#loc)
    %179 = llvm.shl %178, %57 : i32 loc(#loc)
    %180 = llvm.xor %64, %179 : i32 loc(#loc)
    %181 = llvm.and %81, %35 : i32 loc(#loc)
    %182 = llvm.lshr %181, %52 : i32 loc(#loc)
    %183 = llvm.xor %180, %182 : i32 loc(#loc)
    %184 = llvm.and %81, %53 : i32 loc(#loc)
    %185 = llvm.icmp "eq" %184, %64 : i32 loc(#loc)
    %186 = llvm.select %185, %64, %34 : i1, i32 loc(#loc)
    %187 = llvm.xor %183, %186 : i32 loc(#loc)
    %188 = llvm.and %81, %60 : i32 loc(#loc)
    %189 = llvm.icmp "eq" %188, %64 : i32 loc(#loc)
    %190 = llvm.select %189, %64, %33 : i1, i32 loc(#loc)
    %191 = llvm.xor %187, %190 : i32 loc(#loc)
    %192 = llvm.and %81, %73 : i32 loc(#loc)
    %193 = llvm.icmp "eq" %192, %64 : i32 loc(#loc)
    %194 = llvm.select %193, %64, %32 : i1, i32 loc(#loc)
    %195 = llvm.xor %191, %194 : i32 loc(#loc)
    %196 = llvm.xor %64, %195 : i32 loc(#loc)
    %197 = llvm.mul %64, %52 : i32 loc(#loc)
    %198 = llvm.xor %196, %197 : i32 loc(#loc)
    %199 = llvm.xor %198, %64 : i32 loc(#loc)
    %200 = llvm.add %199, %64 : i32 loc(#loc)
    %201 = llvm.getelementptr inbounds %37[%200] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %202 = llvm.insertelement %143, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %203 = llvm.insertelement %144, %202[%53 : i32] : vector<8xbf16> loc(#loc)
    %204 = llvm.insertelement %145, %203[%52 : i32] : vector<8xbf16> loc(#loc)
    %205 = llvm.insertelement %146, %204[%57 : i32] : vector<8xbf16> loc(#loc)
    %206 = llvm.insertelement %147, %205[%51 : i32] : vector<8xbf16> loc(#loc)
    %207 = llvm.insertelement %148, %206[%61 : i32] : vector<8xbf16> loc(#loc)
    %208 = llvm.insertelement %149, %207[%63 : i32] : vector<8xbf16> loc(#loc)
    %209 = llvm.insertelement %150, %208[%50 : i32] : vector<8xbf16> loc(#loc)
    llvm.call @"__triton_hip_predicated_store_!llvm.void_!llvm.ptr<3>_vector<8xbf16>_i1_"(%201, %209, %46) : (!llvm.ptr<3>, vector<8xbf16>, i1) -> () loc(#loc)
    %210 = llvm.add %199, %55 : i32 loc(#loc)
    %211 = llvm.getelementptr inbounds %37[%210] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %212 = llvm.insertelement %161, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %213 = llvm.insertelement %162, %212[%53 : i32] : vector<8xbf16> loc(#loc)
    %214 = llvm.insertelement %163, %213[%52 : i32] : vector<8xbf16> loc(#loc)
    %215 = llvm.insertelement %164, %214[%57 : i32] : vector<8xbf16> loc(#loc)
    %216 = llvm.insertelement %165, %215[%51 : i32] : vector<8xbf16> loc(#loc)
    %217 = llvm.insertelement %166, %216[%61 : i32] : vector<8xbf16> loc(#loc)
    %218 = llvm.insertelement %167, %217[%63 : i32] : vector<8xbf16> loc(#loc)
    %219 = llvm.insertelement %168, %218[%50 : i32] : vector<8xbf16> loc(#loc)
    llvm.call @"__triton_hip_predicated_store_!llvm.void_!llvm.ptr<3>_vector<8xbf16>_i1_"(%211, %219, %46) : (!llvm.ptr<3>, vector<8xbf16>, i1) -> () loc(#loc)
    %220 = llvm.xor %198, %30 : i32 loc(#loc)
    %221 = llvm.add %220, %64 : i32 loc(#loc)
    %222 = llvm.getelementptr inbounds %37[%221] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %223 = llvm.insertelement %152, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %224 = llvm.insertelement %153, %223[%53 : i32] : vector<8xbf16> loc(#loc)
    %225 = llvm.insertelement %154, %224[%52 : i32] : vector<8xbf16> loc(#loc)
    %226 = llvm.insertelement %155, %225[%57 : i32] : vector<8xbf16> loc(#loc)
    %227 = llvm.insertelement %156, %226[%51 : i32] : vector<8xbf16> loc(#loc)
    %228 = llvm.insertelement %157, %227[%61 : i32] : vector<8xbf16> loc(#loc)
    %229 = llvm.insertelement %158, %228[%63 : i32] : vector<8xbf16> loc(#loc)
    %230 = llvm.insertelement %159, %229[%50 : i32] : vector<8xbf16> loc(#loc)
    llvm.call @"__triton_hip_predicated_store_!llvm.void_!llvm.ptr<3>_vector<8xbf16>_i1_"(%222, %230, %46) : (!llvm.ptr<3>, vector<8xbf16>, i1) -> () loc(#loc)
    %231 = llvm.add %220, %55 : i32 loc(#loc)
    %232 = llvm.getelementptr inbounds %37[%231] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %233 = llvm.insertelement %170, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %234 = llvm.insertelement %171, %233[%53 : i32] : vector<8xbf16> loc(#loc)
    %235 = llvm.insertelement %172, %234[%52 : i32] : vector<8xbf16> loc(#loc)
    %236 = llvm.insertelement %173, %235[%57 : i32] : vector<8xbf16> loc(#loc)
    %237 = llvm.insertelement %174, %236[%51 : i32] : vector<8xbf16> loc(#loc)
    %238 = llvm.insertelement %175, %237[%61 : i32] : vector<8xbf16> loc(#loc)
    %239 = llvm.insertelement %176, %238[%63 : i32] : vector<8xbf16> loc(#loc)
    %240 = llvm.insertelement %177, %239[%50 : i32] : vector<8xbf16> loc(#loc)
    llvm.call @"__triton_hip_predicated_store_!llvm.void_!llvm.ptr<3>_vector<8xbf16>_i1_"(%232, %240, %46) : (!llvm.ptr<3>, vector<8xbf16>, i1) -> () loc(#loc)
    rocdl.barrier loc(#loc)
    %241 = llvm.and %81, %29 : i32 loc(#loc)
    %242 = llvm.shl %241, %72 : i32 loc(#loc)
    %243 = llvm.xor %64, %242 : i32 loc(#loc)
    %244 = llvm.and %81, %48 : i32 loc(#loc)
    %245 = llvm.shl %244, %57 : i32 loc(#loc)
    %246 = llvm.xor %243, %245 : i32 loc(#loc)
    %247 = llvm.select %185, %64, %32 : i1, i32 loc(#loc)
    %248 = llvm.xor %246, %247 : i32 loc(#loc)
    %249 = llvm.select %193, %64, %60 : i1, i32 loc(#loc)
    %250 = llvm.xor %248, %249 : i32 loc(#loc)
    %251 = llvm.select %104, %64, %55 : i1, i32 loc(#loc)
    %252 = llvm.xor %250, %251 : i32 loc(#loc)
    %253 = llvm.xor %64, %252 : i32 loc(#loc)
    %254 = llvm.xor %253, %197 : i32 loc(#loc)
    %255 = llvm.xor %254, %64 : i32 loc(#loc)
    %256 = llvm.add %255, %64 : i32 loc(#loc)
    %257 = llvm.getelementptr inbounds %37[%256] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %258 = llvm.call @"__triton_hip_predicated_load_vector<8xbf16>_!llvm.ptr<3>_i1_vector<8xbf16>_"(%257, %46, %45) : (!llvm.ptr<3>, i1, vector<8xbf16>) -> vector<8xbf16> loc(#loc)
    %259 = llvm.extractelement %258[%64 : i32] : vector<8xbf16> loc(#loc)
    %260 = llvm.extractelement %258[%53 : i32] : vector<8xbf16> loc(#loc)
    %261 = llvm.extractelement %258[%52 : i32] : vector<8xbf16> loc(#loc)
    %262 = llvm.extractelement %258[%57 : i32] : vector<8xbf16> loc(#loc)
    %263 = llvm.extractelement %258[%51 : i32] : vector<8xbf16> loc(#loc)
    %264 = llvm.extractelement %258[%61 : i32] : vector<8xbf16> loc(#loc)
    %265 = llvm.extractelement %258[%63 : i32] : vector<8xbf16> loc(#loc)
    %266 = llvm.extractelement %258[%50 : i32] : vector<8xbf16> loc(#loc)
    %267 = llvm.add %255, %33 : i32 loc(#loc)
    %268 = llvm.getelementptr inbounds %37[%267] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %269 = llvm.call @"__triton_hip_predicated_load_vector<8xbf16>_!llvm.ptr<3>_i1_vector<8xbf16>_"(%268, %46, %45) : (!llvm.ptr<3>, i1, vector<8xbf16>) -> vector<8xbf16> loc(#loc)
    %270 = llvm.extractelement %269[%64 : i32] : vector<8xbf16> loc(#loc)
    %271 = llvm.extractelement %269[%53 : i32] : vector<8xbf16> loc(#loc)
    %272 = llvm.extractelement %269[%52 : i32] : vector<8xbf16> loc(#loc)
    %273 = llvm.extractelement %269[%57 : i32] : vector<8xbf16> loc(#loc)
    %274 = llvm.extractelement %269[%51 : i32] : vector<8xbf16> loc(#loc)
    %275 = llvm.extractelement %269[%61 : i32] : vector<8xbf16> loc(#loc)
    %276 = llvm.extractelement %269[%63 : i32] : vector<8xbf16> loc(#loc)
    %277 = llvm.extractelement %269[%50 : i32] : vector<8xbf16> loc(#loc)
    %278 = llvm.xor %254, %73 : i32 loc(#loc)
    %279 = llvm.add %278, %64 : i32 loc(#loc)
    %280 = llvm.getelementptr inbounds %37[%279] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %281 = llvm.call @"__triton_hip_predicated_load_vector<8xbf16>_!llvm.ptr<3>_i1_vector<8xbf16>_"(%280, %46, %45) : (!llvm.ptr<3>, i1, vector<8xbf16>) -> vector<8xbf16> loc(#loc)
    %282 = llvm.extractelement %281[%64 : i32] : vector<8xbf16> loc(#loc)
    %283 = llvm.extractelement %281[%53 : i32] : vector<8xbf16> loc(#loc)
    %284 = llvm.extractelement %281[%52 : i32] : vector<8xbf16> loc(#loc)
    %285 = llvm.extractelement %281[%57 : i32] : vector<8xbf16> loc(#loc)
    %286 = llvm.extractelement %281[%51 : i32] : vector<8xbf16> loc(#loc)
    %287 = llvm.extractelement %281[%61 : i32] : vector<8xbf16> loc(#loc)
    %288 = llvm.extractelement %281[%63 : i32] : vector<8xbf16> loc(#loc)
    %289 = llvm.extractelement %281[%50 : i32] : vector<8xbf16> loc(#loc)
    %290 = llvm.add %278, %33 : i32 loc(#loc)
    %291 = llvm.getelementptr inbounds %37[%290] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %292 = llvm.call @"__triton_hip_predicated_load_vector<8xbf16>_!llvm.ptr<3>_i1_vector<8xbf16>_"(%291, %46, %45) : (!llvm.ptr<3>, i1, vector<8xbf16>) -> vector<8xbf16> loc(#loc)
    %293 = llvm.extractelement %292[%64 : i32] : vector<8xbf16> loc(#loc)
    %294 = llvm.extractelement %292[%53 : i32] : vector<8xbf16> loc(#loc)
    %295 = llvm.extractelement %292[%52 : i32] : vector<8xbf16> loc(#loc)
    %296 = llvm.extractelement %292[%57 : i32] : vector<8xbf16> loc(#loc)
    %297 = llvm.extractelement %292[%51 : i32] : vector<8xbf16> loc(#loc)
    %298 = llvm.extractelement %292[%61 : i32] : vector<8xbf16> loc(#loc)
    %299 = llvm.extractelement %292[%63 : i32] : vector<8xbf16> loc(#loc)
    %300 = llvm.extractelement %292[%50 : i32] : vector<8xbf16> loc(#loc)
    %301 = llvm.xor %254, %65 : i32 loc(#loc)
    %302 = llvm.add %301, %64 : i32 loc(#loc)
    %303 = llvm.getelementptr inbounds %37[%302] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %304 = llvm.call @"__triton_hip_predicated_load_vector<8xbf16>_!llvm.ptr<3>_i1_vector<8xbf16>_"(%303, %46, %45) : (!llvm.ptr<3>, i1, vector<8xbf16>) -> vector<8xbf16> loc(#loc)
    %305 = llvm.extractelement %304[%64 : i32] : vector<8xbf16> loc(#loc)
    %306 = llvm.extractelement %304[%53 : i32] : vector<8xbf16> loc(#loc)
    %307 = llvm.extractelement %304[%52 : i32] : vector<8xbf16> loc(#loc)
    %308 = llvm.extractelement %304[%57 : i32] : vector<8xbf16> loc(#loc)
    %309 = llvm.extractelement %304[%51 : i32] : vector<8xbf16> loc(#loc)
    %310 = llvm.extractelement %304[%61 : i32] : vector<8xbf16> loc(#loc)
    %311 = llvm.extractelement %304[%63 : i32] : vector<8xbf16> loc(#loc)
    %312 = llvm.extractelement %304[%50 : i32] : vector<8xbf16> loc(#loc)
    %313 = llvm.add %301, %33 : i32 loc(#loc)
    %314 = llvm.getelementptr inbounds %37[%313] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %315 = llvm.call @"__triton_hip_predicated_load_vector<8xbf16>_!llvm.ptr<3>_i1_vector<8xbf16>_"(%314, %46, %45) : (!llvm.ptr<3>, i1, vector<8xbf16>) -> vector<8xbf16> loc(#loc)
    %316 = llvm.extractelement %315[%64 : i32] : vector<8xbf16> loc(#loc)
    %317 = llvm.extractelement %315[%53 : i32] : vector<8xbf16> loc(#loc)
    %318 = llvm.extractelement %315[%52 : i32] : vector<8xbf16> loc(#loc)
    %319 = llvm.extractelement %315[%57 : i32] : vector<8xbf16> loc(#loc)
    %320 = llvm.extractelement %315[%51 : i32] : vector<8xbf16> loc(#loc)
    %321 = llvm.extractelement %315[%61 : i32] : vector<8xbf16> loc(#loc)
    %322 = llvm.extractelement %315[%63 : i32] : vector<8xbf16> loc(#loc)
    %323 = llvm.extractelement %315[%50 : i32] : vector<8xbf16> loc(#loc)
    %324 = llvm.xor %254, %28 : i32 loc(#loc)
    %325 = llvm.add %324, %64 : i32 loc(#loc)
    %326 = llvm.getelementptr inbounds %37[%325] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %327 = llvm.call @"__triton_hip_predicated_load_vector<8xbf16>_!llvm.ptr<3>_i1_vector<8xbf16>_"(%326, %46, %45) : (!llvm.ptr<3>, i1, vector<8xbf16>) -> vector<8xbf16> loc(#loc)
    %328 = llvm.extractelement %327[%64 : i32] : vector<8xbf16> loc(#loc)
    %329 = llvm.extractelement %327[%53 : i32] : vector<8xbf16> loc(#loc)
    %330 = llvm.extractelement %327[%52 : i32] : vector<8xbf16> loc(#loc)
    %331 = llvm.extractelement %327[%57 : i32] : vector<8xbf16> loc(#loc)
    %332 = llvm.extractelement %327[%51 : i32] : vector<8xbf16> loc(#loc)
    %333 = llvm.extractelement %327[%61 : i32] : vector<8xbf16> loc(#loc)
    %334 = llvm.extractelement %327[%63 : i32] : vector<8xbf16> loc(#loc)
    %335 = llvm.extractelement %327[%50 : i32] : vector<8xbf16> loc(#loc)
    %336 = llvm.add %324, %33 : i32 loc(#loc)
    %337 = llvm.getelementptr inbounds %37[%336] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %338 = llvm.call @"__triton_hip_predicated_load_vector<8xbf16>_!llvm.ptr<3>_i1_vector<8xbf16>_"(%337, %46, %45) : (!llvm.ptr<3>, i1, vector<8xbf16>) -> vector<8xbf16> loc(#loc)
    %339 = llvm.extractelement %338[%64 : i32] : vector<8xbf16> loc(#loc)
    %340 = llvm.extractelement %338[%53 : i32] : vector<8xbf16> loc(#loc)
    %341 = llvm.extractelement %338[%52 : i32] : vector<8xbf16> loc(#loc)
    %342 = llvm.extractelement %338[%57 : i32] : vector<8xbf16> loc(#loc)
    %343 = llvm.extractelement %338[%51 : i32] : vector<8xbf16> loc(#loc)
    %344 = llvm.extractelement %338[%61 : i32] : vector<8xbf16> loc(#loc)
    %345 = llvm.extractelement %338[%63 : i32] : vector<8xbf16> loc(#loc)
    %346 = llvm.extractelement %338[%50 : i32] : vector<8xbf16> loc(#loc)
    %347 = llvm.getelementptr %b_base[%137] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, i8 loc(#loc)
    %348 = llvm.call @"__triton_hip_predicated_load_vector<16xi8>_!llvm.ptr<1>_i1_vector<16xi8>_"(%347, %46, %27) : (!llvm.ptr<1>, i1, vector<16xi8>) -> vector<16xi8> loc(#loc)
    %349 = llvm.extractelement %348[%67 : i32] : vector<16xi8> loc(#loc)
    %350 = llvm.extractelement %348[%44 : i32] : vector<16xi8> loc(#loc)
    %351 = llvm.extractelement %348[%43 : i32] : vector<16xi8> loc(#loc)
    %352 = llvm.extractelement %348[%42 : i32] : vector<16xi8> loc(#loc)
    %353 = llvm.extractelement %348[%41 : i32] : vector<16xi8> loc(#loc)
    %354 = llvm.extractelement %348[%40 : i32] : vector<16xi8> loc(#loc)
    %355 = llvm.extractelement %348[%39 : i32] : vector<16xi8> loc(#loc)
    %356 = llvm.extractelement %348[%38 : i32] : vector<16xi8> loc(#loc)
    %357 = llvm.extractelement %348[%26 : i32] : vector<16xi8> loc(#loc)
    %358 = llvm.extractelement %348[%25 : i32] : vector<16xi8> loc(#loc)
    %359 = llvm.extractelement %348[%24 : i32] : vector<16xi8> loc(#loc)
    %360 = llvm.extractelement %348[%23 : i32] : vector<16xi8> loc(#loc)
    %361 = llvm.extractelement %348[%22 : i32] : vector<16xi8> loc(#loc)
    %362 = llvm.extractelement %348[%21 : i32] : vector<16xi8> loc(#loc)
    %363 = llvm.extractelement %348[%20 : i32] : vector<16xi8> loc(#loc)
    %364 = llvm.extractelement %348[%19 : i32] : vector<16xi8> loc(#loc)
    rocdl.barrier loc(#loc)
    %365 = llvm.lshr %94, %64 : i32 loc(#loc)
    %366 = llvm.xor %64, %365 : i32 loc(#loc)
    %367 = llvm.select %185, %64, %18 : i1, i32 loc(#loc)
    %368 = llvm.xor %366, %367 : i32 loc(#loc)
    %369 = llvm.and %81, %52 : i32 loc(#loc)
    %370 = llvm.icmp "eq" %369, %64 : i32 loc(#loc)
    %371 = llvm.select %370, %64, %51 : i1, i32 loc(#loc)
    %372 = llvm.xor %368, %371 : i32 loc(#loc)
    %373 = llvm.and %81, %51 : i32 loc(#loc)
    %374 = llvm.icmp "eq" %373, %64 : i32 loc(#loc)
    %375 = llvm.select %374, %64, %17 : i1, i32 loc(#loc)
    %376 = llvm.xor %372, %375 : i32 loc(#loc)
    %377 = llvm.xor %64, %376 : i32 loc(#loc)
    %378 = llvm.mul %64, %53 : i32 loc(#loc)
    %379 = llvm.xor %377, %378 : i32 loc(#loc)
    %380 = llvm.xor %379, %64 : i32 loc(#loc)
    %381 = llvm.add %380, %64 : i32 loc(#loc)
    %382 = llvm.getelementptr inbounds %37[%381] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %383 = llvm.insertelement %349, %16[%64 : i32] : vector<4xi8> loc(#loc)
    %384 = llvm.insertelement %350, %383[%53 : i32] : vector<4xi8> loc(#loc)
    %385 = llvm.insertelement %351, %384[%52 : i32] : vector<4xi8> loc(#loc)
    %386 = llvm.insertelement %352, %385[%57 : i32] : vector<4xi8> loc(#loc)
    llvm.call @"__triton_hip_predicated_store_!llvm.void_!llvm.ptr<3>_vector<4xi8>_i1_"(%382, %386, %46) : (!llvm.ptr<3>, vector<4xi8>, i1) -> () loc(#loc)
    %387 = llvm.add %380, %15 : i32 loc(#loc)
    %388 = llvm.getelementptr inbounds %37[%387] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %389 = llvm.insertelement %353, %16[%64 : i32] : vector<4xi8> loc(#loc)
    %390 = llvm.insertelement %354, %389[%53 : i32] : vector<4xi8> loc(#loc)
    %391 = llvm.insertelement %355, %390[%52 : i32] : vector<4xi8> loc(#loc)
    %392 = llvm.insertelement %356, %391[%57 : i32] : vector<4xi8> loc(#loc)
    llvm.call @"__triton_hip_predicated_store_!llvm.void_!llvm.ptr<3>_vector<4xi8>_i1_"(%388, %392, %46) : (!llvm.ptr<3>, vector<4xi8>, i1) -> () loc(#loc)
    %393 = llvm.xor %379, %14 : i32 loc(#loc)
    %394 = llvm.add %393, %64 : i32 loc(#loc)
    %395 = llvm.getelementptr inbounds %37[%394] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %396 = llvm.insertelement %357, %16[%64 : i32] : vector<4xi8> loc(#loc)
    %397 = llvm.insertelement %358, %396[%53 : i32] : vector<4xi8> loc(#loc)
    %398 = llvm.insertelement %359, %397[%52 : i32] : vector<4xi8> loc(#loc)
    %399 = llvm.insertelement %360, %398[%57 : i32] : vector<4xi8> loc(#loc)
    llvm.call @"__triton_hip_predicated_store_!llvm.void_!llvm.ptr<3>_vector<4xi8>_i1_"(%395, %399, %46) : (!llvm.ptr<3>, vector<4xi8>, i1) -> () loc(#loc)
    %400 = llvm.add %393, %15 : i32 loc(#loc)
    %401 = llvm.getelementptr inbounds %37[%400] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %402 = llvm.insertelement %361, %16[%64 : i32] : vector<4xi8> loc(#loc)
    %403 = llvm.insertelement %362, %402[%53 : i32] : vector<4xi8> loc(#loc)
    %404 = llvm.insertelement %363, %403[%52 : i32] : vector<4xi8> loc(#loc)
    %405 = llvm.insertelement %364, %404[%57 : i32] : vector<4xi8> loc(#loc)
    llvm.call @"__triton_hip_predicated_store_!llvm.void_!llvm.ptr<3>_vector<4xi8>_i1_"(%401, %405, %46) : (!llvm.ptr<3>, vector<4xi8>, i1) -> () loc(#loc)
    rocdl.barrier loc(#loc)
    %406 = llvm.shl %100, %57 : i32 loc(#loc)
    %407 = llvm.xor %64, %406 : i32 loc(#loc)
    %408 = llvm.select %189, %64, %15 : i1, i32 loc(#loc)
    %409 = llvm.xor %407, %408 : i32 loc(#loc)
    %410 = llvm.select %193, %64, %14 : i1, i32 loc(#loc)
    %411 = llvm.xor %409, %410 : i32 loc(#loc)
    %412 = llvm.and %81, %65 : i32 loc(#loc)
    %413 = llvm.icmp "eq" %412, %64 : i32 loc(#loc)
    %414 = llvm.select %413, %64, %55 : i1, i32 loc(#loc)
    %415 = llvm.xor %411, %414 : i32 loc(#loc)
    %416 = llvm.xor %64, %415 : i32 loc(#loc)
    %417 = llvm.xor %416, %378 : i32 loc(#loc)
    %418 = llvm.xor %417, %64 : i32 loc(#loc)
    %419 = llvm.add %418, %64 : i32 loc(#loc)
    %420 = llvm.getelementptr inbounds %37[%419] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %421 = llvm.call @"__triton_hip_predicated_load_vector<4xi8>_!llvm.ptr<3>_i1_vector<4xi8>_"(%420, %46, %13) : (!llvm.ptr<3>, i1, vector<4xi8>) -> vector<4xi8> loc(#loc)
    %422 = llvm.extractelement %421[%64 : i32] : vector<4xi8> loc(#loc)
    %423 = llvm.extractelement %421[%53 : i32] : vector<4xi8> loc(#loc)
    %424 = llvm.extractelement %421[%52 : i32] : vector<4xi8> loc(#loc)
    %425 = llvm.extractelement %421[%57 : i32] : vector<4xi8> loc(#loc)
    %426 = llvm.add %418, %18 : i32 loc(#loc)
    %427 = llvm.getelementptr inbounds %37[%426] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %428 = llvm.call @"__triton_hip_predicated_load_vector<4xi8>_!llvm.ptr<3>_i1_vector<4xi8>_"(%427, %46, %13) : (!llvm.ptr<3>, i1, vector<4xi8>) -> vector<4xi8> loc(#loc)
    %429 = llvm.extractelement %428[%64 : i32] : vector<4xi8> loc(#loc)
    %430 = llvm.extractelement %428[%53 : i32] : vector<4xi8> loc(#loc)
    %431 = llvm.extractelement %428[%52 : i32] : vector<4xi8> loc(#loc)
    %432 = llvm.extractelement %428[%57 : i32] : vector<4xi8> loc(#loc)
    %433 = llvm.xor %417, %17 : i32 loc(#loc)
    %434 = llvm.add %433, %64 : i32 loc(#loc)
    %435 = llvm.getelementptr inbounds %37[%434] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %436 = llvm.call @"__triton_hip_predicated_load_vector<4xi8>_!llvm.ptr<3>_i1_vector<4xi8>_"(%435, %46, %13) : (!llvm.ptr<3>, i1, vector<4xi8>) -> vector<4xi8> loc(#loc)
    %437 = llvm.extractelement %436[%64 : i32] : vector<4xi8> loc(#loc)
    %438 = llvm.extractelement %436[%53 : i32] : vector<4xi8> loc(#loc)
    %439 = llvm.extractelement %436[%52 : i32] : vector<4xi8> loc(#loc)
    %440 = llvm.extractelement %436[%57 : i32] : vector<4xi8> loc(#loc)
    %441 = llvm.add %433, %18 : i32 loc(#loc)
    %442 = llvm.getelementptr inbounds %37[%441] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %443 = llvm.call @"__triton_hip_predicated_load_vector<4xi8>_!llvm.ptr<3>_i1_vector<4xi8>_"(%442, %46, %13) : (!llvm.ptr<3>, i1, vector<4xi8>) -> vector<4xi8> loc(#loc)
    %444 = llvm.extractelement %443[%64 : i32] : vector<4xi8> loc(#loc)
    %445 = llvm.extractelement %443[%53 : i32] : vector<4xi8> loc(#loc)
    %446 = llvm.extractelement %443[%52 : i32] : vector<4xi8> loc(#loc)
    %447 = llvm.extractelement %443[%57 : i32] : vector<4xi8> loc(#loc)
    %448 = llvm.xor %417, %51 : i32 loc(#loc)
    %449 = llvm.add %448, %64 : i32 loc(#loc)
    %450 = llvm.getelementptr inbounds %37[%449] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %451 = llvm.call @"__triton_hip_predicated_load_vector<4xi8>_!llvm.ptr<3>_i1_vector<4xi8>_"(%450, %46, %13) : (!llvm.ptr<3>, i1, vector<4xi8>) -> vector<4xi8> loc(#loc)
    %452 = llvm.extractelement %451[%64 : i32] : vector<4xi8> loc(#loc)
    %453 = llvm.extractelement %451[%53 : i32] : vector<4xi8> loc(#loc)
    %454 = llvm.extractelement %451[%52 : i32] : vector<4xi8> loc(#loc)
    %455 = llvm.extractelement %451[%57 : i32] : vector<4xi8> loc(#loc)
    %456 = llvm.add %448, %18 : i32 loc(#loc)
    %457 = llvm.getelementptr inbounds %37[%456] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %458 = llvm.call @"__triton_hip_predicated_load_vector<4xi8>_!llvm.ptr<3>_i1_vector<4xi8>_"(%457, %46, %13) : (!llvm.ptr<3>, i1, vector<4xi8>) -> vector<4xi8> loc(#loc)
    %459 = llvm.extractelement %458[%64 : i32] : vector<4xi8> loc(#loc)
    %460 = llvm.extractelement %458[%53 : i32] : vector<4xi8> loc(#loc)
    %461 = llvm.extractelement %458[%52 : i32] : vector<4xi8> loc(#loc)
    %462 = llvm.extractelement %458[%57 : i32] : vector<4xi8> loc(#loc)
    %463 = llvm.xor %417, %12 : i32 loc(#loc)
    %464 = llvm.add %463, %64 : i32 loc(#loc)
    %465 = llvm.getelementptr inbounds %37[%464] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %466 = llvm.call @"__triton_hip_predicated_load_vector<4xi8>_!llvm.ptr<3>_i1_vector<4xi8>_"(%465, %46, %13) : (!llvm.ptr<3>, i1, vector<4xi8>) -> vector<4xi8> loc(#loc)
    %467 = llvm.extractelement %466[%64 : i32] : vector<4xi8> loc(#loc)
    %468 = llvm.extractelement %466[%53 : i32] : vector<4xi8> loc(#loc)
    %469 = llvm.extractelement %466[%52 : i32] : vector<4xi8> loc(#loc)
    %470 = llvm.extractelement %466[%57 : i32] : vector<4xi8> loc(#loc)
    %471 = llvm.add %463, %18 : i32 loc(#loc)
    %472 = llvm.getelementptr inbounds %37[%471] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %473 = llvm.call @"__triton_hip_predicated_load_vector<4xi8>_!llvm.ptr<3>_i1_vector<4xi8>_"(%472, %46, %13) : (!llvm.ptr<3>, i1, vector<4xi8>) -> vector<4xi8> loc(#loc)
    %474 = llvm.extractelement %473[%64 : i32] : vector<4xi8> loc(#loc)
    %475 = llvm.extractelement %473[%53 : i32] : vector<4xi8> loc(#loc)
    %476 = llvm.extractelement %473[%52 : i32] : vector<4xi8> loc(#loc)
    %477 = llvm.extractelement %473[%57 : i32] : vector<4xi8> loc(#loc)
    %478 = llvm.mul %99, %72 : i32 loc(#loc)
    %479 = llvm.lshr %124, %64 : i32 loc(#loc)
    %480 = llvm.xor %64, %479 : i32 loc(#loc)
    %481 = llvm.xor %64, %480 : i32 loc(#loc)
    %482 = llvm.xor %481, %64 : i32 loc(#loc)
    %483 = llvm.add %482, %67 : i32 loc(#loc)
    %484 = llvm.add %483, %478 : i32 loc(#loc)
    %485 = rocdl.make.buffer.rsrc %b_scale, %11, %9, %10 : <1> to <8> loc(#loc)
    %486 = llvm.mul %484, %53 : i32 loc(#loc)
    %487 = llvm.select %46, %486, %7 : i1, i32 loc(#loc)
    %488 = rocdl.raw.ptr.buffer.load %485, %487, %64, %64 : i8 loc(#loc)
    %489 = llvm.bitcast %488 : i8 to vector<1xi8> loc(#loc)
    %490 = llvm.extractelement %489[%67 : i32] : vector<1xi8> loc(#loc)
    rocdl.barrier loc(#loc)
    %491 = llvm.and %81, %6 : i32 loc(#loc)
    %492 = llvm.shl %491, %52 : i32 loc(#loc)
    %493 = llvm.xor %64, %492 : i32 loc(#loc)
    %494 = llvm.select %413, %64, %52 : i1, i32 loc(#loc)
    %495 = llvm.xor %493, %494 : i32 loc(#loc)
    %496 = llvm.select %104, %64, %53 : i1, i32 loc(#loc)
    %497 = llvm.xor %495, %496 : i32 loc(#loc)
    %498 = llvm.xor %64, %497 : i32 loc(#loc)
    %499 = llvm.xor %498, %378 : i32 loc(#loc)
    %500 = llvm.xor %499, %64 : i32 loc(#loc)
    %501 = llvm.add %500, %64 : i32 loc(#loc)
    %502 = llvm.getelementptr inbounds %37[%501] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %503 = llvm.insertelement %490, %5[%64 : i32] : vector<1xi8> loc(#loc)
    llvm.call @"__triton_hip_predicated_store_!llvm.void_!llvm.ptr<3>_vector<1xi8>_i1_"(%502, %503, %46) : (!llvm.ptr<3>, vector<1xi8>, i1) -> () loc(#loc)
    rocdl.barrier loc(#loc)
    %504 = llvm.shl %124, %61 : i32 loc(#loc)
    %505 = llvm.xor %64, %504 : i32 loc(#loc)
    %506 = llvm.and %81, %72 : i32 loc(#loc)
    %507 = llvm.icmp "eq" %506, %64 : i32 loc(#loc)
    %508 = llvm.select %507, %64, %52 : i1, i32 loc(#loc)
    %509 = llvm.xor %505, %508 : i32 loc(#loc)
    %510 = llvm.select %413, %64, %53 : i1, i32 loc(#loc)
    %511 = llvm.xor %509, %510 : i32 loc(#loc)
    %512 = llvm.xor %64, %511 : i32 loc(#loc)
    %513 = llvm.xor %512, %378 : i32 loc(#loc)
    %514 = llvm.xor %513, %64 : i32 loc(#loc)
    %515 = llvm.add %514, %64 : i32 loc(#loc)
    %516 = llvm.getelementptr inbounds %37[%515] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %517 = llvm.call @"__triton_hip_predicated_load_vector<1xi8>_!llvm.ptr<3>_i1_vector<1xi8>_"(%516, %46, %8) : (!llvm.ptr<3>, i1, vector<1xi8>) -> vector<1xi8> loc(#loc)
    %518 = llvm.extractelement %517[%64 : i32] : vector<1xi8> loc(#loc)
    %519 = llvm.add %514, %60 : i32 loc(#loc)
    %520 = llvm.getelementptr inbounds %37[%519] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %521 = llvm.call @"__triton_hip_predicated_load_vector<1xi8>_!llvm.ptr<3>_i1_vector<1xi8>_"(%520, %46, %8) : (!llvm.ptr<3>, i1, vector<1xi8>) -> vector<1xi8> loc(#loc)
    %522 = llvm.extractelement %521[%64 : i32] : vector<1xi8> loc(#loc)
    %523 = llvm.add %514, %51 : i32 loc(#loc)
    %524 = llvm.getelementptr inbounds %37[%523] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %525 = llvm.call @"__triton_hip_predicated_load_vector<1xi8>_!llvm.ptr<3>_i1_vector<1xi8>_"(%524, %46, %8) : (!llvm.ptr<3>, i1, vector<1xi8>) -> vector<1xi8> loc(#loc)
    %526 = llvm.extractelement %525[%64 : i32] : vector<1xi8> loc(#loc)
    %527 = llvm.add %514, %4 : i32 loc(#loc)
    %528 = llvm.getelementptr inbounds %37[%527] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %529 = llvm.call @"__triton_hip_predicated_load_vector<1xi8>_!llvm.ptr<3>_i1_vector<1xi8>_"(%528, %46, %8) : (!llvm.ptr<3>, i1, vector<1xi8>) -> vector<1xi8> loc(#loc)
    %530 = llvm.extractelement %529[%64 : i32] : vector<1xi8> loc(#loc)
    %531 = llvm.add %514, %72 : i32 loc(#loc)
    %532 = llvm.getelementptr inbounds %37[%531] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %533 = llvm.call @"__triton_hip_predicated_load_vector<1xi8>_!llvm.ptr<3>_i1_vector<1xi8>_"(%532, %46, %8) : (!llvm.ptr<3>, i1, vector<1xi8>) -> vector<1xi8> loc(#loc)
    %534 = llvm.extractelement %533[%64 : i32] : vector<1xi8> loc(#loc)
    %535 = llvm.add %514, %59 : i32 loc(#loc)
    %536 = llvm.getelementptr inbounds %37[%535] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %537 = llvm.call @"__triton_hip_predicated_load_vector<1xi8>_!llvm.ptr<3>_i1_vector<1xi8>_"(%536, %46, %8) : (!llvm.ptr<3>, i1, vector<1xi8>) -> vector<1xi8> loc(#loc)
    %538 = llvm.extractelement %537[%64 : i32] : vector<1xi8> loc(#loc)
    %539 = llvm.add %514, %49 : i32 loc(#loc)
    %540 = llvm.getelementptr inbounds %37[%539] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %541 = llvm.call @"__triton_hip_predicated_load_vector<1xi8>_!llvm.ptr<3>_i1_vector<1xi8>_"(%540, %46, %8) : (!llvm.ptr<3>, i1, vector<1xi8>) -> vector<1xi8> loc(#loc)
    %542 = llvm.extractelement %541[%64 : i32] : vector<1xi8> loc(#loc)
    %543 = llvm.add %514, %3 : i32 loc(#loc)
    %544 = llvm.getelementptr inbounds %37[%543] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %545 = llvm.call @"__triton_hip_predicated_load_vector<1xi8>_!llvm.ptr<3>_i1_vector<1xi8>_"(%544, %46, %8) : (!llvm.ptr<3>, i1, vector<1xi8>) -> vector<1xi8> loc(#loc)
    %546 = llvm.extractelement %545[%64 : i32] : vector<1xi8> loc(#loc)
    %547 = llvm.zext %518 : i8 to i16 loc(#loc)
    %548 = llvm.zext %526 : i8 to i16 loc(#loc)
    %549 = llvm.zext %534 : i8 to i16 loc(#loc)
    %550 = llvm.zext %542 : i8 to i16 loc(#loc)
    %551 = llvm.shl %547, %71 : i16 loc(#loc)
    %552 = llvm.shl %548, %71 : i16 loc(#loc)
    %553 = llvm.shl %549, %71 : i16 loc(#loc)
    %554 = llvm.shl %550, %71 : i16 loc(#loc)
    %555 = llvm.insertelement %422, %16[%64 : i32] : vector<4xi8> loc(#loc)
    %556 = llvm.insertelement %423, %555[%53 : i32] : vector<4xi8> loc(#loc)
    %557 = llvm.insertelement %424, %556[%52 : i32] : vector<4xi8> loc(#loc)
    %558 = llvm.insertelement %425, %557[%57 : i32] : vector<4xi8> loc(#loc)
    %559 = llvm.bitcast %558 : vector<4xi8> to i32 loc(#loc)
    %560 = llvm.zext %551 : i16 to i32 loc(#loc)
    %561 = llvm.shl %560, %60 : i32 loc(#loc)
    %562 = llvm.bitcast %561 : i32 to f32 loc(#loc)
    %563 = rocdl.cvt.scalef32.pk.bf16.fp4 %559[0], %562 : vector<2xbf16> loc(#loc)
    %564 = rocdl.cvt.scalef32.pk.bf16.fp4 %559[2], %562 : vector<2xbf16> loc(#loc)
    %565 = rocdl.cvt.scalef32.pk.bf16.fp4 %559[1], %562 : vector<2xbf16> loc(#loc)
    %566 = rocdl.cvt.scalef32.pk.bf16.fp4 %559[3], %562 : vector<2xbf16> loc(#loc)
    %567 = llvm.extractelement %563[%64 : i32] : vector<2xbf16> loc(#loc)
    %568 = llvm.extractelement %563[%53 : i32] : vector<2xbf16> loc(#loc)
    %569 = llvm.extractelement %564[%64 : i32] : vector<2xbf16> loc(#loc)
    %570 = llvm.extractelement %564[%53 : i32] : vector<2xbf16> loc(#loc)
    %571 = llvm.extractelement %565[%64 : i32] : vector<2xbf16> loc(#loc)
    %572 = llvm.extractelement %565[%53 : i32] : vector<2xbf16> loc(#loc)
    %573 = llvm.extractelement %566[%64 : i32] : vector<2xbf16> loc(#loc)
    %574 = llvm.extractelement %566[%53 : i32] : vector<2xbf16> loc(#loc)
    %575 = llvm.insertelement %429, %16[%64 : i32] : vector<4xi8> loc(#loc)
    %576 = llvm.insertelement %430, %575[%53 : i32] : vector<4xi8> loc(#loc)
    %577 = llvm.insertelement %431, %576[%52 : i32] : vector<4xi8> loc(#loc)
    %578 = llvm.insertelement %432, %577[%57 : i32] : vector<4xi8> loc(#loc)
    %579 = llvm.bitcast %578 : vector<4xi8> to i32 loc(#loc)
    %580 = llvm.zext %552 : i16 to i32 loc(#loc)
    %581 = llvm.shl %580, %60 : i32 loc(#loc)
    %582 = llvm.bitcast %581 : i32 to f32 loc(#loc)
    %583 = rocdl.cvt.scalef32.pk.bf16.fp4 %579[0], %582 : vector<2xbf16> loc(#loc)
    %584 = rocdl.cvt.scalef32.pk.bf16.fp4 %579[2], %582 : vector<2xbf16> loc(#loc)
    %585 = rocdl.cvt.scalef32.pk.bf16.fp4 %579[1], %582 : vector<2xbf16> loc(#loc)
    %586 = rocdl.cvt.scalef32.pk.bf16.fp4 %579[3], %582 : vector<2xbf16> loc(#loc)
    %587 = llvm.extractelement %583[%64 : i32] : vector<2xbf16> loc(#loc)
    %588 = llvm.extractelement %583[%53 : i32] : vector<2xbf16> loc(#loc)
    %589 = llvm.extractelement %584[%64 : i32] : vector<2xbf16> loc(#loc)
    %590 = llvm.extractelement %584[%53 : i32] : vector<2xbf16> loc(#loc)
    %591 = llvm.extractelement %585[%64 : i32] : vector<2xbf16> loc(#loc)
    %592 = llvm.extractelement %585[%53 : i32] : vector<2xbf16> loc(#loc)
    %593 = llvm.extractelement %586[%64 : i32] : vector<2xbf16> loc(#loc)
    %594 = llvm.extractelement %586[%53 : i32] : vector<2xbf16> loc(#loc)
    %595 = llvm.insertelement %452, %16[%64 : i32] : vector<4xi8> loc(#loc)
    %596 = llvm.insertelement %453, %595[%53 : i32] : vector<4xi8> loc(#loc)
    %597 = llvm.insertelement %454, %596[%52 : i32] : vector<4xi8> loc(#loc)
    %598 = llvm.insertelement %455, %597[%57 : i32] : vector<4xi8> loc(#loc)
    %599 = llvm.bitcast %598 : vector<4xi8> to i32 loc(#loc)
    %600 = llvm.zext %553 : i16 to i32 loc(#loc)
    %601 = llvm.shl %600, %60 : i32 loc(#loc)
    %602 = llvm.bitcast %601 : i32 to f32 loc(#loc)
    %603 = rocdl.cvt.scalef32.pk.bf16.fp4 %599[0], %602 : vector<2xbf16> loc(#loc)
    %604 = rocdl.cvt.scalef32.pk.bf16.fp4 %599[2], %602 : vector<2xbf16> loc(#loc)
    %605 = rocdl.cvt.scalef32.pk.bf16.fp4 %599[1], %602 : vector<2xbf16> loc(#loc)
    %606 = rocdl.cvt.scalef32.pk.bf16.fp4 %599[3], %602 : vector<2xbf16> loc(#loc)
    %607 = llvm.extractelement %603[%64 : i32] : vector<2xbf16> loc(#loc)
    %608 = llvm.extractelement %603[%53 : i32] : vector<2xbf16> loc(#loc)
    %609 = llvm.extractelement %604[%64 : i32] : vector<2xbf16> loc(#loc)
    %610 = llvm.extractelement %604[%53 : i32] : vector<2xbf16> loc(#loc)
    %611 = llvm.extractelement %605[%64 : i32] : vector<2xbf16> loc(#loc)
    %612 = llvm.extractelement %605[%53 : i32] : vector<2xbf16> loc(#loc)
    %613 = llvm.extractelement %606[%64 : i32] : vector<2xbf16> loc(#loc)
    %614 = llvm.extractelement %606[%53 : i32] : vector<2xbf16> loc(#loc)
    %615 = llvm.insertelement %459, %16[%64 : i32] : vector<4xi8> loc(#loc)
    %616 = llvm.insertelement %460, %615[%53 : i32] : vector<4xi8> loc(#loc)
    %617 = llvm.insertelement %461, %616[%52 : i32] : vector<4xi8> loc(#loc)
    %618 = llvm.insertelement %462, %617[%57 : i32] : vector<4xi8> loc(#loc)
    %619 = llvm.bitcast %618 : vector<4xi8> to i32 loc(#loc)
    %620 = llvm.zext %554 : i16 to i32 loc(#loc)
    %621 = llvm.shl %620, %60 : i32 loc(#loc)
    %622 = llvm.bitcast %621 : i32 to f32 loc(#loc)
    %623 = rocdl.cvt.scalef32.pk.bf16.fp4 %619[0], %622 : vector<2xbf16> loc(#loc)
    %624 = rocdl.cvt.scalef32.pk.bf16.fp4 %619[2], %622 : vector<2xbf16> loc(#loc)
    %625 = rocdl.cvt.scalef32.pk.bf16.fp4 %619[1], %622 : vector<2xbf16> loc(#loc)
    %626 = rocdl.cvt.scalef32.pk.bf16.fp4 %619[3], %622 : vector<2xbf16> loc(#loc)
    %627 = llvm.extractelement %623[%64 : i32] : vector<2xbf16> loc(#loc)
    %628 = llvm.extractelement %623[%53 : i32] : vector<2xbf16> loc(#loc)
    %629 = llvm.extractelement %624[%64 : i32] : vector<2xbf16> loc(#loc)
    %630 = llvm.extractelement %624[%53 : i32] : vector<2xbf16> loc(#loc)
    %631 = llvm.extractelement %625[%64 : i32] : vector<2xbf16> loc(#loc)
    %632 = llvm.extractelement %625[%53 : i32] : vector<2xbf16> loc(#loc)
    %633 = llvm.extractelement %626[%64 : i32] : vector<2xbf16> loc(#loc)
    %634 = llvm.extractelement %626[%53 : i32] : vector<2xbf16> loc(#loc)
    %635 = llvm.icmp "eq" %518, %70 : i8 loc(#loc)
    %636 = llvm.icmp "eq" %526, %70 : i8 loc(#loc)
    %637 = llvm.icmp "eq" %534, %70 : i8 loc(#loc)
    %638 = llvm.icmp "eq" %542, %70 : i8 loc(#loc)
    %639 = llvm.select %635, %69, %567 : i1, bf16 loc(#loc)
    %640 = llvm.select %635, %69, %568 : i1, bf16 loc(#loc)
    %641 = llvm.select %635, %69, %569 : i1, bf16 loc(#loc)
    %642 = llvm.select %635, %69, %570 : i1, bf16 loc(#loc)
    %643 = llvm.select %635, %69, %571 : i1, bf16 loc(#loc)
    %644 = llvm.select %635, %69, %572 : i1, bf16 loc(#loc)
    %645 = llvm.select %635, %69, %573 : i1, bf16 loc(#loc)
    %646 = llvm.select %635, %69, %574 : i1, bf16 loc(#loc)
    %647 = llvm.select %636, %69, %587 : i1, bf16 loc(#loc)
    %648 = llvm.select %636, %69, %588 : i1, bf16 loc(#loc)
    %649 = llvm.select %636, %69, %589 : i1, bf16 loc(#loc)
    %650 = llvm.select %636, %69, %590 : i1, bf16 loc(#loc)
    %651 = llvm.select %636, %69, %591 : i1, bf16 loc(#loc)
    %652 = llvm.select %636, %69, %592 : i1, bf16 loc(#loc)
    %653 = llvm.select %636, %69, %593 : i1, bf16 loc(#loc)
    %654 = llvm.select %636, %69, %594 : i1, bf16 loc(#loc)
    %655 = llvm.select %637, %69, %607 : i1, bf16 loc(#loc)
    %656 = llvm.select %637, %69, %608 : i1, bf16 loc(#loc)
    %657 = llvm.select %637, %69, %609 : i1, bf16 loc(#loc)
    %658 = llvm.select %637, %69, %610 : i1, bf16 loc(#loc)
    %659 = llvm.select %637, %69, %611 : i1, bf16 loc(#loc)
    %660 = llvm.select %637, %69, %612 : i1, bf16 loc(#loc)
    %661 = llvm.select %637, %69, %613 : i1, bf16 loc(#loc)
    %662 = llvm.select %637, %69, %614 : i1, bf16 loc(#loc)
    %663 = llvm.select %638, %69, %627 : i1, bf16 loc(#loc)
    %664 = llvm.select %638, %69, %628 : i1, bf16 loc(#loc)
    %665 = llvm.select %638, %69, %629 : i1, bf16 loc(#loc)
    %666 = llvm.select %638, %69, %630 : i1, bf16 loc(#loc)
    %667 = llvm.select %638, %69, %631 : i1, bf16 loc(#loc)
    %668 = llvm.select %638, %69, %632 : i1, bf16 loc(#loc)
    %669 = llvm.select %638, %69, %633 : i1, bf16 loc(#loc)
    %670 = llvm.select %638, %69, %634 : i1, bf16 loc(#loc)
    %671 = llvm.insertelement %259, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %672 = llvm.insertelement %260, %671[%53 : i32] : vector<8xbf16> loc(#loc)
    %673 = llvm.insertelement %261, %672[%52 : i32] : vector<8xbf16> loc(#loc)
    %674 = llvm.insertelement %262, %673[%57 : i32] : vector<8xbf16> loc(#loc)
    %675 = llvm.insertelement %263, %674[%51 : i32] : vector<8xbf16> loc(#loc)
    %676 = llvm.insertelement %264, %675[%61 : i32] : vector<8xbf16> loc(#loc)
    %677 = llvm.insertelement %265, %676[%63 : i32] : vector<8xbf16> loc(#loc)
    %678 = llvm.insertelement %266, %677[%50 : i32] : vector<8xbf16> loc(#loc)
    %679 = llvm.extractelement %678[%64 : i32] : vector<8xbf16> loc(#loc)
    %680 = llvm.insertelement %679, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %681 = llvm.extractelement %678[%53 : i32] : vector<8xbf16> loc(#loc)
    %682 = llvm.insertelement %681, %680[%53 : i32] : vector<8xbf16> loc(#loc)
    %683 = llvm.extractelement %678[%52 : i32] : vector<8xbf16> loc(#loc)
    %684 = llvm.insertelement %683, %682[%52 : i32] : vector<8xbf16> loc(#loc)
    %685 = llvm.extractelement %678[%57 : i32] : vector<8xbf16> loc(#loc)
    %686 = llvm.insertelement %685, %684[%57 : i32] : vector<8xbf16> loc(#loc)
    %687 = llvm.extractelement %678[%51 : i32] : vector<8xbf16> loc(#loc)
    %688 = llvm.insertelement %687, %686[%51 : i32] : vector<8xbf16> loc(#loc)
    %689 = llvm.extractelement %678[%61 : i32] : vector<8xbf16> loc(#loc)
    %690 = llvm.insertelement %689, %688[%61 : i32] : vector<8xbf16> loc(#loc)
    %691 = llvm.extractelement %678[%63 : i32] : vector<8xbf16> loc(#loc)
    %692 = llvm.insertelement %691, %690[%63 : i32] : vector<8xbf16> loc(#loc)
    %693 = llvm.extractelement %678[%50 : i32] : vector<8xbf16> loc(#loc)
    %694 = llvm.insertelement %693, %692[%50 : i32] : vector<8xbf16> loc(#loc)
    %695 = llvm.insertelement %282, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %696 = llvm.insertelement %283, %695[%53 : i32] : vector<8xbf16> loc(#loc)
    %697 = llvm.insertelement %284, %696[%52 : i32] : vector<8xbf16> loc(#loc)
    %698 = llvm.insertelement %285, %697[%57 : i32] : vector<8xbf16> loc(#loc)
    %699 = llvm.insertelement %286, %698[%51 : i32] : vector<8xbf16> loc(#loc)
    %700 = llvm.insertelement %287, %699[%61 : i32] : vector<8xbf16> loc(#loc)
    %701 = llvm.insertelement %288, %700[%63 : i32] : vector<8xbf16> loc(#loc)
    %702 = llvm.insertelement %289, %701[%50 : i32] : vector<8xbf16> loc(#loc)
    %703 = llvm.extractelement %702[%64 : i32] : vector<8xbf16> loc(#loc)
    %704 = llvm.insertelement %703, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %705 = llvm.extractelement %702[%53 : i32] : vector<8xbf16> loc(#loc)
    %706 = llvm.insertelement %705, %704[%53 : i32] : vector<8xbf16> loc(#loc)
    %707 = llvm.extractelement %702[%52 : i32] : vector<8xbf16> loc(#loc)
    %708 = llvm.insertelement %707, %706[%52 : i32] : vector<8xbf16> loc(#loc)
    %709 = llvm.extractelement %702[%57 : i32] : vector<8xbf16> loc(#loc)
    %710 = llvm.insertelement %709, %708[%57 : i32] : vector<8xbf16> loc(#loc)
    %711 = llvm.extractelement %702[%51 : i32] : vector<8xbf16> loc(#loc)
    %712 = llvm.insertelement %711, %710[%51 : i32] : vector<8xbf16> loc(#loc)
    %713 = llvm.extractelement %702[%61 : i32] : vector<8xbf16> loc(#loc)
    %714 = llvm.insertelement %713, %712[%61 : i32] : vector<8xbf16> loc(#loc)
    %715 = llvm.extractelement %702[%63 : i32] : vector<8xbf16> loc(#loc)
    %716 = llvm.insertelement %715, %714[%63 : i32] : vector<8xbf16> loc(#loc)
    %717 = llvm.extractelement %702[%50 : i32] : vector<8xbf16> loc(#loc)
    %718 = llvm.insertelement %717, %716[%50 : i32] : vector<8xbf16> loc(#loc)
    %719 = llvm.insertelement %305, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %720 = llvm.insertelement %306, %719[%53 : i32] : vector<8xbf16> loc(#loc)
    %721 = llvm.insertelement %307, %720[%52 : i32] : vector<8xbf16> loc(#loc)
    %722 = llvm.insertelement %308, %721[%57 : i32] : vector<8xbf16> loc(#loc)
    %723 = llvm.insertelement %309, %722[%51 : i32] : vector<8xbf16> loc(#loc)
    %724 = llvm.insertelement %310, %723[%61 : i32] : vector<8xbf16> loc(#loc)
    %725 = llvm.insertelement %311, %724[%63 : i32] : vector<8xbf16> loc(#loc)
    %726 = llvm.insertelement %312, %725[%50 : i32] : vector<8xbf16> loc(#loc)
    %727 = llvm.extractelement %726[%64 : i32] : vector<8xbf16> loc(#loc)
    %728 = llvm.insertelement %727, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %729 = llvm.extractelement %726[%53 : i32] : vector<8xbf16> loc(#loc)
    %730 = llvm.insertelement %729, %728[%53 : i32] : vector<8xbf16> loc(#loc)
    %731 = llvm.extractelement %726[%52 : i32] : vector<8xbf16> loc(#loc)
    %732 = llvm.insertelement %731, %730[%52 : i32] : vector<8xbf16> loc(#loc)
    %733 = llvm.extractelement %726[%57 : i32] : vector<8xbf16> loc(#loc)
    %734 = llvm.insertelement %733, %732[%57 : i32] : vector<8xbf16> loc(#loc)
    %735 = llvm.extractelement %726[%51 : i32] : vector<8xbf16> loc(#loc)
    %736 = llvm.insertelement %735, %734[%51 : i32] : vector<8xbf16> loc(#loc)
    %737 = llvm.extractelement %726[%61 : i32] : vector<8xbf16> loc(#loc)
    %738 = llvm.insertelement %737, %736[%61 : i32] : vector<8xbf16> loc(#loc)
    %739 = llvm.extractelement %726[%63 : i32] : vector<8xbf16> loc(#loc)
    %740 = llvm.insertelement %739, %738[%63 : i32] : vector<8xbf16> loc(#loc)
    %741 = llvm.extractelement %726[%50 : i32] : vector<8xbf16> loc(#loc)
    %742 = llvm.insertelement %741, %740[%50 : i32] : vector<8xbf16> loc(#loc)
    %743 = llvm.insertelement %328, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %744 = llvm.insertelement %329, %743[%53 : i32] : vector<8xbf16> loc(#loc)
    %745 = llvm.insertelement %330, %744[%52 : i32] : vector<8xbf16> loc(#loc)
    %746 = llvm.insertelement %331, %745[%57 : i32] : vector<8xbf16> loc(#loc)
    %747 = llvm.insertelement %332, %746[%51 : i32] : vector<8xbf16> loc(#loc)
    %748 = llvm.insertelement %333, %747[%61 : i32] : vector<8xbf16> loc(#loc)
    %749 = llvm.insertelement %334, %748[%63 : i32] : vector<8xbf16> loc(#loc)
    %750 = llvm.insertelement %335, %749[%50 : i32] : vector<8xbf16> loc(#loc)
    %751 = llvm.extractelement %750[%64 : i32] : vector<8xbf16> loc(#loc)
    %752 = llvm.insertelement %751, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %753 = llvm.extractelement %750[%53 : i32] : vector<8xbf16> loc(#loc)
    %754 = llvm.insertelement %753, %752[%53 : i32] : vector<8xbf16> loc(#loc)
    %755 = llvm.extractelement %750[%52 : i32] : vector<8xbf16> loc(#loc)
    %756 = llvm.insertelement %755, %754[%52 : i32] : vector<8xbf16> loc(#loc)
    %757 = llvm.extractelement %750[%57 : i32] : vector<8xbf16> loc(#loc)
    %758 = llvm.insertelement %757, %756[%57 : i32] : vector<8xbf16> loc(#loc)
    %759 = llvm.extractelement %750[%51 : i32] : vector<8xbf16> loc(#loc)
    %760 = llvm.insertelement %759, %758[%51 : i32] : vector<8xbf16> loc(#loc)
    %761 = llvm.extractelement %750[%61 : i32] : vector<8xbf16> loc(#loc)
    %762 = llvm.insertelement %761, %760[%61 : i32] : vector<8xbf16> loc(#loc)
    %763 = llvm.extractelement %750[%63 : i32] : vector<8xbf16> loc(#loc)
    %764 = llvm.insertelement %763, %762[%63 : i32] : vector<8xbf16> loc(#loc)
    %765 = llvm.extractelement %750[%50 : i32] : vector<8xbf16> loc(#loc)
    %766 = llvm.insertelement %765, %764[%50 : i32] : vector<8xbf16> loc(#loc)
    %767 = llvm.insertelement %639, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %768 = llvm.insertelement %640, %767[%53 : i32] : vector<8xbf16> loc(#loc)
    %769 = llvm.insertelement %641, %768[%52 : i32] : vector<8xbf16> loc(#loc)
    %770 = llvm.insertelement %642, %769[%57 : i32] : vector<8xbf16> loc(#loc)
    %771 = llvm.insertelement %643, %770[%51 : i32] : vector<8xbf16> loc(#loc)
    %772 = llvm.insertelement %644, %771[%61 : i32] : vector<8xbf16> loc(#loc)
    %773 = llvm.insertelement %645, %772[%63 : i32] : vector<8xbf16> loc(#loc)
    %774 = llvm.insertelement %646, %773[%50 : i32] : vector<8xbf16> loc(#loc)
    %775 = llvm.extractelement %774[%64 : i32] : vector<8xbf16> loc(#loc)
    %776 = llvm.insertelement %775, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %777 = llvm.extractelement %774[%53 : i32] : vector<8xbf16> loc(#loc)
    %778 = llvm.insertelement %777, %776[%53 : i32] : vector<8xbf16> loc(#loc)
    %779 = llvm.extractelement %774[%52 : i32] : vector<8xbf16> loc(#loc)
    %780 = llvm.insertelement %779, %778[%52 : i32] : vector<8xbf16> loc(#loc)
    %781 = llvm.extractelement %774[%57 : i32] : vector<8xbf16> loc(#loc)
    %782 = llvm.insertelement %781, %780[%57 : i32] : vector<8xbf16> loc(#loc)
    %783 = llvm.extractelement %774[%51 : i32] : vector<8xbf16> loc(#loc)
    %784 = llvm.insertelement %783, %782[%51 : i32] : vector<8xbf16> loc(#loc)
    %785 = llvm.extractelement %774[%61 : i32] : vector<8xbf16> loc(#loc)
    %786 = llvm.insertelement %785, %784[%61 : i32] : vector<8xbf16> loc(#loc)
    %787 = llvm.extractelement %774[%63 : i32] : vector<8xbf16> loc(#loc)
    %788 = llvm.insertelement %787, %786[%63 : i32] : vector<8xbf16> loc(#loc)
    %789 = llvm.extractelement %774[%50 : i32] : vector<8xbf16> loc(#loc)
    %790 = llvm.insertelement %789, %788[%50 : i32] : vector<8xbf16> loc(#loc)
    %791 = llvm.insertelement %647, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %792 = llvm.insertelement %648, %791[%53 : i32] : vector<8xbf16> loc(#loc)
    %793 = llvm.insertelement %649, %792[%52 : i32] : vector<8xbf16> loc(#loc)
    %794 = llvm.insertelement %650, %793[%57 : i32] : vector<8xbf16> loc(#loc)
    %795 = llvm.insertelement %651, %794[%51 : i32] : vector<8xbf16> loc(#loc)
    %796 = llvm.insertelement %652, %795[%61 : i32] : vector<8xbf16> loc(#loc)
    %797 = llvm.insertelement %653, %796[%63 : i32] : vector<8xbf16> loc(#loc)
    %798 = llvm.insertelement %654, %797[%50 : i32] : vector<8xbf16> loc(#loc)
    %799 = llvm.extractelement %798[%64 : i32] : vector<8xbf16> loc(#loc)
    %800 = llvm.insertelement %799, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %801 = llvm.extractelement %798[%53 : i32] : vector<8xbf16> loc(#loc)
    %802 = llvm.insertelement %801, %800[%53 : i32] : vector<8xbf16> loc(#loc)
    %803 = llvm.extractelement %798[%52 : i32] : vector<8xbf16> loc(#loc)
    %804 = llvm.insertelement %803, %802[%52 : i32] : vector<8xbf16> loc(#loc)
    %805 = llvm.extractelement %798[%57 : i32] : vector<8xbf16> loc(#loc)
    %806 = llvm.insertelement %805, %804[%57 : i32] : vector<8xbf16> loc(#loc)
    %807 = llvm.extractelement %798[%51 : i32] : vector<8xbf16> loc(#loc)
    %808 = llvm.insertelement %807, %806[%51 : i32] : vector<8xbf16> loc(#loc)
    %809 = llvm.extractelement %798[%61 : i32] : vector<8xbf16> loc(#loc)
    %810 = llvm.insertelement %809, %808[%61 : i32] : vector<8xbf16> loc(#loc)
    %811 = llvm.extractelement %798[%63 : i32] : vector<8xbf16> loc(#loc)
    %812 = llvm.insertelement %811, %810[%63 : i32] : vector<8xbf16> loc(#loc)
    %813 = llvm.extractelement %798[%50 : i32] : vector<8xbf16> loc(#loc)
    %814 = llvm.insertelement %813, %812[%50 : i32] : vector<8xbf16> loc(#loc)
    %815 = llvm.insertelement %655, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %816 = llvm.insertelement %656, %815[%53 : i32] : vector<8xbf16> loc(#loc)
    %817 = llvm.insertelement %657, %816[%52 : i32] : vector<8xbf16> loc(#loc)
    %818 = llvm.insertelement %658, %817[%57 : i32] : vector<8xbf16> loc(#loc)
    %819 = llvm.insertelement %659, %818[%51 : i32] : vector<8xbf16> loc(#loc)
    %820 = llvm.insertelement %660, %819[%61 : i32] : vector<8xbf16> loc(#loc)
    %821 = llvm.insertelement %661, %820[%63 : i32] : vector<8xbf16> loc(#loc)
    %822 = llvm.insertelement %662, %821[%50 : i32] : vector<8xbf16> loc(#loc)
    %823 = llvm.extractelement %822[%64 : i32] : vector<8xbf16> loc(#loc)
    %824 = llvm.insertelement %823, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %825 = llvm.extractelement %822[%53 : i32] : vector<8xbf16> loc(#loc)
    %826 = llvm.insertelement %825, %824[%53 : i32] : vector<8xbf16> loc(#loc)
    %827 = llvm.extractelement %822[%52 : i32] : vector<8xbf16> loc(#loc)
    %828 = llvm.insertelement %827, %826[%52 : i32] : vector<8xbf16> loc(#loc)
    %829 = llvm.extractelement %822[%57 : i32] : vector<8xbf16> loc(#loc)
    %830 = llvm.insertelement %829, %828[%57 : i32] : vector<8xbf16> loc(#loc)
    %831 = llvm.extractelement %822[%51 : i32] : vector<8xbf16> loc(#loc)
    %832 = llvm.insertelement %831, %830[%51 : i32] : vector<8xbf16> loc(#loc)
    %833 = llvm.extractelement %822[%61 : i32] : vector<8xbf16> loc(#loc)
    %834 = llvm.insertelement %833, %832[%61 : i32] : vector<8xbf16> loc(#loc)
    %835 = llvm.extractelement %822[%63 : i32] : vector<8xbf16> loc(#loc)
    %836 = llvm.insertelement %835, %834[%63 : i32] : vector<8xbf16> loc(#loc)
    %837 = llvm.extractelement %822[%50 : i32] : vector<8xbf16> loc(#loc)
    %838 = llvm.insertelement %837, %836[%50 : i32] : vector<8xbf16> loc(#loc)
    %839 = llvm.insertelement %663, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %840 = llvm.insertelement %664, %839[%53 : i32] : vector<8xbf16> loc(#loc)
    %841 = llvm.insertelement %665, %840[%52 : i32] : vector<8xbf16> loc(#loc)
    %842 = llvm.insertelement %666, %841[%57 : i32] : vector<8xbf16> loc(#loc)
    %843 = llvm.insertelement %667, %842[%51 : i32] : vector<8xbf16> loc(#loc)
    %844 = llvm.insertelement %668, %843[%61 : i32] : vector<8xbf16> loc(#loc)
    %845 = llvm.insertelement %669, %844[%63 : i32] : vector<8xbf16> loc(#loc)
    %846 = llvm.insertelement %670, %845[%50 : i32] : vector<8xbf16> loc(#loc)
    %847 = llvm.extractelement %846[%64 : i32] : vector<8xbf16> loc(#loc)
    %848 = llvm.insertelement %847, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %849 = llvm.extractelement %846[%53 : i32] : vector<8xbf16> loc(#loc)
    %850 = llvm.insertelement %849, %848[%53 : i32] : vector<8xbf16> loc(#loc)
    %851 = llvm.extractelement %846[%52 : i32] : vector<8xbf16> loc(#loc)
    %852 = llvm.insertelement %851, %850[%52 : i32] : vector<8xbf16> loc(#loc)
    %853 = llvm.extractelement %846[%57 : i32] : vector<8xbf16> loc(#loc)
    %854 = llvm.insertelement %853, %852[%57 : i32] : vector<8xbf16> loc(#loc)
    %855 = llvm.extractelement %846[%51 : i32] : vector<8xbf16> loc(#loc)
    %856 = llvm.insertelement %855, %854[%51 : i32] : vector<8xbf16> loc(#loc)
    %857 = llvm.extractelement %846[%61 : i32] : vector<8xbf16> loc(#loc)
    %858 = llvm.insertelement %857, %856[%61 : i32] : vector<8xbf16> loc(#loc)
    %859 = llvm.extractelement %846[%63 : i32] : vector<8xbf16> loc(#loc)
    %860 = llvm.insertelement %859, %858[%63 : i32] : vector<8xbf16> loc(#loc)
    %861 = llvm.extractelement %846[%50 : i32] : vector<8xbf16> loc(#loc)
    %862 = llvm.insertelement %861, %860[%50 : i32] : vector<8xbf16> loc(#loc)
    %863 = llvm.insertelement %68, %2[%64 : i32] : vector<4xf32> loc(#loc)
    %864 = llvm.insertelement %68, %863[%53 : i32] : vector<4xf32> loc(#loc)
    %865 = llvm.insertelement %68, %864[%52 : i32] : vector<4xf32> loc(#loc)
    %866 = llvm.insertelement %68, %865[%57 : i32] : vector<4xf32> loc(#loc)
    %867 = rocdl.mfma.f32.16x16x32.bf16 %790, %694, %866, %64, %64, %64 : (vector<8xbf16>, vector<8xbf16>, vector<4xf32>, i32, i32, i32) -> vector<4xf32> loc(#loc)
    %868 = rocdl.mfma.f32.16x16x32.bf16 %814, %718, %867, %64, %64, %64 : (vector<8xbf16>, vector<8xbf16>, vector<4xf32>, i32, i32, i32) -> vector<4xf32> loc(#loc)
    %869 = rocdl.mfma.f32.16x16x32.bf16 %838, %742, %868, %64, %64, %64 : (vector<8xbf16>, vector<8xbf16>, vector<4xf32>, i32, i32, i32) -> vector<4xf32> loc(#loc)
    %870 = rocdl.mfma.f32.16x16x32.bf16 %862, %766, %869, %64, %64, %64 : (vector<8xbf16>, vector<8xbf16>, vector<4xf32>, i32, i32, i32) -> vector<4xf32> loc(#loc)
    %871 = llvm.extractelement %870[%64 : i32] : vector<4xf32> loc(#loc)
    %872 = llvm.extractelement %870[%53 : i32] : vector<4xf32> loc(#loc)
    %873 = llvm.extractelement %870[%52 : i32] : vector<4xf32> loc(#loc)
    %874 = llvm.extractelement %870[%57 : i32] : vector<4xf32> loc(#loc)
    %875 = llvm.zext %522 : i8 to i16 loc(#loc)
    %876 = llvm.zext %530 : i8 to i16 loc(#loc)
    %877 = llvm.zext %538 : i8 to i16 loc(#loc)
    %878 = llvm.zext %546 : i8 to i16 loc(#loc)
    %879 = llvm.shl %875, %71 : i16 loc(#loc)
    %880 = llvm.shl %876, %71 : i16 loc(#loc)
    %881 = llvm.shl %877, %71 : i16 loc(#loc)
    %882 = llvm.shl %878, %71 : i16 loc(#loc)
    %883 = llvm.insertelement %437, %16[%64 : i32] : vector<4xi8> loc(#loc)
    %884 = llvm.insertelement %438, %883[%53 : i32] : vector<4xi8> loc(#loc)
    %885 = llvm.insertelement %439, %884[%52 : i32] : vector<4xi8> loc(#loc)
    %886 = llvm.insertelement %440, %885[%57 : i32] : vector<4xi8> loc(#loc)
    %887 = llvm.bitcast %886 : vector<4xi8> to i32 loc(#loc)
    %888 = llvm.zext %879 : i16 to i32 loc(#loc)
    %889 = llvm.shl %888, %60 : i32 loc(#loc)
    %890 = llvm.bitcast %889 : i32 to f32 loc(#loc)
    %891 = rocdl.cvt.scalef32.pk.bf16.fp4 %887[0], %890 : vector<2xbf16> loc(#loc)
    %892 = rocdl.cvt.scalef32.pk.bf16.fp4 %887[2], %890 : vector<2xbf16> loc(#loc)
    %893 = rocdl.cvt.scalef32.pk.bf16.fp4 %887[1], %890 : vector<2xbf16> loc(#loc)
    %894 = rocdl.cvt.scalef32.pk.bf16.fp4 %887[3], %890 : vector<2xbf16> loc(#loc)
    %895 = llvm.extractelement %891[%64 : i32] : vector<2xbf16> loc(#loc)
    %896 = llvm.extractelement %891[%53 : i32] : vector<2xbf16> loc(#loc)
    %897 = llvm.extractelement %892[%64 : i32] : vector<2xbf16> loc(#loc)
    %898 = llvm.extractelement %892[%53 : i32] : vector<2xbf16> loc(#loc)
    %899 = llvm.extractelement %893[%64 : i32] : vector<2xbf16> loc(#loc)
    %900 = llvm.extractelement %893[%53 : i32] : vector<2xbf16> loc(#loc)
    %901 = llvm.extractelement %894[%64 : i32] : vector<2xbf16> loc(#loc)
    %902 = llvm.extractelement %894[%53 : i32] : vector<2xbf16> loc(#loc)
    %903 = llvm.insertelement %444, %16[%64 : i32] : vector<4xi8> loc(#loc)
    %904 = llvm.insertelement %445, %903[%53 : i32] : vector<4xi8> loc(#loc)
    %905 = llvm.insertelement %446, %904[%52 : i32] : vector<4xi8> loc(#loc)
    %906 = llvm.insertelement %447, %905[%57 : i32] : vector<4xi8> loc(#loc)
    %907 = llvm.bitcast %906 : vector<4xi8> to i32 loc(#loc)
    %908 = llvm.zext %880 : i16 to i32 loc(#loc)
    %909 = llvm.shl %908, %60 : i32 loc(#loc)
    %910 = llvm.bitcast %909 : i32 to f32 loc(#loc)
    %911 = rocdl.cvt.scalef32.pk.bf16.fp4 %907[0], %910 : vector<2xbf16> loc(#loc)
    %912 = rocdl.cvt.scalef32.pk.bf16.fp4 %907[2], %910 : vector<2xbf16> loc(#loc)
    %913 = rocdl.cvt.scalef32.pk.bf16.fp4 %907[1], %910 : vector<2xbf16> loc(#loc)
    %914 = rocdl.cvt.scalef32.pk.bf16.fp4 %907[3], %910 : vector<2xbf16> loc(#loc)
    %915 = llvm.extractelement %911[%64 : i32] : vector<2xbf16> loc(#loc)
    %916 = llvm.extractelement %911[%53 : i32] : vector<2xbf16> loc(#loc)
    %917 = llvm.extractelement %912[%64 : i32] : vector<2xbf16> loc(#loc)
    %918 = llvm.extractelement %912[%53 : i32] : vector<2xbf16> loc(#loc)
    %919 = llvm.extractelement %913[%64 : i32] : vector<2xbf16> loc(#loc)
    %920 = llvm.extractelement %913[%53 : i32] : vector<2xbf16> loc(#loc)
    %921 = llvm.extractelement %914[%64 : i32] : vector<2xbf16> loc(#loc)
    %922 = llvm.extractelement %914[%53 : i32] : vector<2xbf16> loc(#loc)
    %923 = llvm.insertelement %467, %16[%64 : i32] : vector<4xi8> loc(#loc)
    %924 = llvm.insertelement %468, %923[%53 : i32] : vector<4xi8> loc(#loc)
    %925 = llvm.insertelement %469, %924[%52 : i32] : vector<4xi8> loc(#loc)
    %926 = llvm.insertelement %470, %925[%57 : i32] : vector<4xi8> loc(#loc)
    %927 = llvm.bitcast %926 : vector<4xi8> to i32 loc(#loc)
    %928 = llvm.zext %881 : i16 to i32 loc(#loc)
    %929 = llvm.shl %928, %60 : i32 loc(#loc)
    %930 = llvm.bitcast %929 : i32 to f32 loc(#loc)
    %931 = rocdl.cvt.scalef32.pk.bf16.fp4 %927[0], %930 : vector<2xbf16> loc(#loc)
    %932 = rocdl.cvt.scalef32.pk.bf16.fp4 %927[2], %930 : vector<2xbf16> loc(#loc)
    %933 = rocdl.cvt.scalef32.pk.bf16.fp4 %927[1], %930 : vector<2xbf16> loc(#loc)
    %934 = rocdl.cvt.scalef32.pk.bf16.fp4 %927[3], %930 : vector<2xbf16> loc(#loc)
    %935 = llvm.extractelement %931[%64 : i32] : vector<2xbf16> loc(#loc)
    %936 = llvm.extractelement %931[%53 : i32] : vector<2xbf16> loc(#loc)
    %937 = llvm.extractelement %932[%64 : i32] : vector<2xbf16> loc(#loc)
    %938 = llvm.extractelement %932[%53 : i32] : vector<2xbf16> loc(#loc)
    %939 = llvm.extractelement %933[%64 : i32] : vector<2xbf16> loc(#loc)
    %940 = llvm.extractelement %933[%53 : i32] : vector<2xbf16> loc(#loc)
    %941 = llvm.extractelement %934[%64 : i32] : vector<2xbf16> loc(#loc)
    %942 = llvm.extractelement %934[%53 : i32] : vector<2xbf16> loc(#loc)
    %943 = llvm.insertelement %474, %16[%64 : i32] : vector<4xi8> loc(#loc)
    %944 = llvm.insertelement %475, %943[%53 : i32] : vector<4xi8> loc(#loc)
    %945 = llvm.insertelement %476, %944[%52 : i32] : vector<4xi8> loc(#loc)
    %946 = llvm.insertelement %477, %945[%57 : i32] : vector<4xi8> loc(#loc)
    %947 = llvm.bitcast %946 : vector<4xi8> to i32 loc(#loc)
    %948 = llvm.zext %882 : i16 to i32 loc(#loc)
    %949 = llvm.shl %948, %60 : i32 loc(#loc)
    %950 = llvm.bitcast %949 : i32 to f32 loc(#loc)
    %951 = rocdl.cvt.scalef32.pk.bf16.fp4 %947[0], %950 : vector<2xbf16> loc(#loc)
    %952 = rocdl.cvt.scalef32.pk.bf16.fp4 %947[2], %950 : vector<2xbf16> loc(#loc)
    %953 = rocdl.cvt.scalef32.pk.bf16.fp4 %947[1], %950 : vector<2xbf16> loc(#loc)
    %954 = rocdl.cvt.scalef32.pk.bf16.fp4 %947[3], %950 : vector<2xbf16> loc(#loc)
    %955 = llvm.extractelement %951[%64 : i32] : vector<2xbf16> loc(#loc)
    %956 = llvm.extractelement %951[%53 : i32] : vector<2xbf16> loc(#loc)
    %957 = llvm.extractelement %952[%64 : i32] : vector<2xbf16> loc(#loc)
    %958 = llvm.extractelement %952[%53 : i32] : vector<2xbf16> loc(#loc)
    %959 = llvm.extractelement %953[%64 : i32] : vector<2xbf16> loc(#loc)
    %960 = llvm.extractelement %953[%53 : i32] : vector<2xbf16> loc(#loc)
    %961 = llvm.extractelement %954[%64 : i32] : vector<2xbf16> loc(#loc)
    %962 = llvm.extractelement %954[%53 : i32] : vector<2xbf16> loc(#loc)
    %963 = llvm.icmp "eq" %522, %70 : i8 loc(#loc)
    %964 = llvm.icmp "eq" %530, %70 : i8 loc(#loc)
    %965 = llvm.icmp "eq" %538, %70 : i8 loc(#loc)
    %966 = llvm.icmp "eq" %546, %70 : i8 loc(#loc)
    %967 = llvm.select %963, %69, %895 : i1, bf16 loc(#loc)
    %968 = llvm.select %963, %69, %896 : i1, bf16 loc(#loc)
    %969 = llvm.select %963, %69, %897 : i1, bf16 loc(#loc)
    %970 = llvm.select %963, %69, %898 : i1, bf16 loc(#loc)
    %971 = llvm.select %963, %69, %899 : i1, bf16 loc(#loc)
    %972 = llvm.select %963, %69, %900 : i1, bf16 loc(#loc)
    %973 = llvm.select %963, %69, %901 : i1, bf16 loc(#loc)
    %974 = llvm.select %963, %69, %902 : i1, bf16 loc(#loc)
    %975 = llvm.select %964, %69, %915 : i1, bf16 loc(#loc)
    %976 = llvm.select %964, %69, %916 : i1, bf16 loc(#loc)
    %977 = llvm.select %964, %69, %917 : i1, bf16 loc(#loc)
    %978 = llvm.select %964, %69, %918 : i1, bf16 loc(#loc)
    %979 = llvm.select %964, %69, %919 : i1, bf16 loc(#loc)
    %980 = llvm.select %964, %69, %920 : i1, bf16 loc(#loc)
    %981 = llvm.select %964, %69, %921 : i1, bf16 loc(#loc)
    %982 = llvm.select %964, %69, %922 : i1, bf16 loc(#loc)
    %983 = llvm.select %965, %69, %935 : i1, bf16 loc(#loc)
    %984 = llvm.select %965, %69, %936 : i1, bf16 loc(#loc)
    %985 = llvm.select %965, %69, %937 : i1, bf16 loc(#loc)
    %986 = llvm.select %965, %69, %938 : i1, bf16 loc(#loc)
    %987 = llvm.select %965, %69, %939 : i1, bf16 loc(#loc)
    %988 = llvm.select %965, %69, %940 : i1, bf16 loc(#loc)
    %989 = llvm.select %965, %69, %941 : i1, bf16 loc(#loc)
    %990 = llvm.select %965, %69, %942 : i1, bf16 loc(#loc)
    %991 = llvm.select %966, %69, %955 : i1, bf16 loc(#loc)
    %992 = llvm.select %966, %69, %956 : i1, bf16 loc(#loc)
    %993 = llvm.select %966, %69, %957 : i1, bf16 loc(#loc)
    %994 = llvm.select %966, %69, %958 : i1, bf16 loc(#loc)
    %995 = llvm.select %966, %69, %959 : i1, bf16 loc(#loc)
    %996 = llvm.select %966, %69, %960 : i1, bf16 loc(#loc)
    %997 = llvm.select %966, %69, %961 : i1, bf16 loc(#loc)
    %998 = llvm.select %966, %69, %962 : i1, bf16 loc(#loc)
    %999 = llvm.insertelement %270, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %1000 = llvm.insertelement %271, %999[%53 : i32] : vector<8xbf16> loc(#loc)
    %1001 = llvm.insertelement %272, %1000[%52 : i32] : vector<8xbf16> loc(#loc)
    %1002 = llvm.insertelement %273, %1001[%57 : i32] : vector<8xbf16> loc(#loc)
    %1003 = llvm.insertelement %274, %1002[%51 : i32] : vector<8xbf16> loc(#loc)
    %1004 = llvm.insertelement %275, %1003[%61 : i32] : vector<8xbf16> loc(#loc)
    %1005 = llvm.insertelement %276, %1004[%63 : i32] : vector<8xbf16> loc(#loc)
    %1006 = llvm.insertelement %277, %1005[%50 : i32] : vector<8xbf16> loc(#loc)
    %1007 = llvm.extractelement %1006[%64 : i32] : vector<8xbf16> loc(#loc)
    %1008 = llvm.insertelement %1007, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %1009 = llvm.extractelement %1006[%53 : i32] : vector<8xbf16> loc(#loc)
    %1010 = llvm.insertelement %1009, %1008[%53 : i32] : vector<8xbf16> loc(#loc)
    %1011 = llvm.extractelement %1006[%52 : i32] : vector<8xbf16> loc(#loc)
    %1012 = llvm.insertelement %1011, %1010[%52 : i32] : vector<8xbf16> loc(#loc)
    %1013 = llvm.extractelement %1006[%57 : i32] : vector<8xbf16> loc(#loc)
    %1014 = llvm.insertelement %1013, %1012[%57 : i32] : vector<8xbf16> loc(#loc)
    %1015 = llvm.extractelement %1006[%51 : i32] : vector<8xbf16> loc(#loc)
    %1016 = llvm.insertelement %1015, %1014[%51 : i32] : vector<8xbf16> loc(#loc)
    %1017 = llvm.extractelement %1006[%61 : i32] : vector<8xbf16> loc(#loc)
    %1018 = llvm.insertelement %1017, %1016[%61 : i32] : vector<8xbf16> loc(#loc)
    %1019 = llvm.extractelement %1006[%63 : i32] : vector<8xbf16> loc(#loc)
    %1020 = llvm.insertelement %1019, %1018[%63 : i32] : vector<8xbf16> loc(#loc)
    %1021 = llvm.extractelement %1006[%50 : i32] : vector<8xbf16> loc(#loc)
    %1022 = llvm.insertelement %1021, %1020[%50 : i32] : vector<8xbf16> loc(#loc)
    %1023 = llvm.insertelement %293, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %1024 = llvm.insertelement %294, %1023[%53 : i32] : vector<8xbf16> loc(#loc)
    %1025 = llvm.insertelement %295, %1024[%52 : i32] : vector<8xbf16> loc(#loc)
    %1026 = llvm.insertelement %296, %1025[%57 : i32] : vector<8xbf16> loc(#loc)
    %1027 = llvm.insertelement %297, %1026[%51 : i32] : vector<8xbf16> loc(#loc)
    %1028 = llvm.insertelement %298, %1027[%61 : i32] : vector<8xbf16> loc(#loc)
    %1029 = llvm.insertelement %299, %1028[%63 : i32] : vector<8xbf16> loc(#loc)
    %1030 = llvm.insertelement %300, %1029[%50 : i32] : vector<8xbf16> loc(#loc)
    %1031 = llvm.extractelement %1030[%64 : i32] : vector<8xbf16> loc(#loc)
    %1032 = llvm.insertelement %1031, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %1033 = llvm.extractelement %1030[%53 : i32] : vector<8xbf16> loc(#loc)
    %1034 = llvm.insertelement %1033, %1032[%53 : i32] : vector<8xbf16> loc(#loc)
    %1035 = llvm.extractelement %1030[%52 : i32] : vector<8xbf16> loc(#loc)
    %1036 = llvm.insertelement %1035, %1034[%52 : i32] : vector<8xbf16> loc(#loc)
    %1037 = llvm.extractelement %1030[%57 : i32] : vector<8xbf16> loc(#loc)
    %1038 = llvm.insertelement %1037, %1036[%57 : i32] : vector<8xbf16> loc(#loc)
    %1039 = llvm.extractelement %1030[%51 : i32] : vector<8xbf16> loc(#loc)
    %1040 = llvm.insertelement %1039, %1038[%51 : i32] : vector<8xbf16> loc(#loc)
    %1041 = llvm.extractelement %1030[%61 : i32] : vector<8xbf16> loc(#loc)
    %1042 = llvm.insertelement %1041, %1040[%61 : i32] : vector<8xbf16> loc(#loc)
    %1043 = llvm.extractelement %1030[%63 : i32] : vector<8xbf16> loc(#loc)
    %1044 = llvm.insertelement %1043, %1042[%63 : i32] : vector<8xbf16> loc(#loc)
    %1045 = llvm.extractelement %1030[%50 : i32] : vector<8xbf16> loc(#loc)
    %1046 = llvm.insertelement %1045, %1044[%50 : i32] : vector<8xbf16> loc(#loc)
    %1047 = llvm.insertelement %316, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %1048 = llvm.insertelement %317, %1047[%53 : i32] : vector<8xbf16> loc(#loc)
    %1049 = llvm.insertelement %318, %1048[%52 : i32] : vector<8xbf16> loc(#loc)
    %1050 = llvm.insertelement %319, %1049[%57 : i32] : vector<8xbf16> loc(#loc)
    %1051 = llvm.insertelement %320, %1050[%51 : i32] : vector<8xbf16> loc(#loc)
    %1052 = llvm.insertelement %321, %1051[%61 : i32] : vector<8xbf16> loc(#loc)
    %1053 = llvm.insertelement %322, %1052[%63 : i32] : vector<8xbf16> loc(#loc)
    %1054 = llvm.insertelement %323, %1053[%50 : i32] : vector<8xbf16> loc(#loc)
    %1055 = llvm.extractelement %1054[%64 : i32] : vector<8xbf16> loc(#loc)
    %1056 = llvm.insertelement %1055, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %1057 = llvm.extractelement %1054[%53 : i32] : vector<8xbf16> loc(#loc)
    %1058 = llvm.insertelement %1057, %1056[%53 : i32] : vector<8xbf16> loc(#loc)
    %1059 = llvm.extractelement %1054[%52 : i32] : vector<8xbf16> loc(#loc)
    %1060 = llvm.insertelement %1059, %1058[%52 : i32] : vector<8xbf16> loc(#loc)
    %1061 = llvm.extractelement %1054[%57 : i32] : vector<8xbf16> loc(#loc)
    %1062 = llvm.insertelement %1061, %1060[%57 : i32] : vector<8xbf16> loc(#loc)
    %1063 = llvm.extractelement %1054[%51 : i32] : vector<8xbf16> loc(#loc)
    %1064 = llvm.insertelement %1063, %1062[%51 : i32] : vector<8xbf16> loc(#loc)
    %1065 = llvm.extractelement %1054[%61 : i32] : vector<8xbf16> loc(#loc)
    %1066 = llvm.insertelement %1065, %1064[%61 : i32] : vector<8xbf16> loc(#loc)
    %1067 = llvm.extractelement %1054[%63 : i32] : vector<8xbf16> loc(#loc)
    %1068 = llvm.insertelement %1067, %1066[%63 : i32] : vector<8xbf16> loc(#loc)
    %1069 = llvm.extractelement %1054[%50 : i32] : vector<8xbf16> loc(#loc)
    %1070 = llvm.insertelement %1069, %1068[%50 : i32] : vector<8xbf16> loc(#loc)
    %1071 = llvm.insertelement %339, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %1072 = llvm.insertelement %340, %1071[%53 : i32] : vector<8xbf16> loc(#loc)
    %1073 = llvm.insertelement %341, %1072[%52 : i32] : vector<8xbf16> loc(#loc)
    %1074 = llvm.insertelement %342, %1073[%57 : i32] : vector<8xbf16> loc(#loc)
    %1075 = llvm.insertelement %343, %1074[%51 : i32] : vector<8xbf16> loc(#loc)
    %1076 = llvm.insertelement %344, %1075[%61 : i32] : vector<8xbf16> loc(#loc)
    %1077 = llvm.insertelement %345, %1076[%63 : i32] : vector<8xbf16> loc(#loc)
    %1078 = llvm.insertelement %346, %1077[%50 : i32] : vector<8xbf16> loc(#loc)
    %1079 = llvm.extractelement %1078[%64 : i32] : vector<8xbf16> loc(#loc)
    %1080 = llvm.insertelement %1079, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %1081 = llvm.extractelement %1078[%53 : i32] : vector<8xbf16> loc(#loc)
    %1082 = llvm.insertelement %1081, %1080[%53 : i32] : vector<8xbf16> loc(#loc)
    %1083 = llvm.extractelement %1078[%52 : i32] : vector<8xbf16> loc(#loc)
    %1084 = llvm.insertelement %1083, %1082[%52 : i32] : vector<8xbf16> loc(#loc)
    %1085 = llvm.extractelement %1078[%57 : i32] : vector<8xbf16> loc(#loc)
    %1086 = llvm.insertelement %1085, %1084[%57 : i32] : vector<8xbf16> loc(#loc)
    %1087 = llvm.extractelement %1078[%51 : i32] : vector<8xbf16> loc(#loc)
    %1088 = llvm.insertelement %1087, %1086[%51 : i32] : vector<8xbf16> loc(#loc)
    %1089 = llvm.extractelement %1078[%61 : i32] : vector<8xbf16> loc(#loc)
    %1090 = llvm.insertelement %1089, %1088[%61 : i32] : vector<8xbf16> loc(#loc)
    %1091 = llvm.extractelement %1078[%63 : i32] : vector<8xbf16> loc(#loc)
    %1092 = llvm.insertelement %1091, %1090[%63 : i32] : vector<8xbf16> loc(#loc)
    %1093 = llvm.extractelement %1078[%50 : i32] : vector<8xbf16> loc(#loc)
    %1094 = llvm.insertelement %1093, %1092[%50 : i32] : vector<8xbf16> loc(#loc)
    %1095 = llvm.insertelement %967, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %1096 = llvm.insertelement %968, %1095[%53 : i32] : vector<8xbf16> loc(#loc)
    %1097 = llvm.insertelement %969, %1096[%52 : i32] : vector<8xbf16> loc(#loc)
    %1098 = llvm.insertelement %970, %1097[%57 : i32] : vector<8xbf16> loc(#loc)
    %1099 = llvm.insertelement %971, %1098[%51 : i32] : vector<8xbf16> loc(#loc)
    %1100 = llvm.insertelement %972, %1099[%61 : i32] : vector<8xbf16> loc(#loc)
    %1101 = llvm.insertelement %973, %1100[%63 : i32] : vector<8xbf16> loc(#loc)
    %1102 = llvm.insertelement %974, %1101[%50 : i32] : vector<8xbf16> loc(#loc)
    %1103 = llvm.extractelement %1102[%64 : i32] : vector<8xbf16> loc(#loc)
    %1104 = llvm.insertelement %1103, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %1105 = llvm.extractelement %1102[%53 : i32] : vector<8xbf16> loc(#loc)
    %1106 = llvm.insertelement %1105, %1104[%53 : i32] : vector<8xbf16> loc(#loc)
    %1107 = llvm.extractelement %1102[%52 : i32] : vector<8xbf16> loc(#loc)
    %1108 = llvm.insertelement %1107, %1106[%52 : i32] : vector<8xbf16> loc(#loc)
    %1109 = llvm.extractelement %1102[%57 : i32] : vector<8xbf16> loc(#loc)
    %1110 = llvm.insertelement %1109, %1108[%57 : i32] : vector<8xbf16> loc(#loc)
    %1111 = llvm.extractelement %1102[%51 : i32] : vector<8xbf16> loc(#loc)
    %1112 = llvm.insertelement %1111, %1110[%51 : i32] : vector<8xbf16> loc(#loc)
    %1113 = llvm.extractelement %1102[%61 : i32] : vector<8xbf16> loc(#loc)
    %1114 = llvm.insertelement %1113, %1112[%61 : i32] : vector<8xbf16> loc(#loc)
    %1115 = llvm.extractelement %1102[%63 : i32] : vector<8xbf16> loc(#loc)
    %1116 = llvm.insertelement %1115, %1114[%63 : i32] : vector<8xbf16> loc(#loc)
    %1117 = llvm.extractelement %1102[%50 : i32] : vector<8xbf16> loc(#loc)
    %1118 = llvm.insertelement %1117, %1116[%50 : i32] : vector<8xbf16> loc(#loc)
    %1119 = llvm.insertelement %975, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %1120 = llvm.insertelement %976, %1119[%53 : i32] : vector<8xbf16> loc(#loc)
    %1121 = llvm.insertelement %977, %1120[%52 : i32] : vector<8xbf16> loc(#loc)
    %1122 = llvm.insertelement %978, %1121[%57 : i32] : vector<8xbf16> loc(#loc)
    %1123 = llvm.insertelement %979, %1122[%51 : i32] : vector<8xbf16> loc(#loc)
    %1124 = llvm.insertelement %980, %1123[%61 : i32] : vector<8xbf16> loc(#loc)
    %1125 = llvm.insertelement %981, %1124[%63 : i32] : vector<8xbf16> loc(#loc)
    %1126 = llvm.insertelement %982, %1125[%50 : i32] : vector<8xbf16> loc(#loc)
    %1127 = llvm.extractelement %1126[%64 : i32] : vector<8xbf16> loc(#loc)
    %1128 = llvm.insertelement %1127, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %1129 = llvm.extractelement %1126[%53 : i32] : vector<8xbf16> loc(#loc)
    %1130 = llvm.insertelement %1129, %1128[%53 : i32] : vector<8xbf16> loc(#loc)
    %1131 = llvm.extractelement %1126[%52 : i32] : vector<8xbf16> loc(#loc)
    %1132 = llvm.insertelement %1131, %1130[%52 : i32] : vector<8xbf16> loc(#loc)
    %1133 = llvm.extractelement %1126[%57 : i32] : vector<8xbf16> loc(#loc)
    %1134 = llvm.insertelement %1133, %1132[%57 : i32] : vector<8xbf16> loc(#loc)
    %1135 = llvm.extractelement %1126[%51 : i32] : vector<8xbf16> loc(#loc)
    %1136 = llvm.insertelement %1135, %1134[%51 : i32] : vector<8xbf16> loc(#loc)
    %1137 = llvm.extractelement %1126[%61 : i32] : vector<8xbf16> loc(#loc)
    %1138 = llvm.insertelement %1137, %1136[%61 : i32] : vector<8xbf16> loc(#loc)
    %1139 = llvm.extractelement %1126[%63 : i32] : vector<8xbf16> loc(#loc)
    %1140 = llvm.insertelement %1139, %1138[%63 : i32] : vector<8xbf16> loc(#loc)
    %1141 = llvm.extractelement %1126[%50 : i32] : vector<8xbf16> loc(#loc)
    %1142 = llvm.insertelement %1141, %1140[%50 : i32] : vector<8xbf16> loc(#loc)
    %1143 = llvm.insertelement %983, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %1144 = llvm.insertelement %984, %1143[%53 : i32] : vector<8xbf16> loc(#loc)
    %1145 = llvm.insertelement %985, %1144[%52 : i32] : vector<8xbf16> loc(#loc)
    %1146 = llvm.insertelement %986, %1145[%57 : i32] : vector<8xbf16> loc(#loc)
    %1147 = llvm.insertelement %987, %1146[%51 : i32] : vector<8xbf16> loc(#loc)
    %1148 = llvm.insertelement %988, %1147[%61 : i32] : vector<8xbf16> loc(#loc)
    %1149 = llvm.insertelement %989, %1148[%63 : i32] : vector<8xbf16> loc(#loc)
    %1150 = llvm.insertelement %990, %1149[%50 : i32] : vector<8xbf16> loc(#loc)
    %1151 = llvm.extractelement %1150[%64 : i32] : vector<8xbf16> loc(#loc)
    %1152 = llvm.insertelement %1151, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %1153 = llvm.extractelement %1150[%53 : i32] : vector<8xbf16> loc(#loc)
    %1154 = llvm.insertelement %1153, %1152[%53 : i32] : vector<8xbf16> loc(#loc)
    %1155 = llvm.extractelement %1150[%52 : i32] : vector<8xbf16> loc(#loc)
    %1156 = llvm.insertelement %1155, %1154[%52 : i32] : vector<8xbf16> loc(#loc)
    %1157 = llvm.extractelement %1150[%57 : i32] : vector<8xbf16> loc(#loc)
    %1158 = llvm.insertelement %1157, %1156[%57 : i32] : vector<8xbf16> loc(#loc)
    %1159 = llvm.extractelement %1150[%51 : i32] : vector<8xbf16> loc(#loc)
    %1160 = llvm.insertelement %1159, %1158[%51 : i32] : vector<8xbf16> loc(#loc)
    %1161 = llvm.extractelement %1150[%61 : i32] : vector<8xbf16> loc(#loc)
    %1162 = llvm.insertelement %1161, %1160[%61 : i32] : vector<8xbf16> loc(#loc)
    %1163 = llvm.extractelement %1150[%63 : i32] : vector<8xbf16> loc(#loc)
    %1164 = llvm.insertelement %1163, %1162[%63 : i32] : vector<8xbf16> loc(#loc)
    %1165 = llvm.extractelement %1150[%50 : i32] : vector<8xbf16> loc(#loc)
    %1166 = llvm.insertelement %1165, %1164[%50 : i32] : vector<8xbf16> loc(#loc)
    %1167 = llvm.insertelement %991, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %1168 = llvm.insertelement %992, %1167[%53 : i32] : vector<8xbf16> loc(#loc)
    %1169 = llvm.insertelement %993, %1168[%52 : i32] : vector<8xbf16> loc(#loc)
    %1170 = llvm.insertelement %994, %1169[%57 : i32] : vector<8xbf16> loc(#loc)
    %1171 = llvm.insertelement %995, %1170[%51 : i32] : vector<8xbf16> loc(#loc)
    %1172 = llvm.insertelement %996, %1171[%61 : i32] : vector<8xbf16> loc(#loc)
    %1173 = llvm.insertelement %997, %1172[%63 : i32] : vector<8xbf16> loc(#loc)
    %1174 = llvm.insertelement %998, %1173[%50 : i32] : vector<8xbf16> loc(#loc)
    %1175 = llvm.extractelement %1174[%64 : i32] : vector<8xbf16> loc(#loc)
    %1176 = llvm.insertelement %1175, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %1177 = llvm.extractelement %1174[%53 : i32] : vector<8xbf16> loc(#loc)
    %1178 = llvm.insertelement %1177, %1176[%53 : i32] : vector<8xbf16> loc(#loc)
    %1179 = llvm.extractelement %1174[%52 : i32] : vector<8xbf16> loc(#loc)
    %1180 = llvm.insertelement %1179, %1178[%52 : i32] : vector<8xbf16> loc(#loc)
    %1181 = llvm.extractelement %1174[%57 : i32] : vector<8xbf16> loc(#loc)
    %1182 = llvm.insertelement %1181, %1180[%57 : i32] : vector<8xbf16> loc(#loc)
    %1183 = llvm.extractelement %1174[%51 : i32] : vector<8xbf16> loc(#loc)
    %1184 = llvm.insertelement %1183, %1182[%51 : i32] : vector<8xbf16> loc(#loc)
    %1185 = llvm.extractelement %1174[%61 : i32] : vector<8xbf16> loc(#loc)
    %1186 = llvm.insertelement %1185, %1184[%61 : i32] : vector<8xbf16> loc(#loc)
    %1187 = llvm.extractelement %1174[%63 : i32] : vector<8xbf16> loc(#loc)
    %1188 = llvm.insertelement %1187, %1186[%63 : i32] : vector<8xbf16> loc(#loc)
    %1189 = llvm.extractelement %1174[%50 : i32] : vector<8xbf16> loc(#loc)
    %1190 = llvm.insertelement %1189, %1188[%50 : i32] : vector<8xbf16> loc(#loc)
    %1191 = rocdl.mfma.f32.16x16x32.bf16 %1118, %1022, %866, %64, %64, %64 : (vector<8xbf16>, vector<8xbf16>, vector<4xf32>, i32, i32, i32) -> vector<4xf32> loc(#loc)
    %1192 = rocdl.mfma.f32.16x16x32.bf16 %1142, %1046, %1191, %64, %64, %64 : (vector<8xbf16>, vector<8xbf16>, vector<4xf32>, i32, i32, i32) -> vector<4xf32> loc(#loc)
    %1193 = rocdl.mfma.f32.16x16x32.bf16 %1166, %1070, %1192, %64, %64, %64 : (vector<8xbf16>, vector<8xbf16>, vector<4xf32>, i32, i32, i32) -> vector<4xf32> loc(#loc)
    %1194 = rocdl.mfma.f32.16x16x32.bf16 %1190, %1094, %1193, %64, %64, %64 : (vector<8xbf16>, vector<8xbf16>, vector<4xf32>, i32, i32, i32) -> vector<4xf32> loc(#loc)
    %1195 = llvm.extractelement %1194[%64 : i32] : vector<4xf32> loc(#loc)
    %1196 = llvm.extractelement %1194[%53 : i32] : vector<4xf32> loc(#loc)
    %1197 = llvm.extractelement %1194[%52 : i32] : vector<4xf32> loc(#loc)
    %1198 = llvm.extractelement %1194[%57 : i32] : vector<4xf32> loc(#loc)
    %1199 = llvm.fadd %871, %1195 : f32 loc(#loc)
    %1200 = llvm.fadd %872, %1196 : f32 loc(#loc)
    %1201 = llvm.fadd %873, %1197 : f32 loc(#loc)
    %1202 = llvm.fadd %874, %1198 : f32 loc(#loc)
    %1203 = llvm.mul %109, %73 : i32 loc(#loc)
    %1204 = llvm.add %135, %1203 : i32 loc(#loc)
    %1205 = llvm.insertelement %1199, %1[%64 : i32] : vector<2xf32> loc(#loc)
    %1206 = llvm.insertelement %1200, %1205[%53 : i32] : vector<2xf32> loc(#loc)
    %1207 = llvm.fptrunc %1206 : vector<2xf32> to vector<2xbf16> loc(#loc)
    %1208 = llvm.extractelement %1207[%64 : i32] : vector<2xbf16> loc(#loc)
    %1209 = llvm.extractelement %1207[%53 : i32] : vector<2xbf16> loc(#loc)
    %1210 = llvm.insertelement %1201, %1[%64 : i32] : vector<2xf32> loc(#loc)
    %1211 = llvm.insertelement %1202, %1210[%53 : i32] : vector<2xf32> loc(#loc)
    %1212 = llvm.fptrunc %1211 : vector<2xf32> to vector<2xbf16> loc(#loc)
    %1213 = llvm.extractelement %1212[%64 : i32] : vector<2xbf16> loc(#loc)
    %1214 = llvm.extractelement %1212[%53 : i32] : vector<2xbf16> loc(#loc)
    %1215 = rocdl.make.buffer.rsrc %out, %11, %9, %10 : <1> to <8> loc(#loc)
    %1216 = llvm.insertelement %1208, %0[%64 : i32] : vector<4xbf16> loc(#loc)
    %1217 = llvm.insertelement %1209, %1216[%53 : i32] : vector<4xbf16> loc(#loc)
    %1218 = llvm.insertelement %1213, %1217[%52 : i32] : vector<4xbf16> loc(#loc)
    %1219 = llvm.insertelement %1214, %1218[%57 : i32] : vector<4xbf16> loc(#loc)
    %1220 = llvm.bitcast %1219 : vector<4xbf16> to vector<2xi32> loc(#loc)
    %1221 = llvm.mul %1204, %52 : i32 loc(#loc)
    %1222 = llvm.select %46, %1221, %7 : i1, i32 loc(#loc)
    rocdl.raw.ptr.buffer.store %1220, %1215, %1222, %64, %64 : vector<2xi32> loc(#loc)
    llvm.return loc(#loc)
  } loc(#loc)
} loc(#loc)


// -----// IR Dump Before Canonicalizer (canonicalize) ('builtin.module' operation) //----- //
#loc = loc(unknown)
#loc1 = loc("a_base")
#loc2 = loc("stride_a0")
#loc3 = loc("b_base")
#loc4 = loc("stride_b1")
#loc5 = loc("b_scale")
#loc6 = loc("out")
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.shared = 16384 : i32, ttg.target = "hip:gfx950", "ttg.threads-per-warp" = 64 : i32} {
  llvm.mlir.global external @global_smem() {addr_space = 3 : i32, alignment = 16 : i64} : !llvm.array<0 x i8> loc(#loc)
  llvm.func @"__triton_hip_predicated_load_vector<8xbf16>_!llvm.ptr<1>_i1_vector<8xbf16>_"(!llvm.ptr<1>, i1, vector<8xbf16>) -> vector<8xbf16> attributes {libname = "", libpath = ""} loc(#loc)
  llvm.func @"__triton_hip_predicated_store_!llvm.void_!llvm.ptr<3>_vector<8xbf16>_i1_"(!llvm.ptr<3>, vector<8xbf16>, i1) attributes {libname = "", libpath = ""} loc(#loc)
  llvm.func @"__triton_hip_predicated_load_vector<8xbf16>_!llvm.ptr<3>_i1_vector<8xbf16>_"(!llvm.ptr<3>, i1, vector<8xbf16>) -> vector<8xbf16> attributes {libname = "", libpath = ""} loc(#loc)
  llvm.func @"__triton_hip_predicated_load_vector<16xi8>_!llvm.ptr<1>_i1_vector<16xi8>_"(!llvm.ptr<1>, i1, vector<16xi8>) -> vector<16xi8> attributes {libname = "", libpath = ""} loc(#loc)
  llvm.func @"__triton_hip_predicated_store_!llvm.void_!llvm.ptr<3>_vector<4xi8>_i1_"(!llvm.ptr<3>, vector<4xi8>, i1) attributes {libname = "", libpath = ""} loc(#loc)
  llvm.func @"__triton_hip_predicated_load_vector<4xi8>_!llvm.ptr<3>_i1_vector<4xi8>_"(!llvm.ptr<3>, i1, vector<4xi8>) -> vector<4xi8> attributes {libname = "", libpath = ""} loc(#loc)
  llvm.func @"__triton_hip_predicated_store_!llvm.void_!llvm.ptr<3>_vector<1xi8>_i1_"(!llvm.ptr<3>, vector<1xi8>, i1) attributes {libname = "", libpath = ""} loc(#loc)
  llvm.func @"__triton_hip_predicated_load_vector<1xi8>_!llvm.ptr<3>_i1_vector<1xi8>_"(!llvm.ptr<3>, i1, vector<1xi8>) -> vector<1xi8> attributes {libname = "", libpath = ""} loc(#loc)
  llvm.func @dot_scale_kernel(%a_base: !llvm.ptr<1> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("a_base"), %stride_a0: i32 {tt.divisibility = 16 : i32} loc("stride_a0"), %b_base: !llvm.ptr<1> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("b_base"), %stride_b1: i32 {tt.divisibility = 16 : i32} loc("stride_b1"), %b_scale: !llvm.ptr<1> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("b_scale"), %out: !llvm.ptr<1> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("out"), %arg6: !llvm.ptr<1> loc(unknown), %arg7: !llvm.ptr<1> loc(unknown)) attributes {noinline = false, nvvm.kernel = 1 : ui1, nvvm.reqntid = array<i32: 128>} {
    %0 = llvm.mlir.undef : vector<4xbf16> loc(#loc)
    %1 = llvm.mlir.undef : vector<2xf32> loc(#loc)
    %2 = llvm.mlir.undef : vector<4xf32> loc(#loc)
    %3 = llvm.mlir.constant(28 : i32) : i32 loc(#loc)
    %4 = llvm.mlir.constant(20 : i32) : i32 loc(#loc)
    %5 = llvm.mlir.undef : vector<1xi8> loc(#loc)
    %6 = llvm.mlir.constant(63 : i32) : i32 loc(#loc)
    %7 = llvm.mlir.constant(-2147483648 : i32) : i32 loc(#loc)
    %8 = llvm.mlir.constant(dense<0> : vector<1xi8>) : vector<1xi8> loc(#loc)
    %9 = llvm.mlir.constant(2147483646 : i32) : i32 loc(#loc)
    %10 = llvm.mlir.constant(159744 : i32) : i32 loc(#loc)
    %11 = llvm.mlir.constant(0 : i16) : i16 loc(#loc)
    %12 = llvm.mlir.constant(580 : i32) : i32 loc(#loc)
    %13 = llvm.mlir.constant(dense<0> : vector<4xi8>) : vector<4xi8> loc(#loc)
    %14 = llvm.mlir.constant(260 : i32) : i32 loc(#loc)
    %15 = llvm.mlir.constant(2048 : i32) : i32 loc(#loc)
    %16 = llvm.mlir.undef : vector<4xi8> loc(#loc)
    %17 = llvm.mlir.constant(576 : i32) : i32 loc(#loc)
    %18 = llvm.mlir.constant(1024 : i32) : i32 loc(#loc)
    %19 = llvm.mlir.constant(15 : index) : i32 loc(#loc)
    %20 = llvm.mlir.constant(14 : index) : i32 loc(#loc)
    %21 = llvm.mlir.constant(13 : index) : i32 loc(#loc)
    %22 = llvm.mlir.constant(12 : index) : i32 loc(#loc)
    %23 = llvm.mlir.constant(11 : index) : i32 loc(#loc)
    %24 = llvm.mlir.constant(10 : index) : i32 loc(#loc)
    %25 = llvm.mlir.constant(9 : index) : i32 loc(#loc)
    %26 = llvm.mlir.constant(8 : index) : i32 loc(#loc)
    %27 = llvm.mlir.constant(dense<0> : vector<16xi8>) : vector<16xi8> loc(#loc)
    %28 = llvm.mlir.constant(96 : i32) : i32 loc(#loc)
    %29 = llvm.mlir.constant(30 : i32) : i32 loc(#loc)
    %30 = llvm.mlir.constant(2112 : i32) : i32 loc(#loc)
    %31 = llvm.mlir.undef : vector<8xbf16> loc(#loc)
    %32 = llvm.mlir.constant(8192 : i32) : i32 loc(#loc)
    %33 = llvm.mlir.constant(256 : i32) : i32 loc(#loc)
    %34 = llvm.mlir.constant(4096 : i32) : i32 loc(#loc)
    %35 = llvm.mlir.constant(192 : i32) : i32 loc(#loc)
    %36 = llvm.mlir.constant(206 : i32) : i32 loc(#loc)
    %37 = llvm.mlir.addressof @global_smem : !llvm.ptr<3> loc(#loc)
    %38 = llvm.mlir.constant(7 : index) : i32 loc(#loc)
    %39 = llvm.mlir.constant(6 : index) : i32 loc(#loc)
    %40 = llvm.mlir.constant(5 : index) : i32 loc(#loc)
    %41 = llvm.mlir.constant(4 : index) : i32 loc(#loc)
    %42 = llvm.mlir.constant(3 : index) : i32 loc(#loc)
    %43 = llvm.mlir.constant(2 : index) : i32 loc(#loc)
    %44 = llvm.mlir.constant(1 : index) : i32 loc(#loc)
    %45 = llvm.mlir.constant(dense<0.000000e+00> : vector<8xbf16>) : vector<8xbf16> loc(#loc)
    %46 = llvm.mlir.constant(true) : i1 loc(#loc)
    %47 = llvm.mlir.constant(112 : i32) : i32 loc(#loc)
    %48 = llvm.mlir.constant(14 : i32) : i32 loc(#loc)
    %49 = llvm.mlir.constant(12 : i32) : i32 loc(#loc)
    %50 = llvm.mlir.constant(7 : i32) : i32 loc(#loc)
    %51 = llvm.mlir.constant(4 : i32) : i32 loc(#loc)
    %52 = llvm.mlir.constant(2 : i32) : i32 loc(#loc)
    %53 = llvm.mlir.constant(1 : i32) : i32 loc(#loc)
    %54 = llvm.mlir.constant(31 : i32) : i32 loc(#loc)
    %55 = llvm.mlir.constant(128 : i32) : i32 loc(#loc)
    %56 = llvm.mlir.constant(15 : i32) : i32 loc(#loc)
    %57 = llvm.mlir.constant(3 : i32) : i32 loc(#loc)
    %58 = llvm.mlir.constant(248 : i32) : i32 loc(#loc)
    %59 = llvm.mlir.constant(24 : i32) : i32 loc(#loc)
    %60 = llvm.mlir.constant(16 : i32) : i32 loc(#loc)
    %61 = llvm.mlir.constant(5 : i32) : i32 loc(#loc)
    %62 = llvm.mlir.constant(224 : i32) : i32 loc(#loc)
    %63 = llvm.mlir.constant(6 : i32) : i32 loc(#loc)
    %64 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %65 = llvm.mlir.constant(64 : i32) : i32 loc(#loc)
    %66 = llvm.mlir.constant(255 : i32) : i32 loc(#loc)
    %67 = llvm.mlir.constant(0 : index) : i32 loc(#loc)
    %68 = llvm.mlir.constant(0.000000e+00 : f32) : f32 loc(#loc)
    %69 = llvm.mlir.constant(0x7FC0 : bf16) : bf16 loc(#loc)
    %70 = llvm.mlir.constant(-1 : i8) : i8 loc(#loc)
    %71 = llvm.mlir.constant(7 : i16) : i16 loc(#loc)
    %72 = llvm.mlir.constant(8 : i32) : i32 loc(#loc)
    %73 = llvm.mlir.constant(32 : i32) : i32 loc(#loc)
    %74 = rocdl.workitem.id.x : i32 loc(#loc)
    %75 = llvm.and %74, %66 : i32 loc(#loc)
    %76 = llvm.urem %75, %65 : i32 loc(#loc)
    %77 = llvm.udiv %75, %65 : i32 loc(#loc)
    %78 = llvm.shl %76, %64 : i32 loc(#loc)
    %79 = llvm.or %64, %78 : i32 loc(#loc)
    %80 = llvm.shl %77, %63 : i32 loc(#loc)
    %81 = llvm.or %79, %80 : i32 loc(#loc)
    %82 = llvm.and %81, %62 : i32 loc(#loc)
    %83 = llvm.lshr %82, %61 : i32 loc(#loc)
    %84 = llvm.xor %64, %83 : i32 loc(#loc)
    %85 = llvm.xor %64, %84 : i32 loc(#loc)
    %86 = llvm.xor %85, %64 : i32 loc(#loc)
    %87 = llvm.xor %85, %72 : i32 loc(#loc)
    %88 = llvm.xor %85, %60 : i32 loc(#loc)
    %89 = llvm.xor %85, %59 : i32 loc(#loc)
    %90 = llvm.add %86, %67 : i32 loc(#loc)
    %91 = llvm.add %87, %67 : i32 loc(#loc)
    %92 = llvm.add %88, %67 : i32 loc(#loc)
    %93 = llvm.add %89, %67 : i32 loc(#loc)
    %94 = llvm.and %81, %58 : i32 loc(#loc)
    %95 = llvm.lshr %94, %57 : i32 loc(#loc)
    %96 = llvm.xor %64, %95 : i32 loc(#loc)
    %97 = llvm.xor %64, %96 : i32 loc(#loc)
    %98 = llvm.xor %97, %64 : i32 loc(#loc)
    %99 = llvm.add %98, %67 : i32 loc(#loc)
    %100 = llvm.and %81, %56 : i32 loc(#loc)
    %101 = llvm.lshr %100, %64 : i32 loc(#loc)
    %102 = llvm.xor %64, %101 : i32 loc(#loc)
    %103 = llvm.and %81, %55 : i32 loc(#loc)
    %104 = llvm.icmp "eq" %103, %64 : i32 loc(#loc)
    %105 = llvm.select %104, %64, %60 : i1, i32 loc(#loc)
    %106 = llvm.xor %102, %105 : i32 loc(#loc)
    %107 = llvm.xor %64, %106 : i32 loc(#loc)
    %108 = llvm.xor %107, %64 : i32 loc(#loc)
    %109 = llvm.add %108, %67 : i32 loc(#loc)
    %110 = llvm.mul %90, %stride_a0 : i32 loc(#loc)
    %111 = llvm.mul %91, %stride_a0 : i32 loc(#loc)
    %112 = llvm.mul %92, %stride_a0 : i32 loc(#loc)
    %113 = llvm.mul %93, %stride_a0 : i32 loc(#loc)
    %114 = llvm.and %81, %54 : i32 loc(#loc)
    %115 = llvm.shl %114, %57 : i32 loc(#loc)
    %116 = llvm.xor %64, %115 : i32 loc(#loc)
    %117 = llvm.xor %64, %116 : i32 loc(#loc)
    %118 = llvm.xor %117, %64 : i32 loc(#loc)
    %119 = llvm.add %118, %67 : i32 loc(#loc)
    %120 = llvm.add %119, %110 : i32 loc(#loc)
    %121 = llvm.add %119, %111 : i32 loc(#loc)
    %122 = llvm.add %119, %112 : i32 loc(#loc)
    %123 = llvm.add %119, %113 : i32 loc(#loc)
    %124 = llvm.and %81, %50 : i32 loc(#loc)
    %125 = llvm.shl %124, %51 : i32 loc(#loc)
    %126 = llvm.xor %64, %125 : i32 loc(#loc)
    %127 = llvm.xor %64, %126 : i32 loc(#loc)
    %128 = llvm.xor %127, %64 : i32 loc(#loc)
    %129 = llvm.add %128, %67 : i32 loc(#loc)
    %130 = llvm.and %81, %47 : i32 loc(#loc)
    %131 = llvm.lshr %130, %52 : i32 loc(#loc)
    %132 = llvm.xor %64, %131 : i32 loc(#loc)
    %133 = llvm.xor %64, %132 : i32 loc(#loc)
    %134 = llvm.xor %133, %64 : i32 loc(#loc)
    %135 = llvm.add %134, %67 : i32 loc(#loc)
    %136 = llvm.mul %99, %stride_b1 : i32 loc(#loc)
    %137 = llvm.add %136, %129 : i32 loc(#loc)
    %138 = llvm.getelementptr %a_base[%120] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc)
    %139 = llvm.getelementptr %a_base[%121] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc)
    %140 = llvm.getelementptr %a_base[%122] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc)
    %141 = llvm.getelementptr %a_base[%123] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc)
    %142 = llvm.call @"__triton_hip_predicated_load_vector<8xbf16>_!llvm.ptr<1>_i1_vector<8xbf16>_"(%138, %46, %45) : (!llvm.ptr<1>, i1, vector<8xbf16>) -> vector<8xbf16> loc(#loc)
    %143 = llvm.extractelement %142[%67 : i32] : vector<8xbf16> loc(#loc)
    %144 = llvm.extractelement %142[%44 : i32] : vector<8xbf16> loc(#loc)
    %145 = llvm.extractelement %142[%43 : i32] : vector<8xbf16> loc(#loc)
    %146 = llvm.extractelement %142[%42 : i32] : vector<8xbf16> loc(#loc)
    %147 = llvm.extractelement %142[%41 : i32] : vector<8xbf16> loc(#loc)
    %148 = llvm.extractelement %142[%40 : i32] : vector<8xbf16> loc(#loc)
    %149 = llvm.extractelement %142[%39 : i32] : vector<8xbf16> loc(#loc)
    %150 = llvm.extractelement %142[%38 : i32] : vector<8xbf16> loc(#loc)
    %151 = llvm.call @"__triton_hip_predicated_load_vector<8xbf16>_!llvm.ptr<1>_i1_vector<8xbf16>_"(%139, %46, %45) : (!llvm.ptr<1>, i1, vector<8xbf16>) -> vector<8xbf16> loc(#loc)
    %152 = llvm.extractelement %151[%67 : i32] : vector<8xbf16> loc(#loc)
    %153 = llvm.extractelement %151[%44 : i32] : vector<8xbf16> loc(#loc)
    %154 = llvm.extractelement %151[%43 : i32] : vector<8xbf16> loc(#loc)
    %155 = llvm.extractelement %151[%42 : i32] : vector<8xbf16> loc(#loc)
    %156 = llvm.extractelement %151[%41 : i32] : vector<8xbf16> loc(#loc)
    %157 = llvm.extractelement %151[%40 : i32] : vector<8xbf16> loc(#loc)
    %158 = llvm.extractelement %151[%39 : i32] : vector<8xbf16> loc(#loc)
    %159 = llvm.extractelement %151[%38 : i32] : vector<8xbf16> loc(#loc)
    %160 = llvm.call @"__triton_hip_predicated_load_vector<8xbf16>_!llvm.ptr<1>_i1_vector<8xbf16>_"(%140, %46, %45) : (!llvm.ptr<1>, i1, vector<8xbf16>) -> vector<8xbf16> loc(#loc)
    %161 = llvm.extractelement %160[%67 : i32] : vector<8xbf16> loc(#loc)
    %162 = llvm.extractelement %160[%44 : i32] : vector<8xbf16> loc(#loc)
    %163 = llvm.extractelement %160[%43 : i32] : vector<8xbf16> loc(#loc)
    %164 = llvm.extractelement %160[%42 : i32] : vector<8xbf16> loc(#loc)
    %165 = llvm.extractelement %160[%41 : i32] : vector<8xbf16> loc(#loc)
    %166 = llvm.extractelement %160[%40 : i32] : vector<8xbf16> loc(#loc)
    %167 = llvm.extractelement %160[%39 : i32] : vector<8xbf16> loc(#loc)
    %168 = llvm.extractelement %160[%38 : i32] : vector<8xbf16> loc(#loc)
    %169 = llvm.call @"__triton_hip_predicated_load_vector<8xbf16>_!llvm.ptr<1>_i1_vector<8xbf16>_"(%141, %46, %45) : (!llvm.ptr<1>, i1, vector<8xbf16>) -> vector<8xbf16> loc(#loc)
    %170 = llvm.extractelement %169[%67 : i32] : vector<8xbf16> loc(#loc)
    %171 = llvm.extractelement %169[%44 : i32] : vector<8xbf16> loc(#loc)
    %172 = llvm.extractelement %169[%43 : i32] : vector<8xbf16> loc(#loc)
    %173 = llvm.extractelement %169[%42 : i32] : vector<8xbf16> loc(#loc)
    %174 = llvm.extractelement %169[%41 : i32] : vector<8xbf16> loc(#loc)
    %175 = llvm.extractelement %169[%40 : i32] : vector<8xbf16> loc(#loc)
    %176 = llvm.extractelement %169[%39 : i32] : vector<8xbf16> loc(#loc)
    %177 = llvm.extractelement %169[%38 : i32] : vector<8xbf16> loc(#loc)
    %178 = llvm.and %81, %36 : i32 loc(#loc)
    %179 = llvm.shl %178, %57 : i32 loc(#loc)
    %180 = llvm.xor %64, %179 : i32 loc(#loc)
    %181 = llvm.and %81, %35 : i32 loc(#loc)
    %182 = llvm.lshr %181, %52 : i32 loc(#loc)
    %183 = llvm.xor %180, %182 : i32 loc(#loc)
    %184 = llvm.and %81, %53 : i32 loc(#loc)
    %185 = llvm.icmp "eq" %184, %64 : i32 loc(#loc)
    %186 = llvm.select %185, %64, %34 : i1, i32 loc(#loc)
    %187 = llvm.xor %183, %186 : i32 loc(#loc)
    %188 = llvm.and %81, %60 : i32 loc(#loc)
    %189 = llvm.icmp "eq" %188, %64 : i32 loc(#loc)
    %190 = llvm.select %189, %64, %33 : i1, i32 loc(#loc)
    %191 = llvm.xor %187, %190 : i32 loc(#loc)
    %192 = llvm.and %81, %73 : i32 loc(#loc)
    %193 = llvm.icmp "eq" %192, %64 : i32 loc(#loc)
    %194 = llvm.select %193, %64, %32 : i1, i32 loc(#loc)
    %195 = llvm.xor %191, %194 : i32 loc(#loc)
    %196 = llvm.xor %64, %195 : i32 loc(#loc)
    %197 = llvm.mul %64, %52 : i32 loc(#loc)
    %198 = llvm.xor %196, %197 : i32 loc(#loc)
    %199 = llvm.xor %198, %64 : i32 loc(#loc)
    %200 = llvm.add %199, %64 : i32 loc(#loc)
    %201 = llvm.getelementptr inbounds %37[%200] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %202 = llvm.insertelement %143, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %203 = llvm.insertelement %144, %202[%53 : i32] : vector<8xbf16> loc(#loc)
    %204 = llvm.insertelement %145, %203[%52 : i32] : vector<8xbf16> loc(#loc)
    %205 = llvm.insertelement %146, %204[%57 : i32] : vector<8xbf16> loc(#loc)
    %206 = llvm.insertelement %147, %205[%51 : i32] : vector<8xbf16> loc(#loc)
    %207 = llvm.insertelement %148, %206[%61 : i32] : vector<8xbf16> loc(#loc)
    %208 = llvm.insertelement %149, %207[%63 : i32] : vector<8xbf16> loc(#loc)
    %209 = llvm.insertelement %150, %208[%50 : i32] : vector<8xbf16> loc(#loc)
    llvm.call @"__triton_hip_predicated_store_!llvm.void_!llvm.ptr<3>_vector<8xbf16>_i1_"(%201, %209, %46) : (!llvm.ptr<3>, vector<8xbf16>, i1) -> () loc(#loc)
    %210 = llvm.add %199, %55 : i32 loc(#loc)
    %211 = llvm.getelementptr inbounds %37[%210] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %212 = llvm.insertelement %161, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %213 = llvm.insertelement %162, %212[%53 : i32] : vector<8xbf16> loc(#loc)
    %214 = llvm.insertelement %163, %213[%52 : i32] : vector<8xbf16> loc(#loc)
    %215 = llvm.insertelement %164, %214[%57 : i32] : vector<8xbf16> loc(#loc)
    %216 = llvm.insertelement %165, %215[%51 : i32] : vector<8xbf16> loc(#loc)
    %217 = llvm.insertelement %166, %216[%61 : i32] : vector<8xbf16> loc(#loc)
    %218 = llvm.insertelement %167, %217[%63 : i32] : vector<8xbf16> loc(#loc)
    %219 = llvm.insertelement %168, %218[%50 : i32] : vector<8xbf16> loc(#loc)
    llvm.call @"__triton_hip_predicated_store_!llvm.void_!llvm.ptr<3>_vector<8xbf16>_i1_"(%211, %219, %46) : (!llvm.ptr<3>, vector<8xbf16>, i1) -> () loc(#loc)
    %220 = llvm.xor %198, %30 : i32 loc(#loc)
    %221 = llvm.add %220, %64 : i32 loc(#loc)
    %222 = llvm.getelementptr inbounds %37[%221] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %223 = llvm.insertelement %152, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %224 = llvm.insertelement %153, %223[%53 : i32] : vector<8xbf16> loc(#loc)
    %225 = llvm.insertelement %154, %224[%52 : i32] : vector<8xbf16> loc(#loc)
    %226 = llvm.insertelement %155, %225[%57 : i32] : vector<8xbf16> loc(#loc)
    %227 = llvm.insertelement %156, %226[%51 : i32] : vector<8xbf16> loc(#loc)
    %228 = llvm.insertelement %157, %227[%61 : i32] : vector<8xbf16> loc(#loc)
    %229 = llvm.insertelement %158, %228[%63 : i32] : vector<8xbf16> loc(#loc)
    %230 = llvm.insertelement %159, %229[%50 : i32] : vector<8xbf16> loc(#loc)
    llvm.call @"__triton_hip_predicated_store_!llvm.void_!llvm.ptr<3>_vector<8xbf16>_i1_"(%222, %230, %46) : (!llvm.ptr<3>, vector<8xbf16>, i1) -> () loc(#loc)
    %231 = llvm.add %220, %55 : i32 loc(#loc)
    %232 = llvm.getelementptr inbounds %37[%231] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %233 = llvm.insertelement %170, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %234 = llvm.insertelement %171, %233[%53 : i32] : vector<8xbf16> loc(#loc)
    %235 = llvm.insertelement %172, %234[%52 : i32] : vector<8xbf16> loc(#loc)
    %236 = llvm.insertelement %173, %235[%57 : i32] : vector<8xbf16> loc(#loc)
    %237 = llvm.insertelement %174, %236[%51 : i32] : vector<8xbf16> loc(#loc)
    %238 = llvm.insertelement %175, %237[%61 : i32] : vector<8xbf16> loc(#loc)
    %239 = llvm.insertelement %176, %238[%63 : i32] : vector<8xbf16> loc(#loc)
    %240 = llvm.insertelement %177, %239[%50 : i32] : vector<8xbf16> loc(#loc)
    llvm.call @"__triton_hip_predicated_store_!llvm.void_!llvm.ptr<3>_vector<8xbf16>_i1_"(%232, %240, %46) : (!llvm.ptr<3>, vector<8xbf16>, i1) -> () loc(#loc)
    rocdl.barrier loc(#loc)
    %241 = llvm.and %81, %29 : i32 loc(#loc)
    %242 = llvm.shl %241, %72 : i32 loc(#loc)
    %243 = llvm.xor %64, %242 : i32 loc(#loc)
    %244 = llvm.and %81, %48 : i32 loc(#loc)
    %245 = llvm.shl %244, %57 : i32 loc(#loc)
    %246 = llvm.xor %243, %245 : i32 loc(#loc)
    %247 = llvm.select %185, %64, %32 : i1, i32 loc(#loc)
    %248 = llvm.xor %246, %247 : i32 loc(#loc)
    %249 = llvm.select %193, %64, %60 : i1, i32 loc(#loc)
    %250 = llvm.xor %248, %249 : i32 loc(#loc)
    %251 = llvm.select %104, %64, %55 : i1, i32 loc(#loc)
    %252 = llvm.xor %250, %251 : i32 loc(#loc)
    %253 = llvm.xor %64, %252 : i32 loc(#loc)
    %254 = llvm.xor %253, %197 : i32 loc(#loc)
    %255 = llvm.xor %254, %64 : i32 loc(#loc)
    %256 = llvm.add %255, %64 : i32 loc(#loc)
    %257 = llvm.getelementptr inbounds %37[%256] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %258 = llvm.call @"__triton_hip_predicated_load_vector<8xbf16>_!llvm.ptr<3>_i1_vector<8xbf16>_"(%257, %46, %45) : (!llvm.ptr<3>, i1, vector<8xbf16>) -> vector<8xbf16> loc(#loc)
    %259 = llvm.extractelement %258[%64 : i32] : vector<8xbf16> loc(#loc)
    %260 = llvm.extractelement %258[%53 : i32] : vector<8xbf16> loc(#loc)
    %261 = llvm.extractelement %258[%52 : i32] : vector<8xbf16> loc(#loc)
    %262 = llvm.extractelement %258[%57 : i32] : vector<8xbf16> loc(#loc)
    %263 = llvm.extractelement %258[%51 : i32] : vector<8xbf16> loc(#loc)
    %264 = llvm.extractelement %258[%61 : i32] : vector<8xbf16> loc(#loc)
    %265 = llvm.extractelement %258[%63 : i32] : vector<8xbf16> loc(#loc)
    %266 = llvm.extractelement %258[%50 : i32] : vector<8xbf16> loc(#loc)
    %267 = llvm.add %255, %33 : i32 loc(#loc)
    %268 = llvm.getelementptr inbounds %37[%267] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %269 = llvm.call @"__triton_hip_predicated_load_vector<8xbf16>_!llvm.ptr<3>_i1_vector<8xbf16>_"(%268, %46, %45) : (!llvm.ptr<3>, i1, vector<8xbf16>) -> vector<8xbf16> loc(#loc)
    %270 = llvm.extractelement %269[%64 : i32] : vector<8xbf16> loc(#loc)
    %271 = llvm.extractelement %269[%53 : i32] : vector<8xbf16> loc(#loc)
    %272 = llvm.extractelement %269[%52 : i32] : vector<8xbf16> loc(#loc)
    %273 = llvm.extractelement %269[%57 : i32] : vector<8xbf16> loc(#loc)
    %274 = llvm.extractelement %269[%51 : i32] : vector<8xbf16> loc(#loc)
    %275 = llvm.extractelement %269[%61 : i32] : vector<8xbf16> loc(#loc)
    %276 = llvm.extractelement %269[%63 : i32] : vector<8xbf16> loc(#loc)
    %277 = llvm.extractelement %269[%50 : i32] : vector<8xbf16> loc(#loc)
    %278 = llvm.xor %254, %73 : i32 loc(#loc)
    %279 = llvm.add %278, %64 : i32 loc(#loc)
    %280 = llvm.getelementptr inbounds %37[%279] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %281 = llvm.call @"__triton_hip_predicated_load_vector<8xbf16>_!llvm.ptr<3>_i1_vector<8xbf16>_"(%280, %46, %45) : (!llvm.ptr<3>, i1, vector<8xbf16>) -> vector<8xbf16> loc(#loc)
    %282 = llvm.extractelement %281[%64 : i32] : vector<8xbf16> loc(#loc)
    %283 = llvm.extractelement %281[%53 : i32] : vector<8xbf16> loc(#loc)
    %284 = llvm.extractelement %281[%52 : i32] : vector<8xbf16> loc(#loc)
    %285 = llvm.extractelement %281[%57 : i32] : vector<8xbf16> loc(#loc)
    %286 = llvm.extractelement %281[%51 : i32] : vector<8xbf16> loc(#loc)
    %287 = llvm.extractelement %281[%61 : i32] : vector<8xbf16> loc(#loc)
    %288 = llvm.extractelement %281[%63 : i32] : vector<8xbf16> loc(#loc)
    %289 = llvm.extractelement %281[%50 : i32] : vector<8xbf16> loc(#loc)
    %290 = llvm.add %278, %33 : i32 loc(#loc)
    %291 = llvm.getelementptr inbounds %37[%290] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %292 = llvm.call @"__triton_hip_predicated_load_vector<8xbf16>_!llvm.ptr<3>_i1_vector<8xbf16>_"(%291, %46, %45) : (!llvm.ptr<3>, i1, vector<8xbf16>) -> vector<8xbf16> loc(#loc)
    %293 = llvm.extractelement %292[%64 : i32] : vector<8xbf16> loc(#loc)
    %294 = llvm.extractelement %292[%53 : i32] : vector<8xbf16> loc(#loc)
    %295 = llvm.extractelement %292[%52 : i32] : vector<8xbf16> loc(#loc)
    %296 = llvm.extractelement %292[%57 : i32] : vector<8xbf16> loc(#loc)
    %297 = llvm.extractelement %292[%51 : i32] : vector<8xbf16> loc(#loc)
    %298 = llvm.extractelement %292[%61 : i32] : vector<8xbf16> loc(#loc)
    %299 = llvm.extractelement %292[%63 : i32] : vector<8xbf16> loc(#loc)
    %300 = llvm.extractelement %292[%50 : i32] : vector<8xbf16> loc(#loc)
    %301 = llvm.xor %254, %65 : i32 loc(#loc)
    %302 = llvm.add %301, %64 : i32 loc(#loc)
    %303 = llvm.getelementptr inbounds %37[%302] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %304 = llvm.call @"__triton_hip_predicated_load_vector<8xbf16>_!llvm.ptr<3>_i1_vector<8xbf16>_"(%303, %46, %45) : (!llvm.ptr<3>, i1, vector<8xbf16>) -> vector<8xbf16> loc(#loc)
    %305 = llvm.extractelement %304[%64 : i32] : vector<8xbf16> loc(#loc)
    %306 = llvm.extractelement %304[%53 : i32] : vector<8xbf16> loc(#loc)
    %307 = llvm.extractelement %304[%52 : i32] : vector<8xbf16> loc(#loc)
    %308 = llvm.extractelement %304[%57 : i32] : vector<8xbf16> loc(#loc)
    %309 = llvm.extractelement %304[%51 : i32] : vector<8xbf16> loc(#loc)
    %310 = llvm.extractelement %304[%61 : i32] : vector<8xbf16> loc(#loc)
    %311 = llvm.extractelement %304[%63 : i32] : vector<8xbf16> loc(#loc)
    %312 = llvm.extractelement %304[%50 : i32] : vector<8xbf16> loc(#loc)
    %313 = llvm.add %301, %33 : i32 loc(#loc)
    %314 = llvm.getelementptr inbounds %37[%313] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %315 = llvm.call @"__triton_hip_predicated_load_vector<8xbf16>_!llvm.ptr<3>_i1_vector<8xbf16>_"(%314, %46, %45) : (!llvm.ptr<3>, i1, vector<8xbf16>) -> vector<8xbf16> loc(#loc)
    %316 = llvm.extractelement %315[%64 : i32] : vector<8xbf16> loc(#loc)
    %317 = llvm.extractelement %315[%53 : i32] : vector<8xbf16> loc(#loc)
    %318 = llvm.extractelement %315[%52 : i32] : vector<8xbf16> loc(#loc)
    %319 = llvm.extractelement %315[%57 : i32] : vector<8xbf16> loc(#loc)
    %320 = llvm.extractelement %315[%51 : i32] : vector<8xbf16> loc(#loc)
    %321 = llvm.extractelement %315[%61 : i32] : vector<8xbf16> loc(#loc)
    %322 = llvm.extractelement %315[%63 : i32] : vector<8xbf16> loc(#loc)
    %323 = llvm.extractelement %315[%50 : i32] : vector<8xbf16> loc(#loc)
    %324 = llvm.xor %254, %28 : i32 loc(#loc)
    %325 = llvm.add %324, %64 : i32 loc(#loc)
    %326 = llvm.getelementptr inbounds %37[%325] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %327 = llvm.call @"__triton_hip_predicated_load_vector<8xbf16>_!llvm.ptr<3>_i1_vector<8xbf16>_"(%326, %46, %45) : (!llvm.ptr<3>, i1, vector<8xbf16>) -> vector<8xbf16> loc(#loc)
    %328 = llvm.extractelement %327[%64 : i32] : vector<8xbf16> loc(#loc)
    %329 = llvm.extractelement %327[%53 : i32] : vector<8xbf16> loc(#loc)
    %330 = llvm.extractelement %327[%52 : i32] : vector<8xbf16> loc(#loc)
    %331 = llvm.extractelement %327[%57 : i32] : vector<8xbf16> loc(#loc)
    %332 = llvm.extractelement %327[%51 : i32] : vector<8xbf16> loc(#loc)
    %333 = llvm.extractelement %327[%61 : i32] : vector<8xbf16> loc(#loc)
    %334 = llvm.extractelement %327[%63 : i32] : vector<8xbf16> loc(#loc)
    %335 = llvm.extractelement %327[%50 : i32] : vector<8xbf16> loc(#loc)
    %336 = llvm.add %324, %33 : i32 loc(#loc)
    %337 = llvm.getelementptr inbounds %37[%336] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %338 = llvm.call @"__triton_hip_predicated_load_vector<8xbf16>_!llvm.ptr<3>_i1_vector<8xbf16>_"(%337, %46, %45) : (!llvm.ptr<3>, i1, vector<8xbf16>) -> vector<8xbf16> loc(#loc)
    %339 = llvm.extractelement %338[%64 : i32] : vector<8xbf16> loc(#loc)
    %340 = llvm.extractelement %338[%53 : i32] : vector<8xbf16> loc(#loc)
    %341 = llvm.extractelement %338[%52 : i32] : vector<8xbf16> loc(#loc)
    %342 = llvm.extractelement %338[%57 : i32] : vector<8xbf16> loc(#loc)
    %343 = llvm.extractelement %338[%51 : i32] : vector<8xbf16> loc(#loc)
    %344 = llvm.extractelement %338[%61 : i32] : vector<8xbf16> loc(#loc)
    %345 = llvm.extractelement %338[%63 : i32] : vector<8xbf16> loc(#loc)
    %346 = llvm.extractelement %338[%50 : i32] : vector<8xbf16> loc(#loc)
    %347 = llvm.getelementptr %b_base[%137] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, i8 loc(#loc)
    %348 = llvm.call @"__triton_hip_predicated_load_vector<16xi8>_!llvm.ptr<1>_i1_vector<16xi8>_"(%347, %46, %27) : (!llvm.ptr<1>, i1, vector<16xi8>) -> vector<16xi8> loc(#loc)
    %349 = llvm.extractelement %348[%67 : i32] : vector<16xi8> loc(#loc)
    %350 = llvm.extractelement %348[%44 : i32] : vector<16xi8> loc(#loc)
    %351 = llvm.extractelement %348[%43 : i32] : vector<16xi8> loc(#loc)
    %352 = llvm.extractelement %348[%42 : i32] : vector<16xi8> loc(#loc)
    %353 = llvm.extractelement %348[%41 : i32] : vector<16xi8> loc(#loc)
    %354 = llvm.extractelement %348[%40 : i32] : vector<16xi8> loc(#loc)
    %355 = llvm.extractelement %348[%39 : i32] : vector<16xi8> loc(#loc)
    %356 = llvm.extractelement %348[%38 : i32] : vector<16xi8> loc(#loc)
    %357 = llvm.extractelement %348[%26 : i32] : vector<16xi8> loc(#loc)
    %358 = llvm.extractelement %348[%25 : i32] : vector<16xi8> loc(#loc)
    %359 = llvm.extractelement %348[%24 : i32] : vector<16xi8> loc(#loc)
    %360 = llvm.extractelement %348[%23 : i32] : vector<16xi8> loc(#loc)
    %361 = llvm.extractelement %348[%22 : i32] : vector<16xi8> loc(#loc)
    %362 = llvm.extractelement %348[%21 : i32] : vector<16xi8> loc(#loc)
    %363 = llvm.extractelement %348[%20 : i32] : vector<16xi8> loc(#loc)
    %364 = llvm.extractelement %348[%19 : i32] : vector<16xi8> loc(#loc)
    rocdl.barrier loc(#loc)
    %365 = llvm.lshr %94, %64 : i32 loc(#loc)
    %366 = llvm.xor %64, %365 : i32 loc(#loc)
    %367 = llvm.select %185, %64, %18 : i1, i32 loc(#loc)
    %368 = llvm.xor %366, %367 : i32 loc(#loc)
    %369 = llvm.and %81, %52 : i32 loc(#loc)
    %370 = llvm.icmp "eq" %369, %64 : i32 loc(#loc)
    %371 = llvm.select %370, %64, %51 : i1, i32 loc(#loc)
    %372 = llvm.xor %368, %371 : i32 loc(#loc)
    %373 = llvm.and %81, %51 : i32 loc(#loc)
    %374 = llvm.icmp "eq" %373, %64 : i32 loc(#loc)
    %375 = llvm.select %374, %64, %17 : i1, i32 loc(#loc)
    %376 = llvm.xor %372, %375 : i32 loc(#loc)
    %377 = llvm.xor %64, %376 : i32 loc(#loc)
    %378 = llvm.mul %64, %53 : i32 loc(#loc)
    %379 = llvm.xor %377, %378 : i32 loc(#loc)
    %380 = llvm.xor %379, %64 : i32 loc(#loc)
    %381 = llvm.add %380, %64 : i32 loc(#loc)
    %382 = llvm.getelementptr inbounds %37[%381] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %383 = llvm.insertelement %349, %16[%64 : i32] : vector<4xi8> loc(#loc)
    %384 = llvm.insertelement %350, %383[%53 : i32] : vector<4xi8> loc(#loc)
    %385 = llvm.insertelement %351, %384[%52 : i32] : vector<4xi8> loc(#loc)
    %386 = llvm.insertelement %352, %385[%57 : i32] : vector<4xi8> loc(#loc)
    llvm.call @"__triton_hip_predicated_store_!llvm.void_!llvm.ptr<3>_vector<4xi8>_i1_"(%382, %386, %46) : (!llvm.ptr<3>, vector<4xi8>, i1) -> () loc(#loc)
    %387 = llvm.add %380, %15 : i32 loc(#loc)
    %388 = llvm.getelementptr inbounds %37[%387] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %389 = llvm.insertelement %353, %16[%64 : i32] : vector<4xi8> loc(#loc)
    %390 = llvm.insertelement %354, %389[%53 : i32] : vector<4xi8> loc(#loc)
    %391 = llvm.insertelement %355, %390[%52 : i32] : vector<4xi8> loc(#loc)
    %392 = llvm.insertelement %356, %391[%57 : i32] : vector<4xi8> loc(#loc)
    llvm.call @"__triton_hip_predicated_store_!llvm.void_!llvm.ptr<3>_vector<4xi8>_i1_"(%388, %392, %46) : (!llvm.ptr<3>, vector<4xi8>, i1) -> () loc(#loc)
    %393 = llvm.xor %379, %14 : i32 loc(#loc)
    %394 = llvm.add %393, %64 : i32 loc(#loc)
    %395 = llvm.getelementptr inbounds %37[%394] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %396 = llvm.insertelement %357, %16[%64 : i32] : vector<4xi8> loc(#loc)
    %397 = llvm.insertelement %358, %396[%53 : i32] : vector<4xi8> loc(#loc)
    %398 = llvm.insertelement %359, %397[%52 : i32] : vector<4xi8> loc(#loc)
    %399 = llvm.insertelement %360, %398[%57 : i32] : vector<4xi8> loc(#loc)
    llvm.call @"__triton_hip_predicated_store_!llvm.void_!llvm.ptr<3>_vector<4xi8>_i1_"(%395, %399, %46) : (!llvm.ptr<3>, vector<4xi8>, i1) -> () loc(#loc)
    %400 = llvm.add %393, %15 : i32 loc(#loc)
    %401 = llvm.getelementptr inbounds %37[%400] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %402 = llvm.insertelement %361, %16[%64 : i32] : vector<4xi8> loc(#loc)
    %403 = llvm.insertelement %362, %402[%53 : i32] : vector<4xi8> loc(#loc)
    %404 = llvm.insertelement %363, %403[%52 : i32] : vector<4xi8> loc(#loc)
    %405 = llvm.insertelement %364, %404[%57 : i32] : vector<4xi8> loc(#loc)
    llvm.call @"__triton_hip_predicated_store_!llvm.void_!llvm.ptr<3>_vector<4xi8>_i1_"(%401, %405, %46) : (!llvm.ptr<3>, vector<4xi8>, i1) -> () loc(#loc)
    rocdl.barrier loc(#loc)
    %406 = llvm.shl %100, %57 : i32 loc(#loc)
    %407 = llvm.xor %64, %406 : i32 loc(#loc)
    %408 = llvm.select %189, %64, %15 : i1, i32 loc(#loc)
    %409 = llvm.xor %407, %408 : i32 loc(#loc)
    %410 = llvm.select %193, %64, %14 : i1, i32 loc(#loc)
    %411 = llvm.xor %409, %410 : i32 loc(#loc)
    %412 = llvm.and %81, %65 : i32 loc(#loc)
    %413 = llvm.icmp "eq" %412, %64 : i32 loc(#loc)
    %414 = llvm.select %413, %64, %55 : i1, i32 loc(#loc)
    %415 = llvm.xor %411, %414 : i32 loc(#loc)
    %416 = llvm.xor %64, %415 : i32 loc(#loc)
    %417 = llvm.xor %416, %378 : i32 loc(#loc)
    %418 = llvm.xor %417, %64 : i32 loc(#loc)
    %419 = llvm.add %418, %64 : i32 loc(#loc)
    %420 = llvm.getelementptr inbounds %37[%419] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %421 = llvm.call @"__triton_hip_predicated_load_vector<4xi8>_!llvm.ptr<3>_i1_vector<4xi8>_"(%420, %46, %13) : (!llvm.ptr<3>, i1, vector<4xi8>) -> vector<4xi8> loc(#loc)
    %422 = llvm.extractelement %421[%64 : i32] : vector<4xi8> loc(#loc)
    %423 = llvm.extractelement %421[%53 : i32] : vector<4xi8> loc(#loc)
    %424 = llvm.extractelement %421[%52 : i32] : vector<4xi8> loc(#loc)
    %425 = llvm.extractelement %421[%57 : i32] : vector<4xi8> loc(#loc)
    %426 = llvm.add %418, %18 : i32 loc(#loc)
    %427 = llvm.getelementptr inbounds %37[%426] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %428 = llvm.call @"__triton_hip_predicated_load_vector<4xi8>_!llvm.ptr<3>_i1_vector<4xi8>_"(%427, %46, %13) : (!llvm.ptr<3>, i1, vector<4xi8>) -> vector<4xi8> loc(#loc)
    %429 = llvm.extractelement %428[%64 : i32] : vector<4xi8> loc(#loc)
    %430 = llvm.extractelement %428[%53 : i32] : vector<4xi8> loc(#loc)
    %431 = llvm.extractelement %428[%52 : i32] : vector<4xi8> loc(#loc)
    %432 = llvm.extractelement %428[%57 : i32] : vector<4xi8> loc(#loc)
    %433 = llvm.xor %417, %17 : i32 loc(#loc)
    %434 = llvm.add %433, %64 : i32 loc(#loc)
    %435 = llvm.getelementptr inbounds %37[%434] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %436 = llvm.call @"__triton_hip_predicated_load_vector<4xi8>_!llvm.ptr<3>_i1_vector<4xi8>_"(%435, %46, %13) : (!llvm.ptr<3>, i1, vector<4xi8>) -> vector<4xi8> loc(#loc)
    %437 = llvm.extractelement %436[%64 : i32] : vector<4xi8> loc(#loc)
    %438 = llvm.extractelement %436[%53 : i32] : vector<4xi8> loc(#loc)
    %439 = llvm.extractelement %436[%52 : i32] : vector<4xi8> loc(#loc)
    %440 = llvm.extractelement %436[%57 : i32] : vector<4xi8> loc(#loc)
    %441 = llvm.add %433, %18 : i32 loc(#loc)
    %442 = llvm.getelementptr inbounds %37[%441] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %443 = llvm.call @"__triton_hip_predicated_load_vector<4xi8>_!llvm.ptr<3>_i1_vector<4xi8>_"(%442, %46, %13) : (!llvm.ptr<3>, i1, vector<4xi8>) -> vector<4xi8> loc(#loc)
    %444 = llvm.extractelement %443[%64 : i32] : vector<4xi8> loc(#loc)
    %445 = llvm.extractelement %443[%53 : i32] : vector<4xi8> loc(#loc)
    %446 = llvm.extractelement %443[%52 : i32] : vector<4xi8> loc(#loc)
    %447 = llvm.extractelement %443[%57 : i32] : vector<4xi8> loc(#loc)
    %448 = llvm.xor %417, %51 : i32 loc(#loc)
    %449 = llvm.add %448, %64 : i32 loc(#loc)
    %450 = llvm.getelementptr inbounds %37[%449] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %451 = llvm.call @"__triton_hip_predicated_load_vector<4xi8>_!llvm.ptr<3>_i1_vector<4xi8>_"(%450, %46, %13) : (!llvm.ptr<3>, i1, vector<4xi8>) -> vector<4xi8> loc(#loc)
    %452 = llvm.extractelement %451[%64 : i32] : vector<4xi8> loc(#loc)
    %453 = llvm.extractelement %451[%53 : i32] : vector<4xi8> loc(#loc)
    %454 = llvm.extractelement %451[%52 : i32] : vector<4xi8> loc(#loc)
    %455 = llvm.extractelement %451[%57 : i32] : vector<4xi8> loc(#loc)
    %456 = llvm.add %448, %18 : i32 loc(#loc)
    %457 = llvm.getelementptr inbounds %37[%456] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %458 = llvm.call @"__triton_hip_predicated_load_vector<4xi8>_!llvm.ptr<3>_i1_vector<4xi8>_"(%457, %46, %13) : (!llvm.ptr<3>, i1, vector<4xi8>) -> vector<4xi8> loc(#loc)
    %459 = llvm.extractelement %458[%64 : i32] : vector<4xi8> loc(#loc)
    %460 = llvm.extractelement %458[%53 : i32] : vector<4xi8> loc(#loc)
    %461 = llvm.extractelement %458[%52 : i32] : vector<4xi8> loc(#loc)
    %462 = llvm.extractelement %458[%57 : i32] : vector<4xi8> loc(#loc)
    %463 = llvm.xor %417, %12 : i32 loc(#loc)
    %464 = llvm.add %463, %64 : i32 loc(#loc)
    %465 = llvm.getelementptr inbounds %37[%464] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %466 = llvm.call @"__triton_hip_predicated_load_vector<4xi8>_!llvm.ptr<3>_i1_vector<4xi8>_"(%465, %46, %13) : (!llvm.ptr<3>, i1, vector<4xi8>) -> vector<4xi8> loc(#loc)
    %467 = llvm.extractelement %466[%64 : i32] : vector<4xi8> loc(#loc)
    %468 = llvm.extractelement %466[%53 : i32] : vector<4xi8> loc(#loc)
    %469 = llvm.extractelement %466[%52 : i32] : vector<4xi8> loc(#loc)
    %470 = llvm.extractelement %466[%57 : i32] : vector<4xi8> loc(#loc)
    %471 = llvm.add %463, %18 : i32 loc(#loc)
    %472 = llvm.getelementptr inbounds %37[%471] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %473 = llvm.call @"__triton_hip_predicated_load_vector<4xi8>_!llvm.ptr<3>_i1_vector<4xi8>_"(%472, %46, %13) : (!llvm.ptr<3>, i1, vector<4xi8>) -> vector<4xi8> loc(#loc)
    %474 = llvm.extractelement %473[%64 : i32] : vector<4xi8> loc(#loc)
    %475 = llvm.extractelement %473[%53 : i32] : vector<4xi8> loc(#loc)
    %476 = llvm.extractelement %473[%52 : i32] : vector<4xi8> loc(#loc)
    %477 = llvm.extractelement %473[%57 : i32] : vector<4xi8> loc(#loc)
    %478 = llvm.mul %99, %72 : i32 loc(#loc)
    %479 = llvm.lshr %124, %64 : i32 loc(#loc)
    %480 = llvm.xor %64, %479 : i32 loc(#loc)
    %481 = llvm.xor %64, %480 : i32 loc(#loc)
    %482 = llvm.xor %481, %64 : i32 loc(#loc)
    %483 = llvm.add %482, %67 : i32 loc(#loc)
    %484 = llvm.add %483, %478 : i32 loc(#loc)
    %485 = rocdl.make.buffer.rsrc %b_scale, %11, %9, %10 : <1> to <8> loc(#loc)
    %486 = llvm.mul %484, %53 : i32 loc(#loc)
    %487 = llvm.select %46, %486, %7 : i1, i32 loc(#loc)
    %488 = rocdl.raw.ptr.buffer.load %485, %487, %64, %64 : i8 loc(#loc)
    %489 = llvm.bitcast %488 : i8 to vector<1xi8> loc(#loc)
    %490 = llvm.extractelement %489[%67 : i32] : vector<1xi8> loc(#loc)
    rocdl.barrier loc(#loc)
    %491 = llvm.and %81, %6 : i32 loc(#loc)
    %492 = llvm.shl %491, %52 : i32 loc(#loc)
    %493 = llvm.xor %64, %492 : i32 loc(#loc)
    %494 = llvm.select %413, %64, %52 : i1, i32 loc(#loc)
    %495 = llvm.xor %493, %494 : i32 loc(#loc)
    %496 = llvm.select %104, %64, %53 : i1, i32 loc(#loc)
    %497 = llvm.xor %495, %496 : i32 loc(#loc)
    %498 = llvm.xor %64, %497 : i32 loc(#loc)
    %499 = llvm.xor %498, %378 : i32 loc(#loc)
    %500 = llvm.xor %499, %64 : i32 loc(#loc)
    %501 = llvm.add %500, %64 : i32 loc(#loc)
    %502 = llvm.getelementptr inbounds %37[%501] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %503 = llvm.insertelement %490, %5[%64 : i32] : vector<1xi8> loc(#loc)
    llvm.call @"__triton_hip_predicated_store_!llvm.void_!llvm.ptr<3>_vector<1xi8>_i1_"(%502, %503, %46) : (!llvm.ptr<3>, vector<1xi8>, i1) -> () loc(#loc)
    rocdl.barrier loc(#loc)
    %504 = llvm.shl %124, %61 : i32 loc(#loc)
    %505 = llvm.xor %64, %504 : i32 loc(#loc)
    %506 = llvm.and %81, %72 : i32 loc(#loc)
    %507 = llvm.icmp "eq" %506, %64 : i32 loc(#loc)
    %508 = llvm.select %507, %64, %52 : i1, i32 loc(#loc)
    %509 = llvm.xor %505, %508 : i32 loc(#loc)
    %510 = llvm.select %413, %64, %53 : i1, i32 loc(#loc)
    %511 = llvm.xor %509, %510 : i32 loc(#loc)
    %512 = llvm.xor %64, %511 : i32 loc(#loc)
    %513 = llvm.xor %512, %378 : i32 loc(#loc)
    %514 = llvm.xor %513, %64 : i32 loc(#loc)
    %515 = llvm.add %514, %64 : i32 loc(#loc)
    %516 = llvm.getelementptr inbounds %37[%515] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %517 = llvm.call @"__triton_hip_predicated_load_vector<1xi8>_!llvm.ptr<3>_i1_vector<1xi8>_"(%516, %46, %8) : (!llvm.ptr<3>, i1, vector<1xi8>) -> vector<1xi8> loc(#loc)
    %518 = llvm.extractelement %517[%64 : i32] : vector<1xi8> loc(#loc)
    %519 = llvm.add %514, %60 : i32 loc(#loc)
    %520 = llvm.getelementptr inbounds %37[%519] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %521 = llvm.call @"__triton_hip_predicated_load_vector<1xi8>_!llvm.ptr<3>_i1_vector<1xi8>_"(%520, %46, %8) : (!llvm.ptr<3>, i1, vector<1xi8>) -> vector<1xi8> loc(#loc)
    %522 = llvm.extractelement %521[%64 : i32] : vector<1xi8> loc(#loc)
    %523 = llvm.add %514, %51 : i32 loc(#loc)
    %524 = llvm.getelementptr inbounds %37[%523] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %525 = llvm.call @"__triton_hip_predicated_load_vector<1xi8>_!llvm.ptr<3>_i1_vector<1xi8>_"(%524, %46, %8) : (!llvm.ptr<3>, i1, vector<1xi8>) -> vector<1xi8> loc(#loc)
    %526 = llvm.extractelement %525[%64 : i32] : vector<1xi8> loc(#loc)
    %527 = llvm.add %514, %4 : i32 loc(#loc)
    %528 = llvm.getelementptr inbounds %37[%527] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %529 = llvm.call @"__triton_hip_predicated_load_vector<1xi8>_!llvm.ptr<3>_i1_vector<1xi8>_"(%528, %46, %8) : (!llvm.ptr<3>, i1, vector<1xi8>) -> vector<1xi8> loc(#loc)
    %530 = llvm.extractelement %529[%64 : i32] : vector<1xi8> loc(#loc)
    %531 = llvm.add %514, %72 : i32 loc(#loc)
    %532 = llvm.getelementptr inbounds %37[%531] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %533 = llvm.call @"__triton_hip_predicated_load_vector<1xi8>_!llvm.ptr<3>_i1_vector<1xi8>_"(%532, %46, %8) : (!llvm.ptr<3>, i1, vector<1xi8>) -> vector<1xi8> loc(#loc)
    %534 = llvm.extractelement %533[%64 : i32] : vector<1xi8> loc(#loc)
    %535 = llvm.add %514, %59 : i32 loc(#loc)
    %536 = llvm.getelementptr inbounds %37[%535] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %537 = llvm.call @"__triton_hip_predicated_load_vector<1xi8>_!llvm.ptr<3>_i1_vector<1xi8>_"(%536, %46, %8) : (!llvm.ptr<3>, i1, vector<1xi8>) -> vector<1xi8> loc(#loc)
    %538 = llvm.extractelement %537[%64 : i32] : vector<1xi8> loc(#loc)
    %539 = llvm.add %514, %49 : i32 loc(#loc)
    %540 = llvm.getelementptr inbounds %37[%539] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %541 = llvm.call @"__triton_hip_predicated_load_vector<1xi8>_!llvm.ptr<3>_i1_vector<1xi8>_"(%540, %46, %8) : (!llvm.ptr<3>, i1, vector<1xi8>) -> vector<1xi8> loc(#loc)
    %542 = llvm.extractelement %541[%64 : i32] : vector<1xi8> loc(#loc)
    %543 = llvm.add %514, %3 : i32 loc(#loc)
    %544 = llvm.getelementptr inbounds %37[%543] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %545 = llvm.call @"__triton_hip_predicated_load_vector<1xi8>_!llvm.ptr<3>_i1_vector<1xi8>_"(%544, %46, %8) : (!llvm.ptr<3>, i1, vector<1xi8>) -> vector<1xi8> loc(#loc)
    %546 = llvm.extractelement %545[%64 : i32] : vector<1xi8> loc(#loc)
    %547 = llvm.zext %518 : i8 to i16 loc(#loc)
    %548 = llvm.zext %526 : i8 to i16 loc(#loc)
    %549 = llvm.zext %534 : i8 to i16 loc(#loc)
    %550 = llvm.zext %542 : i8 to i16 loc(#loc)
    %551 = llvm.shl %547, %71 : i16 loc(#loc)
    %552 = llvm.shl %548, %71 : i16 loc(#loc)
    %553 = llvm.shl %549, %71 : i16 loc(#loc)
    %554 = llvm.shl %550, %71 : i16 loc(#loc)
    %555 = llvm.insertelement %422, %16[%64 : i32] : vector<4xi8> loc(#loc)
    %556 = llvm.insertelement %423, %555[%53 : i32] : vector<4xi8> loc(#loc)
    %557 = llvm.insertelement %424, %556[%52 : i32] : vector<4xi8> loc(#loc)
    %558 = llvm.insertelement %425, %557[%57 : i32] : vector<4xi8> loc(#loc)
    %559 = llvm.bitcast %558 : vector<4xi8> to i32 loc(#loc)
    %560 = llvm.zext %551 : i16 to i32 loc(#loc)
    %561 = llvm.shl %560, %60 : i32 loc(#loc)
    %562 = llvm.bitcast %561 : i32 to f32 loc(#loc)
    %563 = rocdl.cvt.scalef32.pk.bf16.fp4 %559[0], %562 : vector<2xbf16> loc(#loc)
    %564 = rocdl.cvt.scalef32.pk.bf16.fp4 %559[2], %562 : vector<2xbf16> loc(#loc)
    %565 = rocdl.cvt.scalef32.pk.bf16.fp4 %559[1], %562 : vector<2xbf16> loc(#loc)
    %566 = rocdl.cvt.scalef32.pk.bf16.fp4 %559[3], %562 : vector<2xbf16> loc(#loc)
    %567 = llvm.extractelement %563[%64 : i32] : vector<2xbf16> loc(#loc)
    %568 = llvm.extractelement %563[%53 : i32] : vector<2xbf16> loc(#loc)
    %569 = llvm.extractelement %564[%64 : i32] : vector<2xbf16> loc(#loc)
    %570 = llvm.extractelement %564[%53 : i32] : vector<2xbf16> loc(#loc)
    %571 = llvm.extractelement %565[%64 : i32] : vector<2xbf16> loc(#loc)
    %572 = llvm.extractelement %565[%53 : i32] : vector<2xbf16> loc(#loc)
    %573 = llvm.extractelement %566[%64 : i32] : vector<2xbf16> loc(#loc)
    %574 = llvm.extractelement %566[%53 : i32] : vector<2xbf16> loc(#loc)
    %575 = llvm.insertelement %429, %16[%64 : i32] : vector<4xi8> loc(#loc)
    %576 = llvm.insertelement %430, %575[%53 : i32] : vector<4xi8> loc(#loc)
    %577 = llvm.insertelement %431, %576[%52 : i32] : vector<4xi8> loc(#loc)
    %578 = llvm.insertelement %432, %577[%57 : i32] : vector<4xi8> loc(#loc)
    %579 = llvm.bitcast %578 : vector<4xi8> to i32 loc(#loc)
    %580 = llvm.zext %552 : i16 to i32 loc(#loc)
    %581 = llvm.shl %580, %60 : i32 loc(#loc)
    %582 = llvm.bitcast %581 : i32 to f32 loc(#loc)
    %583 = rocdl.cvt.scalef32.pk.bf16.fp4 %579[0], %582 : vector<2xbf16> loc(#loc)
    %584 = rocdl.cvt.scalef32.pk.bf16.fp4 %579[2], %582 : vector<2xbf16> loc(#loc)
    %585 = rocdl.cvt.scalef32.pk.bf16.fp4 %579[1], %582 : vector<2xbf16> loc(#loc)
    %586 = rocdl.cvt.scalef32.pk.bf16.fp4 %579[3], %582 : vector<2xbf16> loc(#loc)
    %587 = llvm.extractelement %583[%64 : i32] : vector<2xbf16> loc(#loc)
    %588 = llvm.extractelement %583[%53 : i32] : vector<2xbf16> loc(#loc)
    %589 = llvm.extractelement %584[%64 : i32] : vector<2xbf16> loc(#loc)
    %590 = llvm.extractelement %584[%53 : i32] : vector<2xbf16> loc(#loc)
    %591 = llvm.extractelement %585[%64 : i32] : vector<2xbf16> loc(#loc)
    %592 = llvm.extractelement %585[%53 : i32] : vector<2xbf16> loc(#loc)
    %593 = llvm.extractelement %586[%64 : i32] : vector<2xbf16> loc(#loc)
    %594 = llvm.extractelement %586[%53 : i32] : vector<2xbf16> loc(#loc)
    %595 = llvm.insertelement %452, %16[%64 : i32] : vector<4xi8> loc(#loc)
    %596 = llvm.insertelement %453, %595[%53 : i32] : vector<4xi8> loc(#loc)
    %597 = llvm.insertelement %454, %596[%52 : i32] : vector<4xi8> loc(#loc)
    %598 = llvm.insertelement %455, %597[%57 : i32] : vector<4xi8> loc(#loc)
    %599 = llvm.bitcast %598 : vector<4xi8> to i32 loc(#loc)
    %600 = llvm.zext %553 : i16 to i32 loc(#loc)
    %601 = llvm.shl %600, %60 : i32 loc(#loc)
    %602 = llvm.bitcast %601 : i32 to f32 loc(#loc)
    %603 = rocdl.cvt.scalef32.pk.bf16.fp4 %599[0], %602 : vector<2xbf16> loc(#loc)
    %604 = rocdl.cvt.scalef32.pk.bf16.fp4 %599[2], %602 : vector<2xbf16> loc(#loc)
    %605 = rocdl.cvt.scalef32.pk.bf16.fp4 %599[1], %602 : vector<2xbf16> loc(#loc)
    %606 = rocdl.cvt.scalef32.pk.bf16.fp4 %599[3], %602 : vector<2xbf16> loc(#loc)
    %607 = llvm.extractelement %603[%64 : i32] : vector<2xbf16> loc(#loc)
    %608 = llvm.extractelement %603[%53 : i32] : vector<2xbf16> loc(#loc)
    %609 = llvm.extractelement %604[%64 : i32] : vector<2xbf16> loc(#loc)
    %610 = llvm.extractelement %604[%53 : i32] : vector<2xbf16> loc(#loc)
    %611 = llvm.extractelement %605[%64 : i32] : vector<2xbf16> loc(#loc)
    %612 = llvm.extractelement %605[%53 : i32] : vector<2xbf16> loc(#loc)
    %613 = llvm.extractelement %606[%64 : i32] : vector<2xbf16> loc(#loc)
    %614 = llvm.extractelement %606[%53 : i32] : vector<2xbf16> loc(#loc)
    %615 = llvm.insertelement %459, %16[%64 : i32] : vector<4xi8> loc(#loc)
    %616 = llvm.insertelement %460, %615[%53 : i32] : vector<4xi8> loc(#loc)
    %617 = llvm.insertelement %461, %616[%52 : i32] : vector<4xi8> loc(#loc)
    %618 = llvm.insertelement %462, %617[%57 : i32] : vector<4xi8> loc(#loc)
    %619 = llvm.bitcast %618 : vector<4xi8> to i32 loc(#loc)
    %620 = llvm.zext %554 : i16 to i32 loc(#loc)
    %621 = llvm.shl %620, %60 : i32 loc(#loc)
    %622 = llvm.bitcast %621 : i32 to f32 loc(#loc)
    %623 = rocdl.cvt.scalef32.pk.bf16.fp4 %619[0], %622 : vector<2xbf16> loc(#loc)
    %624 = rocdl.cvt.scalef32.pk.bf16.fp4 %619[2], %622 : vector<2xbf16> loc(#loc)
    %625 = rocdl.cvt.scalef32.pk.bf16.fp4 %619[1], %622 : vector<2xbf16> loc(#loc)
    %626 = rocdl.cvt.scalef32.pk.bf16.fp4 %619[3], %622 : vector<2xbf16> loc(#loc)
    %627 = llvm.extractelement %623[%64 : i32] : vector<2xbf16> loc(#loc)
    %628 = llvm.extractelement %623[%53 : i32] : vector<2xbf16> loc(#loc)
    %629 = llvm.extractelement %624[%64 : i32] : vector<2xbf16> loc(#loc)
    %630 = llvm.extractelement %624[%53 : i32] : vector<2xbf16> loc(#loc)
    %631 = llvm.extractelement %625[%64 : i32] : vector<2xbf16> loc(#loc)
    %632 = llvm.extractelement %625[%53 : i32] : vector<2xbf16> loc(#loc)
    %633 = llvm.extractelement %626[%64 : i32] : vector<2xbf16> loc(#loc)
    %634 = llvm.extractelement %626[%53 : i32] : vector<2xbf16> loc(#loc)
    %635 = llvm.icmp "eq" %518, %70 : i8 loc(#loc)
    %636 = llvm.icmp "eq" %526, %70 : i8 loc(#loc)
    %637 = llvm.icmp "eq" %534, %70 : i8 loc(#loc)
    %638 = llvm.icmp "eq" %542, %70 : i8 loc(#loc)
    %639 = llvm.select %635, %69, %567 : i1, bf16 loc(#loc)
    %640 = llvm.select %635, %69, %568 : i1, bf16 loc(#loc)
    %641 = llvm.select %635, %69, %569 : i1, bf16 loc(#loc)
    %642 = llvm.select %635, %69, %570 : i1, bf16 loc(#loc)
    %643 = llvm.select %635, %69, %571 : i1, bf16 loc(#loc)
    %644 = llvm.select %635, %69, %572 : i1, bf16 loc(#loc)
    %645 = llvm.select %635, %69, %573 : i1, bf16 loc(#loc)
    %646 = llvm.select %635, %69, %574 : i1, bf16 loc(#loc)
    %647 = llvm.select %636, %69, %587 : i1, bf16 loc(#loc)
    %648 = llvm.select %636, %69, %588 : i1, bf16 loc(#loc)
    %649 = llvm.select %636, %69, %589 : i1, bf16 loc(#loc)
    %650 = llvm.select %636, %69, %590 : i1, bf16 loc(#loc)
    %651 = llvm.select %636, %69, %591 : i1, bf16 loc(#loc)
    %652 = llvm.select %636, %69, %592 : i1, bf16 loc(#loc)
    %653 = llvm.select %636, %69, %593 : i1, bf16 loc(#loc)
    %654 = llvm.select %636, %69, %594 : i1, bf16 loc(#loc)
    %655 = llvm.select %637, %69, %607 : i1, bf16 loc(#loc)
    %656 = llvm.select %637, %69, %608 : i1, bf16 loc(#loc)
    %657 = llvm.select %637, %69, %609 : i1, bf16 loc(#loc)
    %658 = llvm.select %637, %69, %610 : i1, bf16 loc(#loc)
    %659 = llvm.select %637, %69, %611 : i1, bf16 loc(#loc)
    %660 = llvm.select %637, %69, %612 : i1, bf16 loc(#loc)
    %661 = llvm.select %637, %69, %613 : i1, bf16 loc(#loc)
    %662 = llvm.select %637, %69, %614 : i1, bf16 loc(#loc)
    %663 = llvm.select %638, %69, %627 : i1, bf16 loc(#loc)
    %664 = llvm.select %638, %69, %628 : i1, bf16 loc(#loc)
    %665 = llvm.select %638, %69, %629 : i1, bf16 loc(#loc)
    %666 = llvm.select %638, %69, %630 : i1, bf16 loc(#loc)
    %667 = llvm.select %638, %69, %631 : i1, bf16 loc(#loc)
    %668 = llvm.select %638, %69, %632 : i1, bf16 loc(#loc)
    %669 = llvm.select %638, %69, %633 : i1, bf16 loc(#loc)
    %670 = llvm.select %638, %69, %634 : i1, bf16 loc(#loc)
    %671 = llvm.insertelement %259, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %672 = llvm.insertelement %260, %671[%53 : i32] : vector<8xbf16> loc(#loc)
    %673 = llvm.insertelement %261, %672[%52 : i32] : vector<8xbf16> loc(#loc)
    %674 = llvm.insertelement %262, %673[%57 : i32] : vector<8xbf16> loc(#loc)
    %675 = llvm.insertelement %263, %674[%51 : i32] : vector<8xbf16> loc(#loc)
    %676 = llvm.insertelement %264, %675[%61 : i32] : vector<8xbf16> loc(#loc)
    %677 = llvm.insertelement %265, %676[%63 : i32] : vector<8xbf16> loc(#loc)
    %678 = llvm.insertelement %266, %677[%50 : i32] : vector<8xbf16> loc(#loc)
    %679 = llvm.extractelement %678[%64 : i32] : vector<8xbf16> loc(#loc)
    %680 = llvm.insertelement %679, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %681 = llvm.extractelement %678[%53 : i32] : vector<8xbf16> loc(#loc)
    %682 = llvm.insertelement %681, %680[%53 : i32] : vector<8xbf16> loc(#loc)
    %683 = llvm.extractelement %678[%52 : i32] : vector<8xbf16> loc(#loc)
    %684 = llvm.insertelement %683, %682[%52 : i32] : vector<8xbf16> loc(#loc)
    %685 = llvm.extractelement %678[%57 : i32] : vector<8xbf16> loc(#loc)
    %686 = llvm.insertelement %685, %684[%57 : i32] : vector<8xbf16> loc(#loc)
    %687 = llvm.extractelement %678[%51 : i32] : vector<8xbf16> loc(#loc)
    %688 = llvm.insertelement %687, %686[%51 : i32] : vector<8xbf16> loc(#loc)
    %689 = llvm.extractelement %678[%61 : i32] : vector<8xbf16> loc(#loc)
    %690 = llvm.insertelement %689, %688[%61 : i32] : vector<8xbf16> loc(#loc)
    %691 = llvm.extractelement %678[%63 : i32] : vector<8xbf16> loc(#loc)
    %692 = llvm.insertelement %691, %690[%63 : i32] : vector<8xbf16> loc(#loc)
    %693 = llvm.extractelement %678[%50 : i32] : vector<8xbf16> loc(#loc)
    %694 = llvm.insertelement %693, %692[%50 : i32] : vector<8xbf16> loc(#loc)
    %695 = llvm.insertelement %282, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %696 = llvm.insertelement %283, %695[%53 : i32] : vector<8xbf16> loc(#loc)
    %697 = llvm.insertelement %284, %696[%52 : i32] : vector<8xbf16> loc(#loc)
    %698 = llvm.insertelement %285, %697[%57 : i32] : vector<8xbf16> loc(#loc)
    %699 = llvm.insertelement %286, %698[%51 : i32] : vector<8xbf16> loc(#loc)
    %700 = llvm.insertelement %287, %699[%61 : i32] : vector<8xbf16> loc(#loc)
    %701 = llvm.insertelement %288, %700[%63 : i32] : vector<8xbf16> loc(#loc)
    %702 = llvm.insertelement %289, %701[%50 : i32] : vector<8xbf16> loc(#loc)
    %703 = llvm.extractelement %702[%64 : i32] : vector<8xbf16> loc(#loc)
    %704 = llvm.insertelement %703, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %705 = llvm.extractelement %702[%53 : i32] : vector<8xbf16> loc(#loc)
    %706 = llvm.insertelement %705, %704[%53 : i32] : vector<8xbf16> loc(#loc)
    %707 = llvm.extractelement %702[%52 : i32] : vector<8xbf16> loc(#loc)
    %708 = llvm.insertelement %707, %706[%52 : i32] : vector<8xbf16> loc(#loc)
    %709 = llvm.extractelement %702[%57 : i32] : vector<8xbf16> loc(#loc)
    %710 = llvm.insertelement %709, %708[%57 : i32] : vector<8xbf16> loc(#loc)
    %711 = llvm.extractelement %702[%51 : i32] : vector<8xbf16> loc(#loc)
    %712 = llvm.insertelement %711, %710[%51 : i32] : vector<8xbf16> loc(#loc)
    %713 = llvm.extractelement %702[%61 : i32] : vector<8xbf16> loc(#loc)
    %714 = llvm.insertelement %713, %712[%61 : i32] : vector<8xbf16> loc(#loc)
    %715 = llvm.extractelement %702[%63 : i32] : vector<8xbf16> loc(#loc)
    %716 = llvm.insertelement %715, %714[%63 : i32] : vector<8xbf16> loc(#loc)
    %717 = llvm.extractelement %702[%50 : i32] : vector<8xbf16> loc(#loc)
    %718 = llvm.insertelement %717, %716[%50 : i32] : vector<8xbf16> loc(#loc)
    %719 = llvm.insertelement %305, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %720 = llvm.insertelement %306, %719[%53 : i32] : vector<8xbf16> loc(#loc)
    %721 = llvm.insertelement %307, %720[%52 : i32] : vector<8xbf16> loc(#loc)
    %722 = llvm.insertelement %308, %721[%57 : i32] : vector<8xbf16> loc(#loc)
    %723 = llvm.insertelement %309, %722[%51 : i32] : vector<8xbf16> loc(#loc)
    %724 = llvm.insertelement %310, %723[%61 : i32] : vector<8xbf16> loc(#loc)
    %725 = llvm.insertelement %311, %724[%63 : i32] : vector<8xbf16> loc(#loc)
    %726 = llvm.insertelement %312, %725[%50 : i32] : vector<8xbf16> loc(#loc)
    %727 = llvm.extractelement %726[%64 : i32] : vector<8xbf16> loc(#loc)
    %728 = llvm.insertelement %727, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %729 = llvm.extractelement %726[%53 : i32] : vector<8xbf16> loc(#loc)
    %730 = llvm.insertelement %729, %728[%53 : i32] : vector<8xbf16> loc(#loc)
    %731 = llvm.extractelement %726[%52 : i32] : vector<8xbf16> loc(#loc)
    %732 = llvm.insertelement %731, %730[%52 : i32] : vector<8xbf16> loc(#loc)
    %733 = llvm.extractelement %726[%57 : i32] : vector<8xbf16> loc(#loc)
    %734 = llvm.insertelement %733, %732[%57 : i32] : vector<8xbf16> loc(#loc)
    %735 = llvm.extractelement %726[%51 : i32] : vector<8xbf16> loc(#loc)
    %736 = llvm.insertelement %735, %734[%51 : i32] : vector<8xbf16> loc(#loc)
    %737 = llvm.extractelement %726[%61 : i32] : vector<8xbf16> loc(#loc)
    %738 = llvm.insertelement %737, %736[%61 : i32] : vector<8xbf16> loc(#loc)
    %739 = llvm.extractelement %726[%63 : i32] : vector<8xbf16> loc(#loc)
    %740 = llvm.insertelement %739, %738[%63 : i32] : vector<8xbf16> loc(#loc)
    %741 = llvm.extractelement %726[%50 : i32] : vector<8xbf16> loc(#loc)
    %742 = llvm.insertelement %741, %740[%50 : i32] : vector<8xbf16> loc(#loc)
    %743 = llvm.insertelement %328, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %744 = llvm.insertelement %329, %743[%53 : i32] : vector<8xbf16> loc(#loc)
    %745 = llvm.insertelement %330, %744[%52 : i32] : vector<8xbf16> loc(#loc)
    %746 = llvm.insertelement %331, %745[%57 : i32] : vector<8xbf16> loc(#loc)
    %747 = llvm.insertelement %332, %746[%51 : i32] : vector<8xbf16> loc(#loc)
    %748 = llvm.insertelement %333, %747[%61 : i32] : vector<8xbf16> loc(#loc)
    %749 = llvm.insertelement %334, %748[%63 : i32] : vector<8xbf16> loc(#loc)
    %750 = llvm.insertelement %335, %749[%50 : i32] : vector<8xbf16> loc(#loc)
    %751 = llvm.extractelement %750[%64 : i32] : vector<8xbf16> loc(#loc)
    %752 = llvm.insertelement %751, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %753 = llvm.extractelement %750[%53 : i32] : vector<8xbf16> loc(#loc)
    %754 = llvm.insertelement %753, %752[%53 : i32] : vector<8xbf16> loc(#loc)
    %755 = llvm.extractelement %750[%52 : i32] : vector<8xbf16> loc(#loc)
    %756 = llvm.insertelement %755, %754[%52 : i32] : vector<8xbf16> loc(#loc)
    %757 = llvm.extractelement %750[%57 : i32] : vector<8xbf16> loc(#loc)
    %758 = llvm.insertelement %757, %756[%57 : i32] : vector<8xbf16> loc(#loc)
    %759 = llvm.extractelement %750[%51 : i32] : vector<8xbf16> loc(#loc)
    %760 = llvm.insertelement %759, %758[%51 : i32] : vector<8xbf16> loc(#loc)
    %761 = llvm.extractelement %750[%61 : i32] : vector<8xbf16> loc(#loc)
    %762 = llvm.insertelement %761, %760[%61 : i32] : vector<8xbf16> loc(#loc)
    %763 = llvm.extractelement %750[%63 : i32] : vector<8xbf16> loc(#loc)
    %764 = llvm.insertelement %763, %762[%63 : i32] : vector<8xbf16> loc(#loc)
    %765 = llvm.extractelement %750[%50 : i32] : vector<8xbf16> loc(#loc)
    %766 = llvm.insertelement %765, %764[%50 : i32] : vector<8xbf16> loc(#loc)
    %767 = llvm.insertelement %639, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %768 = llvm.insertelement %640, %767[%53 : i32] : vector<8xbf16> loc(#loc)
    %769 = llvm.insertelement %641, %768[%52 : i32] : vector<8xbf16> loc(#loc)
    %770 = llvm.insertelement %642, %769[%57 : i32] : vector<8xbf16> loc(#loc)
    %771 = llvm.insertelement %643, %770[%51 : i32] : vector<8xbf16> loc(#loc)
    %772 = llvm.insertelement %644, %771[%61 : i32] : vector<8xbf16> loc(#loc)
    %773 = llvm.insertelement %645, %772[%63 : i32] : vector<8xbf16> loc(#loc)
    %774 = llvm.insertelement %646, %773[%50 : i32] : vector<8xbf16> loc(#loc)
    %775 = llvm.extractelement %774[%64 : i32] : vector<8xbf16> loc(#loc)
    %776 = llvm.insertelement %775, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %777 = llvm.extractelement %774[%53 : i32] : vector<8xbf16> loc(#loc)
    %778 = llvm.insertelement %777, %776[%53 : i32] : vector<8xbf16> loc(#loc)
    %779 = llvm.extractelement %774[%52 : i32] : vector<8xbf16> loc(#loc)
    %780 = llvm.insertelement %779, %778[%52 : i32] : vector<8xbf16> loc(#loc)
    %781 = llvm.extractelement %774[%57 : i32] : vector<8xbf16> loc(#loc)
    %782 = llvm.insertelement %781, %780[%57 : i32] : vector<8xbf16> loc(#loc)
    %783 = llvm.extractelement %774[%51 : i32] : vector<8xbf16> loc(#loc)
    %784 = llvm.insertelement %783, %782[%51 : i32] : vector<8xbf16> loc(#loc)
    %785 = llvm.extractelement %774[%61 : i32] : vector<8xbf16> loc(#loc)
    %786 = llvm.insertelement %785, %784[%61 : i32] : vector<8xbf16> loc(#loc)
    %787 = llvm.extractelement %774[%63 : i32] : vector<8xbf16> loc(#loc)
    %788 = llvm.insertelement %787, %786[%63 : i32] : vector<8xbf16> loc(#loc)
    %789 = llvm.extractelement %774[%50 : i32] : vector<8xbf16> loc(#loc)
    %790 = llvm.insertelement %789, %788[%50 : i32] : vector<8xbf16> loc(#loc)
    %791 = llvm.insertelement %647, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %792 = llvm.insertelement %648, %791[%53 : i32] : vector<8xbf16> loc(#loc)
    %793 = llvm.insertelement %649, %792[%52 : i32] : vector<8xbf16> loc(#loc)
    %794 = llvm.insertelement %650, %793[%57 : i32] : vector<8xbf16> loc(#loc)
    %795 = llvm.insertelement %651, %794[%51 : i32] : vector<8xbf16> loc(#loc)
    %796 = llvm.insertelement %652, %795[%61 : i32] : vector<8xbf16> loc(#loc)
    %797 = llvm.insertelement %653, %796[%63 : i32] : vector<8xbf16> loc(#loc)
    %798 = llvm.insertelement %654, %797[%50 : i32] : vector<8xbf16> loc(#loc)
    %799 = llvm.extractelement %798[%64 : i32] : vector<8xbf16> loc(#loc)
    %800 = llvm.insertelement %799, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %801 = llvm.extractelement %798[%53 : i32] : vector<8xbf16> loc(#loc)
    %802 = llvm.insertelement %801, %800[%53 : i32] : vector<8xbf16> loc(#loc)
    %803 = llvm.extractelement %798[%52 : i32] : vector<8xbf16> loc(#loc)
    %804 = llvm.insertelement %803, %802[%52 : i32] : vector<8xbf16> loc(#loc)
    %805 = llvm.extractelement %798[%57 : i32] : vector<8xbf16> loc(#loc)
    %806 = llvm.insertelement %805, %804[%57 : i32] : vector<8xbf16> loc(#loc)
    %807 = llvm.extractelement %798[%51 : i32] : vector<8xbf16> loc(#loc)
    %808 = llvm.insertelement %807, %806[%51 : i32] : vector<8xbf16> loc(#loc)
    %809 = llvm.extractelement %798[%61 : i32] : vector<8xbf16> loc(#loc)
    %810 = llvm.insertelement %809, %808[%61 : i32] : vector<8xbf16> loc(#loc)
    %811 = llvm.extractelement %798[%63 : i32] : vector<8xbf16> loc(#loc)
    %812 = llvm.insertelement %811, %810[%63 : i32] : vector<8xbf16> loc(#loc)
    %813 = llvm.extractelement %798[%50 : i32] : vector<8xbf16> loc(#loc)
    %814 = llvm.insertelement %813, %812[%50 : i32] : vector<8xbf16> loc(#loc)
    %815 = llvm.insertelement %655, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %816 = llvm.insertelement %656, %815[%53 : i32] : vector<8xbf16> loc(#loc)
    %817 = llvm.insertelement %657, %816[%52 : i32] : vector<8xbf16> loc(#loc)
    %818 = llvm.insertelement %658, %817[%57 : i32] : vector<8xbf16> loc(#loc)
    %819 = llvm.insertelement %659, %818[%51 : i32] : vector<8xbf16> loc(#loc)
    %820 = llvm.insertelement %660, %819[%61 : i32] : vector<8xbf16> loc(#loc)
    %821 = llvm.insertelement %661, %820[%63 : i32] : vector<8xbf16> loc(#loc)
    %822 = llvm.insertelement %662, %821[%50 : i32] : vector<8xbf16> loc(#loc)
    %823 = llvm.extractelement %822[%64 : i32] : vector<8xbf16> loc(#loc)
    %824 = llvm.insertelement %823, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %825 = llvm.extractelement %822[%53 : i32] : vector<8xbf16> loc(#loc)
    %826 = llvm.insertelement %825, %824[%53 : i32] : vector<8xbf16> loc(#loc)
    %827 = llvm.extractelement %822[%52 : i32] : vector<8xbf16> loc(#loc)
    %828 = llvm.insertelement %827, %826[%52 : i32] : vector<8xbf16> loc(#loc)
    %829 = llvm.extractelement %822[%57 : i32] : vector<8xbf16> loc(#loc)
    %830 = llvm.insertelement %829, %828[%57 : i32] : vector<8xbf16> loc(#loc)
    %831 = llvm.extractelement %822[%51 : i32] : vector<8xbf16> loc(#loc)
    %832 = llvm.insertelement %831, %830[%51 : i32] : vector<8xbf16> loc(#loc)
    %833 = llvm.extractelement %822[%61 : i32] : vector<8xbf16> loc(#loc)
    %834 = llvm.insertelement %833, %832[%61 : i32] : vector<8xbf16> loc(#loc)
    %835 = llvm.extractelement %822[%63 : i32] : vector<8xbf16> loc(#loc)
    %836 = llvm.insertelement %835, %834[%63 : i32] : vector<8xbf16> loc(#loc)
    %837 = llvm.extractelement %822[%50 : i32] : vector<8xbf16> loc(#loc)
    %838 = llvm.insertelement %837, %836[%50 : i32] : vector<8xbf16> loc(#loc)
    %839 = llvm.insertelement %663, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %840 = llvm.insertelement %664, %839[%53 : i32] : vector<8xbf16> loc(#loc)
    %841 = llvm.insertelement %665, %840[%52 : i32] : vector<8xbf16> loc(#loc)
    %842 = llvm.insertelement %666, %841[%57 : i32] : vector<8xbf16> loc(#loc)
    %843 = llvm.insertelement %667, %842[%51 : i32] : vector<8xbf16> loc(#loc)
    %844 = llvm.insertelement %668, %843[%61 : i32] : vector<8xbf16> loc(#loc)
    %845 = llvm.insertelement %669, %844[%63 : i32] : vector<8xbf16> loc(#loc)
    %846 = llvm.insertelement %670, %845[%50 : i32] : vector<8xbf16> loc(#loc)
    %847 = llvm.extractelement %846[%64 : i32] : vector<8xbf16> loc(#loc)
    %848 = llvm.insertelement %847, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %849 = llvm.extractelement %846[%53 : i32] : vector<8xbf16> loc(#loc)
    %850 = llvm.insertelement %849, %848[%53 : i32] : vector<8xbf16> loc(#loc)
    %851 = llvm.extractelement %846[%52 : i32] : vector<8xbf16> loc(#loc)
    %852 = llvm.insertelement %851, %850[%52 : i32] : vector<8xbf16> loc(#loc)
    %853 = llvm.extractelement %846[%57 : i32] : vector<8xbf16> loc(#loc)
    %854 = llvm.insertelement %853, %852[%57 : i32] : vector<8xbf16> loc(#loc)
    %855 = llvm.extractelement %846[%51 : i32] : vector<8xbf16> loc(#loc)
    %856 = llvm.insertelement %855, %854[%51 : i32] : vector<8xbf16> loc(#loc)
    %857 = llvm.extractelement %846[%61 : i32] : vector<8xbf16> loc(#loc)
    %858 = llvm.insertelement %857, %856[%61 : i32] : vector<8xbf16> loc(#loc)
    %859 = llvm.extractelement %846[%63 : i32] : vector<8xbf16> loc(#loc)
    %860 = llvm.insertelement %859, %858[%63 : i32] : vector<8xbf16> loc(#loc)
    %861 = llvm.extractelement %846[%50 : i32] : vector<8xbf16> loc(#loc)
    %862 = llvm.insertelement %861, %860[%50 : i32] : vector<8xbf16> loc(#loc)
    %863 = llvm.insertelement %68, %2[%64 : i32] : vector<4xf32> loc(#loc)
    %864 = llvm.insertelement %68, %863[%53 : i32] : vector<4xf32> loc(#loc)
    %865 = llvm.insertelement %68, %864[%52 : i32] : vector<4xf32> loc(#loc)
    %866 = llvm.insertelement %68, %865[%57 : i32] : vector<4xf32> loc(#loc)
    %867 = rocdl.mfma.f32.16x16x32.bf16 %790, %694, %866, %64, %64, %64 : (vector<8xbf16>, vector<8xbf16>, vector<4xf32>, i32, i32, i32) -> vector<4xf32> loc(#loc)
    %868 = rocdl.mfma.f32.16x16x32.bf16 %814, %718, %867, %64, %64, %64 : (vector<8xbf16>, vector<8xbf16>, vector<4xf32>, i32, i32, i32) -> vector<4xf32> loc(#loc)
    %869 = rocdl.mfma.f32.16x16x32.bf16 %838, %742, %868, %64, %64, %64 : (vector<8xbf16>, vector<8xbf16>, vector<4xf32>, i32, i32, i32) -> vector<4xf32> loc(#loc)
    %870 = rocdl.mfma.f32.16x16x32.bf16 %862, %766, %869, %64, %64, %64 : (vector<8xbf16>, vector<8xbf16>, vector<4xf32>, i32, i32, i32) -> vector<4xf32> loc(#loc)
    %871 = llvm.extractelement %870[%64 : i32] : vector<4xf32> loc(#loc)
    %872 = llvm.extractelement %870[%53 : i32] : vector<4xf32> loc(#loc)
    %873 = llvm.extractelement %870[%52 : i32] : vector<4xf32> loc(#loc)
    %874 = llvm.extractelement %870[%57 : i32] : vector<4xf32> loc(#loc)
    %875 = llvm.zext %522 : i8 to i16 loc(#loc)
    %876 = llvm.zext %530 : i8 to i16 loc(#loc)
    %877 = llvm.zext %538 : i8 to i16 loc(#loc)
    %878 = llvm.zext %546 : i8 to i16 loc(#loc)
    %879 = llvm.shl %875, %71 : i16 loc(#loc)
    %880 = llvm.shl %876, %71 : i16 loc(#loc)
    %881 = llvm.shl %877, %71 : i16 loc(#loc)
    %882 = llvm.shl %878, %71 : i16 loc(#loc)
    %883 = llvm.insertelement %437, %16[%64 : i32] : vector<4xi8> loc(#loc)
    %884 = llvm.insertelement %438, %883[%53 : i32] : vector<4xi8> loc(#loc)
    %885 = llvm.insertelement %439, %884[%52 : i32] : vector<4xi8> loc(#loc)
    %886 = llvm.insertelement %440, %885[%57 : i32] : vector<4xi8> loc(#loc)
    %887 = llvm.bitcast %886 : vector<4xi8> to i32 loc(#loc)
    %888 = llvm.zext %879 : i16 to i32 loc(#loc)
    %889 = llvm.shl %888, %60 : i32 loc(#loc)
    %890 = llvm.bitcast %889 : i32 to f32 loc(#loc)
    %891 = rocdl.cvt.scalef32.pk.bf16.fp4 %887[0], %890 : vector<2xbf16> loc(#loc)
    %892 = rocdl.cvt.scalef32.pk.bf16.fp4 %887[2], %890 : vector<2xbf16> loc(#loc)
    %893 = rocdl.cvt.scalef32.pk.bf16.fp4 %887[1], %890 : vector<2xbf16> loc(#loc)
    %894 = rocdl.cvt.scalef32.pk.bf16.fp4 %887[3], %890 : vector<2xbf16> loc(#loc)
    %895 = llvm.extractelement %891[%64 : i32] : vector<2xbf16> loc(#loc)
    %896 = llvm.extractelement %891[%53 : i32] : vector<2xbf16> loc(#loc)
    %897 = llvm.extractelement %892[%64 : i32] : vector<2xbf16> loc(#loc)
    %898 = llvm.extractelement %892[%53 : i32] : vector<2xbf16> loc(#loc)
    %899 = llvm.extractelement %893[%64 : i32] : vector<2xbf16> loc(#loc)
    %900 = llvm.extractelement %893[%53 : i32] : vector<2xbf16> loc(#loc)
    %901 = llvm.extractelement %894[%64 : i32] : vector<2xbf16> loc(#loc)
    %902 = llvm.extractelement %894[%53 : i32] : vector<2xbf16> loc(#loc)
    %903 = llvm.insertelement %444, %16[%64 : i32] : vector<4xi8> loc(#loc)
    %904 = llvm.insertelement %445, %903[%53 : i32] : vector<4xi8> loc(#loc)
    %905 = llvm.insertelement %446, %904[%52 : i32] : vector<4xi8> loc(#loc)
    %906 = llvm.insertelement %447, %905[%57 : i32] : vector<4xi8> loc(#loc)
    %907 = llvm.bitcast %906 : vector<4xi8> to i32 loc(#loc)
    %908 = llvm.zext %880 : i16 to i32 loc(#loc)
    %909 = llvm.shl %908, %60 : i32 loc(#loc)
    %910 = llvm.bitcast %909 : i32 to f32 loc(#loc)
    %911 = rocdl.cvt.scalef32.pk.bf16.fp4 %907[0], %910 : vector<2xbf16> loc(#loc)
    %912 = rocdl.cvt.scalef32.pk.bf16.fp4 %907[2], %910 : vector<2xbf16> loc(#loc)
    %913 = rocdl.cvt.scalef32.pk.bf16.fp4 %907[1], %910 : vector<2xbf16> loc(#loc)
    %914 = rocdl.cvt.scalef32.pk.bf16.fp4 %907[3], %910 : vector<2xbf16> loc(#loc)
    %915 = llvm.extractelement %911[%64 : i32] : vector<2xbf16> loc(#loc)
    %916 = llvm.extractelement %911[%53 : i32] : vector<2xbf16> loc(#loc)
    %917 = llvm.extractelement %912[%64 : i32] : vector<2xbf16> loc(#loc)
    %918 = llvm.extractelement %912[%53 : i32] : vector<2xbf16> loc(#loc)
    %919 = llvm.extractelement %913[%64 : i32] : vector<2xbf16> loc(#loc)
    %920 = llvm.extractelement %913[%53 : i32] : vector<2xbf16> loc(#loc)
    %921 = llvm.extractelement %914[%64 : i32] : vector<2xbf16> loc(#loc)
    %922 = llvm.extractelement %914[%53 : i32] : vector<2xbf16> loc(#loc)
    %923 = llvm.insertelement %467, %16[%64 : i32] : vector<4xi8> loc(#loc)
    %924 = llvm.insertelement %468, %923[%53 : i32] : vector<4xi8> loc(#loc)
    %925 = llvm.insertelement %469, %924[%52 : i32] : vector<4xi8> loc(#loc)
    %926 = llvm.insertelement %470, %925[%57 : i32] : vector<4xi8> loc(#loc)
    %927 = llvm.bitcast %926 : vector<4xi8> to i32 loc(#loc)
    %928 = llvm.zext %881 : i16 to i32 loc(#loc)
    %929 = llvm.shl %928, %60 : i32 loc(#loc)
    %930 = llvm.bitcast %929 : i32 to f32 loc(#loc)
    %931 = rocdl.cvt.scalef32.pk.bf16.fp4 %927[0], %930 : vector<2xbf16> loc(#loc)
    %932 = rocdl.cvt.scalef32.pk.bf16.fp4 %927[2], %930 : vector<2xbf16> loc(#loc)
    %933 = rocdl.cvt.scalef32.pk.bf16.fp4 %927[1], %930 : vector<2xbf16> loc(#loc)
    %934 = rocdl.cvt.scalef32.pk.bf16.fp4 %927[3], %930 : vector<2xbf16> loc(#loc)
    %935 = llvm.extractelement %931[%64 : i32] : vector<2xbf16> loc(#loc)
    %936 = llvm.extractelement %931[%53 : i32] : vector<2xbf16> loc(#loc)
    %937 = llvm.extractelement %932[%64 : i32] : vector<2xbf16> loc(#loc)
    %938 = llvm.extractelement %932[%53 : i32] : vector<2xbf16> loc(#loc)
    %939 = llvm.extractelement %933[%64 : i32] : vector<2xbf16> loc(#loc)
    %940 = llvm.extractelement %933[%53 : i32] : vector<2xbf16> loc(#loc)
    %941 = llvm.extractelement %934[%64 : i32] : vector<2xbf16> loc(#loc)
    %942 = llvm.extractelement %934[%53 : i32] : vector<2xbf16> loc(#loc)
    %943 = llvm.insertelement %474, %16[%64 : i32] : vector<4xi8> loc(#loc)
    %944 = llvm.insertelement %475, %943[%53 : i32] : vector<4xi8> loc(#loc)
    %945 = llvm.insertelement %476, %944[%52 : i32] : vector<4xi8> loc(#loc)
    %946 = llvm.insertelement %477, %945[%57 : i32] : vector<4xi8> loc(#loc)
    %947 = llvm.bitcast %946 : vector<4xi8> to i32 loc(#loc)
    %948 = llvm.zext %882 : i16 to i32 loc(#loc)
    %949 = llvm.shl %948, %60 : i32 loc(#loc)
    %950 = llvm.bitcast %949 : i32 to f32 loc(#loc)
    %951 = rocdl.cvt.scalef32.pk.bf16.fp4 %947[0], %950 : vector<2xbf16> loc(#loc)
    %952 = rocdl.cvt.scalef32.pk.bf16.fp4 %947[2], %950 : vector<2xbf16> loc(#loc)
    %953 = rocdl.cvt.scalef32.pk.bf16.fp4 %947[1], %950 : vector<2xbf16> loc(#loc)
    %954 = rocdl.cvt.scalef32.pk.bf16.fp4 %947[3], %950 : vector<2xbf16> loc(#loc)
    %955 = llvm.extractelement %951[%64 : i32] : vector<2xbf16> loc(#loc)
    %956 = llvm.extractelement %951[%53 : i32] : vector<2xbf16> loc(#loc)
    %957 = llvm.extractelement %952[%64 : i32] : vector<2xbf16> loc(#loc)
    %958 = llvm.extractelement %952[%53 : i32] : vector<2xbf16> loc(#loc)
    %959 = llvm.extractelement %953[%64 : i32] : vector<2xbf16> loc(#loc)
    %960 = llvm.extractelement %953[%53 : i32] : vector<2xbf16> loc(#loc)
    %961 = llvm.extractelement %954[%64 : i32] : vector<2xbf16> loc(#loc)
    %962 = llvm.extractelement %954[%53 : i32] : vector<2xbf16> loc(#loc)
    %963 = llvm.icmp "eq" %522, %70 : i8 loc(#loc)
    %964 = llvm.icmp "eq" %530, %70 : i8 loc(#loc)
    %965 = llvm.icmp "eq" %538, %70 : i8 loc(#loc)
    %966 = llvm.icmp "eq" %546, %70 : i8 loc(#loc)
    %967 = llvm.select %963, %69, %895 : i1, bf16 loc(#loc)
    %968 = llvm.select %963, %69, %896 : i1, bf16 loc(#loc)
    %969 = llvm.select %963, %69, %897 : i1, bf16 loc(#loc)
    %970 = llvm.select %963, %69, %898 : i1, bf16 loc(#loc)
    %971 = llvm.select %963, %69, %899 : i1, bf16 loc(#loc)
    %972 = llvm.select %963, %69, %900 : i1, bf16 loc(#loc)
    %973 = llvm.select %963, %69, %901 : i1, bf16 loc(#loc)
    %974 = llvm.select %963, %69, %902 : i1, bf16 loc(#loc)
    %975 = llvm.select %964, %69, %915 : i1, bf16 loc(#loc)
    %976 = llvm.select %964, %69, %916 : i1, bf16 loc(#loc)
    %977 = llvm.select %964, %69, %917 : i1, bf16 loc(#loc)
    %978 = llvm.select %964, %69, %918 : i1, bf16 loc(#loc)
    %979 = llvm.select %964, %69, %919 : i1, bf16 loc(#loc)
    %980 = llvm.select %964, %69, %920 : i1, bf16 loc(#loc)
    %981 = llvm.select %964, %69, %921 : i1, bf16 loc(#loc)
    %982 = llvm.select %964, %69, %922 : i1, bf16 loc(#loc)
    %983 = llvm.select %965, %69, %935 : i1, bf16 loc(#loc)
    %984 = llvm.select %965, %69, %936 : i1, bf16 loc(#loc)
    %985 = llvm.select %965, %69, %937 : i1, bf16 loc(#loc)
    %986 = llvm.select %965, %69, %938 : i1, bf16 loc(#loc)
    %987 = llvm.select %965, %69, %939 : i1, bf16 loc(#loc)
    %988 = llvm.select %965, %69, %940 : i1, bf16 loc(#loc)
    %989 = llvm.select %965, %69, %941 : i1, bf16 loc(#loc)
    %990 = llvm.select %965, %69, %942 : i1, bf16 loc(#loc)
    %991 = llvm.select %966, %69, %955 : i1, bf16 loc(#loc)
    %992 = llvm.select %966, %69, %956 : i1, bf16 loc(#loc)
    %993 = llvm.select %966, %69, %957 : i1, bf16 loc(#loc)
    %994 = llvm.select %966, %69, %958 : i1, bf16 loc(#loc)
    %995 = llvm.select %966, %69, %959 : i1, bf16 loc(#loc)
    %996 = llvm.select %966, %69, %960 : i1, bf16 loc(#loc)
    %997 = llvm.select %966, %69, %961 : i1, bf16 loc(#loc)
    %998 = llvm.select %966, %69, %962 : i1, bf16 loc(#loc)
    %999 = llvm.insertelement %270, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %1000 = llvm.insertelement %271, %999[%53 : i32] : vector<8xbf16> loc(#loc)
    %1001 = llvm.insertelement %272, %1000[%52 : i32] : vector<8xbf16> loc(#loc)
    %1002 = llvm.insertelement %273, %1001[%57 : i32] : vector<8xbf16> loc(#loc)
    %1003 = llvm.insertelement %274, %1002[%51 : i32] : vector<8xbf16> loc(#loc)
    %1004 = llvm.insertelement %275, %1003[%61 : i32] : vector<8xbf16> loc(#loc)
    %1005 = llvm.insertelement %276, %1004[%63 : i32] : vector<8xbf16> loc(#loc)
    %1006 = llvm.insertelement %277, %1005[%50 : i32] : vector<8xbf16> loc(#loc)
    %1007 = llvm.extractelement %1006[%64 : i32] : vector<8xbf16> loc(#loc)
    %1008 = llvm.insertelement %1007, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %1009 = llvm.extractelement %1006[%53 : i32] : vector<8xbf16> loc(#loc)
    %1010 = llvm.insertelement %1009, %1008[%53 : i32] : vector<8xbf16> loc(#loc)
    %1011 = llvm.extractelement %1006[%52 : i32] : vector<8xbf16> loc(#loc)
    %1012 = llvm.insertelement %1011, %1010[%52 : i32] : vector<8xbf16> loc(#loc)
    %1013 = llvm.extractelement %1006[%57 : i32] : vector<8xbf16> loc(#loc)
    %1014 = llvm.insertelement %1013, %1012[%57 : i32] : vector<8xbf16> loc(#loc)
    %1015 = llvm.extractelement %1006[%51 : i32] : vector<8xbf16> loc(#loc)
    %1016 = llvm.insertelement %1015, %1014[%51 : i32] : vector<8xbf16> loc(#loc)
    %1017 = llvm.extractelement %1006[%61 : i32] : vector<8xbf16> loc(#loc)
    %1018 = llvm.insertelement %1017, %1016[%61 : i32] : vector<8xbf16> loc(#loc)
    %1019 = llvm.extractelement %1006[%63 : i32] : vector<8xbf16> loc(#loc)
    %1020 = llvm.insertelement %1019, %1018[%63 : i32] : vector<8xbf16> loc(#loc)
    %1021 = llvm.extractelement %1006[%50 : i32] : vector<8xbf16> loc(#loc)
    %1022 = llvm.insertelement %1021, %1020[%50 : i32] : vector<8xbf16> loc(#loc)
    %1023 = llvm.insertelement %293, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %1024 = llvm.insertelement %294, %1023[%53 : i32] : vector<8xbf16> loc(#loc)
    %1025 = llvm.insertelement %295, %1024[%52 : i32] : vector<8xbf16> loc(#loc)
    %1026 = llvm.insertelement %296, %1025[%57 : i32] : vector<8xbf16> loc(#loc)
    %1027 = llvm.insertelement %297, %1026[%51 : i32] : vector<8xbf16> loc(#loc)
    %1028 = llvm.insertelement %298, %1027[%61 : i32] : vector<8xbf16> loc(#loc)
    %1029 = llvm.insertelement %299, %1028[%63 : i32] : vector<8xbf16> loc(#loc)
    %1030 = llvm.insertelement %300, %1029[%50 : i32] : vector<8xbf16> loc(#loc)
    %1031 = llvm.extractelement %1030[%64 : i32] : vector<8xbf16> loc(#loc)
    %1032 = llvm.insertelement %1031, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %1033 = llvm.extractelement %1030[%53 : i32] : vector<8xbf16> loc(#loc)
    %1034 = llvm.insertelement %1033, %1032[%53 : i32] : vector<8xbf16> loc(#loc)
    %1035 = llvm.extractelement %1030[%52 : i32] : vector<8xbf16> loc(#loc)
    %1036 = llvm.insertelement %1035, %1034[%52 : i32] : vector<8xbf16> loc(#loc)
    %1037 = llvm.extractelement %1030[%57 : i32] : vector<8xbf16> loc(#loc)
    %1038 = llvm.insertelement %1037, %1036[%57 : i32] : vector<8xbf16> loc(#loc)
    %1039 = llvm.extractelement %1030[%51 : i32] : vector<8xbf16> loc(#loc)
    %1040 = llvm.insertelement %1039, %1038[%51 : i32] : vector<8xbf16> loc(#loc)
    %1041 = llvm.extractelement %1030[%61 : i32] : vector<8xbf16> loc(#loc)
    %1042 = llvm.insertelement %1041, %1040[%61 : i32] : vector<8xbf16> loc(#loc)
    %1043 = llvm.extractelement %1030[%63 : i32] : vector<8xbf16> loc(#loc)
    %1044 = llvm.insertelement %1043, %1042[%63 : i32] : vector<8xbf16> loc(#loc)
    %1045 = llvm.extractelement %1030[%50 : i32] : vector<8xbf16> loc(#loc)
    %1046 = llvm.insertelement %1045, %1044[%50 : i32] : vector<8xbf16> loc(#loc)
    %1047 = llvm.insertelement %316, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %1048 = llvm.insertelement %317, %1047[%53 : i32] : vector<8xbf16> loc(#loc)
    %1049 = llvm.insertelement %318, %1048[%52 : i32] : vector<8xbf16> loc(#loc)
    %1050 = llvm.insertelement %319, %1049[%57 : i32] : vector<8xbf16> loc(#loc)
    %1051 = llvm.insertelement %320, %1050[%51 : i32] : vector<8xbf16> loc(#loc)
    %1052 = llvm.insertelement %321, %1051[%61 : i32] : vector<8xbf16> loc(#loc)
    %1053 = llvm.insertelement %322, %1052[%63 : i32] : vector<8xbf16> loc(#loc)
    %1054 = llvm.insertelement %323, %1053[%50 : i32] : vector<8xbf16> loc(#loc)
    %1055 = llvm.extractelement %1054[%64 : i32] : vector<8xbf16> loc(#loc)
    %1056 = llvm.insertelement %1055, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %1057 = llvm.extractelement %1054[%53 : i32] : vector<8xbf16> loc(#loc)
    %1058 = llvm.insertelement %1057, %1056[%53 : i32] : vector<8xbf16> loc(#loc)
    %1059 = llvm.extractelement %1054[%52 : i32] : vector<8xbf16> loc(#loc)
    %1060 = llvm.insertelement %1059, %1058[%52 : i32] : vector<8xbf16> loc(#loc)
    %1061 = llvm.extractelement %1054[%57 : i32] : vector<8xbf16> loc(#loc)
    %1062 = llvm.insertelement %1061, %1060[%57 : i32] : vector<8xbf16> loc(#loc)
    %1063 = llvm.extractelement %1054[%51 : i32] : vector<8xbf16> loc(#loc)
    %1064 = llvm.insertelement %1063, %1062[%51 : i32] : vector<8xbf16> loc(#loc)
    %1065 = llvm.extractelement %1054[%61 : i32] : vector<8xbf16> loc(#loc)
    %1066 = llvm.insertelement %1065, %1064[%61 : i32] : vector<8xbf16> loc(#loc)
    %1067 = llvm.extractelement %1054[%63 : i32] : vector<8xbf16> loc(#loc)
    %1068 = llvm.insertelement %1067, %1066[%63 : i32] : vector<8xbf16> loc(#loc)
    %1069 = llvm.extractelement %1054[%50 : i32] : vector<8xbf16> loc(#loc)
    %1070 = llvm.insertelement %1069, %1068[%50 : i32] : vector<8xbf16> loc(#loc)
    %1071 = llvm.insertelement %339, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %1072 = llvm.insertelement %340, %1071[%53 : i32] : vector<8xbf16> loc(#loc)
    %1073 = llvm.insertelement %341, %1072[%52 : i32] : vector<8xbf16> loc(#loc)
    %1074 = llvm.insertelement %342, %1073[%57 : i32] : vector<8xbf16> loc(#loc)
    %1075 = llvm.insertelement %343, %1074[%51 : i32] : vector<8xbf16> loc(#loc)
    %1076 = llvm.insertelement %344, %1075[%61 : i32] : vector<8xbf16> loc(#loc)
    %1077 = llvm.insertelement %345, %1076[%63 : i32] : vector<8xbf16> loc(#loc)
    %1078 = llvm.insertelement %346, %1077[%50 : i32] : vector<8xbf16> loc(#loc)
    %1079 = llvm.extractelement %1078[%64 : i32] : vector<8xbf16> loc(#loc)
    %1080 = llvm.insertelement %1079, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %1081 = llvm.extractelement %1078[%53 : i32] : vector<8xbf16> loc(#loc)
    %1082 = llvm.insertelement %1081, %1080[%53 : i32] : vector<8xbf16> loc(#loc)
    %1083 = llvm.extractelement %1078[%52 : i32] : vector<8xbf16> loc(#loc)
    %1084 = llvm.insertelement %1083, %1082[%52 : i32] : vector<8xbf16> loc(#loc)
    %1085 = llvm.extractelement %1078[%57 : i32] : vector<8xbf16> loc(#loc)
    %1086 = llvm.insertelement %1085, %1084[%57 : i32] : vector<8xbf16> loc(#loc)
    %1087 = llvm.extractelement %1078[%51 : i32] : vector<8xbf16> loc(#loc)
    %1088 = llvm.insertelement %1087, %1086[%51 : i32] : vector<8xbf16> loc(#loc)
    %1089 = llvm.extractelement %1078[%61 : i32] : vector<8xbf16> loc(#loc)
    %1090 = llvm.insertelement %1089, %1088[%61 : i32] : vector<8xbf16> loc(#loc)
    %1091 = llvm.extractelement %1078[%63 : i32] : vector<8xbf16> loc(#loc)
    %1092 = llvm.insertelement %1091, %1090[%63 : i32] : vector<8xbf16> loc(#loc)
    %1093 = llvm.extractelement %1078[%50 : i32] : vector<8xbf16> loc(#loc)
    %1094 = llvm.insertelement %1093, %1092[%50 : i32] : vector<8xbf16> loc(#loc)
    %1095 = llvm.insertelement %967, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %1096 = llvm.insertelement %968, %1095[%53 : i32] : vector<8xbf16> loc(#loc)
    %1097 = llvm.insertelement %969, %1096[%52 : i32] : vector<8xbf16> loc(#loc)
    %1098 = llvm.insertelement %970, %1097[%57 : i32] : vector<8xbf16> loc(#loc)
    %1099 = llvm.insertelement %971, %1098[%51 : i32] : vector<8xbf16> loc(#loc)
    %1100 = llvm.insertelement %972, %1099[%61 : i32] : vector<8xbf16> loc(#loc)
    %1101 = llvm.insertelement %973, %1100[%63 : i32] : vector<8xbf16> loc(#loc)
    %1102 = llvm.insertelement %974, %1101[%50 : i32] : vector<8xbf16> loc(#loc)
    %1103 = llvm.extractelement %1102[%64 : i32] : vector<8xbf16> loc(#loc)
    %1104 = llvm.insertelement %1103, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %1105 = llvm.extractelement %1102[%53 : i32] : vector<8xbf16> loc(#loc)
    %1106 = llvm.insertelement %1105, %1104[%53 : i32] : vector<8xbf16> loc(#loc)
    %1107 = llvm.extractelement %1102[%52 : i32] : vector<8xbf16> loc(#loc)
    %1108 = llvm.insertelement %1107, %1106[%52 : i32] : vector<8xbf16> loc(#loc)
    %1109 = llvm.extractelement %1102[%57 : i32] : vector<8xbf16> loc(#loc)
    %1110 = llvm.insertelement %1109, %1108[%57 : i32] : vector<8xbf16> loc(#loc)
    %1111 = llvm.extractelement %1102[%51 : i32] : vector<8xbf16> loc(#loc)
    %1112 = llvm.insertelement %1111, %1110[%51 : i32] : vector<8xbf16> loc(#loc)
    %1113 = llvm.extractelement %1102[%61 : i32] : vector<8xbf16> loc(#loc)
    %1114 = llvm.insertelement %1113, %1112[%61 : i32] : vector<8xbf16> loc(#loc)
    %1115 = llvm.extractelement %1102[%63 : i32] : vector<8xbf16> loc(#loc)
    %1116 = llvm.insertelement %1115, %1114[%63 : i32] : vector<8xbf16> loc(#loc)
    %1117 = llvm.extractelement %1102[%50 : i32] : vector<8xbf16> loc(#loc)
    %1118 = llvm.insertelement %1117, %1116[%50 : i32] : vector<8xbf16> loc(#loc)
    %1119 = llvm.insertelement %975, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %1120 = llvm.insertelement %976, %1119[%53 : i32] : vector<8xbf16> loc(#loc)
    %1121 = llvm.insertelement %977, %1120[%52 : i32] : vector<8xbf16> loc(#loc)
    %1122 = llvm.insertelement %978, %1121[%57 : i32] : vector<8xbf16> loc(#loc)
    %1123 = llvm.insertelement %979, %1122[%51 : i32] : vector<8xbf16> loc(#loc)
    %1124 = llvm.insertelement %980, %1123[%61 : i32] : vector<8xbf16> loc(#loc)
    %1125 = llvm.insertelement %981, %1124[%63 : i32] : vector<8xbf16> loc(#loc)
    %1126 = llvm.insertelement %982, %1125[%50 : i32] : vector<8xbf16> loc(#loc)
    %1127 = llvm.extractelement %1126[%64 : i32] : vector<8xbf16> loc(#loc)
    %1128 = llvm.insertelement %1127, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %1129 = llvm.extractelement %1126[%53 : i32] : vector<8xbf16> loc(#loc)
    %1130 = llvm.insertelement %1129, %1128[%53 : i32] : vector<8xbf16> loc(#loc)
    %1131 = llvm.extractelement %1126[%52 : i32] : vector<8xbf16> loc(#loc)
    %1132 = llvm.insertelement %1131, %1130[%52 : i32] : vector<8xbf16> loc(#loc)
    %1133 = llvm.extractelement %1126[%57 : i32] : vector<8xbf16> loc(#loc)
    %1134 = llvm.insertelement %1133, %1132[%57 : i32] : vector<8xbf16> loc(#loc)
    %1135 = llvm.extractelement %1126[%51 : i32] : vector<8xbf16> loc(#loc)
    %1136 = llvm.insertelement %1135, %1134[%51 : i32] : vector<8xbf16> loc(#loc)
    %1137 = llvm.extractelement %1126[%61 : i32] : vector<8xbf16> loc(#loc)
    %1138 = llvm.insertelement %1137, %1136[%61 : i32] : vector<8xbf16> loc(#loc)
    %1139 = llvm.extractelement %1126[%63 : i32] : vector<8xbf16> loc(#loc)
    %1140 = llvm.insertelement %1139, %1138[%63 : i32] : vector<8xbf16> loc(#loc)
    %1141 = llvm.extractelement %1126[%50 : i32] : vector<8xbf16> loc(#loc)
    %1142 = llvm.insertelement %1141, %1140[%50 : i32] : vector<8xbf16> loc(#loc)
    %1143 = llvm.insertelement %983, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %1144 = llvm.insertelement %984, %1143[%53 : i32] : vector<8xbf16> loc(#loc)
    %1145 = llvm.insertelement %985, %1144[%52 : i32] : vector<8xbf16> loc(#loc)
    %1146 = llvm.insertelement %986, %1145[%57 : i32] : vector<8xbf16> loc(#loc)
    %1147 = llvm.insertelement %987, %1146[%51 : i32] : vector<8xbf16> loc(#loc)
    %1148 = llvm.insertelement %988, %1147[%61 : i32] : vector<8xbf16> loc(#loc)
    %1149 = llvm.insertelement %989, %1148[%63 : i32] : vector<8xbf16> loc(#loc)
    %1150 = llvm.insertelement %990, %1149[%50 : i32] : vector<8xbf16> loc(#loc)
    %1151 = llvm.extractelement %1150[%64 : i32] : vector<8xbf16> loc(#loc)
    %1152 = llvm.insertelement %1151, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %1153 = llvm.extractelement %1150[%53 : i32] : vector<8xbf16> loc(#loc)
    %1154 = llvm.insertelement %1153, %1152[%53 : i32] : vector<8xbf16> loc(#loc)
    %1155 = llvm.extractelement %1150[%52 : i32] : vector<8xbf16> loc(#loc)
    %1156 = llvm.insertelement %1155, %1154[%52 : i32] : vector<8xbf16> loc(#loc)
    %1157 = llvm.extractelement %1150[%57 : i32] : vector<8xbf16> loc(#loc)
    %1158 = llvm.insertelement %1157, %1156[%57 : i32] : vector<8xbf16> loc(#loc)
    %1159 = llvm.extractelement %1150[%51 : i32] : vector<8xbf16> loc(#loc)
    %1160 = llvm.insertelement %1159, %1158[%51 : i32] : vector<8xbf16> loc(#loc)
    %1161 = llvm.extractelement %1150[%61 : i32] : vector<8xbf16> loc(#loc)
    %1162 = llvm.insertelement %1161, %1160[%61 : i32] : vector<8xbf16> loc(#loc)
    %1163 = llvm.extractelement %1150[%63 : i32] : vector<8xbf16> loc(#loc)
    %1164 = llvm.insertelement %1163, %1162[%63 : i32] : vector<8xbf16> loc(#loc)
    %1165 = llvm.extractelement %1150[%50 : i32] : vector<8xbf16> loc(#loc)
    %1166 = llvm.insertelement %1165, %1164[%50 : i32] : vector<8xbf16> loc(#loc)
    %1167 = llvm.insertelement %991, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %1168 = llvm.insertelement %992, %1167[%53 : i32] : vector<8xbf16> loc(#loc)
    %1169 = llvm.insertelement %993, %1168[%52 : i32] : vector<8xbf16> loc(#loc)
    %1170 = llvm.insertelement %994, %1169[%57 : i32] : vector<8xbf16> loc(#loc)
    %1171 = llvm.insertelement %995, %1170[%51 : i32] : vector<8xbf16> loc(#loc)
    %1172 = llvm.insertelement %996, %1171[%61 : i32] : vector<8xbf16> loc(#loc)
    %1173 = llvm.insertelement %997, %1172[%63 : i32] : vector<8xbf16> loc(#loc)
    %1174 = llvm.insertelement %998, %1173[%50 : i32] : vector<8xbf16> loc(#loc)
    %1175 = llvm.extractelement %1174[%64 : i32] : vector<8xbf16> loc(#loc)
    %1176 = llvm.insertelement %1175, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %1177 = llvm.extractelement %1174[%53 : i32] : vector<8xbf16> loc(#loc)
    %1178 = llvm.insertelement %1177, %1176[%53 : i32] : vector<8xbf16> loc(#loc)
    %1179 = llvm.extractelement %1174[%52 : i32] : vector<8xbf16> loc(#loc)
    %1180 = llvm.insertelement %1179, %1178[%52 : i32] : vector<8xbf16> loc(#loc)
    %1181 = llvm.extractelement %1174[%57 : i32] : vector<8xbf16> loc(#loc)
    %1182 = llvm.insertelement %1181, %1180[%57 : i32] : vector<8xbf16> loc(#loc)
    %1183 = llvm.extractelement %1174[%51 : i32] : vector<8xbf16> loc(#loc)
    %1184 = llvm.insertelement %1183, %1182[%51 : i32] : vector<8xbf16> loc(#loc)
    %1185 = llvm.extractelement %1174[%61 : i32] : vector<8xbf16> loc(#loc)
    %1186 = llvm.insertelement %1185, %1184[%61 : i32] : vector<8xbf16> loc(#loc)
    %1187 = llvm.extractelement %1174[%63 : i32] : vector<8xbf16> loc(#loc)
    %1188 = llvm.insertelement %1187, %1186[%63 : i32] : vector<8xbf16> loc(#loc)
    %1189 = llvm.extractelement %1174[%50 : i32] : vector<8xbf16> loc(#loc)
    %1190 = llvm.insertelement %1189, %1188[%50 : i32] : vector<8xbf16> loc(#loc)
    %1191 = rocdl.mfma.f32.16x16x32.bf16 %1118, %1022, %866, %64, %64, %64 : (vector<8xbf16>, vector<8xbf16>, vector<4xf32>, i32, i32, i32) -> vector<4xf32> loc(#loc)
    %1192 = rocdl.mfma.f32.16x16x32.bf16 %1142, %1046, %1191, %64, %64, %64 : (vector<8xbf16>, vector<8xbf16>, vector<4xf32>, i32, i32, i32) -> vector<4xf32> loc(#loc)
    %1193 = rocdl.mfma.f32.16x16x32.bf16 %1166, %1070, %1192, %64, %64, %64 : (vector<8xbf16>, vector<8xbf16>, vector<4xf32>, i32, i32, i32) -> vector<4xf32> loc(#loc)
    %1194 = rocdl.mfma.f32.16x16x32.bf16 %1190, %1094, %1193, %64, %64, %64 : (vector<8xbf16>, vector<8xbf16>, vector<4xf32>, i32, i32, i32) -> vector<4xf32> loc(#loc)
    %1195 = llvm.extractelement %1194[%64 : i32] : vector<4xf32> loc(#loc)
    %1196 = llvm.extractelement %1194[%53 : i32] : vector<4xf32> loc(#loc)
    %1197 = llvm.extractelement %1194[%52 : i32] : vector<4xf32> loc(#loc)
    %1198 = llvm.extractelement %1194[%57 : i32] : vector<4xf32> loc(#loc)
    %1199 = llvm.fadd %871, %1195 : f32 loc(#loc)
    %1200 = llvm.fadd %872, %1196 : f32 loc(#loc)
    %1201 = llvm.fadd %873, %1197 : f32 loc(#loc)
    %1202 = llvm.fadd %874, %1198 : f32 loc(#loc)
    %1203 = llvm.mul %109, %73 : i32 loc(#loc)
    %1204 = llvm.add %135, %1203 : i32 loc(#loc)
    %1205 = llvm.insertelement %1199, %1[%64 : i32] : vector<2xf32> loc(#loc)
    %1206 = llvm.insertelement %1200, %1205[%53 : i32] : vector<2xf32> loc(#loc)
    %1207 = llvm.fptrunc %1206 : vector<2xf32> to vector<2xbf16> loc(#loc)
    %1208 = llvm.extractelement %1207[%64 : i32] : vector<2xbf16> loc(#loc)
    %1209 = llvm.extractelement %1207[%53 : i32] : vector<2xbf16> loc(#loc)
    %1210 = llvm.insertelement %1201, %1[%64 : i32] : vector<2xf32> loc(#loc)
    %1211 = llvm.insertelement %1202, %1210[%53 : i32] : vector<2xf32> loc(#loc)
    %1212 = llvm.fptrunc %1211 : vector<2xf32> to vector<2xbf16> loc(#loc)
    %1213 = llvm.extractelement %1212[%64 : i32] : vector<2xbf16> loc(#loc)
    %1214 = llvm.extractelement %1212[%53 : i32] : vector<2xbf16> loc(#loc)
    %1215 = rocdl.make.buffer.rsrc %out, %11, %9, %10 : <1> to <8> loc(#loc)
    %1216 = llvm.insertelement %1208, %0[%64 : i32] : vector<4xbf16> loc(#loc)
    %1217 = llvm.insertelement %1209, %1216[%53 : i32] : vector<4xbf16> loc(#loc)
    %1218 = llvm.insertelement %1213, %1217[%52 : i32] : vector<4xbf16> loc(#loc)
    %1219 = llvm.insertelement %1214, %1218[%57 : i32] : vector<4xbf16> loc(#loc)
    %1220 = llvm.bitcast %1219 : vector<4xbf16> to vector<2xi32> loc(#loc)
    %1221 = llvm.mul %1204, %52 : i32 loc(#loc)
    %1222 = llvm.select %46, %1221, %7 : i1, i32 loc(#loc)
    rocdl.raw.ptr.buffer.store %1220, %1215, %1222, %64, %64 : vector<2xi32> loc(#loc)
    llvm.return loc(#loc)
  } loc(#loc)
} loc(#loc)


// -----// IR Dump Before CSE (cse) ('builtin.module' operation) //----- //
#loc = loc(unknown)
#loc1 = loc("a_base")
#loc2 = loc("stride_a0")
#loc3 = loc("b_base")
#loc4 = loc("stride_b1")
#loc5 = loc("b_scale")
#loc6 = loc("out")
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.shared = 16384 : i32, ttg.target = "hip:gfx950", "ttg.threads-per-warp" = 64 : i32} {
  llvm.mlir.global external @global_smem() {addr_space = 3 : i32, alignment = 16 : i64} : !llvm.array<0 x i8> loc(#loc)
  llvm.func @"__triton_hip_predicated_load_vector<8xbf16>_!llvm.ptr<1>_i1_vector<8xbf16>_"(!llvm.ptr<1>, i1, vector<8xbf16>) -> vector<8xbf16> attributes {libname = "", libpath = ""} loc(#loc)
  llvm.func @"__triton_hip_predicated_store_!llvm.void_!llvm.ptr<3>_vector<8xbf16>_i1_"(!llvm.ptr<3>, vector<8xbf16>, i1) attributes {libname = "", libpath = ""} loc(#loc)
  llvm.func @"__triton_hip_predicated_load_vector<8xbf16>_!llvm.ptr<3>_i1_vector<8xbf16>_"(!llvm.ptr<3>, i1, vector<8xbf16>) -> vector<8xbf16> attributes {libname = "", libpath = ""} loc(#loc)
  llvm.func @"__triton_hip_predicated_load_vector<16xi8>_!llvm.ptr<1>_i1_vector<16xi8>_"(!llvm.ptr<1>, i1, vector<16xi8>) -> vector<16xi8> attributes {libname = "", libpath = ""} loc(#loc)
  llvm.func @"__triton_hip_predicated_store_!llvm.void_!llvm.ptr<3>_vector<4xi8>_i1_"(!llvm.ptr<3>, vector<4xi8>, i1) attributes {libname = "", libpath = ""} loc(#loc)
  llvm.func @"__triton_hip_predicated_load_vector<4xi8>_!llvm.ptr<3>_i1_vector<4xi8>_"(!llvm.ptr<3>, i1, vector<4xi8>) -> vector<4xi8> attributes {libname = "", libpath = ""} loc(#loc)
  llvm.func @"__triton_hip_predicated_store_!llvm.void_!llvm.ptr<3>_vector<1xi8>_i1_"(!llvm.ptr<3>, vector<1xi8>, i1) attributes {libname = "", libpath = ""} loc(#loc)
  llvm.func @"__triton_hip_predicated_load_vector<1xi8>_!llvm.ptr<3>_i1_vector<1xi8>_"(!llvm.ptr<3>, i1, vector<1xi8>) -> vector<1xi8> attributes {libname = "", libpath = ""} loc(#loc)
  llvm.func @dot_scale_kernel(%a_base: !llvm.ptr<1> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("a_base"), %stride_a0: i32 {tt.divisibility = 16 : i32} loc("stride_a0"), %b_base: !llvm.ptr<1> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("b_base"), %stride_b1: i32 {tt.divisibility = 16 : i32} loc("stride_b1"), %b_scale: !llvm.ptr<1> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("b_scale"), %out: !llvm.ptr<1> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("out"), %arg6: !llvm.ptr<1> loc(unknown), %arg7: !llvm.ptr<1> loc(unknown)) attributes {noinline = false, nvvm.kernel = 1 : ui1, nvvm.reqntid = array<i32: 128>} {
    %0 = llvm.mlir.undef : vector<4xbf16> loc(#loc)
    %1 = llvm.mlir.undef : vector<2xf32> loc(#loc)
    %2 = llvm.mlir.undef : vector<4xf32> loc(#loc)
    %3 = llvm.mlir.constant(28 : i32) : i32 loc(#loc)
    %4 = llvm.mlir.constant(20 : i32) : i32 loc(#loc)
    %5 = llvm.mlir.undef : vector<1xi8> loc(#loc)
    %6 = llvm.mlir.constant(63 : i32) : i32 loc(#loc)
    %7 = llvm.mlir.constant(-2147483648 : i32) : i32 loc(#loc)
    %8 = llvm.mlir.constant(dense<0> : vector<1xi8>) : vector<1xi8> loc(#loc)
    %9 = llvm.mlir.constant(2147483646 : i32) : i32 loc(#loc)
    %10 = llvm.mlir.constant(159744 : i32) : i32 loc(#loc)
    %11 = llvm.mlir.constant(0 : i16) : i16 loc(#loc)
    %12 = llvm.mlir.constant(580 : i32) : i32 loc(#loc)
    %13 = llvm.mlir.constant(dense<0> : vector<4xi8>) : vector<4xi8> loc(#loc)
    %14 = llvm.mlir.constant(260 : i32) : i32 loc(#loc)
    %15 = llvm.mlir.constant(2048 : i32) : i32 loc(#loc)
    %16 = llvm.mlir.undef : vector<4xi8> loc(#loc)
    %17 = llvm.mlir.constant(576 : i32) : i32 loc(#loc)
    %18 = llvm.mlir.constant(1024 : i32) : i32 loc(#loc)
    %19 = llvm.mlir.constant(15 : index) : i32 loc(#loc)
    %20 = llvm.mlir.constant(14 : index) : i32 loc(#loc)
    %21 = llvm.mlir.constant(13 : index) : i32 loc(#loc)
    %22 = llvm.mlir.constant(12 : index) : i32 loc(#loc)
    %23 = llvm.mlir.constant(11 : index) : i32 loc(#loc)
    %24 = llvm.mlir.constant(10 : index) : i32 loc(#loc)
    %25 = llvm.mlir.constant(9 : index) : i32 loc(#loc)
    %26 = llvm.mlir.constant(8 : index) : i32 loc(#loc)
    %27 = llvm.mlir.constant(dense<0> : vector<16xi8>) : vector<16xi8> loc(#loc)
    %28 = llvm.mlir.constant(96 : i32) : i32 loc(#loc)
    %29 = llvm.mlir.constant(30 : i32) : i32 loc(#loc)
    %30 = llvm.mlir.constant(2112 : i32) : i32 loc(#loc)
    %31 = llvm.mlir.undef : vector<8xbf16> loc(#loc)
    %32 = llvm.mlir.constant(8192 : i32) : i32 loc(#loc)
    %33 = llvm.mlir.constant(256 : i32) : i32 loc(#loc)
    %34 = llvm.mlir.constant(4096 : i32) : i32 loc(#loc)
    %35 = llvm.mlir.constant(192 : i32) : i32 loc(#loc)
    %36 = llvm.mlir.constant(206 : i32) : i32 loc(#loc)
    %37 = llvm.mlir.addressof @global_smem : !llvm.ptr<3> loc(#loc)
    %38 = llvm.mlir.constant(7 : index) : i32 loc(#loc)
    %39 = llvm.mlir.constant(6 : index) : i32 loc(#loc)
    %40 = llvm.mlir.constant(5 : index) : i32 loc(#loc)
    %41 = llvm.mlir.constant(4 : index) : i32 loc(#loc)
    %42 = llvm.mlir.constant(3 : index) : i32 loc(#loc)
    %43 = llvm.mlir.constant(2 : index) : i32 loc(#loc)
    %44 = llvm.mlir.constant(1 : index) : i32 loc(#loc)
    %45 = llvm.mlir.constant(dense<0.000000e+00> : vector<8xbf16>) : vector<8xbf16> loc(#loc)
    %46 = llvm.mlir.constant(true) : i1 loc(#loc)
    %47 = llvm.mlir.constant(112 : i32) : i32 loc(#loc)
    %48 = llvm.mlir.constant(14 : i32) : i32 loc(#loc)
    %49 = llvm.mlir.constant(12 : i32) : i32 loc(#loc)
    %50 = llvm.mlir.constant(7 : i32) : i32 loc(#loc)
    %51 = llvm.mlir.constant(4 : i32) : i32 loc(#loc)
    %52 = llvm.mlir.constant(2 : i32) : i32 loc(#loc)
    %53 = llvm.mlir.constant(1 : i32) : i32 loc(#loc)
    %54 = llvm.mlir.constant(31 : i32) : i32 loc(#loc)
    %55 = llvm.mlir.constant(128 : i32) : i32 loc(#loc)
    %56 = llvm.mlir.constant(15 : i32) : i32 loc(#loc)
    %57 = llvm.mlir.constant(3 : i32) : i32 loc(#loc)
    %58 = llvm.mlir.constant(248 : i32) : i32 loc(#loc)
    %59 = llvm.mlir.constant(24 : i32) : i32 loc(#loc)
    %60 = llvm.mlir.constant(16 : i32) : i32 loc(#loc)
    %61 = llvm.mlir.constant(5 : i32) : i32 loc(#loc)
    %62 = llvm.mlir.constant(224 : i32) : i32 loc(#loc)
    %63 = llvm.mlir.constant(6 : i32) : i32 loc(#loc)
    %64 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %65 = llvm.mlir.constant(64 : i32) : i32 loc(#loc)
    %66 = llvm.mlir.constant(255 : i32) : i32 loc(#loc)
    %67 = llvm.mlir.constant(0 : index) : i32 loc(#loc)
    %68 = llvm.mlir.constant(0.000000e+00 : f32) : f32 loc(#loc)
    %69 = llvm.mlir.constant(0x7FC0 : bf16) : bf16 loc(#loc)
    %70 = llvm.mlir.constant(-1 : i8) : i8 loc(#loc)
    %71 = llvm.mlir.constant(7 : i16) : i16 loc(#loc)
    %72 = llvm.mlir.constant(8 : i32) : i32 loc(#loc)
    %73 = llvm.mlir.constant(32 : i32) : i32 loc(#loc)
    %74 = rocdl.workitem.id.x : i32 loc(#loc)
    %75 = llvm.and %74, %66 : i32 loc(#loc)
    %76 = llvm.urem %75, %65 : i32 loc(#loc)
    %77 = llvm.udiv %75, %65 : i32 loc(#loc)
    %78 = llvm.shl %76, %64 : i32 loc(#loc)
    %79 = llvm.or %64, %78 : i32 loc(#loc)
    %80 = llvm.shl %77, %63 : i32 loc(#loc)
    %81 = llvm.or %79, %80 : i32 loc(#loc)
    %82 = llvm.and %81, %62 : i32 loc(#loc)
    %83 = llvm.lshr %82, %61 : i32 loc(#loc)
    %84 = llvm.xor %64, %83 : i32 loc(#loc)
    %85 = llvm.xor %64, %84 : i32 loc(#loc)
    %86 = llvm.xor %85, %64 : i32 loc(#loc)
    %87 = llvm.xor %85, %72 : i32 loc(#loc)
    %88 = llvm.xor %85, %60 : i32 loc(#loc)
    %89 = llvm.xor %85, %59 : i32 loc(#loc)
    %90 = llvm.add %86, %67 : i32 loc(#loc)
    %91 = llvm.add %87, %67 : i32 loc(#loc)
    %92 = llvm.add %88, %67 : i32 loc(#loc)
    %93 = llvm.add %89, %67 : i32 loc(#loc)
    %94 = llvm.and %81, %58 : i32 loc(#loc)
    %95 = llvm.lshr %94, %57 : i32 loc(#loc)
    %96 = llvm.xor %64, %95 : i32 loc(#loc)
    %97 = llvm.xor %64, %96 : i32 loc(#loc)
    %98 = llvm.xor %97, %64 : i32 loc(#loc)
    %99 = llvm.add %98, %67 : i32 loc(#loc)
    %100 = llvm.and %81, %56 : i32 loc(#loc)
    %101 = llvm.lshr %100, %64 : i32 loc(#loc)
    %102 = llvm.xor %64, %101 : i32 loc(#loc)
    %103 = llvm.and %81, %55 : i32 loc(#loc)
    %104 = llvm.icmp "eq" %103, %64 : i32 loc(#loc)
    %105 = llvm.select %104, %64, %60 : i1, i32 loc(#loc)
    %106 = llvm.xor %102, %105 : i32 loc(#loc)
    %107 = llvm.xor %64, %106 : i32 loc(#loc)
    %108 = llvm.xor %107, %64 : i32 loc(#loc)
    %109 = llvm.add %108, %67 : i32 loc(#loc)
    %110 = llvm.mul %90, %stride_a0 : i32 loc(#loc)
    %111 = llvm.mul %91, %stride_a0 : i32 loc(#loc)
    %112 = llvm.mul %92, %stride_a0 : i32 loc(#loc)
    %113 = llvm.mul %93, %stride_a0 : i32 loc(#loc)
    %114 = llvm.and %81, %54 : i32 loc(#loc)
    %115 = llvm.shl %114, %57 : i32 loc(#loc)
    %116 = llvm.xor %64, %115 : i32 loc(#loc)
    %117 = llvm.xor %64, %116 : i32 loc(#loc)
    %118 = llvm.xor %117, %64 : i32 loc(#loc)
    %119 = llvm.add %118, %67 : i32 loc(#loc)
    %120 = llvm.add %119, %110 : i32 loc(#loc)
    %121 = llvm.add %119, %111 : i32 loc(#loc)
    %122 = llvm.add %119, %112 : i32 loc(#loc)
    %123 = llvm.add %119, %113 : i32 loc(#loc)
    %124 = llvm.and %81, %50 : i32 loc(#loc)
    %125 = llvm.shl %124, %51 : i32 loc(#loc)
    %126 = llvm.xor %64, %125 : i32 loc(#loc)
    %127 = llvm.xor %64, %126 : i32 loc(#loc)
    %128 = llvm.xor %127, %64 : i32 loc(#loc)
    %129 = llvm.add %128, %67 : i32 loc(#loc)
    %130 = llvm.and %81, %47 : i32 loc(#loc)
    %131 = llvm.lshr %130, %52 : i32 loc(#loc)
    %132 = llvm.xor %64, %131 : i32 loc(#loc)
    %133 = llvm.xor %64, %132 : i32 loc(#loc)
    %134 = llvm.xor %133, %64 : i32 loc(#loc)
    %135 = llvm.add %134, %67 : i32 loc(#loc)
    %136 = llvm.mul %99, %stride_b1 : i32 loc(#loc)
    %137 = llvm.add %136, %129 : i32 loc(#loc)
    %138 = llvm.getelementptr %a_base[%120] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc)
    %139 = llvm.getelementptr %a_base[%121] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc)
    %140 = llvm.getelementptr %a_base[%122] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc)
    %141 = llvm.getelementptr %a_base[%123] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc)
    %142 = llvm.call @"__triton_hip_predicated_load_vector<8xbf16>_!llvm.ptr<1>_i1_vector<8xbf16>_"(%138, %46, %45) : (!llvm.ptr<1>, i1, vector<8xbf16>) -> vector<8xbf16> loc(#loc)
    %143 = llvm.extractelement %142[%67 : i32] : vector<8xbf16> loc(#loc)
    %144 = llvm.extractelement %142[%44 : i32] : vector<8xbf16> loc(#loc)
    %145 = llvm.extractelement %142[%43 : i32] : vector<8xbf16> loc(#loc)
    %146 = llvm.extractelement %142[%42 : i32] : vector<8xbf16> loc(#loc)
    %147 = llvm.extractelement %142[%41 : i32] : vector<8xbf16> loc(#loc)
    %148 = llvm.extractelement %142[%40 : i32] : vector<8xbf16> loc(#loc)
    %149 = llvm.extractelement %142[%39 : i32] : vector<8xbf16> loc(#loc)
    %150 = llvm.extractelement %142[%38 : i32] : vector<8xbf16> loc(#loc)
    %151 = llvm.call @"__triton_hip_predicated_load_vector<8xbf16>_!llvm.ptr<1>_i1_vector<8xbf16>_"(%139, %46, %45) : (!llvm.ptr<1>, i1, vector<8xbf16>) -> vector<8xbf16> loc(#loc)
    %152 = llvm.extractelement %151[%67 : i32] : vector<8xbf16> loc(#loc)
    %153 = llvm.extractelement %151[%44 : i32] : vector<8xbf16> loc(#loc)
    %154 = llvm.extractelement %151[%43 : i32] : vector<8xbf16> loc(#loc)
    %155 = llvm.extractelement %151[%42 : i32] : vector<8xbf16> loc(#loc)
    %156 = llvm.extractelement %151[%41 : i32] : vector<8xbf16> loc(#loc)
    %157 = llvm.extractelement %151[%40 : i32] : vector<8xbf16> loc(#loc)
    %158 = llvm.extractelement %151[%39 : i32] : vector<8xbf16> loc(#loc)
    %159 = llvm.extractelement %151[%38 : i32] : vector<8xbf16> loc(#loc)
    %160 = llvm.call @"__triton_hip_predicated_load_vector<8xbf16>_!llvm.ptr<1>_i1_vector<8xbf16>_"(%140, %46, %45) : (!llvm.ptr<1>, i1, vector<8xbf16>) -> vector<8xbf16> loc(#loc)
    %161 = llvm.extractelement %160[%67 : i32] : vector<8xbf16> loc(#loc)
    %162 = llvm.extractelement %160[%44 : i32] : vector<8xbf16> loc(#loc)
    %163 = llvm.extractelement %160[%43 : i32] : vector<8xbf16> loc(#loc)
    %164 = llvm.extractelement %160[%42 : i32] : vector<8xbf16> loc(#loc)
    %165 = llvm.extractelement %160[%41 : i32] : vector<8xbf16> loc(#loc)
    %166 = llvm.extractelement %160[%40 : i32] : vector<8xbf16> loc(#loc)
    %167 = llvm.extractelement %160[%39 : i32] : vector<8xbf16> loc(#loc)
    %168 = llvm.extractelement %160[%38 : i32] : vector<8xbf16> loc(#loc)
    %169 = llvm.call @"__triton_hip_predicated_load_vector<8xbf16>_!llvm.ptr<1>_i1_vector<8xbf16>_"(%141, %46, %45) : (!llvm.ptr<1>, i1, vector<8xbf16>) -> vector<8xbf16> loc(#loc)
    %170 = llvm.extractelement %169[%67 : i32] : vector<8xbf16> loc(#loc)
    %171 = llvm.extractelement %169[%44 : i32] : vector<8xbf16> loc(#loc)
    %172 = llvm.extractelement %169[%43 : i32] : vector<8xbf16> loc(#loc)
    %173 = llvm.extractelement %169[%42 : i32] : vector<8xbf16> loc(#loc)
    %174 = llvm.extractelement %169[%41 : i32] : vector<8xbf16> loc(#loc)
    %175 = llvm.extractelement %169[%40 : i32] : vector<8xbf16> loc(#loc)
    %176 = llvm.extractelement %169[%39 : i32] : vector<8xbf16> loc(#loc)
    %177 = llvm.extractelement %169[%38 : i32] : vector<8xbf16> loc(#loc)
    %178 = llvm.and %81, %36 : i32 loc(#loc)
    %179 = llvm.shl %178, %57 : i32 loc(#loc)
    %180 = llvm.xor %64, %179 : i32 loc(#loc)
    %181 = llvm.and %81, %35 : i32 loc(#loc)
    %182 = llvm.lshr %181, %52 : i32 loc(#loc)
    %183 = llvm.xor %180, %182 : i32 loc(#loc)
    %184 = llvm.and %81, %53 : i32 loc(#loc)
    %185 = llvm.icmp "eq" %184, %64 : i32 loc(#loc)
    %186 = llvm.select %185, %64, %34 : i1, i32 loc(#loc)
    %187 = llvm.xor %183, %186 : i32 loc(#loc)
    %188 = llvm.and %81, %60 : i32 loc(#loc)
    %189 = llvm.icmp "eq" %188, %64 : i32 loc(#loc)
    %190 = llvm.select %189, %64, %33 : i1, i32 loc(#loc)
    %191 = llvm.xor %187, %190 : i32 loc(#loc)
    %192 = llvm.and %81, %73 : i32 loc(#loc)
    %193 = llvm.icmp "eq" %192, %64 : i32 loc(#loc)
    %194 = llvm.select %193, %64, %32 : i1, i32 loc(#loc)
    %195 = llvm.xor %191, %194 : i32 loc(#loc)
    %196 = llvm.xor %64, %195 : i32 loc(#loc)
    %197 = llvm.mul %64, %52 : i32 loc(#loc)
    %198 = llvm.xor %196, %197 : i32 loc(#loc)
    %199 = llvm.xor %198, %64 : i32 loc(#loc)
    %200 = llvm.add %199, %64 : i32 loc(#loc)
    %201 = llvm.getelementptr inbounds %37[%200] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %202 = llvm.insertelement %143, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %203 = llvm.insertelement %144, %202[%53 : i32] : vector<8xbf16> loc(#loc)
    %204 = llvm.insertelement %145, %203[%52 : i32] : vector<8xbf16> loc(#loc)
    %205 = llvm.insertelement %146, %204[%57 : i32] : vector<8xbf16> loc(#loc)
    %206 = llvm.insertelement %147, %205[%51 : i32] : vector<8xbf16> loc(#loc)
    %207 = llvm.insertelement %148, %206[%61 : i32] : vector<8xbf16> loc(#loc)
    %208 = llvm.insertelement %149, %207[%63 : i32] : vector<8xbf16> loc(#loc)
    %209 = llvm.insertelement %150, %208[%50 : i32] : vector<8xbf16> loc(#loc)
    llvm.call @"__triton_hip_predicated_store_!llvm.void_!llvm.ptr<3>_vector<8xbf16>_i1_"(%201, %209, %46) : (!llvm.ptr<3>, vector<8xbf16>, i1) -> () loc(#loc)
    %210 = llvm.add %199, %55 : i32 loc(#loc)
    %211 = llvm.getelementptr inbounds %37[%210] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %212 = llvm.insertelement %161, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %213 = llvm.insertelement %162, %212[%53 : i32] : vector<8xbf16> loc(#loc)
    %214 = llvm.insertelement %163, %213[%52 : i32] : vector<8xbf16> loc(#loc)
    %215 = llvm.insertelement %164, %214[%57 : i32] : vector<8xbf16> loc(#loc)
    %216 = llvm.insertelement %165, %215[%51 : i32] : vector<8xbf16> loc(#loc)
    %217 = llvm.insertelement %166, %216[%61 : i32] : vector<8xbf16> loc(#loc)
    %218 = llvm.insertelement %167, %217[%63 : i32] : vector<8xbf16> loc(#loc)
    %219 = llvm.insertelement %168, %218[%50 : i32] : vector<8xbf16> loc(#loc)
    llvm.call @"__triton_hip_predicated_store_!llvm.void_!llvm.ptr<3>_vector<8xbf16>_i1_"(%211, %219, %46) : (!llvm.ptr<3>, vector<8xbf16>, i1) -> () loc(#loc)
    %220 = llvm.xor %198, %30 : i32 loc(#loc)
    %221 = llvm.add %220, %64 : i32 loc(#loc)
    %222 = llvm.getelementptr inbounds %37[%221] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %223 = llvm.insertelement %152, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %224 = llvm.insertelement %153, %223[%53 : i32] : vector<8xbf16> loc(#loc)
    %225 = llvm.insertelement %154, %224[%52 : i32] : vector<8xbf16> loc(#loc)
    %226 = llvm.insertelement %155, %225[%57 : i32] : vector<8xbf16> loc(#loc)
    %227 = llvm.insertelement %156, %226[%51 : i32] : vector<8xbf16> loc(#loc)
    %228 = llvm.insertelement %157, %227[%61 : i32] : vector<8xbf16> loc(#loc)
    %229 = llvm.insertelement %158, %228[%63 : i32] : vector<8xbf16> loc(#loc)
    %230 = llvm.insertelement %159, %229[%50 : i32] : vector<8xbf16> loc(#loc)
    llvm.call @"__triton_hip_predicated_store_!llvm.void_!llvm.ptr<3>_vector<8xbf16>_i1_"(%222, %230, %46) : (!llvm.ptr<3>, vector<8xbf16>, i1) -> () loc(#loc)
    %231 = llvm.add %220, %55 : i32 loc(#loc)
    %232 = llvm.getelementptr inbounds %37[%231] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %233 = llvm.insertelement %170, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %234 = llvm.insertelement %171, %233[%53 : i32] : vector<8xbf16> loc(#loc)
    %235 = llvm.insertelement %172, %234[%52 : i32] : vector<8xbf16> loc(#loc)
    %236 = llvm.insertelement %173, %235[%57 : i32] : vector<8xbf16> loc(#loc)
    %237 = llvm.insertelement %174, %236[%51 : i32] : vector<8xbf16> loc(#loc)
    %238 = llvm.insertelement %175, %237[%61 : i32] : vector<8xbf16> loc(#loc)
    %239 = llvm.insertelement %176, %238[%63 : i32] : vector<8xbf16> loc(#loc)
    %240 = llvm.insertelement %177, %239[%50 : i32] : vector<8xbf16> loc(#loc)
    llvm.call @"__triton_hip_predicated_store_!llvm.void_!llvm.ptr<3>_vector<8xbf16>_i1_"(%232, %240, %46) : (!llvm.ptr<3>, vector<8xbf16>, i1) -> () loc(#loc)
    rocdl.barrier loc(#loc)
    %241 = llvm.and %81, %29 : i32 loc(#loc)
    %242 = llvm.shl %241, %72 : i32 loc(#loc)
    %243 = llvm.xor %64, %242 : i32 loc(#loc)
    %244 = llvm.and %81, %48 : i32 loc(#loc)
    %245 = llvm.shl %244, %57 : i32 loc(#loc)
    %246 = llvm.xor %243, %245 : i32 loc(#loc)
    %247 = llvm.select %185, %64, %32 : i1, i32 loc(#loc)
    %248 = llvm.xor %246, %247 : i32 loc(#loc)
    %249 = llvm.select %193, %64, %60 : i1, i32 loc(#loc)
    %250 = llvm.xor %248, %249 : i32 loc(#loc)
    %251 = llvm.select %104, %64, %55 : i1, i32 loc(#loc)
    %252 = llvm.xor %250, %251 : i32 loc(#loc)
    %253 = llvm.xor %64, %252 : i32 loc(#loc)
    %254 = llvm.xor %253, %197 : i32 loc(#loc)
    %255 = llvm.xor %254, %64 : i32 loc(#loc)
    %256 = llvm.add %255, %64 : i32 loc(#loc)
    %257 = llvm.getelementptr inbounds %37[%256] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %258 = llvm.call @"__triton_hip_predicated_load_vector<8xbf16>_!llvm.ptr<3>_i1_vector<8xbf16>_"(%257, %46, %45) : (!llvm.ptr<3>, i1, vector<8xbf16>) -> vector<8xbf16> loc(#loc)
    %259 = llvm.extractelement %258[%64 : i32] : vector<8xbf16> loc(#loc)
    %260 = llvm.extractelement %258[%53 : i32] : vector<8xbf16> loc(#loc)
    %261 = llvm.extractelement %258[%52 : i32] : vector<8xbf16> loc(#loc)
    %262 = llvm.extractelement %258[%57 : i32] : vector<8xbf16> loc(#loc)
    %263 = llvm.extractelement %258[%51 : i32] : vector<8xbf16> loc(#loc)
    %264 = llvm.extractelement %258[%61 : i32] : vector<8xbf16> loc(#loc)
    %265 = llvm.extractelement %258[%63 : i32] : vector<8xbf16> loc(#loc)
    %266 = llvm.extractelement %258[%50 : i32] : vector<8xbf16> loc(#loc)
    %267 = llvm.add %255, %33 : i32 loc(#loc)
    %268 = llvm.getelementptr inbounds %37[%267] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %269 = llvm.call @"__triton_hip_predicated_load_vector<8xbf16>_!llvm.ptr<3>_i1_vector<8xbf16>_"(%268, %46, %45) : (!llvm.ptr<3>, i1, vector<8xbf16>) -> vector<8xbf16> loc(#loc)
    %270 = llvm.extractelement %269[%64 : i32] : vector<8xbf16> loc(#loc)
    %271 = llvm.extractelement %269[%53 : i32] : vector<8xbf16> loc(#loc)
    %272 = llvm.extractelement %269[%52 : i32] : vector<8xbf16> loc(#loc)
    %273 = llvm.extractelement %269[%57 : i32] : vector<8xbf16> loc(#loc)
    %274 = llvm.extractelement %269[%51 : i32] : vector<8xbf16> loc(#loc)
    %275 = llvm.extractelement %269[%61 : i32] : vector<8xbf16> loc(#loc)
    %276 = llvm.extractelement %269[%63 : i32] : vector<8xbf16> loc(#loc)
    %277 = llvm.extractelement %269[%50 : i32] : vector<8xbf16> loc(#loc)
    %278 = llvm.xor %254, %73 : i32 loc(#loc)
    %279 = llvm.add %278, %64 : i32 loc(#loc)
    %280 = llvm.getelementptr inbounds %37[%279] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %281 = llvm.call @"__triton_hip_predicated_load_vector<8xbf16>_!llvm.ptr<3>_i1_vector<8xbf16>_"(%280, %46, %45) : (!llvm.ptr<3>, i1, vector<8xbf16>) -> vector<8xbf16> loc(#loc)
    %282 = llvm.extractelement %281[%64 : i32] : vector<8xbf16> loc(#loc)
    %283 = llvm.extractelement %281[%53 : i32] : vector<8xbf16> loc(#loc)
    %284 = llvm.extractelement %281[%52 : i32] : vector<8xbf16> loc(#loc)
    %285 = llvm.extractelement %281[%57 : i32] : vector<8xbf16> loc(#loc)
    %286 = llvm.extractelement %281[%51 : i32] : vector<8xbf16> loc(#loc)
    %287 = llvm.extractelement %281[%61 : i32] : vector<8xbf16> loc(#loc)
    %288 = llvm.extractelement %281[%63 : i32] : vector<8xbf16> loc(#loc)
    %289 = llvm.extractelement %281[%50 : i32] : vector<8xbf16> loc(#loc)
    %290 = llvm.add %278, %33 : i32 loc(#loc)
    %291 = llvm.getelementptr inbounds %37[%290] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %292 = llvm.call @"__triton_hip_predicated_load_vector<8xbf16>_!llvm.ptr<3>_i1_vector<8xbf16>_"(%291, %46, %45) : (!llvm.ptr<3>, i1, vector<8xbf16>) -> vector<8xbf16> loc(#loc)
    %293 = llvm.extractelement %292[%64 : i32] : vector<8xbf16> loc(#loc)
    %294 = llvm.extractelement %292[%53 : i32] : vector<8xbf16> loc(#loc)
    %295 = llvm.extractelement %292[%52 : i32] : vector<8xbf16> loc(#loc)
    %296 = llvm.extractelement %292[%57 : i32] : vector<8xbf16> loc(#loc)
    %297 = llvm.extractelement %292[%51 : i32] : vector<8xbf16> loc(#loc)
    %298 = llvm.extractelement %292[%61 : i32] : vector<8xbf16> loc(#loc)
    %299 = llvm.extractelement %292[%63 : i32] : vector<8xbf16> loc(#loc)
    %300 = llvm.extractelement %292[%50 : i32] : vector<8xbf16> loc(#loc)
    %301 = llvm.xor %254, %65 : i32 loc(#loc)
    %302 = llvm.add %301, %64 : i32 loc(#loc)
    %303 = llvm.getelementptr inbounds %37[%302] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %304 = llvm.call @"__triton_hip_predicated_load_vector<8xbf16>_!llvm.ptr<3>_i1_vector<8xbf16>_"(%303, %46, %45) : (!llvm.ptr<3>, i1, vector<8xbf16>) -> vector<8xbf16> loc(#loc)
    %305 = llvm.extractelement %304[%64 : i32] : vector<8xbf16> loc(#loc)
    %306 = llvm.extractelement %304[%53 : i32] : vector<8xbf16> loc(#loc)
    %307 = llvm.extractelement %304[%52 : i32] : vector<8xbf16> loc(#loc)
    %308 = llvm.extractelement %304[%57 : i32] : vector<8xbf16> loc(#loc)
    %309 = llvm.extractelement %304[%51 : i32] : vector<8xbf16> loc(#loc)
    %310 = llvm.extractelement %304[%61 : i32] : vector<8xbf16> loc(#loc)
    %311 = llvm.extractelement %304[%63 : i32] : vector<8xbf16> loc(#loc)
    %312 = llvm.extractelement %304[%50 : i32] : vector<8xbf16> loc(#loc)
    %313 = llvm.add %301, %33 : i32 loc(#loc)
    %314 = llvm.getelementptr inbounds %37[%313] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %315 = llvm.call @"__triton_hip_predicated_load_vector<8xbf16>_!llvm.ptr<3>_i1_vector<8xbf16>_"(%314, %46, %45) : (!llvm.ptr<3>, i1, vector<8xbf16>) -> vector<8xbf16> loc(#loc)
    %316 = llvm.extractelement %315[%64 : i32] : vector<8xbf16> loc(#loc)
    %317 = llvm.extractelement %315[%53 : i32] : vector<8xbf16> loc(#loc)
    %318 = llvm.extractelement %315[%52 : i32] : vector<8xbf16> loc(#loc)
    %319 = llvm.extractelement %315[%57 : i32] : vector<8xbf16> loc(#loc)
    %320 = llvm.extractelement %315[%51 : i32] : vector<8xbf16> loc(#loc)
    %321 = llvm.extractelement %315[%61 : i32] : vector<8xbf16> loc(#loc)
    %322 = llvm.extractelement %315[%63 : i32] : vector<8xbf16> loc(#loc)
    %323 = llvm.extractelement %315[%50 : i32] : vector<8xbf16> loc(#loc)
    %324 = llvm.xor %254, %28 : i32 loc(#loc)
    %325 = llvm.add %324, %64 : i32 loc(#loc)
    %326 = llvm.getelementptr inbounds %37[%325] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %327 = llvm.call @"__triton_hip_predicated_load_vector<8xbf16>_!llvm.ptr<3>_i1_vector<8xbf16>_"(%326, %46, %45) : (!llvm.ptr<3>, i1, vector<8xbf16>) -> vector<8xbf16> loc(#loc)
    %328 = llvm.extractelement %327[%64 : i32] : vector<8xbf16> loc(#loc)
    %329 = llvm.extractelement %327[%53 : i32] : vector<8xbf16> loc(#loc)
    %330 = llvm.extractelement %327[%52 : i32] : vector<8xbf16> loc(#loc)
    %331 = llvm.extractelement %327[%57 : i32] : vector<8xbf16> loc(#loc)
    %332 = llvm.extractelement %327[%51 : i32] : vector<8xbf16> loc(#loc)
    %333 = llvm.extractelement %327[%61 : i32] : vector<8xbf16> loc(#loc)
    %334 = llvm.extractelement %327[%63 : i32] : vector<8xbf16> loc(#loc)
    %335 = llvm.extractelement %327[%50 : i32] : vector<8xbf16> loc(#loc)
    %336 = llvm.add %324, %33 : i32 loc(#loc)
    %337 = llvm.getelementptr inbounds %37[%336] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %338 = llvm.call @"__triton_hip_predicated_load_vector<8xbf16>_!llvm.ptr<3>_i1_vector<8xbf16>_"(%337, %46, %45) : (!llvm.ptr<3>, i1, vector<8xbf16>) -> vector<8xbf16> loc(#loc)
    %339 = llvm.extractelement %338[%64 : i32] : vector<8xbf16> loc(#loc)
    %340 = llvm.extractelement %338[%53 : i32] : vector<8xbf16> loc(#loc)
    %341 = llvm.extractelement %338[%52 : i32] : vector<8xbf16> loc(#loc)
    %342 = llvm.extractelement %338[%57 : i32] : vector<8xbf16> loc(#loc)
    %343 = llvm.extractelement %338[%51 : i32] : vector<8xbf16> loc(#loc)
    %344 = llvm.extractelement %338[%61 : i32] : vector<8xbf16> loc(#loc)
    %345 = llvm.extractelement %338[%63 : i32] : vector<8xbf16> loc(#loc)
    %346 = llvm.extractelement %338[%50 : i32] : vector<8xbf16> loc(#loc)
    %347 = llvm.getelementptr %b_base[%137] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, i8 loc(#loc)
    %348 = llvm.call @"__triton_hip_predicated_load_vector<16xi8>_!llvm.ptr<1>_i1_vector<16xi8>_"(%347, %46, %27) : (!llvm.ptr<1>, i1, vector<16xi8>) -> vector<16xi8> loc(#loc)
    %349 = llvm.extractelement %348[%67 : i32] : vector<16xi8> loc(#loc)
    %350 = llvm.extractelement %348[%44 : i32] : vector<16xi8> loc(#loc)
    %351 = llvm.extractelement %348[%43 : i32] : vector<16xi8> loc(#loc)
    %352 = llvm.extractelement %348[%42 : i32] : vector<16xi8> loc(#loc)
    %353 = llvm.extractelement %348[%41 : i32] : vector<16xi8> loc(#loc)
    %354 = llvm.extractelement %348[%40 : i32] : vector<16xi8> loc(#loc)
    %355 = llvm.extractelement %348[%39 : i32] : vector<16xi8> loc(#loc)
    %356 = llvm.extractelement %348[%38 : i32] : vector<16xi8> loc(#loc)
    %357 = llvm.extractelement %348[%26 : i32] : vector<16xi8> loc(#loc)
    %358 = llvm.extractelement %348[%25 : i32] : vector<16xi8> loc(#loc)
    %359 = llvm.extractelement %348[%24 : i32] : vector<16xi8> loc(#loc)
    %360 = llvm.extractelement %348[%23 : i32] : vector<16xi8> loc(#loc)
    %361 = llvm.extractelement %348[%22 : i32] : vector<16xi8> loc(#loc)
    %362 = llvm.extractelement %348[%21 : i32] : vector<16xi8> loc(#loc)
    %363 = llvm.extractelement %348[%20 : i32] : vector<16xi8> loc(#loc)
    %364 = llvm.extractelement %348[%19 : i32] : vector<16xi8> loc(#loc)
    rocdl.barrier loc(#loc)
    %365 = llvm.lshr %94, %64 : i32 loc(#loc)
    %366 = llvm.xor %64, %365 : i32 loc(#loc)
    %367 = llvm.select %185, %64, %18 : i1, i32 loc(#loc)
    %368 = llvm.xor %366, %367 : i32 loc(#loc)
    %369 = llvm.and %81, %52 : i32 loc(#loc)
    %370 = llvm.icmp "eq" %369, %64 : i32 loc(#loc)
    %371 = llvm.select %370, %64, %51 : i1, i32 loc(#loc)
    %372 = llvm.xor %368, %371 : i32 loc(#loc)
    %373 = llvm.and %81, %51 : i32 loc(#loc)
    %374 = llvm.icmp "eq" %373, %64 : i32 loc(#loc)
    %375 = llvm.select %374, %64, %17 : i1, i32 loc(#loc)
    %376 = llvm.xor %372, %375 : i32 loc(#loc)
    %377 = llvm.xor %64, %376 : i32 loc(#loc)
    %378 = llvm.mul %64, %53 : i32 loc(#loc)
    %379 = llvm.xor %377, %378 : i32 loc(#loc)
    %380 = llvm.xor %379, %64 : i32 loc(#loc)
    %381 = llvm.add %380, %64 : i32 loc(#loc)
    %382 = llvm.getelementptr inbounds %37[%381] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %383 = llvm.insertelement %349, %16[%64 : i32] : vector<4xi8> loc(#loc)
    %384 = llvm.insertelement %350, %383[%53 : i32] : vector<4xi8> loc(#loc)
    %385 = llvm.insertelement %351, %384[%52 : i32] : vector<4xi8> loc(#loc)
    %386 = llvm.insertelement %352, %385[%57 : i32] : vector<4xi8> loc(#loc)
    llvm.call @"__triton_hip_predicated_store_!llvm.void_!llvm.ptr<3>_vector<4xi8>_i1_"(%382, %386, %46) : (!llvm.ptr<3>, vector<4xi8>, i1) -> () loc(#loc)
    %387 = llvm.add %380, %15 : i32 loc(#loc)
    %388 = llvm.getelementptr inbounds %37[%387] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %389 = llvm.insertelement %353, %16[%64 : i32] : vector<4xi8> loc(#loc)
    %390 = llvm.insertelement %354, %389[%53 : i32] : vector<4xi8> loc(#loc)
    %391 = llvm.insertelement %355, %390[%52 : i32] : vector<4xi8> loc(#loc)
    %392 = llvm.insertelement %356, %391[%57 : i32] : vector<4xi8> loc(#loc)
    llvm.call @"__triton_hip_predicated_store_!llvm.void_!llvm.ptr<3>_vector<4xi8>_i1_"(%388, %392, %46) : (!llvm.ptr<3>, vector<4xi8>, i1) -> () loc(#loc)
    %393 = llvm.xor %379, %14 : i32 loc(#loc)
    %394 = llvm.add %393, %64 : i32 loc(#loc)
    %395 = llvm.getelementptr inbounds %37[%394] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %396 = llvm.insertelement %357, %16[%64 : i32] : vector<4xi8> loc(#loc)
    %397 = llvm.insertelement %358, %396[%53 : i32] : vector<4xi8> loc(#loc)
    %398 = llvm.insertelement %359, %397[%52 : i32] : vector<4xi8> loc(#loc)
    %399 = llvm.insertelement %360, %398[%57 : i32] : vector<4xi8> loc(#loc)
    llvm.call @"__triton_hip_predicated_store_!llvm.void_!llvm.ptr<3>_vector<4xi8>_i1_"(%395, %399, %46) : (!llvm.ptr<3>, vector<4xi8>, i1) -> () loc(#loc)
    %400 = llvm.add %393, %15 : i32 loc(#loc)
    %401 = llvm.getelementptr inbounds %37[%400] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %402 = llvm.insertelement %361, %16[%64 : i32] : vector<4xi8> loc(#loc)
    %403 = llvm.insertelement %362, %402[%53 : i32] : vector<4xi8> loc(#loc)
    %404 = llvm.insertelement %363, %403[%52 : i32] : vector<4xi8> loc(#loc)
    %405 = llvm.insertelement %364, %404[%57 : i32] : vector<4xi8> loc(#loc)
    llvm.call @"__triton_hip_predicated_store_!llvm.void_!llvm.ptr<3>_vector<4xi8>_i1_"(%401, %405, %46) : (!llvm.ptr<3>, vector<4xi8>, i1) -> () loc(#loc)
    rocdl.barrier loc(#loc)
    %406 = llvm.shl %100, %57 : i32 loc(#loc)
    %407 = llvm.xor %64, %406 : i32 loc(#loc)
    %408 = llvm.select %189, %64, %15 : i1, i32 loc(#loc)
    %409 = llvm.xor %407, %408 : i32 loc(#loc)
    %410 = llvm.select %193, %64, %14 : i1, i32 loc(#loc)
    %411 = llvm.xor %409, %410 : i32 loc(#loc)
    %412 = llvm.and %81, %65 : i32 loc(#loc)
    %413 = llvm.icmp "eq" %412, %64 : i32 loc(#loc)
    %414 = llvm.select %413, %64, %55 : i1, i32 loc(#loc)
    %415 = llvm.xor %411, %414 : i32 loc(#loc)
    %416 = llvm.xor %64, %415 : i32 loc(#loc)
    %417 = llvm.xor %416, %378 : i32 loc(#loc)
    %418 = llvm.xor %417, %64 : i32 loc(#loc)
    %419 = llvm.add %418, %64 : i32 loc(#loc)
    %420 = llvm.getelementptr inbounds %37[%419] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %421 = llvm.call @"__triton_hip_predicated_load_vector<4xi8>_!llvm.ptr<3>_i1_vector<4xi8>_"(%420, %46, %13) : (!llvm.ptr<3>, i1, vector<4xi8>) -> vector<4xi8> loc(#loc)
    %422 = llvm.extractelement %421[%64 : i32] : vector<4xi8> loc(#loc)
    %423 = llvm.extractelement %421[%53 : i32] : vector<4xi8> loc(#loc)
    %424 = llvm.extractelement %421[%52 : i32] : vector<4xi8> loc(#loc)
    %425 = llvm.extractelement %421[%57 : i32] : vector<4xi8> loc(#loc)
    %426 = llvm.add %418, %18 : i32 loc(#loc)
    %427 = llvm.getelementptr inbounds %37[%426] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %428 = llvm.call @"__triton_hip_predicated_load_vector<4xi8>_!llvm.ptr<3>_i1_vector<4xi8>_"(%427, %46, %13) : (!llvm.ptr<3>, i1, vector<4xi8>) -> vector<4xi8> loc(#loc)
    %429 = llvm.extractelement %428[%64 : i32] : vector<4xi8> loc(#loc)
    %430 = llvm.extractelement %428[%53 : i32] : vector<4xi8> loc(#loc)
    %431 = llvm.extractelement %428[%52 : i32] : vector<4xi8> loc(#loc)
    %432 = llvm.extractelement %428[%57 : i32] : vector<4xi8> loc(#loc)
    %433 = llvm.xor %417, %17 : i32 loc(#loc)
    %434 = llvm.add %433, %64 : i32 loc(#loc)
    %435 = llvm.getelementptr inbounds %37[%434] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %436 = llvm.call @"__triton_hip_predicated_load_vector<4xi8>_!llvm.ptr<3>_i1_vector<4xi8>_"(%435, %46, %13) : (!llvm.ptr<3>, i1, vector<4xi8>) -> vector<4xi8> loc(#loc)
    %437 = llvm.extractelement %436[%64 : i32] : vector<4xi8> loc(#loc)
    %438 = llvm.extractelement %436[%53 : i32] : vector<4xi8> loc(#loc)
    %439 = llvm.extractelement %436[%52 : i32] : vector<4xi8> loc(#loc)
    %440 = llvm.extractelement %436[%57 : i32] : vector<4xi8> loc(#loc)
    %441 = llvm.add %433, %18 : i32 loc(#loc)
    %442 = llvm.getelementptr inbounds %37[%441] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %443 = llvm.call @"__triton_hip_predicated_load_vector<4xi8>_!llvm.ptr<3>_i1_vector<4xi8>_"(%442, %46, %13) : (!llvm.ptr<3>, i1, vector<4xi8>) -> vector<4xi8> loc(#loc)
    %444 = llvm.extractelement %443[%64 : i32] : vector<4xi8> loc(#loc)
    %445 = llvm.extractelement %443[%53 : i32] : vector<4xi8> loc(#loc)
    %446 = llvm.extractelement %443[%52 : i32] : vector<4xi8> loc(#loc)
    %447 = llvm.extractelement %443[%57 : i32] : vector<4xi8> loc(#loc)
    %448 = llvm.xor %417, %51 : i32 loc(#loc)
    %449 = llvm.add %448, %64 : i32 loc(#loc)
    %450 = llvm.getelementptr inbounds %37[%449] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %451 = llvm.call @"__triton_hip_predicated_load_vector<4xi8>_!llvm.ptr<3>_i1_vector<4xi8>_"(%450, %46, %13) : (!llvm.ptr<3>, i1, vector<4xi8>) -> vector<4xi8> loc(#loc)
    %452 = llvm.extractelement %451[%64 : i32] : vector<4xi8> loc(#loc)
    %453 = llvm.extractelement %451[%53 : i32] : vector<4xi8> loc(#loc)
    %454 = llvm.extractelement %451[%52 : i32] : vector<4xi8> loc(#loc)
    %455 = llvm.extractelement %451[%57 : i32] : vector<4xi8> loc(#loc)
    %456 = llvm.add %448, %18 : i32 loc(#loc)
    %457 = llvm.getelementptr inbounds %37[%456] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %458 = llvm.call @"__triton_hip_predicated_load_vector<4xi8>_!llvm.ptr<3>_i1_vector<4xi8>_"(%457, %46, %13) : (!llvm.ptr<3>, i1, vector<4xi8>) -> vector<4xi8> loc(#loc)
    %459 = llvm.extractelement %458[%64 : i32] : vector<4xi8> loc(#loc)
    %460 = llvm.extractelement %458[%53 : i32] : vector<4xi8> loc(#loc)
    %461 = llvm.extractelement %458[%52 : i32] : vector<4xi8> loc(#loc)
    %462 = llvm.extractelement %458[%57 : i32] : vector<4xi8> loc(#loc)
    %463 = llvm.xor %417, %12 : i32 loc(#loc)
    %464 = llvm.add %463, %64 : i32 loc(#loc)
    %465 = llvm.getelementptr inbounds %37[%464] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %466 = llvm.call @"__triton_hip_predicated_load_vector<4xi8>_!llvm.ptr<3>_i1_vector<4xi8>_"(%465, %46, %13) : (!llvm.ptr<3>, i1, vector<4xi8>) -> vector<4xi8> loc(#loc)
    %467 = llvm.extractelement %466[%64 : i32] : vector<4xi8> loc(#loc)
    %468 = llvm.extractelement %466[%53 : i32] : vector<4xi8> loc(#loc)
    %469 = llvm.extractelement %466[%52 : i32] : vector<4xi8> loc(#loc)
    %470 = llvm.extractelement %466[%57 : i32] : vector<4xi8> loc(#loc)
    %471 = llvm.add %463, %18 : i32 loc(#loc)
    %472 = llvm.getelementptr inbounds %37[%471] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %473 = llvm.call @"__triton_hip_predicated_load_vector<4xi8>_!llvm.ptr<3>_i1_vector<4xi8>_"(%472, %46, %13) : (!llvm.ptr<3>, i1, vector<4xi8>) -> vector<4xi8> loc(#loc)
    %474 = llvm.extractelement %473[%64 : i32] : vector<4xi8> loc(#loc)
    %475 = llvm.extractelement %473[%53 : i32] : vector<4xi8> loc(#loc)
    %476 = llvm.extractelement %473[%52 : i32] : vector<4xi8> loc(#loc)
    %477 = llvm.extractelement %473[%57 : i32] : vector<4xi8> loc(#loc)
    %478 = llvm.mul %99, %72 : i32 loc(#loc)
    %479 = llvm.lshr %124, %64 : i32 loc(#loc)
    %480 = llvm.xor %64, %479 : i32 loc(#loc)
    %481 = llvm.xor %64, %480 : i32 loc(#loc)
    %482 = llvm.xor %481, %64 : i32 loc(#loc)
    %483 = llvm.add %482, %67 : i32 loc(#loc)
    %484 = llvm.add %483, %478 : i32 loc(#loc)
    %485 = rocdl.make.buffer.rsrc %b_scale, %11, %9, %10 : <1> to <8> loc(#loc)
    %486 = llvm.mul %484, %53 : i32 loc(#loc)
    %487 = llvm.select %46, %486, %7 : i1, i32 loc(#loc)
    %488 = rocdl.raw.ptr.buffer.load %485, %487, %64, %64 : i8 loc(#loc)
    %489 = llvm.bitcast %488 : i8 to vector<1xi8> loc(#loc)
    %490 = llvm.extractelement %489[%67 : i32] : vector<1xi8> loc(#loc)
    rocdl.barrier loc(#loc)
    %491 = llvm.and %81, %6 : i32 loc(#loc)
    %492 = llvm.shl %491, %52 : i32 loc(#loc)
    %493 = llvm.xor %64, %492 : i32 loc(#loc)
    %494 = llvm.select %413, %64, %52 : i1, i32 loc(#loc)
    %495 = llvm.xor %493, %494 : i32 loc(#loc)
    %496 = llvm.select %104, %64, %53 : i1, i32 loc(#loc)
    %497 = llvm.xor %495, %496 : i32 loc(#loc)
    %498 = llvm.xor %64, %497 : i32 loc(#loc)
    %499 = llvm.xor %498, %378 : i32 loc(#loc)
    %500 = llvm.xor %499, %64 : i32 loc(#loc)
    %501 = llvm.add %500, %64 : i32 loc(#loc)
    %502 = llvm.getelementptr inbounds %37[%501] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %503 = llvm.insertelement %490, %5[%64 : i32] : vector<1xi8> loc(#loc)
    llvm.call @"__triton_hip_predicated_store_!llvm.void_!llvm.ptr<3>_vector<1xi8>_i1_"(%502, %503, %46) : (!llvm.ptr<3>, vector<1xi8>, i1) -> () loc(#loc)
    rocdl.barrier loc(#loc)
    %504 = llvm.shl %124, %61 : i32 loc(#loc)
    %505 = llvm.xor %64, %504 : i32 loc(#loc)
    %506 = llvm.and %81, %72 : i32 loc(#loc)
    %507 = llvm.icmp "eq" %506, %64 : i32 loc(#loc)
    %508 = llvm.select %507, %64, %52 : i1, i32 loc(#loc)
    %509 = llvm.xor %505, %508 : i32 loc(#loc)
    %510 = llvm.select %413, %64, %53 : i1, i32 loc(#loc)
    %511 = llvm.xor %509, %510 : i32 loc(#loc)
    %512 = llvm.xor %64, %511 : i32 loc(#loc)
    %513 = llvm.xor %512, %378 : i32 loc(#loc)
    %514 = llvm.xor %513, %64 : i32 loc(#loc)
    %515 = llvm.add %514, %64 : i32 loc(#loc)
    %516 = llvm.getelementptr inbounds %37[%515] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %517 = llvm.call @"__triton_hip_predicated_load_vector<1xi8>_!llvm.ptr<3>_i1_vector<1xi8>_"(%516, %46, %8) : (!llvm.ptr<3>, i1, vector<1xi8>) -> vector<1xi8> loc(#loc)
    %518 = llvm.extractelement %517[%64 : i32] : vector<1xi8> loc(#loc)
    %519 = llvm.add %514, %60 : i32 loc(#loc)
    %520 = llvm.getelementptr inbounds %37[%519] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %521 = llvm.call @"__triton_hip_predicated_load_vector<1xi8>_!llvm.ptr<3>_i1_vector<1xi8>_"(%520, %46, %8) : (!llvm.ptr<3>, i1, vector<1xi8>) -> vector<1xi8> loc(#loc)
    %522 = llvm.extractelement %521[%64 : i32] : vector<1xi8> loc(#loc)
    %523 = llvm.add %514, %51 : i32 loc(#loc)
    %524 = llvm.getelementptr inbounds %37[%523] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %525 = llvm.call @"__triton_hip_predicated_load_vector<1xi8>_!llvm.ptr<3>_i1_vector<1xi8>_"(%524, %46, %8) : (!llvm.ptr<3>, i1, vector<1xi8>) -> vector<1xi8> loc(#loc)
    %526 = llvm.extractelement %525[%64 : i32] : vector<1xi8> loc(#loc)
    %527 = llvm.add %514, %4 : i32 loc(#loc)
    %528 = llvm.getelementptr inbounds %37[%527] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %529 = llvm.call @"__triton_hip_predicated_load_vector<1xi8>_!llvm.ptr<3>_i1_vector<1xi8>_"(%528, %46, %8) : (!llvm.ptr<3>, i1, vector<1xi8>) -> vector<1xi8> loc(#loc)
    %530 = llvm.extractelement %529[%64 : i32] : vector<1xi8> loc(#loc)
    %531 = llvm.add %514, %72 : i32 loc(#loc)
    %532 = llvm.getelementptr inbounds %37[%531] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %533 = llvm.call @"__triton_hip_predicated_load_vector<1xi8>_!llvm.ptr<3>_i1_vector<1xi8>_"(%532, %46, %8) : (!llvm.ptr<3>, i1, vector<1xi8>) -> vector<1xi8> loc(#loc)
    %534 = llvm.extractelement %533[%64 : i32] : vector<1xi8> loc(#loc)
    %535 = llvm.add %514, %59 : i32 loc(#loc)
    %536 = llvm.getelementptr inbounds %37[%535] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %537 = llvm.call @"__triton_hip_predicated_load_vector<1xi8>_!llvm.ptr<3>_i1_vector<1xi8>_"(%536, %46, %8) : (!llvm.ptr<3>, i1, vector<1xi8>) -> vector<1xi8> loc(#loc)
    %538 = llvm.extractelement %537[%64 : i32] : vector<1xi8> loc(#loc)
    %539 = llvm.add %514, %49 : i32 loc(#loc)
    %540 = llvm.getelementptr inbounds %37[%539] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %541 = llvm.call @"__triton_hip_predicated_load_vector<1xi8>_!llvm.ptr<3>_i1_vector<1xi8>_"(%540, %46, %8) : (!llvm.ptr<3>, i1, vector<1xi8>) -> vector<1xi8> loc(#loc)
    %542 = llvm.extractelement %541[%64 : i32] : vector<1xi8> loc(#loc)
    %543 = llvm.add %514, %3 : i32 loc(#loc)
    %544 = llvm.getelementptr inbounds %37[%543] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %545 = llvm.call @"__triton_hip_predicated_load_vector<1xi8>_!llvm.ptr<3>_i1_vector<1xi8>_"(%544, %46, %8) : (!llvm.ptr<3>, i1, vector<1xi8>) -> vector<1xi8> loc(#loc)
    %546 = llvm.extractelement %545[%64 : i32] : vector<1xi8> loc(#loc)
    %547 = llvm.zext %518 : i8 to i16 loc(#loc)
    %548 = llvm.zext %526 : i8 to i16 loc(#loc)
    %549 = llvm.zext %534 : i8 to i16 loc(#loc)
    %550 = llvm.zext %542 : i8 to i16 loc(#loc)
    %551 = llvm.shl %547, %71 : i16 loc(#loc)
    %552 = llvm.shl %548, %71 : i16 loc(#loc)
    %553 = llvm.shl %549, %71 : i16 loc(#loc)
    %554 = llvm.shl %550, %71 : i16 loc(#loc)
    %555 = llvm.insertelement %422, %16[%64 : i32] : vector<4xi8> loc(#loc)
    %556 = llvm.insertelement %423, %555[%53 : i32] : vector<4xi8> loc(#loc)
    %557 = llvm.insertelement %424, %556[%52 : i32] : vector<4xi8> loc(#loc)
    %558 = llvm.insertelement %425, %557[%57 : i32] : vector<4xi8> loc(#loc)
    %559 = llvm.bitcast %558 : vector<4xi8> to i32 loc(#loc)
    %560 = llvm.zext %551 : i16 to i32 loc(#loc)
    %561 = llvm.shl %560, %60 : i32 loc(#loc)
    %562 = llvm.bitcast %561 : i32 to f32 loc(#loc)
    %563 = rocdl.cvt.scalef32.pk.bf16.fp4 %559[0], %562 : vector<2xbf16> loc(#loc)
    %564 = rocdl.cvt.scalef32.pk.bf16.fp4 %559[2], %562 : vector<2xbf16> loc(#loc)
    %565 = rocdl.cvt.scalef32.pk.bf16.fp4 %559[1], %562 : vector<2xbf16> loc(#loc)
    %566 = rocdl.cvt.scalef32.pk.bf16.fp4 %559[3], %562 : vector<2xbf16> loc(#loc)
    %567 = llvm.extractelement %563[%64 : i32] : vector<2xbf16> loc(#loc)
    %568 = llvm.extractelement %563[%53 : i32] : vector<2xbf16> loc(#loc)
    %569 = llvm.extractelement %564[%64 : i32] : vector<2xbf16> loc(#loc)
    %570 = llvm.extractelement %564[%53 : i32] : vector<2xbf16> loc(#loc)
    %571 = llvm.extractelement %565[%64 : i32] : vector<2xbf16> loc(#loc)
    %572 = llvm.extractelement %565[%53 : i32] : vector<2xbf16> loc(#loc)
    %573 = llvm.extractelement %566[%64 : i32] : vector<2xbf16> loc(#loc)
    %574 = llvm.extractelement %566[%53 : i32] : vector<2xbf16> loc(#loc)
    %575 = llvm.insertelement %429, %16[%64 : i32] : vector<4xi8> loc(#loc)
    %576 = llvm.insertelement %430, %575[%53 : i32] : vector<4xi8> loc(#loc)
    %577 = llvm.insertelement %431, %576[%52 : i32] : vector<4xi8> loc(#loc)
    %578 = llvm.insertelement %432, %577[%57 : i32] : vector<4xi8> loc(#loc)
    %579 = llvm.bitcast %578 : vector<4xi8> to i32 loc(#loc)
    %580 = llvm.zext %552 : i16 to i32 loc(#loc)
    %581 = llvm.shl %580, %60 : i32 loc(#loc)
    %582 = llvm.bitcast %581 : i32 to f32 loc(#loc)
    %583 = rocdl.cvt.scalef32.pk.bf16.fp4 %579[0], %582 : vector<2xbf16> loc(#loc)
    %584 = rocdl.cvt.scalef32.pk.bf16.fp4 %579[2], %582 : vector<2xbf16> loc(#loc)
    %585 = rocdl.cvt.scalef32.pk.bf16.fp4 %579[1], %582 : vector<2xbf16> loc(#loc)
    %586 = rocdl.cvt.scalef32.pk.bf16.fp4 %579[3], %582 : vector<2xbf16> loc(#loc)
    %587 = llvm.extractelement %583[%64 : i32] : vector<2xbf16> loc(#loc)
    %588 = llvm.extractelement %583[%53 : i32] : vector<2xbf16> loc(#loc)
    %589 = llvm.extractelement %584[%64 : i32] : vector<2xbf16> loc(#loc)
    %590 = llvm.extractelement %584[%53 : i32] : vector<2xbf16> loc(#loc)
    %591 = llvm.extractelement %585[%64 : i32] : vector<2xbf16> loc(#loc)
    %592 = llvm.extractelement %585[%53 : i32] : vector<2xbf16> loc(#loc)
    %593 = llvm.extractelement %586[%64 : i32] : vector<2xbf16> loc(#loc)
    %594 = llvm.extractelement %586[%53 : i32] : vector<2xbf16> loc(#loc)
    %595 = llvm.insertelement %452, %16[%64 : i32] : vector<4xi8> loc(#loc)
    %596 = llvm.insertelement %453, %595[%53 : i32] : vector<4xi8> loc(#loc)
    %597 = llvm.insertelement %454, %596[%52 : i32] : vector<4xi8> loc(#loc)
    %598 = llvm.insertelement %455, %597[%57 : i32] : vector<4xi8> loc(#loc)
    %599 = llvm.bitcast %598 : vector<4xi8> to i32 loc(#loc)
    %600 = llvm.zext %553 : i16 to i32 loc(#loc)
    %601 = llvm.shl %600, %60 : i32 loc(#loc)
    %602 = llvm.bitcast %601 : i32 to f32 loc(#loc)
    %603 = rocdl.cvt.scalef32.pk.bf16.fp4 %599[0], %602 : vector<2xbf16> loc(#loc)
    %604 = rocdl.cvt.scalef32.pk.bf16.fp4 %599[2], %602 : vector<2xbf16> loc(#loc)
    %605 = rocdl.cvt.scalef32.pk.bf16.fp4 %599[1], %602 : vector<2xbf16> loc(#loc)
    %606 = rocdl.cvt.scalef32.pk.bf16.fp4 %599[3], %602 : vector<2xbf16> loc(#loc)
    %607 = llvm.extractelement %603[%64 : i32] : vector<2xbf16> loc(#loc)
    %608 = llvm.extractelement %603[%53 : i32] : vector<2xbf16> loc(#loc)
    %609 = llvm.extractelement %604[%64 : i32] : vector<2xbf16> loc(#loc)
    %610 = llvm.extractelement %604[%53 : i32] : vector<2xbf16> loc(#loc)
    %611 = llvm.extractelement %605[%64 : i32] : vector<2xbf16> loc(#loc)
    %612 = llvm.extractelement %605[%53 : i32] : vector<2xbf16> loc(#loc)
    %613 = llvm.extractelement %606[%64 : i32] : vector<2xbf16> loc(#loc)
    %614 = llvm.extractelement %606[%53 : i32] : vector<2xbf16> loc(#loc)
    %615 = llvm.insertelement %459, %16[%64 : i32] : vector<4xi8> loc(#loc)
    %616 = llvm.insertelement %460, %615[%53 : i32] : vector<4xi8> loc(#loc)
    %617 = llvm.insertelement %461, %616[%52 : i32] : vector<4xi8> loc(#loc)
    %618 = llvm.insertelement %462, %617[%57 : i32] : vector<4xi8> loc(#loc)
    %619 = llvm.bitcast %618 : vector<4xi8> to i32 loc(#loc)
    %620 = llvm.zext %554 : i16 to i32 loc(#loc)
    %621 = llvm.shl %620, %60 : i32 loc(#loc)
    %622 = llvm.bitcast %621 : i32 to f32 loc(#loc)
    %623 = rocdl.cvt.scalef32.pk.bf16.fp4 %619[0], %622 : vector<2xbf16> loc(#loc)
    %624 = rocdl.cvt.scalef32.pk.bf16.fp4 %619[2], %622 : vector<2xbf16> loc(#loc)
    %625 = rocdl.cvt.scalef32.pk.bf16.fp4 %619[1], %622 : vector<2xbf16> loc(#loc)
    %626 = rocdl.cvt.scalef32.pk.bf16.fp4 %619[3], %622 : vector<2xbf16> loc(#loc)
    %627 = llvm.extractelement %623[%64 : i32] : vector<2xbf16> loc(#loc)
    %628 = llvm.extractelement %623[%53 : i32] : vector<2xbf16> loc(#loc)
    %629 = llvm.extractelement %624[%64 : i32] : vector<2xbf16> loc(#loc)
    %630 = llvm.extractelement %624[%53 : i32] : vector<2xbf16> loc(#loc)
    %631 = llvm.extractelement %625[%64 : i32] : vector<2xbf16> loc(#loc)
    %632 = llvm.extractelement %625[%53 : i32] : vector<2xbf16> loc(#loc)
    %633 = llvm.extractelement %626[%64 : i32] : vector<2xbf16> loc(#loc)
    %634 = llvm.extractelement %626[%53 : i32] : vector<2xbf16> loc(#loc)
    %635 = llvm.icmp "eq" %518, %70 : i8 loc(#loc)
    %636 = llvm.icmp "eq" %526, %70 : i8 loc(#loc)
    %637 = llvm.icmp "eq" %534, %70 : i8 loc(#loc)
    %638 = llvm.icmp "eq" %542, %70 : i8 loc(#loc)
    %639 = llvm.select %635, %69, %567 : i1, bf16 loc(#loc)
    %640 = llvm.select %635, %69, %568 : i1, bf16 loc(#loc)
    %641 = llvm.select %635, %69, %569 : i1, bf16 loc(#loc)
    %642 = llvm.select %635, %69, %570 : i1, bf16 loc(#loc)
    %643 = llvm.select %635, %69, %571 : i1, bf16 loc(#loc)
    %644 = llvm.select %635, %69, %572 : i1, bf16 loc(#loc)
    %645 = llvm.select %635, %69, %573 : i1, bf16 loc(#loc)
    %646 = llvm.select %635, %69, %574 : i1, bf16 loc(#loc)
    %647 = llvm.select %636, %69, %587 : i1, bf16 loc(#loc)
    %648 = llvm.select %636, %69, %588 : i1, bf16 loc(#loc)
    %649 = llvm.select %636, %69, %589 : i1, bf16 loc(#loc)
    %650 = llvm.select %636, %69, %590 : i1, bf16 loc(#loc)
    %651 = llvm.select %636, %69, %591 : i1, bf16 loc(#loc)
    %652 = llvm.select %636, %69, %592 : i1, bf16 loc(#loc)
    %653 = llvm.select %636, %69, %593 : i1, bf16 loc(#loc)
    %654 = llvm.select %636, %69, %594 : i1, bf16 loc(#loc)
    %655 = llvm.select %637, %69, %607 : i1, bf16 loc(#loc)
    %656 = llvm.select %637, %69, %608 : i1, bf16 loc(#loc)
    %657 = llvm.select %637, %69, %609 : i1, bf16 loc(#loc)
    %658 = llvm.select %637, %69, %610 : i1, bf16 loc(#loc)
    %659 = llvm.select %637, %69, %611 : i1, bf16 loc(#loc)
    %660 = llvm.select %637, %69, %612 : i1, bf16 loc(#loc)
    %661 = llvm.select %637, %69, %613 : i1, bf16 loc(#loc)
    %662 = llvm.select %637, %69, %614 : i1, bf16 loc(#loc)
    %663 = llvm.select %638, %69, %627 : i1, bf16 loc(#loc)
    %664 = llvm.select %638, %69, %628 : i1, bf16 loc(#loc)
    %665 = llvm.select %638, %69, %629 : i1, bf16 loc(#loc)
    %666 = llvm.select %638, %69, %630 : i1, bf16 loc(#loc)
    %667 = llvm.select %638, %69, %631 : i1, bf16 loc(#loc)
    %668 = llvm.select %638, %69, %632 : i1, bf16 loc(#loc)
    %669 = llvm.select %638, %69, %633 : i1, bf16 loc(#loc)
    %670 = llvm.select %638, %69, %634 : i1, bf16 loc(#loc)
    %671 = llvm.insertelement %259, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %672 = llvm.insertelement %260, %671[%53 : i32] : vector<8xbf16> loc(#loc)
    %673 = llvm.insertelement %261, %672[%52 : i32] : vector<8xbf16> loc(#loc)
    %674 = llvm.insertelement %262, %673[%57 : i32] : vector<8xbf16> loc(#loc)
    %675 = llvm.insertelement %263, %674[%51 : i32] : vector<8xbf16> loc(#loc)
    %676 = llvm.insertelement %264, %675[%61 : i32] : vector<8xbf16> loc(#loc)
    %677 = llvm.insertelement %265, %676[%63 : i32] : vector<8xbf16> loc(#loc)
    %678 = llvm.insertelement %266, %677[%50 : i32] : vector<8xbf16> loc(#loc)
    %679 = llvm.extractelement %678[%64 : i32] : vector<8xbf16> loc(#loc)
    %680 = llvm.insertelement %679, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %681 = llvm.extractelement %678[%53 : i32] : vector<8xbf16> loc(#loc)
    %682 = llvm.insertelement %681, %680[%53 : i32] : vector<8xbf16> loc(#loc)
    %683 = llvm.extractelement %678[%52 : i32] : vector<8xbf16> loc(#loc)
    %684 = llvm.insertelement %683, %682[%52 : i32] : vector<8xbf16> loc(#loc)
    %685 = llvm.extractelement %678[%57 : i32] : vector<8xbf16> loc(#loc)
    %686 = llvm.insertelement %685, %684[%57 : i32] : vector<8xbf16> loc(#loc)
    %687 = llvm.extractelement %678[%51 : i32] : vector<8xbf16> loc(#loc)
    %688 = llvm.insertelement %687, %686[%51 : i32] : vector<8xbf16> loc(#loc)
    %689 = llvm.extractelement %678[%61 : i32] : vector<8xbf16> loc(#loc)
    %690 = llvm.insertelement %689, %688[%61 : i32] : vector<8xbf16> loc(#loc)
    %691 = llvm.extractelement %678[%63 : i32] : vector<8xbf16> loc(#loc)
    %692 = llvm.insertelement %691, %690[%63 : i32] : vector<8xbf16> loc(#loc)
    %693 = llvm.extractelement %678[%50 : i32] : vector<8xbf16> loc(#loc)
    %694 = llvm.insertelement %693, %692[%50 : i32] : vector<8xbf16> loc(#loc)
    %695 = llvm.insertelement %282, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %696 = llvm.insertelement %283, %695[%53 : i32] : vector<8xbf16> loc(#loc)
    %697 = llvm.insertelement %284, %696[%52 : i32] : vector<8xbf16> loc(#loc)
    %698 = llvm.insertelement %285, %697[%57 : i32] : vector<8xbf16> loc(#loc)
    %699 = llvm.insertelement %286, %698[%51 : i32] : vector<8xbf16> loc(#loc)
    %700 = llvm.insertelement %287, %699[%61 : i32] : vector<8xbf16> loc(#loc)
    %701 = llvm.insertelement %288, %700[%63 : i32] : vector<8xbf16> loc(#loc)
    %702 = llvm.insertelement %289, %701[%50 : i32] : vector<8xbf16> loc(#loc)
    %703 = llvm.extractelement %702[%64 : i32] : vector<8xbf16> loc(#loc)
    %704 = llvm.insertelement %703, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %705 = llvm.extractelement %702[%53 : i32] : vector<8xbf16> loc(#loc)
    %706 = llvm.insertelement %705, %704[%53 : i32] : vector<8xbf16> loc(#loc)
    %707 = llvm.extractelement %702[%52 : i32] : vector<8xbf16> loc(#loc)
    %708 = llvm.insertelement %707, %706[%52 : i32] : vector<8xbf16> loc(#loc)
    %709 = llvm.extractelement %702[%57 : i32] : vector<8xbf16> loc(#loc)
    %710 = llvm.insertelement %709, %708[%57 : i32] : vector<8xbf16> loc(#loc)
    %711 = llvm.extractelement %702[%51 : i32] : vector<8xbf16> loc(#loc)
    %712 = llvm.insertelement %711, %710[%51 : i32] : vector<8xbf16> loc(#loc)
    %713 = llvm.extractelement %702[%61 : i32] : vector<8xbf16> loc(#loc)
    %714 = llvm.insertelement %713, %712[%61 : i32] : vector<8xbf16> loc(#loc)
    %715 = llvm.extractelement %702[%63 : i32] : vector<8xbf16> loc(#loc)
    %716 = llvm.insertelement %715, %714[%63 : i32] : vector<8xbf16> loc(#loc)
    %717 = llvm.extractelement %702[%50 : i32] : vector<8xbf16> loc(#loc)
    %718 = llvm.insertelement %717, %716[%50 : i32] : vector<8xbf16> loc(#loc)
    %719 = llvm.insertelement %305, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %720 = llvm.insertelement %306, %719[%53 : i32] : vector<8xbf16> loc(#loc)
    %721 = llvm.insertelement %307, %720[%52 : i32] : vector<8xbf16> loc(#loc)
    %722 = llvm.insertelement %308, %721[%57 : i32] : vector<8xbf16> loc(#loc)
    %723 = llvm.insertelement %309, %722[%51 : i32] : vector<8xbf16> loc(#loc)
    %724 = llvm.insertelement %310, %723[%61 : i32] : vector<8xbf16> loc(#loc)
    %725 = llvm.insertelement %311, %724[%63 : i32] : vector<8xbf16> loc(#loc)
    %726 = llvm.insertelement %312, %725[%50 : i32] : vector<8xbf16> loc(#loc)
    %727 = llvm.extractelement %726[%64 : i32] : vector<8xbf16> loc(#loc)
    %728 = llvm.insertelement %727, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %729 = llvm.extractelement %726[%53 : i32] : vector<8xbf16> loc(#loc)
    %730 = llvm.insertelement %729, %728[%53 : i32] : vector<8xbf16> loc(#loc)
    %731 = llvm.extractelement %726[%52 : i32] : vector<8xbf16> loc(#loc)
    %732 = llvm.insertelement %731, %730[%52 : i32] : vector<8xbf16> loc(#loc)
    %733 = llvm.extractelement %726[%57 : i32] : vector<8xbf16> loc(#loc)
    %734 = llvm.insertelement %733, %732[%57 : i32] : vector<8xbf16> loc(#loc)
    %735 = llvm.extractelement %726[%51 : i32] : vector<8xbf16> loc(#loc)
    %736 = llvm.insertelement %735, %734[%51 : i32] : vector<8xbf16> loc(#loc)
    %737 = llvm.extractelement %726[%61 : i32] : vector<8xbf16> loc(#loc)
    %738 = llvm.insertelement %737, %736[%61 : i32] : vector<8xbf16> loc(#loc)
    %739 = llvm.extractelement %726[%63 : i32] : vector<8xbf16> loc(#loc)
    %740 = llvm.insertelement %739, %738[%63 : i32] : vector<8xbf16> loc(#loc)
    %741 = llvm.extractelement %726[%50 : i32] : vector<8xbf16> loc(#loc)
    %742 = llvm.insertelement %741, %740[%50 : i32] : vector<8xbf16> loc(#loc)
    %743 = llvm.insertelement %328, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %744 = llvm.insertelement %329, %743[%53 : i32] : vector<8xbf16> loc(#loc)
    %745 = llvm.insertelement %330, %744[%52 : i32] : vector<8xbf16> loc(#loc)
    %746 = llvm.insertelement %331, %745[%57 : i32] : vector<8xbf16> loc(#loc)
    %747 = llvm.insertelement %332, %746[%51 : i32] : vector<8xbf16> loc(#loc)
    %748 = llvm.insertelement %333, %747[%61 : i32] : vector<8xbf16> loc(#loc)
    %749 = llvm.insertelement %334, %748[%63 : i32] : vector<8xbf16> loc(#loc)
    %750 = llvm.insertelement %335, %749[%50 : i32] : vector<8xbf16> loc(#loc)
    %751 = llvm.extractelement %750[%64 : i32] : vector<8xbf16> loc(#loc)
    %752 = llvm.insertelement %751, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %753 = llvm.extractelement %750[%53 : i32] : vector<8xbf16> loc(#loc)
    %754 = llvm.insertelement %753, %752[%53 : i32] : vector<8xbf16> loc(#loc)
    %755 = llvm.extractelement %750[%52 : i32] : vector<8xbf16> loc(#loc)
    %756 = llvm.insertelement %755, %754[%52 : i32] : vector<8xbf16> loc(#loc)
    %757 = llvm.extractelement %750[%57 : i32] : vector<8xbf16> loc(#loc)
    %758 = llvm.insertelement %757, %756[%57 : i32] : vector<8xbf16> loc(#loc)
    %759 = llvm.extractelement %750[%51 : i32] : vector<8xbf16> loc(#loc)
    %760 = llvm.insertelement %759, %758[%51 : i32] : vector<8xbf16> loc(#loc)
    %761 = llvm.extractelement %750[%61 : i32] : vector<8xbf16> loc(#loc)
    %762 = llvm.insertelement %761, %760[%61 : i32] : vector<8xbf16> loc(#loc)
    %763 = llvm.extractelement %750[%63 : i32] : vector<8xbf16> loc(#loc)
    %764 = llvm.insertelement %763, %762[%63 : i32] : vector<8xbf16> loc(#loc)
    %765 = llvm.extractelement %750[%50 : i32] : vector<8xbf16> loc(#loc)
    %766 = llvm.insertelement %765, %764[%50 : i32] : vector<8xbf16> loc(#loc)
    %767 = llvm.insertelement %639, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %768 = llvm.insertelement %640, %767[%53 : i32] : vector<8xbf16> loc(#loc)
    %769 = llvm.insertelement %641, %768[%52 : i32] : vector<8xbf16> loc(#loc)
    %770 = llvm.insertelement %642, %769[%57 : i32] : vector<8xbf16> loc(#loc)
    %771 = llvm.insertelement %643, %770[%51 : i32] : vector<8xbf16> loc(#loc)
    %772 = llvm.insertelement %644, %771[%61 : i32] : vector<8xbf16> loc(#loc)
    %773 = llvm.insertelement %645, %772[%63 : i32] : vector<8xbf16> loc(#loc)
    %774 = llvm.insertelement %646, %773[%50 : i32] : vector<8xbf16> loc(#loc)
    %775 = llvm.extractelement %774[%64 : i32] : vector<8xbf16> loc(#loc)
    %776 = llvm.insertelement %775, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %777 = llvm.extractelement %774[%53 : i32] : vector<8xbf16> loc(#loc)
    %778 = llvm.insertelement %777, %776[%53 : i32] : vector<8xbf16> loc(#loc)
    %779 = llvm.extractelement %774[%52 : i32] : vector<8xbf16> loc(#loc)
    %780 = llvm.insertelement %779, %778[%52 : i32] : vector<8xbf16> loc(#loc)
    %781 = llvm.extractelement %774[%57 : i32] : vector<8xbf16> loc(#loc)
    %782 = llvm.insertelement %781, %780[%57 : i32] : vector<8xbf16> loc(#loc)
    %783 = llvm.extractelement %774[%51 : i32] : vector<8xbf16> loc(#loc)
    %784 = llvm.insertelement %783, %782[%51 : i32] : vector<8xbf16> loc(#loc)
    %785 = llvm.extractelement %774[%61 : i32] : vector<8xbf16> loc(#loc)
    %786 = llvm.insertelement %785, %784[%61 : i32] : vector<8xbf16> loc(#loc)
    %787 = llvm.extractelement %774[%63 : i32] : vector<8xbf16> loc(#loc)
    %788 = llvm.insertelement %787, %786[%63 : i32] : vector<8xbf16> loc(#loc)
    %789 = llvm.extractelement %774[%50 : i32] : vector<8xbf16> loc(#loc)
    %790 = llvm.insertelement %789, %788[%50 : i32] : vector<8xbf16> loc(#loc)
    %791 = llvm.insertelement %647, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %792 = llvm.insertelement %648, %791[%53 : i32] : vector<8xbf16> loc(#loc)
    %793 = llvm.insertelement %649, %792[%52 : i32] : vector<8xbf16> loc(#loc)
    %794 = llvm.insertelement %650, %793[%57 : i32] : vector<8xbf16> loc(#loc)
    %795 = llvm.insertelement %651, %794[%51 : i32] : vector<8xbf16> loc(#loc)
    %796 = llvm.insertelement %652, %795[%61 : i32] : vector<8xbf16> loc(#loc)
    %797 = llvm.insertelement %653, %796[%63 : i32] : vector<8xbf16> loc(#loc)
    %798 = llvm.insertelement %654, %797[%50 : i32] : vector<8xbf16> loc(#loc)
    %799 = llvm.extractelement %798[%64 : i32] : vector<8xbf16> loc(#loc)
    %800 = llvm.insertelement %799, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %801 = llvm.extractelement %798[%53 : i32] : vector<8xbf16> loc(#loc)
    %802 = llvm.insertelement %801, %800[%53 : i32] : vector<8xbf16> loc(#loc)
    %803 = llvm.extractelement %798[%52 : i32] : vector<8xbf16> loc(#loc)
    %804 = llvm.insertelement %803, %802[%52 : i32] : vector<8xbf16> loc(#loc)
    %805 = llvm.extractelement %798[%57 : i32] : vector<8xbf16> loc(#loc)
    %806 = llvm.insertelement %805, %804[%57 : i32] : vector<8xbf16> loc(#loc)
    %807 = llvm.extractelement %798[%51 : i32] : vector<8xbf16> loc(#loc)
    %808 = llvm.insertelement %807, %806[%51 : i32] : vector<8xbf16> loc(#loc)
    %809 = llvm.extractelement %798[%61 : i32] : vector<8xbf16> loc(#loc)
    %810 = llvm.insertelement %809, %808[%61 : i32] : vector<8xbf16> loc(#loc)
    %811 = llvm.extractelement %798[%63 : i32] : vector<8xbf16> loc(#loc)
    %812 = llvm.insertelement %811, %810[%63 : i32] : vector<8xbf16> loc(#loc)
    %813 = llvm.extractelement %798[%50 : i32] : vector<8xbf16> loc(#loc)
    %814 = llvm.insertelement %813, %812[%50 : i32] : vector<8xbf16> loc(#loc)
    %815 = llvm.insertelement %655, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %816 = llvm.insertelement %656, %815[%53 : i32] : vector<8xbf16> loc(#loc)
    %817 = llvm.insertelement %657, %816[%52 : i32] : vector<8xbf16> loc(#loc)
    %818 = llvm.insertelement %658, %817[%57 : i32] : vector<8xbf16> loc(#loc)
    %819 = llvm.insertelement %659, %818[%51 : i32] : vector<8xbf16> loc(#loc)
    %820 = llvm.insertelement %660, %819[%61 : i32] : vector<8xbf16> loc(#loc)
    %821 = llvm.insertelement %661, %820[%63 : i32] : vector<8xbf16> loc(#loc)
    %822 = llvm.insertelement %662, %821[%50 : i32] : vector<8xbf16> loc(#loc)
    %823 = llvm.extractelement %822[%64 : i32] : vector<8xbf16> loc(#loc)
    %824 = llvm.insertelement %823, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %825 = llvm.extractelement %822[%53 : i32] : vector<8xbf16> loc(#loc)
    %826 = llvm.insertelement %825, %824[%53 : i32] : vector<8xbf16> loc(#loc)
    %827 = llvm.extractelement %822[%52 : i32] : vector<8xbf16> loc(#loc)
    %828 = llvm.insertelement %827, %826[%52 : i32] : vector<8xbf16> loc(#loc)
    %829 = llvm.extractelement %822[%57 : i32] : vector<8xbf16> loc(#loc)
    %830 = llvm.insertelement %829, %828[%57 : i32] : vector<8xbf16> loc(#loc)
    %831 = llvm.extractelement %822[%51 : i32] : vector<8xbf16> loc(#loc)
    %832 = llvm.insertelement %831, %830[%51 : i32] : vector<8xbf16> loc(#loc)
    %833 = llvm.extractelement %822[%61 : i32] : vector<8xbf16> loc(#loc)
    %834 = llvm.insertelement %833, %832[%61 : i32] : vector<8xbf16> loc(#loc)
    %835 = llvm.extractelement %822[%63 : i32] : vector<8xbf16> loc(#loc)
    %836 = llvm.insertelement %835, %834[%63 : i32] : vector<8xbf16> loc(#loc)
    %837 = llvm.extractelement %822[%50 : i32] : vector<8xbf16> loc(#loc)
    %838 = llvm.insertelement %837, %836[%50 : i32] : vector<8xbf16> loc(#loc)
    %839 = llvm.insertelement %663, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %840 = llvm.insertelement %664, %839[%53 : i32] : vector<8xbf16> loc(#loc)
    %841 = llvm.insertelement %665, %840[%52 : i32] : vector<8xbf16> loc(#loc)
    %842 = llvm.insertelement %666, %841[%57 : i32] : vector<8xbf16> loc(#loc)
    %843 = llvm.insertelement %667, %842[%51 : i32] : vector<8xbf16> loc(#loc)
    %844 = llvm.insertelement %668, %843[%61 : i32] : vector<8xbf16> loc(#loc)
    %845 = llvm.insertelement %669, %844[%63 : i32] : vector<8xbf16> loc(#loc)
    %846 = llvm.insertelement %670, %845[%50 : i32] : vector<8xbf16> loc(#loc)
    %847 = llvm.extractelement %846[%64 : i32] : vector<8xbf16> loc(#loc)
    %848 = llvm.insertelement %847, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %849 = llvm.extractelement %846[%53 : i32] : vector<8xbf16> loc(#loc)
    %850 = llvm.insertelement %849, %848[%53 : i32] : vector<8xbf16> loc(#loc)
    %851 = llvm.extractelement %846[%52 : i32] : vector<8xbf16> loc(#loc)
    %852 = llvm.insertelement %851, %850[%52 : i32] : vector<8xbf16> loc(#loc)
    %853 = llvm.extractelement %846[%57 : i32] : vector<8xbf16> loc(#loc)
    %854 = llvm.insertelement %853, %852[%57 : i32] : vector<8xbf16> loc(#loc)
    %855 = llvm.extractelement %846[%51 : i32] : vector<8xbf16> loc(#loc)
    %856 = llvm.insertelement %855, %854[%51 : i32] : vector<8xbf16> loc(#loc)
    %857 = llvm.extractelement %846[%61 : i32] : vector<8xbf16> loc(#loc)
    %858 = llvm.insertelement %857, %856[%61 : i32] : vector<8xbf16> loc(#loc)
    %859 = llvm.extractelement %846[%63 : i32] : vector<8xbf16> loc(#loc)
    %860 = llvm.insertelement %859, %858[%63 : i32] : vector<8xbf16> loc(#loc)
    %861 = llvm.extractelement %846[%50 : i32] : vector<8xbf16> loc(#loc)
    %862 = llvm.insertelement %861, %860[%50 : i32] : vector<8xbf16> loc(#loc)
    %863 = llvm.insertelement %68, %2[%64 : i32] : vector<4xf32> loc(#loc)
    %864 = llvm.insertelement %68, %863[%53 : i32] : vector<4xf32> loc(#loc)
    %865 = llvm.insertelement %68, %864[%52 : i32] : vector<4xf32> loc(#loc)
    %866 = llvm.insertelement %68, %865[%57 : i32] : vector<4xf32> loc(#loc)
    %867 = rocdl.mfma.f32.16x16x32.bf16 %790, %694, %866, %64, %64, %64 : (vector<8xbf16>, vector<8xbf16>, vector<4xf32>, i32, i32, i32) -> vector<4xf32> loc(#loc)
    %868 = rocdl.mfma.f32.16x16x32.bf16 %814, %718, %867, %64, %64, %64 : (vector<8xbf16>, vector<8xbf16>, vector<4xf32>, i32, i32, i32) -> vector<4xf32> loc(#loc)
    %869 = rocdl.mfma.f32.16x16x32.bf16 %838, %742, %868, %64, %64, %64 : (vector<8xbf16>, vector<8xbf16>, vector<4xf32>, i32, i32, i32) -> vector<4xf32> loc(#loc)
    %870 = rocdl.mfma.f32.16x16x32.bf16 %862, %766, %869, %64, %64, %64 : (vector<8xbf16>, vector<8xbf16>, vector<4xf32>, i32, i32, i32) -> vector<4xf32> loc(#loc)
    %871 = llvm.extractelement %870[%64 : i32] : vector<4xf32> loc(#loc)
    %872 = llvm.extractelement %870[%53 : i32] : vector<4xf32> loc(#loc)
    %873 = llvm.extractelement %870[%52 : i32] : vector<4xf32> loc(#loc)
    %874 = llvm.extractelement %870[%57 : i32] : vector<4xf32> loc(#loc)
    %875 = llvm.zext %522 : i8 to i16 loc(#loc)
    %876 = llvm.zext %530 : i8 to i16 loc(#loc)
    %877 = llvm.zext %538 : i8 to i16 loc(#loc)
    %878 = llvm.zext %546 : i8 to i16 loc(#loc)
    %879 = llvm.shl %875, %71 : i16 loc(#loc)
    %880 = llvm.shl %876, %71 : i16 loc(#loc)
    %881 = llvm.shl %877, %71 : i16 loc(#loc)
    %882 = llvm.shl %878, %71 : i16 loc(#loc)
    %883 = llvm.insertelement %437, %16[%64 : i32] : vector<4xi8> loc(#loc)
    %884 = llvm.insertelement %438, %883[%53 : i32] : vector<4xi8> loc(#loc)
    %885 = llvm.insertelement %439, %884[%52 : i32] : vector<4xi8> loc(#loc)
    %886 = llvm.insertelement %440, %885[%57 : i32] : vector<4xi8> loc(#loc)
    %887 = llvm.bitcast %886 : vector<4xi8> to i32 loc(#loc)
    %888 = llvm.zext %879 : i16 to i32 loc(#loc)
    %889 = llvm.shl %888, %60 : i32 loc(#loc)
    %890 = llvm.bitcast %889 : i32 to f32 loc(#loc)
    %891 = rocdl.cvt.scalef32.pk.bf16.fp4 %887[0], %890 : vector<2xbf16> loc(#loc)
    %892 = rocdl.cvt.scalef32.pk.bf16.fp4 %887[2], %890 : vector<2xbf16> loc(#loc)
    %893 = rocdl.cvt.scalef32.pk.bf16.fp4 %887[1], %890 : vector<2xbf16> loc(#loc)
    %894 = rocdl.cvt.scalef32.pk.bf16.fp4 %887[3], %890 : vector<2xbf16> loc(#loc)
    %895 = llvm.extractelement %891[%64 : i32] : vector<2xbf16> loc(#loc)
    %896 = llvm.extractelement %891[%53 : i32] : vector<2xbf16> loc(#loc)
    %897 = llvm.extractelement %892[%64 : i32] : vector<2xbf16> loc(#loc)
    %898 = llvm.extractelement %892[%53 : i32] : vector<2xbf16> loc(#loc)
    %899 = llvm.extractelement %893[%64 : i32] : vector<2xbf16> loc(#loc)
    %900 = llvm.extractelement %893[%53 : i32] : vector<2xbf16> loc(#loc)
    %901 = llvm.extractelement %894[%64 : i32] : vector<2xbf16> loc(#loc)
    %902 = llvm.extractelement %894[%53 : i32] : vector<2xbf16> loc(#loc)
    %903 = llvm.insertelement %444, %16[%64 : i32] : vector<4xi8> loc(#loc)
    %904 = llvm.insertelement %445, %903[%53 : i32] : vector<4xi8> loc(#loc)
    %905 = llvm.insertelement %446, %904[%52 : i32] : vector<4xi8> loc(#loc)
    %906 = llvm.insertelement %447, %905[%57 : i32] : vector<4xi8> loc(#loc)
    %907 = llvm.bitcast %906 : vector<4xi8> to i32 loc(#loc)
    %908 = llvm.zext %880 : i16 to i32 loc(#loc)
    %909 = llvm.shl %908, %60 : i32 loc(#loc)
    %910 = llvm.bitcast %909 : i32 to f32 loc(#loc)
    %911 = rocdl.cvt.scalef32.pk.bf16.fp4 %907[0], %910 : vector<2xbf16> loc(#loc)
    %912 = rocdl.cvt.scalef32.pk.bf16.fp4 %907[2], %910 : vector<2xbf16> loc(#loc)
    %913 = rocdl.cvt.scalef32.pk.bf16.fp4 %907[1], %910 : vector<2xbf16> loc(#loc)
    %914 = rocdl.cvt.scalef32.pk.bf16.fp4 %907[3], %910 : vector<2xbf16> loc(#loc)
    %915 = llvm.extractelement %911[%64 : i32] : vector<2xbf16> loc(#loc)
    %916 = llvm.extractelement %911[%53 : i32] : vector<2xbf16> loc(#loc)
    %917 = llvm.extractelement %912[%64 : i32] : vector<2xbf16> loc(#loc)
    %918 = llvm.extractelement %912[%53 : i32] : vector<2xbf16> loc(#loc)
    %919 = llvm.extractelement %913[%64 : i32] : vector<2xbf16> loc(#loc)
    %920 = llvm.extractelement %913[%53 : i32] : vector<2xbf16> loc(#loc)
    %921 = llvm.extractelement %914[%64 : i32] : vector<2xbf16> loc(#loc)
    %922 = llvm.extractelement %914[%53 : i32] : vector<2xbf16> loc(#loc)
    %923 = llvm.insertelement %467, %16[%64 : i32] : vector<4xi8> loc(#loc)
    %924 = llvm.insertelement %468, %923[%53 : i32] : vector<4xi8> loc(#loc)
    %925 = llvm.insertelement %469, %924[%52 : i32] : vector<4xi8> loc(#loc)
    %926 = llvm.insertelement %470, %925[%57 : i32] : vector<4xi8> loc(#loc)
    %927 = llvm.bitcast %926 : vector<4xi8> to i32 loc(#loc)
    %928 = llvm.zext %881 : i16 to i32 loc(#loc)
    %929 = llvm.shl %928, %60 : i32 loc(#loc)
    %930 = llvm.bitcast %929 : i32 to f32 loc(#loc)
    %931 = rocdl.cvt.scalef32.pk.bf16.fp4 %927[0], %930 : vector<2xbf16> loc(#loc)
    %932 = rocdl.cvt.scalef32.pk.bf16.fp4 %927[2], %930 : vector<2xbf16> loc(#loc)
    %933 = rocdl.cvt.scalef32.pk.bf16.fp4 %927[1], %930 : vector<2xbf16> loc(#loc)
    %934 = rocdl.cvt.scalef32.pk.bf16.fp4 %927[3], %930 : vector<2xbf16> loc(#loc)
    %935 = llvm.extractelement %931[%64 : i32] : vector<2xbf16> loc(#loc)
    %936 = llvm.extractelement %931[%53 : i32] : vector<2xbf16> loc(#loc)
    %937 = llvm.extractelement %932[%64 : i32] : vector<2xbf16> loc(#loc)
    %938 = llvm.extractelement %932[%53 : i32] : vector<2xbf16> loc(#loc)
    %939 = llvm.extractelement %933[%64 : i32] : vector<2xbf16> loc(#loc)
    %940 = llvm.extractelement %933[%53 : i32] : vector<2xbf16> loc(#loc)
    %941 = llvm.extractelement %934[%64 : i32] : vector<2xbf16> loc(#loc)
    %942 = llvm.extractelement %934[%53 : i32] : vector<2xbf16> loc(#loc)
    %943 = llvm.insertelement %474, %16[%64 : i32] : vector<4xi8> loc(#loc)
    %944 = llvm.insertelement %475, %943[%53 : i32] : vector<4xi8> loc(#loc)
    %945 = llvm.insertelement %476, %944[%52 : i32] : vector<4xi8> loc(#loc)
    %946 = llvm.insertelement %477, %945[%57 : i32] : vector<4xi8> loc(#loc)
    %947 = llvm.bitcast %946 : vector<4xi8> to i32 loc(#loc)
    %948 = llvm.zext %882 : i16 to i32 loc(#loc)
    %949 = llvm.shl %948, %60 : i32 loc(#loc)
    %950 = llvm.bitcast %949 : i32 to f32 loc(#loc)
    %951 = rocdl.cvt.scalef32.pk.bf16.fp4 %947[0], %950 : vector<2xbf16> loc(#loc)
    %952 = rocdl.cvt.scalef32.pk.bf16.fp4 %947[2], %950 : vector<2xbf16> loc(#loc)
    %953 = rocdl.cvt.scalef32.pk.bf16.fp4 %947[1], %950 : vector<2xbf16> loc(#loc)
    %954 = rocdl.cvt.scalef32.pk.bf16.fp4 %947[3], %950 : vector<2xbf16> loc(#loc)
    %955 = llvm.extractelement %951[%64 : i32] : vector<2xbf16> loc(#loc)
    %956 = llvm.extractelement %951[%53 : i32] : vector<2xbf16> loc(#loc)
    %957 = llvm.extractelement %952[%64 : i32] : vector<2xbf16> loc(#loc)
    %958 = llvm.extractelement %952[%53 : i32] : vector<2xbf16> loc(#loc)
    %959 = llvm.extractelement %953[%64 : i32] : vector<2xbf16> loc(#loc)
    %960 = llvm.extractelement %953[%53 : i32] : vector<2xbf16> loc(#loc)
    %961 = llvm.extractelement %954[%64 : i32] : vector<2xbf16> loc(#loc)
    %962 = llvm.extractelement %954[%53 : i32] : vector<2xbf16> loc(#loc)
    %963 = llvm.icmp "eq" %522, %70 : i8 loc(#loc)
    %964 = llvm.icmp "eq" %530, %70 : i8 loc(#loc)
    %965 = llvm.icmp "eq" %538, %70 : i8 loc(#loc)
    %966 = llvm.icmp "eq" %546, %70 : i8 loc(#loc)
    %967 = llvm.select %963, %69, %895 : i1, bf16 loc(#loc)
    %968 = llvm.select %963, %69, %896 : i1, bf16 loc(#loc)
    %969 = llvm.select %963, %69, %897 : i1, bf16 loc(#loc)
    %970 = llvm.select %963, %69, %898 : i1, bf16 loc(#loc)
    %971 = llvm.select %963, %69, %899 : i1, bf16 loc(#loc)
    %972 = llvm.select %963, %69, %900 : i1, bf16 loc(#loc)
    %973 = llvm.select %963, %69, %901 : i1, bf16 loc(#loc)
    %974 = llvm.select %963, %69, %902 : i1, bf16 loc(#loc)
    %975 = llvm.select %964, %69, %915 : i1, bf16 loc(#loc)
    %976 = llvm.select %964, %69, %916 : i1, bf16 loc(#loc)
    %977 = llvm.select %964, %69, %917 : i1, bf16 loc(#loc)
    %978 = llvm.select %964, %69, %918 : i1, bf16 loc(#loc)
    %979 = llvm.select %964, %69, %919 : i1, bf16 loc(#loc)
    %980 = llvm.select %964, %69, %920 : i1, bf16 loc(#loc)
    %981 = llvm.select %964, %69, %921 : i1, bf16 loc(#loc)
    %982 = llvm.select %964, %69, %922 : i1, bf16 loc(#loc)
    %983 = llvm.select %965, %69, %935 : i1, bf16 loc(#loc)
    %984 = llvm.select %965, %69, %936 : i1, bf16 loc(#loc)
    %985 = llvm.select %965, %69, %937 : i1, bf16 loc(#loc)
    %986 = llvm.select %965, %69, %938 : i1, bf16 loc(#loc)
    %987 = llvm.select %965, %69, %939 : i1, bf16 loc(#loc)
    %988 = llvm.select %965, %69, %940 : i1, bf16 loc(#loc)
    %989 = llvm.select %965, %69, %941 : i1, bf16 loc(#loc)
    %990 = llvm.select %965, %69, %942 : i1, bf16 loc(#loc)
    %991 = llvm.select %966, %69, %955 : i1, bf16 loc(#loc)
    %992 = llvm.select %966, %69, %956 : i1, bf16 loc(#loc)
    %993 = llvm.select %966, %69, %957 : i1, bf16 loc(#loc)
    %994 = llvm.select %966, %69, %958 : i1, bf16 loc(#loc)
    %995 = llvm.select %966, %69, %959 : i1, bf16 loc(#loc)
    %996 = llvm.select %966, %69, %960 : i1, bf16 loc(#loc)
    %997 = llvm.select %966, %69, %961 : i1, bf16 loc(#loc)
    %998 = llvm.select %966, %69, %962 : i1, bf16 loc(#loc)
    %999 = llvm.insertelement %270, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %1000 = llvm.insertelement %271, %999[%53 : i32] : vector<8xbf16> loc(#loc)
    %1001 = llvm.insertelement %272, %1000[%52 : i32] : vector<8xbf16> loc(#loc)
    %1002 = llvm.insertelement %273, %1001[%57 : i32] : vector<8xbf16> loc(#loc)
    %1003 = llvm.insertelement %274, %1002[%51 : i32] : vector<8xbf16> loc(#loc)
    %1004 = llvm.insertelement %275, %1003[%61 : i32] : vector<8xbf16> loc(#loc)
    %1005 = llvm.insertelement %276, %1004[%63 : i32] : vector<8xbf16> loc(#loc)
    %1006 = llvm.insertelement %277, %1005[%50 : i32] : vector<8xbf16> loc(#loc)
    %1007 = llvm.extractelement %1006[%64 : i32] : vector<8xbf16> loc(#loc)
    %1008 = llvm.insertelement %1007, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %1009 = llvm.extractelement %1006[%53 : i32] : vector<8xbf16> loc(#loc)
    %1010 = llvm.insertelement %1009, %1008[%53 : i32] : vector<8xbf16> loc(#loc)
    %1011 = llvm.extractelement %1006[%52 : i32] : vector<8xbf16> loc(#loc)
    %1012 = llvm.insertelement %1011, %1010[%52 : i32] : vector<8xbf16> loc(#loc)
    %1013 = llvm.extractelement %1006[%57 : i32] : vector<8xbf16> loc(#loc)
    %1014 = llvm.insertelement %1013, %1012[%57 : i32] : vector<8xbf16> loc(#loc)
    %1015 = llvm.extractelement %1006[%51 : i32] : vector<8xbf16> loc(#loc)
    %1016 = llvm.insertelement %1015, %1014[%51 : i32] : vector<8xbf16> loc(#loc)
    %1017 = llvm.extractelement %1006[%61 : i32] : vector<8xbf16> loc(#loc)
    %1018 = llvm.insertelement %1017, %1016[%61 : i32] : vector<8xbf16> loc(#loc)
    %1019 = llvm.extractelement %1006[%63 : i32] : vector<8xbf16> loc(#loc)
    %1020 = llvm.insertelement %1019, %1018[%63 : i32] : vector<8xbf16> loc(#loc)
    %1021 = llvm.extractelement %1006[%50 : i32] : vector<8xbf16> loc(#loc)
    %1022 = llvm.insertelement %1021, %1020[%50 : i32] : vector<8xbf16> loc(#loc)
    %1023 = llvm.insertelement %293, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %1024 = llvm.insertelement %294, %1023[%53 : i32] : vector<8xbf16> loc(#loc)
    %1025 = llvm.insertelement %295, %1024[%52 : i32] : vector<8xbf16> loc(#loc)
    %1026 = llvm.insertelement %296, %1025[%57 : i32] : vector<8xbf16> loc(#loc)
    %1027 = llvm.insertelement %297, %1026[%51 : i32] : vector<8xbf16> loc(#loc)
    %1028 = llvm.insertelement %298, %1027[%61 : i32] : vector<8xbf16> loc(#loc)
    %1029 = llvm.insertelement %299, %1028[%63 : i32] : vector<8xbf16> loc(#loc)
    %1030 = llvm.insertelement %300, %1029[%50 : i32] : vector<8xbf16> loc(#loc)
    %1031 = llvm.extractelement %1030[%64 : i32] : vector<8xbf16> loc(#loc)
    %1032 = llvm.insertelement %1031, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %1033 = llvm.extractelement %1030[%53 : i32] : vector<8xbf16> loc(#loc)
    %1034 = llvm.insertelement %1033, %1032[%53 : i32] : vector<8xbf16> loc(#loc)
    %1035 = llvm.extractelement %1030[%52 : i32] : vector<8xbf16> loc(#loc)
    %1036 = llvm.insertelement %1035, %1034[%52 : i32] : vector<8xbf16> loc(#loc)
    %1037 = llvm.extractelement %1030[%57 : i32] : vector<8xbf16> loc(#loc)
    %1038 = llvm.insertelement %1037, %1036[%57 : i32] : vector<8xbf16> loc(#loc)
    %1039 = llvm.extractelement %1030[%51 : i32] : vector<8xbf16> loc(#loc)
    %1040 = llvm.insertelement %1039, %1038[%51 : i32] : vector<8xbf16> loc(#loc)
    %1041 = llvm.extractelement %1030[%61 : i32] : vector<8xbf16> loc(#loc)
    %1042 = llvm.insertelement %1041, %1040[%61 : i32] : vector<8xbf16> loc(#loc)
    %1043 = llvm.extractelement %1030[%63 : i32] : vector<8xbf16> loc(#loc)
    %1044 = llvm.insertelement %1043, %1042[%63 : i32] : vector<8xbf16> loc(#loc)
    %1045 = llvm.extractelement %1030[%50 : i32] : vector<8xbf16> loc(#loc)
    %1046 = llvm.insertelement %1045, %1044[%50 : i32] : vector<8xbf16> loc(#loc)
    %1047 = llvm.insertelement %316, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %1048 = llvm.insertelement %317, %1047[%53 : i32] : vector<8xbf16> loc(#loc)
    %1049 = llvm.insertelement %318, %1048[%52 : i32] : vector<8xbf16> loc(#loc)
    %1050 = llvm.insertelement %319, %1049[%57 : i32] : vector<8xbf16> loc(#loc)
    %1051 = llvm.insertelement %320, %1050[%51 : i32] : vector<8xbf16> loc(#loc)
    %1052 = llvm.insertelement %321, %1051[%61 : i32] : vector<8xbf16> loc(#loc)
    %1053 = llvm.insertelement %322, %1052[%63 : i32] : vector<8xbf16> loc(#loc)
    %1054 = llvm.insertelement %323, %1053[%50 : i32] : vector<8xbf16> loc(#loc)
    %1055 = llvm.extractelement %1054[%64 : i32] : vector<8xbf16> loc(#loc)
    %1056 = llvm.insertelement %1055, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %1057 = llvm.extractelement %1054[%53 : i32] : vector<8xbf16> loc(#loc)
    %1058 = llvm.insertelement %1057, %1056[%53 : i32] : vector<8xbf16> loc(#loc)
    %1059 = llvm.extractelement %1054[%52 : i32] : vector<8xbf16> loc(#loc)
    %1060 = llvm.insertelement %1059, %1058[%52 : i32] : vector<8xbf16> loc(#loc)
    %1061 = llvm.extractelement %1054[%57 : i32] : vector<8xbf16> loc(#loc)
    %1062 = llvm.insertelement %1061, %1060[%57 : i32] : vector<8xbf16> loc(#loc)
    %1063 = llvm.extractelement %1054[%51 : i32] : vector<8xbf16> loc(#loc)
    %1064 = llvm.insertelement %1063, %1062[%51 : i32] : vector<8xbf16> loc(#loc)
    %1065 = llvm.extractelement %1054[%61 : i32] : vector<8xbf16> loc(#loc)
    %1066 = llvm.insertelement %1065, %1064[%61 : i32] : vector<8xbf16> loc(#loc)
    %1067 = llvm.extractelement %1054[%63 : i32] : vector<8xbf16> loc(#loc)
    %1068 = llvm.insertelement %1067, %1066[%63 : i32] : vector<8xbf16> loc(#loc)
    %1069 = llvm.extractelement %1054[%50 : i32] : vector<8xbf16> loc(#loc)
    %1070 = llvm.insertelement %1069, %1068[%50 : i32] : vector<8xbf16> loc(#loc)
    %1071 = llvm.insertelement %339, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %1072 = llvm.insertelement %340, %1071[%53 : i32] : vector<8xbf16> loc(#loc)
    %1073 = llvm.insertelement %341, %1072[%52 : i32] : vector<8xbf16> loc(#loc)
    %1074 = llvm.insertelement %342, %1073[%57 : i32] : vector<8xbf16> loc(#loc)
    %1075 = llvm.insertelement %343, %1074[%51 : i32] : vector<8xbf16> loc(#loc)
    %1076 = llvm.insertelement %344, %1075[%61 : i32] : vector<8xbf16> loc(#loc)
    %1077 = llvm.insertelement %345, %1076[%63 : i32] : vector<8xbf16> loc(#loc)
    %1078 = llvm.insertelement %346, %1077[%50 : i32] : vector<8xbf16> loc(#loc)
    %1079 = llvm.extractelement %1078[%64 : i32] : vector<8xbf16> loc(#loc)
    %1080 = llvm.insertelement %1079, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %1081 = llvm.extractelement %1078[%53 : i32] : vector<8xbf16> loc(#loc)
    %1082 = llvm.insertelement %1081, %1080[%53 : i32] : vector<8xbf16> loc(#loc)
    %1083 = llvm.extractelement %1078[%52 : i32] : vector<8xbf16> loc(#loc)
    %1084 = llvm.insertelement %1083, %1082[%52 : i32] : vector<8xbf16> loc(#loc)
    %1085 = llvm.extractelement %1078[%57 : i32] : vector<8xbf16> loc(#loc)
    %1086 = llvm.insertelement %1085, %1084[%57 : i32] : vector<8xbf16> loc(#loc)
    %1087 = llvm.extractelement %1078[%51 : i32] : vector<8xbf16> loc(#loc)
    %1088 = llvm.insertelement %1087, %1086[%51 : i32] : vector<8xbf16> loc(#loc)
    %1089 = llvm.extractelement %1078[%61 : i32] : vector<8xbf16> loc(#loc)
    %1090 = llvm.insertelement %1089, %1088[%61 : i32] : vector<8xbf16> loc(#loc)
    %1091 = llvm.extractelement %1078[%63 : i32] : vector<8xbf16> loc(#loc)
    %1092 = llvm.insertelement %1091, %1090[%63 : i32] : vector<8xbf16> loc(#loc)
    %1093 = llvm.extractelement %1078[%50 : i32] : vector<8xbf16> loc(#loc)
    %1094 = llvm.insertelement %1093, %1092[%50 : i32] : vector<8xbf16> loc(#loc)
    %1095 = llvm.insertelement %967, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %1096 = llvm.insertelement %968, %1095[%53 : i32] : vector<8xbf16> loc(#loc)
    %1097 = llvm.insertelement %969, %1096[%52 : i32] : vector<8xbf16> loc(#loc)
    %1098 = llvm.insertelement %970, %1097[%57 : i32] : vector<8xbf16> loc(#loc)
    %1099 = llvm.insertelement %971, %1098[%51 : i32] : vector<8xbf16> loc(#loc)
    %1100 = llvm.insertelement %972, %1099[%61 : i32] : vector<8xbf16> loc(#loc)
    %1101 = llvm.insertelement %973, %1100[%63 : i32] : vector<8xbf16> loc(#loc)
    %1102 = llvm.insertelement %974, %1101[%50 : i32] : vector<8xbf16> loc(#loc)
    %1103 = llvm.extractelement %1102[%64 : i32] : vector<8xbf16> loc(#loc)
    %1104 = llvm.insertelement %1103, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %1105 = llvm.extractelement %1102[%53 : i32] : vector<8xbf16> loc(#loc)
    %1106 = llvm.insertelement %1105, %1104[%53 : i32] : vector<8xbf16> loc(#loc)
    %1107 = llvm.extractelement %1102[%52 : i32] : vector<8xbf16> loc(#loc)
    %1108 = llvm.insertelement %1107, %1106[%52 : i32] : vector<8xbf16> loc(#loc)
    %1109 = llvm.extractelement %1102[%57 : i32] : vector<8xbf16> loc(#loc)
    %1110 = llvm.insertelement %1109, %1108[%57 : i32] : vector<8xbf16> loc(#loc)
    %1111 = llvm.extractelement %1102[%51 : i32] : vector<8xbf16> loc(#loc)
    %1112 = llvm.insertelement %1111, %1110[%51 : i32] : vector<8xbf16> loc(#loc)
    %1113 = llvm.extractelement %1102[%61 : i32] : vector<8xbf16> loc(#loc)
    %1114 = llvm.insertelement %1113, %1112[%61 : i32] : vector<8xbf16> loc(#loc)
    %1115 = llvm.extractelement %1102[%63 : i32] : vector<8xbf16> loc(#loc)
    %1116 = llvm.insertelement %1115, %1114[%63 : i32] : vector<8xbf16> loc(#loc)
    %1117 = llvm.extractelement %1102[%50 : i32] : vector<8xbf16> loc(#loc)
    %1118 = llvm.insertelement %1117, %1116[%50 : i32] : vector<8xbf16> loc(#loc)
    %1119 = llvm.insertelement %975, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %1120 = llvm.insertelement %976, %1119[%53 : i32] : vector<8xbf16> loc(#loc)
    %1121 = llvm.insertelement %977, %1120[%52 : i32] : vector<8xbf16> loc(#loc)
    %1122 = llvm.insertelement %978, %1121[%57 : i32] : vector<8xbf16> loc(#loc)
    %1123 = llvm.insertelement %979, %1122[%51 : i32] : vector<8xbf16> loc(#loc)
    %1124 = llvm.insertelement %980, %1123[%61 : i32] : vector<8xbf16> loc(#loc)
    %1125 = llvm.insertelement %981, %1124[%63 : i32] : vector<8xbf16> loc(#loc)
    %1126 = llvm.insertelement %982, %1125[%50 : i32] : vector<8xbf16> loc(#loc)
    %1127 = llvm.extractelement %1126[%64 : i32] : vector<8xbf16> loc(#loc)
    %1128 = llvm.insertelement %1127, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %1129 = llvm.extractelement %1126[%53 : i32] : vector<8xbf16> loc(#loc)
    %1130 = llvm.insertelement %1129, %1128[%53 : i32] : vector<8xbf16> loc(#loc)
    %1131 = llvm.extractelement %1126[%52 : i32] : vector<8xbf16> loc(#loc)
    %1132 = llvm.insertelement %1131, %1130[%52 : i32] : vector<8xbf16> loc(#loc)
    %1133 = llvm.extractelement %1126[%57 : i32] : vector<8xbf16> loc(#loc)
    %1134 = llvm.insertelement %1133, %1132[%57 : i32] : vector<8xbf16> loc(#loc)
    %1135 = llvm.extractelement %1126[%51 : i32] : vector<8xbf16> loc(#loc)
    %1136 = llvm.insertelement %1135, %1134[%51 : i32] : vector<8xbf16> loc(#loc)
    %1137 = llvm.extractelement %1126[%61 : i32] : vector<8xbf16> loc(#loc)
    %1138 = llvm.insertelement %1137, %1136[%61 : i32] : vector<8xbf16> loc(#loc)
    %1139 = llvm.extractelement %1126[%63 : i32] : vector<8xbf16> loc(#loc)
    %1140 = llvm.insertelement %1139, %1138[%63 : i32] : vector<8xbf16> loc(#loc)
    %1141 = llvm.extractelement %1126[%50 : i32] : vector<8xbf16> loc(#loc)
    %1142 = llvm.insertelement %1141, %1140[%50 : i32] : vector<8xbf16> loc(#loc)
    %1143 = llvm.insertelement %983, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %1144 = llvm.insertelement %984, %1143[%53 : i32] : vector<8xbf16> loc(#loc)
    %1145 = llvm.insertelement %985, %1144[%52 : i32] : vector<8xbf16> loc(#loc)
    %1146 = llvm.insertelement %986, %1145[%57 : i32] : vector<8xbf16> loc(#loc)
    %1147 = llvm.insertelement %987, %1146[%51 : i32] : vector<8xbf16> loc(#loc)
    %1148 = llvm.insertelement %988, %1147[%61 : i32] : vector<8xbf16> loc(#loc)
    %1149 = llvm.insertelement %989, %1148[%63 : i32] : vector<8xbf16> loc(#loc)
    %1150 = llvm.insertelement %990, %1149[%50 : i32] : vector<8xbf16> loc(#loc)
    %1151 = llvm.extractelement %1150[%64 : i32] : vector<8xbf16> loc(#loc)
    %1152 = llvm.insertelement %1151, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %1153 = llvm.extractelement %1150[%53 : i32] : vector<8xbf16> loc(#loc)
    %1154 = llvm.insertelement %1153, %1152[%53 : i32] : vector<8xbf16> loc(#loc)
    %1155 = llvm.extractelement %1150[%52 : i32] : vector<8xbf16> loc(#loc)
    %1156 = llvm.insertelement %1155, %1154[%52 : i32] : vector<8xbf16> loc(#loc)
    %1157 = llvm.extractelement %1150[%57 : i32] : vector<8xbf16> loc(#loc)
    %1158 = llvm.insertelement %1157, %1156[%57 : i32] : vector<8xbf16> loc(#loc)
    %1159 = llvm.extractelement %1150[%51 : i32] : vector<8xbf16> loc(#loc)
    %1160 = llvm.insertelement %1159, %1158[%51 : i32] : vector<8xbf16> loc(#loc)
    %1161 = llvm.extractelement %1150[%61 : i32] : vector<8xbf16> loc(#loc)
    %1162 = llvm.insertelement %1161, %1160[%61 : i32] : vector<8xbf16> loc(#loc)
    %1163 = llvm.extractelement %1150[%63 : i32] : vector<8xbf16> loc(#loc)
    %1164 = llvm.insertelement %1163, %1162[%63 : i32] : vector<8xbf16> loc(#loc)
    %1165 = llvm.extractelement %1150[%50 : i32] : vector<8xbf16> loc(#loc)
    %1166 = llvm.insertelement %1165, %1164[%50 : i32] : vector<8xbf16> loc(#loc)
    %1167 = llvm.insertelement %991, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %1168 = llvm.insertelement %992, %1167[%53 : i32] : vector<8xbf16> loc(#loc)
    %1169 = llvm.insertelement %993, %1168[%52 : i32] : vector<8xbf16> loc(#loc)
    %1170 = llvm.insertelement %994, %1169[%57 : i32] : vector<8xbf16> loc(#loc)
    %1171 = llvm.insertelement %995, %1170[%51 : i32] : vector<8xbf16> loc(#loc)
    %1172 = llvm.insertelement %996, %1171[%61 : i32] : vector<8xbf16> loc(#loc)
    %1173 = llvm.insertelement %997, %1172[%63 : i32] : vector<8xbf16> loc(#loc)
    %1174 = llvm.insertelement %998, %1173[%50 : i32] : vector<8xbf16> loc(#loc)
    %1175 = llvm.extractelement %1174[%64 : i32] : vector<8xbf16> loc(#loc)
    %1176 = llvm.insertelement %1175, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %1177 = llvm.extractelement %1174[%53 : i32] : vector<8xbf16> loc(#loc)
    %1178 = llvm.insertelement %1177, %1176[%53 : i32] : vector<8xbf16> loc(#loc)
    %1179 = llvm.extractelement %1174[%52 : i32] : vector<8xbf16> loc(#loc)
    %1180 = llvm.insertelement %1179, %1178[%52 : i32] : vector<8xbf16> loc(#loc)
    %1181 = llvm.extractelement %1174[%57 : i32] : vector<8xbf16> loc(#loc)
    %1182 = llvm.insertelement %1181, %1180[%57 : i32] : vector<8xbf16> loc(#loc)
    %1183 = llvm.extractelement %1174[%51 : i32] : vector<8xbf16> loc(#loc)
    %1184 = llvm.insertelement %1183, %1182[%51 : i32] : vector<8xbf16> loc(#loc)
    %1185 = llvm.extractelement %1174[%61 : i32] : vector<8xbf16> loc(#loc)
    %1186 = llvm.insertelement %1185, %1184[%61 : i32] : vector<8xbf16> loc(#loc)
    %1187 = llvm.extractelement %1174[%63 : i32] : vector<8xbf16> loc(#loc)
    %1188 = llvm.insertelement %1187, %1186[%63 : i32] : vector<8xbf16> loc(#loc)
    %1189 = llvm.extractelement %1174[%50 : i32] : vector<8xbf16> loc(#loc)
    %1190 = llvm.insertelement %1189, %1188[%50 : i32] : vector<8xbf16> loc(#loc)
    %1191 = rocdl.mfma.f32.16x16x32.bf16 %1118, %1022, %866, %64, %64, %64 : (vector<8xbf16>, vector<8xbf16>, vector<4xf32>, i32, i32, i32) -> vector<4xf32> loc(#loc)
    %1192 = rocdl.mfma.f32.16x16x32.bf16 %1142, %1046, %1191, %64, %64, %64 : (vector<8xbf16>, vector<8xbf16>, vector<4xf32>, i32, i32, i32) -> vector<4xf32> loc(#loc)
    %1193 = rocdl.mfma.f32.16x16x32.bf16 %1166, %1070, %1192, %64, %64, %64 : (vector<8xbf16>, vector<8xbf16>, vector<4xf32>, i32, i32, i32) -> vector<4xf32> loc(#loc)
    %1194 = rocdl.mfma.f32.16x16x32.bf16 %1190, %1094, %1193, %64, %64, %64 : (vector<8xbf16>, vector<8xbf16>, vector<4xf32>, i32, i32, i32) -> vector<4xf32> loc(#loc)
    %1195 = llvm.extractelement %1194[%64 : i32] : vector<4xf32> loc(#loc)
    %1196 = llvm.extractelement %1194[%53 : i32] : vector<4xf32> loc(#loc)
    %1197 = llvm.extractelement %1194[%52 : i32] : vector<4xf32> loc(#loc)
    %1198 = llvm.extractelement %1194[%57 : i32] : vector<4xf32> loc(#loc)
    %1199 = llvm.fadd %871, %1195 : f32 loc(#loc)
    %1200 = llvm.fadd %872, %1196 : f32 loc(#loc)
    %1201 = llvm.fadd %873, %1197 : f32 loc(#loc)
    %1202 = llvm.fadd %874, %1198 : f32 loc(#loc)
    %1203 = llvm.mul %109, %73 : i32 loc(#loc)
    %1204 = llvm.add %135, %1203 : i32 loc(#loc)
    %1205 = llvm.insertelement %1199, %1[%64 : i32] : vector<2xf32> loc(#loc)
    %1206 = llvm.insertelement %1200, %1205[%53 : i32] : vector<2xf32> loc(#loc)
    %1207 = llvm.fptrunc %1206 : vector<2xf32> to vector<2xbf16> loc(#loc)
    %1208 = llvm.extractelement %1207[%64 : i32] : vector<2xbf16> loc(#loc)
    %1209 = llvm.extractelement %1207[%53 : i32] : vector<2xbf16> loc(#loc)
    %1210 = llvm.insertelement %1201, %1[%64 : i32] : vector<2xf32> loc(#loc)
    %1211 = llvm.insertelement %1202, %1210[%53 : i32] : vector<2xf32> loc(#loc)
    %1212 = llvm.fptrunc %1211 : vector<2xf32> to vector<2xbf16> loc(#loc)
    %1213 = llvm.extractelement %1212[%64 : i32] : vector<2xbf16> loc(#loc)
    %1214 = llvm.extractelement %1212[%53 : i32] : vector<2xbf16> loc(#loc)
    %1215 = rocdl.make.buffer.rsrc %out, %11, %9, %10 : <1> to <8> loc(#loc)
    %1216 = llvm.insertelement %1208, %0[%64 : i32] : vector<4xbf16> loc(#loc)
    %1217 = llvm.insertelement %1209, %1216[%53 : i32] : vector<4xbf16> loc(#loc)
    %1218 = llvm.insertelement %1213, %1217[%52 : i32] : vector<4xbf16> loc(#loc)
    %1219 = llvm.insertelement %1214, %1218[%57 : i32] : vector<4xbf16> loc(#loc)
    %1220 = llvm.bitcast %1219 : vector<4xbf16> to vector<2xi32> loc(#loc)
    %1221 = llvm.mul %1204, %52 : i32 loc(#loc)
    %1222 = llvm.select %46, %1221, %7 : i1, i32 loc(#loc)
    rocdl.raw.ptr.buffer.store %1220, %1215, %1222, %64, %64 : vector<2xi32> loc(#loc)
    llvm.return loc(#loc)
  } loc(#loc)
} loc(#loc)


// -----// IR Dump Before SymbolDCE (symbol-dce) ('builtin.module' operation) //----- //
#loc = loc(unknown)
#loc1 = loc("a_base")
#loc2 = loc("stride_a0")
#loc3 = loc("b_base")
#loc4 = loc("stride_b1")
#loc5 = loc("b_scale")
#loc6 = loc("out")
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.shared = 16384 : i32, ttg.target = "hip:gfx950", "ttg.threads-per-warp" = 64 : i32} {
  llvm.mlir.global external @global_smem() {addr_space = 3 : i32, alignment = 16 : i64} : !llvm.array<0 x i8> loc(#loc)
  llvm.func @"__triton_hip_predicated_load_vector<8xbf16>_!llvm.ptr<1>_i1_vector<8xbf16>_"(!llvm.ptr<1>, i1, vector<8xbf16>) -> vector<8xbf16> attributes {libname = "", libpath = ""} loc(#loc)
  llvm.func @"__triton_hip_predicated_store_!llvm.void_!llvm.ptr<3>_vector<8xbf16>_i1_"(!llvm.ptr<3>, vector<8xbf16>, i1) attributes {libname = "", libpath = ""} loc(#loc)
  llvm.func @"__triton_hip_predicated_load_vector<8xbf16>_!llvm.ptr<3>_i1_vector<8xbf16>_"(!llvm.ptr<3>, i1, vector<8xbf16>) -> vector<8xbf16> attributes {libname = "", libpath = ""} loc(#loc)
  llvm.func @"__triton_hip_predicated_load_vector<16xi8>_!llvm.ptr<1>_i1_vector<16xi8>_"(!llvm.ptr<1>, i1, vector<16xi8>) -> vector<16xi8> attributes {libname = "", libpath = ""} loc(#loc)
  llvm.func @"__triton_hip_predicated_store_!llvm.void_!llvm.ptr<3>_vector<4xi8>_i1_"(!llvm.ptr<3>, vector<4xi8>, i1) attributes {libname = "", libpath = ""} loc(#loc)
  llvm.func @"__triton_hip_predicated_load_vector<4xi8>_!llvm.ptr<3>_i1_vector<4xi8>_"(!llvm.ptr<3>, i1, vector<4xi8>) -> vector<4xi8> attributes {libname = "", libpath = ""} loc(#loc)
  llvm.func @"__triton_hip_predicated_store_!llvm.void_!llvm.ptr<3>_vector<1xi8>_i1_"(!llvm.ptr<3>, vector<1xi8>, i1) attributes {libname = "", libpath = ""} loc(#loc)
  llvm.func @"__triton_hip_predicated_load_vector<1xi8>_!llvm.ptr<3>_i1_vector<1xi8>_"(!llvm.ptr<3>, i1, vector<1xi8>) -> vector<1xi8> attributes {libname = "", libpath = ""} loc(#loc)
  llvm.func @dot_scale_kernel(%a_base: !llvm.ptr<1> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("a_base"), %stride_a0: i32 {tt.divisibility = 16 : i32} loc("stride_a0"), %b_base: !llvm.ptr<1> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("b_base"), %stride_b1: i32 {tt.divisibility = 16 : i32} loc("stride_b1"), %b_scale: !llvm.ptr<1> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("b_scale"), %out: !llvm.ptr<1> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("out"), %arg6: !llvm.ptr<1> loc(unknown), %arg7: !llvm.ptr<1> loc(unknown)) attributes {noinline = false, nvvm.kernel = 1 : ui1, nvvm.reqntid = array<i32: 128>} {
    %0 = llvm.mlir.undef : vector<4xbf16> loc(#loc)
    %1 = llvm.mlir.undef : vector<2xf32> loc(#loc)
    %2 = llvm.mlir.undef : vector<4xf32> loc(#loc)
    %3 = llvm.mlir.constant(28 : i32) : i32 loc(#loc)
    %4 = llvm.mlir.constant(20 : i32) : i32 loc(#loc)
    %5 = llvm.mlir.undef : vector<1xi8> loc(#loc)
    %6 = llvm.mlir.constant(63 : i32) : i32 loc(#loc)
    %7 = llvm.mlir.constant(-2147483648 : i32) : i32 loc(#loc)
    %8 = llvm.mlir.constant(dense<0> : vector<1xi8>) : vector<1xi8> loc(#loc)
    %9 = llvm.mlir.constant(2147483646 : i32) : i32 loc(#loc)
    %10 = llvm.mlir.constant(159744 : i32) : i32 loc(#loc)
    %11 = llvm.mlir.constant(0 : i16) : i16 loc(#loc)
    %12 = llvm.mlir.constant(580 : i32) : i32 loc(#loc)
    %13 = llvm.mlir.constant(dense<0> : vector<4xi8>) : vector<4xi8> loc(#loc)
    %14 = llvm.mlir.constant(260 : i32) : i32 loc(#loc)
    %15 = llvm.mlir.constant(2048 : i32) : i32 loc(#loc)
    %16 = llvm.mlir.undef : vector<4xi8> loc(#loc)
    %17 = llvm.mlir.constant(576 : i32) : i32 loc(#loc)
    %18 = llvm.mlir.constant(1024 : i32) : i32 loc(#loc)
    %19 = llvm.mlir.constant(15 : index) : i32 loc(#loc)
    %20 = llvm.mlir.constant(14 : index) : i32 loc(#loc)
    %21 = llvm.mlir.constant(13 : index) : i32 loc(#loc)
    %22 = llvm.mlir.constant(12 : index) : i32 loc(#loc)
    %23 = llvm.mlir.constant(11 : index) : i32 loc(#loc)
    %24 = llvm.mlir.constant(10 : index) : i32 loc(#loc)
    %25 = llvm.mlir.constant(9 : index) : i32 loc(#loc)
    %26 = llvm.mlir.constant(8 : index) : i32 loc(#loc)
    %27 = llvm.mlir.constant(dense<0> : vector<16xi8>) : vector<16xi8> loc(#loc)
    %28 = llvm.mlir.constant(96 : i32) : i32 loc(#loc)
    %29 = llvm.mlir.constant(30 : i32) : i32 loc(#loc)
    %30 = llvm.mlir.constant(2112 : i32) : i32 loc(#loc)
    %31 = llvm.mlir.undef : vector<8xbf16> loc(#loc)
    %32 = llvm.mlir.constant(8192 : i32) : i32 loc(#loc)
    %33 = llvm.mlir.constant(256 : i32) : i32 loc(#loc)
    %34 = llvm.mlir.constant(4096 : i32) : i32 loc(#loc)
    %35 = llvm.mlir.constant(192 : i32) : i32 loc(#loc)
    %36 = llvm.mlir.constant(206 : i32) : i32 loc(#loc)
    %37 = llvm.mlir.addressof @global_smem : !llvm.ptr<3> loc(#loc)
    %38 = llvm.mlir.constant(7 : index) : i32 loc(#loc)
    %39 = llvm.mlir.constant(6 : index) : i32 loc(#loc)
    %40 = llvm.mlir.constant(5 : index) : i32 loc(#loc)
    %41 = llvm.mlir.constant(4 : index) : i32 loc(#loc)
    %42 = llvm.mlir.constant(3 : index) : i32 loc(#loc)
    %43 = llvm.mlir.constant(2 : index) : i32 loc(#loc)
    %44 = llvm.mlir.constant(1 : index) : i32 loc(#loc)
    %45 = llvm.mlir.constant(dense<0.000000e+00> : vector<8xbf16>) : vector<8xbf16> loc(#loc)
    %46 = llvm.mlir.constant(true) : i1 loc(#loc)
    %47 = llvm.mlir.constant(112 : i32) : i32 loc(#loc)
    %48 = llvm.mlir.constant(14 : i32) : i32 loc(#loc)
    %49 = llvm.mlir.constant(12 : i32) : i32 loc(#loc)
    %50 = llvm.mlir.constant(7 : i32) : i32 loc(#loc)
    %51 = llvm.mlir.constant(4 : i32) : i32 loc(#loc)
    %52 = llvm.mlir.constant(2 : i32) : i32 loc(#loc)
    %53 = llvm.mlir.constant(1 : i32) : i32 loc(#loc)
    %54 = llvm.mlir.constant(31 : i32) : i32 loc(#loc)
    %55 = llvm.mlir.constant(128 : i32) : i32 loc(#loc)
    %56 = llvm.mlir.constant(15 : i32) : i32 loc(#loc)
    %57 = llvm.mlir.constant(3 : i32) : i32 loc(#loc)
    %58 = llvm.mlir.constant(248 : i32) : i32 loc(#loc)
    %59 = llvm.mlir.constant(24 : i32) : i32 loc(#loc)
    %60 = llvm.mlir.constant(16 : i32) : i32 loc(#loc)
    %61 = llvm.mlir.constant(5 : i32) : i32 loc(#loc)
    %62 = llvm.mlir.constant(224 : i32) : i32 loc(#loc)
    %63 = llvm.mlir.constant(6 : i32) : i32 loc(#loc)
    %64 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %65 = llvm.mlir.constant(64 : i32) : i32 loc(#loc)
    %66 = llvm.mlir.constant(255 : i32) : i32 loc(#loc)
    %67 = llvm.mlir.constant(0 : index) : i32 loc(#loc)
    %68 = llvm.mlir.constant(0.000000e+00 : f32) : f32 loc(#loc)
    %69 = llvm.mlir.constant(0x7FC0 : bf16) : bf16 loc(#loc)
    %70 = llvm.mlir.constant(-1 : i8) : i8 loc(#loc)
    %71 = llvm.mlir.constant(7 : i16) : i16 loc(#loc)
    %72 = llvm.mlir.constant(8 : i32) : i32 loc(#loc)
    %73 = llvm.mlir.constant(32 : i32) : i32 loc(#loc)
    %74 = rocdl.workitem.id.x : i32 loc(#loc)
    %75 = llvm.and %74, %66 : i32 loc(#loc)
    %76 = llvm.urem %75, %65 : i32 loc(#loc)
    %77 = llvm.udiv %75, %65 : i32 loc(#loc)
    %78 = llvm.shl %76, %64 : i32 loc(#loc)
    %79 = llvm.or %64, %78 : i32 loc(#loc)
    %80 = llvm.shl %77, %63 : i32 loc(#loc)
    %81 = llvm.or %79, %80 : i32 loc(#loc)
    %82 = llvm.and %81, %62 : i32 loc(#loc)
    %83 = llvm.lshr %82, %61 : i32 loc(#loc)
    %84 = llvm.xor %64, %83 : i32 loc(#loc)
    %85 = llvm.xor %64, %84 : i32 loc(#loc)
    %86 = llvm.xor %85, %64 : i32 loc(#loc)
    %87 = llvm.xor %85, %72 : i32 loc(#loc)
    %88 = llvm.xor %85, %60 : i32 loc(#loc)
    %89 = llvm.xor %85, %59 : i32 loc(#loc)
    %90 = llvm.add %86, %67 : i32 loc(#loc)
    %91 = llvm.add %87, %67 : i32 loc(#loc)
    %92 = llvm.add %88, %67 : i32 loc(#loc)
    %93 = llvm.add %89, %67 : i32 loc(#loc)
    %94 = llvm.and %81, %58 : i32 loc(#loc)
    %95 = llvm.lshr %94, %57 : i32 loc(#loc)
    %96 = llvm.xor %64, %95 : i32 loc(#loc)
    %97 = llvm.xor %64, %96 : i32 loc(#loc)
    %98 = llvm.xor %97, %64 : i32 loc(#loc)
    %99 = llvm.add %98, %67 : i32 loc(#loc)
    %100 = llvm.and %81, %56 : i32 loc(#loc)
    %101 = llvm.lshr %100, %64 : i32 loc(#loc)
    %102 = llvm.xor %64, %101 : i32 loc(#loc)
    %103 = llvm.and %81, %55 : i32 loc(#loc)
    %104 = llvm.icmp "eq" %103, %64 : i32 loc(#loc)
    %105 = llvm.select %104, %64, %60 : i1, i32 loc(#loc)
    %106 = llvm.xor %102, %105 : i32 loc(#loc)
    %107 = llvm.xor %64, %106 : i32 loc(#loc)
    %108 = llvm.xor %107, %64 : i32 loc(#loc)
    %109 = llvm.add %108, %67 : i32 loc(#loc)
    %110 = llvm.mul %90, %stride_a0 : i32 loc(#loc)
    %111 = llvm.mul %91, %stride_a0 : i32 loc(#loc)
    %112 = llvm.mul %92, %stride_a0 : i32 loc(#loc)
    %113 = llvm.mul %93, %stride_a0 : i32 loc(#loc)
    %114 = llvm.and %81, %54 : i32 loc(#loc)
    %115 = llvm.shl %114, %57 : i32 loc(#loc)
    %116 = llvm.xor %64, %115 : i32 loc(#loc)
    %117 = llvm.xor %64, %116 : i32 loc(#loc)
    %118 = llvm.xor %117, %64 : i32 loc(#loc)
    %119 = llvm.add %118, %67 : i32 loc(#loc)
    %120 = llvm.add %119, %110 : i32 loc(#loc)
    %121 = llvm.add %119, %111 : i32 loc(#loc)
    %122 = llvm.add %119, %112 : i32 loc(#loc)
    %123 = llvm.add %119, %113 : i32 loc(#loc)
    %124 = llvm.and %81, %50 : i32 loc(#loc)
    %125 = llvm.shl %124, %51 : i32 loc(#loc)
    %126 = llvm.xor %64, %125 : i32 loc(#loc)
    %127 = llvm.xor %64, %126 : i32 loc(#loc)
    %128 = llvm.xor %127, %64 : i32 loc(#loc)
    %129 = llvm.add %128, %67 : i32 loc(#loc)
    %130 = llvm.and %81, %47 : i32 loc(#loc)
    %131 = llvm.lshr %130, %52 : i32 loc(#loc)
    %132 = llvm.xor %64, %131 : i32 loc(#loc)
    %133 = llvm.xor %64, %132 : i32 loc(#loc)
    %134 = llvm.xor %133, %64 : i32 loc(#loc)
    %135 = llvm.add %134, %67 : i32 loc(#loc)
    %136 = llvm.mul %99, %stride_b1 : i32 loc(#loc)
    %137 = llvm.add %136, %129 : i32 loc(#loc)
    %138 = llvm.getelementptr %a_base[%120] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc)
    %139 = llvm.getelementptr %a_base[%121] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc)
    %140 = llvm.getelementptr %a_base[%122] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc)
    %141 = llvm.getelementptr %a_base[%123] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc)
    %142 = llvm.call @"__triton_hip_predicated_load_vector<8xbf16>_!llvm.ptr<1>_i1_vector<8xbf16>_"(%138, %46, %45) : (!llvm.ptr<1>, i1, vector<8xbf16>) -> vector<8xbf16> loc(#loc)
    %143 = llvm.extractelement %142[%67 : i32] : vector<8xbf16> loc(#loc)
    %144 = llvm.extractelement %142[%44 : i32] : vector<8xbf16> loc(#loc)
    %145 = llvm.extractelement %142[%43 : i32] : vector<8xbf16> loc(#loc)
    %146 = llvm.extractelement %142[%42 : i32] : vector<8xbf16> loc(#loc)
    %147 = llvm.extractelement %142[%41 : i32] : vector<8xbf16> loc(#loc)
    %148 = llvm.extractelement %142[%40 : i32] : vector<8xbf16> loc(#loc)
    %149 = llvm.extractelement %142[%39 : i32] : vector<8xbf16> loc(#loc)
    %150 = llvm.extractelement %142[%38 : i32] : vector<8xbf16> loc(#loc)
    %151 = llvm.call @"__triton_hip_predicated_load_vector<8xbf16>_!llvm.ptr<1>_i1_vector<8xbf16>_"(%139, %46, %45) : (!llvm.ptr<1>, i1, vector<8xbf16>) -> vector<8xbf16> loc(#loc)
    %152 = llvm.extractelement %151[%67 : i32] : vector<8xbf16> loc(#loc)
    %153 = llvm.extractelement %151[%44 : i32] : vector<8xbf16> loc(#loc)
    %154 = llvm.extractelement %151[%43 : i32] : vector<8xbf16> loc(#loc)
    %155 = llvm.extractelement %151[%42 : i32] : vector<8xbf16> loc(#loc)
    %156 = llvm.extractelement %151[%41 : i32] : vector<8xbf16> loc(#loc)
    %157 = llvm.extractelement %151[%40 : i32] : vector<8xbf16> loc(#loc)
    %158 = llvm.extractelement %151[%39 : i32] : vector<8xbf16> loc(#loc)
    %159 = llvm.extractelement %151[%38 : i32] : vector<8xbf16> loc(#loc)
    %160 = llvm.call @"__triton_hip_predicated_load_vector<8xbf16>_!llvm.ptr<1>_i1_vector<8xbf16>_"(%140, %46, %45) : (!llvm.ptr<1>, i1, vector<8xbf16>) -> vector<8xbf16> loc(#loc)
    %161 = llvm.extractelement %160[%67 : i32] : vector<8xbf16> loc(#loc)
    %162 = llvm.extractelement %160[%44 : i32] : vector<8xbf16> loc(#loc)
    %163 = llvm.extractelement %160[%43 : i32] : vector<8xbf16> loc(#loc)
    %164 = llvm.extractelement %160[%42 : i32] : vector<8xbf16> loc(#loc)
    %165 = llvm.extractelement %160[%41 : i32] : vector<8xbf16> loc(#loc)
    %166 = llvm.extractelement %160[%40 : i32] : vector<8xbf16> loc(#loc)
    %167 = llvm.extractelement %160[%39 : i32] : vector<8xbf16> loc(#loc)
    %168 = llvm.extractelement %160[%38 : i32] : vector<8xbf16> loc(#loc)
    %169 = llvm.call @"__triton_hip_predicated_load_vector<8xbf16>_!llvm.ptr<1>_i1_vector<8xbf16>_"(%141, %46, %45) : (!llvm.ptr<1>, i1, vector<8xbf16>) -> vector<8xbf16> loc(#loc)
    %170 = llvm.extractelement %169[%67 : i32] : vector<8xbf16> loc(#loc)
    %171 = llvm.extractelement %169[%44 : i32] : vector<8xbf16> loc(#loc)
    %172 = llvm.extractelement %169[%43 : i32] : vector<8xbf16> loc(#loc)
    %173 = llvm.extractelement %169[%42 : i32] : vector<8xbf16> loc(#loc)
    %174 = llvm.extractelement %169[%41 : i32] : vector<8xbf16> loc(#loc)
    %175 = llvm.extractelement %169[%40 : i32] : vector<8xbf16> loc(#loc)
    %176 = llvm.extractelement %169[%39 : i32] : vector<8xbf16> loc(#loc)
    %177 = llvm.extractelement %169[%38 : i32] : vector<8xbf16> loc(#loc)
    %178 = llvm.and %81, %36 : i32 loc(#loc)
    %179 = llvm.shl %178, %57 : i32 loc(#loc)
    %180 = llvm.xor %64, %179 : i32 loc(#loc)
    %181 = llvm.and %81, %35 : i32 loc(#loc)
    %182 = llvm.lshr %181, %52 : i32 loc(#loc)
    %183 = llvm.xor %180, %182 : i32 loc(#loc)
    %184 = llvm.and %81, %53 : i32 loc(#loc)
    %185 = llvm.icmp "eq" %184, %64 : i32 loc(#loc)
    %186 = llvm.select %185, %64, %34 : i1, i32 loc(#loc)
    %187 = llvm.xor %183, %186 : i32 loc(#loc)
    %188 = llvm.and %81, %60 : i32 loc(#loc)
    %189 = llvm.icmp "eq" %188, %64 : i32 loc(#loc)
    %190 = llvm.select %189, %64, %33 : i1, i32 loc(#loc)
    %191 = llvm.xor %187, %190 : i32 loc(#loc)
    %192 = llvm.and %81, %73 : i32 loc(#loc)
    %193 = llvm.icmp "eq" %192, %64 : i32 loc(#loc)
    %194 = llvm.select %193, %64, %32 : i1, i32 loc(#loc)
    %195 = llvm.xor %191, %194 : i32 loc(#loc)
    %196 = llvm.xor %64, %195 : i32 loc(#loc)
    %197 = llvm.mul %64, %52 : i32 loc(#loc)
    %198 = llvm.xor %196, %197 : i32 loc(#loc)
    %199 = llvm.xor %198, %64 : i32 loc(#loc)
    %200 = llvm.add %199, %64 : i32 loc(#loc)
    %201 = llvm.getelementptr inbounds %37[%200] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %202 = llvm.insertelement %143, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %203 = llvm.insertelement %144, %202[%53 : i32] : vector<8xbf16> loc(#loc)
    %204 = llvm.insertelement %145, %203[%52 : i32] : vector<8xbf16> loc(#loc)
    %205 = llvm.insertelement %146, %204[%57 : i32] : vector<8xbf16> loc(#loc)
    %206 = llvm.insertelement %147, %205[%51 : i32] : vector<8xbf16> loc(#loc)
    %207 = llvm.insertelement %148, %206[%61 : i32] : vector<8xbf16> loc(#loc)
    %208 = llvm.insertelement %149, %207[%63 : i32] : vector<8xbf16> loc(#loc)
    %209 = llvm.insertelement %150, %208[%50 : i32] : vector<8xbf16> loc(#loc)
    llvm.call @"__triton_hip_predicated_store_!llvm.void_!llvm.ptr<3>_vector<8xbf16>_i1_"(%201, %209, %46) : (!llvm.ptr<3>, vector<8xbf16>, i1) -> () loc(#loc)
    %210 = llvm.add %199, %55 : i32 loc(#loc)
    %211 = llvm.getelementptr inbounds %37[%210] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %212 = llvm.insertelement %161, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %213 = llvm.insertelement %162, %212[%53 : i32] : vector<8xbf16> loc(#loc)
    %214 = llvm.insertelement %163, %213[%52 : i32] : vector<8xbf16> loc(#loc)
    %215 = llvm.insertelement %164, %214[%57 : i32] : vector<8xbf16> loc(#loc)
    %216 = llvm.insertelement %165, %215[%51 : i32] : vector<8xbf16> loc(#loc)
    %217 = llvm.insertelement %166, %216[%61 : i32] : vector<8xbf16> loc(#loc)
    %218 = llvm.insertelement %167, %217[%63 : i32] : vector<8xbf16> loc(#loc)
    %219 = llvm.insertelement %168, %218[%50 : i32] : vector<8xbf16> loc(#loc)
    llvm.call @"__triton_hip_predicated_store_!llvm.void_!llvm.ptr<3>_vector<8xbf16>_i1_"(%211, %219, %46) : (!llvm.ptr<3>, vector<8xbf16>, i1) -> () loc(#loc)
    %220 = llvm.xor %198, %30 : i32 loc(#loc)
    %221 = llvm.add %220, %64 : i32 loc(#loc)
    %222 = llvm.getelementptr inbounds %37[%221] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %223 = llvm.insertelement %152, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %224 = llvm.insertelement %153, %223[%53 : i32] : vector<8xbf16> loc(#loc)
    %225 = llvm.insertelement %154, %224[%52 : i32] : vector<8xbf16> loc(#loc)
    %226 = llvm.insertelement %155, %225[%57 : i32] : vector<8xbf16> loc(#loc)
    %227 = llvm.insertelement %156, %226[%51 : i32] : vector<8xbf16> loc(#loc)
    %228 = llvm.insertelement %157, %227[%61 : i32] : vector<8xbf16> loc(#loc)
    %229 = llvm.insertelement %158, %228[%63 : i32] : vector<8xbf16> loc(#loc)
    %230 = llvm.insertelement %159, %229[%50 : i32] : vector<8xbf16> loc(#loc)
    llvm.call @"__triton_hip_predicated_store_!llvm.void_!llvm.ptr<3>_vector<8xbf16>_i1_"(%222, %230, %46) : (!llvm.ptr<3>, vector<8xbf16>, i1) -> () loc(#loc)
    %231 = llvm.add %220, %55 : i32 loc(#loc)
    %232 = llvm.getelementptr inbounds %37[%231] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %233 = llvm.insertelement %170, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %234 = llvm.insertelement %171, %233[%53 : i32] : vector<8xbf16> loc(#loc)
    %235 = llvm.insertelement %172, %234[%52 : i32] : vector<8xbf16> loc(#loc)
    %236 = llvm.insertelement %173, %235[%57 : i32] : vector<8xbf16> loc(#loc)
    %237 = llvm.insertelement %174, %236[%51 : i32] : vector<8xbf16> loc(#loc)
    %238 = llvm.insertelement %175, %237[%61 : i32] : vector<8xbf16> loc(#loc)
    %239 = llvm.insertelement %176, %238[%63 : i32] : vector<8xbf16> loc(#loc)
    %240 = llvm.insertelement %177, %239[%50 : i32] : vector<8xbf16> loc(#loc)
    llvm.call @"__triton_hip_predicated_store_!llvm.void_!llvm.ptr<3>_vector<8xbf16>_i1_"(%232, %240, %46) : (!llvm.ptr<3>, vector<8xbf16>, i1) -> () loc(#loc)
    rocdl.barrier loc(#loc)
    %241 = llvm.and %81, %29 : i32 loc(#loc)
    %242 = llvm.shl %241, %72 : i32 loc(#loc)
    %243 = llvm.xor %64, %242 : i32 loc(#loc)
    %244 = llvm.and %81, %48 : i32 loc(#loc)
    %245 = llvm.shl %244, %57 : i32 loc(#loc)
    %246 = llvm.xor %243, %245 : i32 loc(#loc)
    %247 = llvm.select %185, %64, %32 : i1, i32 loc(#loc)
    %248 = llvm.xor %246, %247 : i32 loc(#loc)
    %249 = llvm.select %193, %64, %60 : i1, i32 loc(#loc)
    %250 = llvm.xor %248, %249 : i32 loc(#loc)
    %251 = llvm.select %104, %64, %55 : i1, i32 loc(#loc)
    %252 = llvm.xor %250, %251 : i32 loc(#loc)
    %253 = llvm.xor %64, %252 : i32 loc(#loc)
    %254 = llvm.xor %253, %197 : i32 loc(#loc)
    %255 = llvm.xor %254, %64 : i32 loc(#loc)
    %256 = llvm.add %255, %64 : i32 loc(#loc)
    %257 = llvm.getelementptr inbounds %37[%256] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %258 = llvm.call @"__triton_hip_predicated_load_vector<8xbf16>_!llvm.ptr<3>_i1_vector<8xbf16>_"(%257, %46, %45) : (!llvm.ptr<3>, i1, vector<8xbf16>) -> vector<8xbf16> loc(#loc)
    %259 = llvm.extractelement %258[%64 : i32] : vector<8xbf16> loc(#loc)
    %260 = llvm.extractelement %258[%53 : i32] : vector<8xbf16> loc(#loc)
    %261 = llvm.extractelement %258[%52 : i32] : vector<8xbf16> loc(#loc)
    %262 = llvm.extractelement %258[%57 : i32] : vector<8xbf16> loc(#loc)
    %263 = llvm.extractelement %258[%51 : i32] : vector<8xbf16> loc(#loc)
    %264 = llvm.extractelement %258[%61 : i32] : vector<8xbf16> loc(#loc)
    %265 = llvm.extractelement %258[%63 : i32] : vector<8xbf16> loc(#loc)
    %266 = llvm.extractelement %258[%50 : i32] : vector<8xbf16> loc(#loc)
    %267 = llvm.add %255, %33 : i32 loc(#loc)
    %268 = llvm.getelementptr inbounds %37[%267] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %269 = llvm.call @"__triton_hip_predicated_load_vector<8xbf16>_!llvm.ptr<3>_i1_vector<8xbf16>_"(%268, %46, %45) : (!llvm.ptr<3>, i1, vector<8xbf16>) -> vector<8xbf16> loc(#loc)
    %270 = llvm.extractelement %269[%64 : i32] : vector<8xbf16> loc(#loc)
    %271 = llvm.extractelement %269[%53 : i32] : vector<8xbf16> loc(#loc)
    %272 = llvm.extractelement %269[%52 : i32] : vector<8xbf16> loc(#loc)
    %273 = llvm.extractelement %269[%57 : i32] : vector<8xbf16> loc(#loc)
    %274 = llvm.extractelement %269[%51 : i32] : vector<8xbf16> loc(#loc)
    %275 = llvm.extractelement %269[%61 : i32] : vector<8xbf16> loc(#loc)
    %276 = llvm.extractelement %269[%63 : i32] : vector<8xbf16> loc(#loc)
    %277 = llvm.extractelement %269[%50 : i32] : vector<8xbf16> loc(#loc)
    %278 = llvm.xor %254, %73 : i32 loc(#loc)
    %279 = llvm.add %278, %64 : i32 loc(#loc)
    %280 = llvm.getelementptr inbounds %37[%279] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %281 = llvm.call @"__triton_hip_predicated_load_vector<8xbf16>_!llvm.ptr<3>_i1_vector<8xbf16>_"(%280, %46, %45) : (!llvm.ptr<3>, i1, vector<8xbf16>) -> vector<8xbf16> loc(#loc)
    %282 = llvm.extractelement %281[%64 : i32] : vector<8xbf16> loc(#loc)
    %283 = llvm.extractelement %281[%53 : i32] : vector<8xbf16> loc(#loc)
    %284 = llvm.extractelement %281[%52 : i32] : vector<8xbf16> loc(#loc)
    %285 = llvm.extractelement %281[%57 : i32] : vector<8xbf16> loc(#loc)
    %286 = llvm.extractelement %281[%51 : i32] : vector<8xbf16> loc(#loc)
    %287 = llvm.extractelement %281[%61 : i32] : vector<8xbf16> loc(#loc)
    %288 = llvm.extractelement %281[%63 : i32] : vector<8xbf16> loc(#loc)
    %289 = llvm.extractelement %281[%50 : i32] : vector<8xbf16> loc(#loc)
    %290 = llvm.add %278, %33 : i32 loc(#loc)
    %291 = llvm.getelementptr inbounds %37[%290] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %292 = llvm.call @"__triton_hip_predicated_load_vector<8xbf16>_!llvm.ptr<3>_i1_vector<8xbf16>_"(%291, %46, %45) : (!llvm.ptr<3>, i1, vector<8xbf16>) -> vector<8xbf16> loc(#loc)
    %293 = llvm.extractelement %292[%64 : i32] : vector<8xbf16> loc(#loc)
    %294 = llvm.extractelement %292[%53 : i32] : vector<8xbf16> loc(#loc)
    %295 = llvm.extractelement %292[%52 : i32] : vector<8xbf16> loc(#loc)
    %296 = llvm.extractelement %292[%57 : i32] : vector<8xbf16> loc(#loc)
    %297 = llvm.extractelement %292[%51 : i32] : vector<8xbf16> loc(#loc)
    %298 = llvm.extractelement %292[%61 : i32] : vector<8xbf16> loc(#loc)
    %299 = llvm.extractelement %292[%63 : i32] : vector<8xbf16> loc(#loc)
    %300 = llvm.extractelement %292[%50 : i32] : vector<8xbf16> loc(#loc)
    %301 = llvm.xor %254, %65 : i32 loc(#loc)
    %302 = llvm.add %301, %64 : i32 loc(#loc)
    %303 = llvm.getelementptr inbounds %37[%302] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %304 = llvm.call @"__triton_hip_predicated_load_vector<8xbf16>_!llvm.ptr<3>_i1_vector<8xbf16>_"(%303, %46, %45) : (!llvm.ptr<3>, i1, vector<8xbf16>) -> vector<8xbf16> loc(#loc)
    %305 = llvm.extractelement %304[%64 : i32] : vector<8xbf16> loc(#loc)
    %306 = llvm.extractelement %304[%53 : i32] : vector<8xbf16> loc(#loc)
    %307 = llvm.extractelement %304[%52 : i32] : vector<8xbf16> loc(#loc)
    %308 = llvm.extractelement %304[%57 : i32] : vector<8xbf16> loc(#loc)
    %309 = llvm.extractelement %304[%51 : i32] : vector<8xbf16> loc(#loc)
    %310 = llvm.extractelement %304[%61 : i32] : vector<8xbf16> loc(#loc)
    %311 = llvm.extractelement %304[%63 : i32] : vector<8xbf16> loc(#loc)
    %312 = llvm.extractelement %304[%50 : i32] : vector<8xbf16> loc(#loc)
    %313 = llvm.add %301, %33 : i32 loc(#loc)
    %314 = llvm.getelementptr inbounds %37[%313] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %315 = llvm.call @"__triton_hip_predicated_load_vector<8xbf16>_!llvm.ptr<3>_i1_vector<8xbf16>_"(%314, %46, %45) : (!llvm.ptr<3>, i1, vector<8xbf16>) -> vector<8xbf16> loc(#loc)
    %316 = llvm.extractelement %315[%64 : i32] : vector<8xbf16> loc(#loc)
    %317 = llvm.extractelement %315[%53 : i32] : vector<8xbf16> loc(#loc)
    %318 = llvm.extractelement %315[%52 : i32] : vector<8xbf16> loc(#loc)
    %319 = llvm.extractelement %315[%57 : i32] : vector<8xbf16> loc(#loc)
    %320 = llvm.extractelement %315[%51 : i32] : vector<8xbf16> loc(#loc)
    %321 = llvm.extractelement %315[%61 : i32] : vector<8xbf16> loc(#loc)
    %322 = llvm.extractelement %315[%63 : i32] : vector<8xbf16> loc(#loc)
    %323 = llvm.extractelement %315[%50 : i32] : vector<8xbf16> loc(#loc)
    %324 = llvm.xor %254, %28 : i32 loc(#loc)
    %325 = llvm.add %324, %64 : i32 loc(#loc)
    %326 = llvm.getelementptr inbounds %37[%325] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %327 = llvm.call @"__triton_hip_predicated_load_vector<8xbf16>_!llvm.ptr<3>_i1_vector<8xbf16>_"(%326, %46, %45) : (!llvm.ptr<3>, i1, vector<8xbf16>) -> vector<8xbf16> loc(#loc)
    %328 = llvm.extractelement %327[%64 : i32] : vector<8xbf16> loc(#loc)
    %329 = llvm.extractelement %327[%53 : i32] : vector<8xbf16> loc(#loc)
    %330 = llvm.extractelement %327[%52 : i32] : vector<8xbf16> loc(#loc)
    %331 = llvm.extractelement %327[%57 : i32] : vector<8xbf16> loc(#loc)
    %332 = llvm.extractelement %327[%51 : i32] : vector<8xbf16> loc(#loc)
    %333 = llvm.extractelement %327[%61 : i32] : vector<8xbf16> loc(#loc)
    %334 = llvm.extractelement %327[%63 : i32] : vector<8xbf16> loc(#loc)
    %335 = llvm.extractelement %327[%50 : i32] : vector<8xbf16> loc(#loc)
    %336 = llvm.add %324, %33 : i32 loc(#loc)
    %337 = llvm.getelementptr inbounds %37[%336] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %338 = llvm.call @"__triton_hip_predicated_load_vector<8xbf16>_!llvm.ptr<3>_i1_vector<8xbf16>_"(%337, %46, %45) : (!llvm.ptr<3>, i1, vector<8xbf16>) -> vector<8xbf16> loc(#loc)
    %339 = llvm.extractelement %338[%64 : i32] : vector<8xbf16> loc(#loc)
    %340 = llvm.extractelement %338[%53 : i32] : vector<8xbf16> loc(#loc)
    %341 = llvm.extractelement %338[%52 : i32] : vector<8xbf16> loc(#loc)
    %342 = llvm.extractelement %338[%57 : i32] : vector<8xbf16> loc(#loc)
    %343 = llvm.extractelement %338[%51 : i32] : vector<8xbf16> loc(#loc)
    %344 = llvm.extractelement %338[%61 : i32] : vector<8xbf16> loc(#loc)
    %345 = llvm.extractelement %338[%63 : i32] : vector<8xbf16> loc(#loc)
    %346 = llvm.extractelement %338[%50 : i32] : vector<8xbf16> loc(#loc)
    %347 = llvm.getelementptr %b_base[%137] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, i8 loc(#loc)
    %348 = llvm.call @"__triton_hip_predicated_load_vector<16xi8>_!llvm.ptr<1>_i1_vector<16xi8>_"(%347, %46, %27) : (!llvm.ptr<1>, i1, vector<16xi8>) -> vector<16xi8> loc(#loc)
    %349 = llvm.extractelement %348[%67 : i32] : vector<16xi8> loc(#loc)
    %350 = llvm.extractelement %348[%44 : i32] : vector<16xi8> loc(#loc)
    %351 = llvm.extractelement %348[%43 : i32] : vector<16xi8> loc(#loc)
    %352 = llvm.extractelement %348[%42 : i32] : vector<16xi8> loc(#loc)
    %353 = llvm.extractelement %348[%41 : i32] : vector<16xi8> loc(#loc)
    %354 = llvm.extractelement %348[%40 : i32] : vector<16xi8> loc(#loc)
    %355 = llvm.extractelement %348[%39 : i32] : vector<16xi8> loc(#loc)
    %356 = llvm.extractelement %348[%38 : i32] : vector<16xi8> loc(#loc)
    %357 = llvm.extractelement %348[%26 : i32] : vector<16xi8> loc(#loc)
    %358 = llvm.extractelement %348[%25 : i32] : vector<16xi8> loc(#loc)
    %359 = llvm.extractelement %348[%24 : i32] : vector<16xi8> loc(#loc)
    %360 = llvm.extractelement %348[%23 : i32] : vector<16xi8> loc(#loc)
    %361 = llvm.extractelement %348[%22 : i32] : vector<16xi8> loc(#loc)
    %362 = llvm.extractelement %348[%21 : i32] : vector<16xi8> loc(#loc)
    %363 = llvm.extractelement %348[%20 : i32] : vector<16xi8> loc(#loc)
    %364 = llvm.extractelement %348[%19 : i32] : vector<16xi8> loc(#loc)
    rocdl.barrier loc(#loc)
    %365 = llvm.lshr %94, %64 : i32 loc(#loc)
    %366 = llvm.xor %64, %365 : i32 loc(#loc)
    %367 = llvm.select %185, %64, %18 : i1, i32 loc(#loc)
    %368 = llvm.xor %366, %367 : i32 loc(#loc)
    %369 = llvm.and %81, %52 : i32 loc(#loc)
    %370 = llvm.icmp "eq" %369, %64 : i32 loc(#loc)
    %371 = llvm.select %370, %64, %51 : i1, i32 loc(#loc)
    %372 = llvm.xor %368, %371 : i32 loc(#loc)
    %373 = llvm.and %81, %51 : i32 loc(#loc)
    %374 = llvm.icmp "eq" %373, %64 : i32 loc(#loc)
    %375 = llvm.select %374, %64, %17 : i1, i32 loc(#loc)
    %376 = llvm.xor %372, %375 : i32 loc(#loc)
    %377 = llvm.xor %64, %376 : i32 loc(#loc)
    %378 = llvm.mul %64, %53 : i32 loc(#loc)
    %379 = llvm.xor %377, %378 : i32 loc(#loc)
    %380 = llvm.xor %379, %64 : i32 loc(#loc)
    %381 = llvm.add %380, %64 : i32 loc(#loc)
    %382 = llvm.getelementptr inbounds %37[%381] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %383 = llvm.insertelement %349, %16[%64 : i32] : vector<4xi8> loc(#loc)
    %384 = llvm.insertelement %350, %383[%53 : i32] : vector<4xi8> loc(#loc)
    %385 = llvm.insertelement %351, %384[%52 : i32] : vector<4xi8> loc(#loc)
    %386 = llvm.insertelement %352, %385[%57 : i32] : vector<4xi8> loc(#loc)
    llvm.call @"__triton_hip_predicated_store_!llvm.void_!llvm.ptr<3>_vector<4xi8>_i1_"(%382, %386, %46) : (!llvm.ptr<3>, vector<4xi8>, i1) -> () loc(#loc)
    %387 = llvm.add %380, %15 : i32 loc(#loc)
    %388 = llvm.getelementptr inbounds %37[%387] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %389 = llvm.insertelement %353, %16[%64 : i32] : vector<4xi8> loc(#loc)
    %390 = llvm.insertelement %354, %389[%53 : i32] : vector<4xi8> loc(#loc)
    %391 = llvm.insertelement %355, %390[%52 : i32] : vector<4xi8> loc(#loc)
    %392 = llvm.insertelement %356, %391[%57 : i32] : vector<4xi8> loc(#loc)
    llvm.call @"__triton_hip_predicated_store_!llvm.void_!llvm.ptr<3>_vector<4xi8>_i1_"(%388, %392, %46) : (!llvm.ptr<3>, vector<4xi8>, i1) -> () loc(#loc)
    %393 = llvm.xor %379, %14 : i32 loc(#loc)
    %394 = llvm.add %393, %64 : i32 loc(#loc)
    %395 = llvm.getelementptr inbounds %37[%394] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %396 = llvm.insertelement %357, %16[%64 : i32] : vector<4xi8> loc(#loc)
    %397 = llvm.insertelement %358, %396[%53 : i32] : vector<4xi8> loc(#loc)
    %398 = llvm.insertelement %359, %397[%52 : i32] : vector<4xi8> loc(#loc)
    %399 = llvm.insertelement %360, %398[%57 : i32] : vector<4xi8> loc(#loc)
    llvm.call @"__triton_hip_predicated_store_!llvm.void_!llvm.ptr<3>_vector<4xi8>_i1_"(%395, %399, %46) : (!llvm.ptr<3>, vector<4xi8>, i1) -> () loc(#loc)
    %400 = llvm.add %393, %15 : i32 loc(#loc)
    %401 = llvm.getelementptr inbounds %37[%400] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %402 = llvm.insertelement %361, %16[%64 : i32] : vector<4xi8> loc(#loc)
    %403 = llvm.insertelement %362, %402[%53 : i32] : vector<4xi8> loc(#loc)
    %404 = llvm.insertelement %363, %403[%52 : i32] : vector<4xi8> loc(#loc)
    %405 = llvm.insertelement %364, %404[%57 : i32] : vector<4xi8> loc(#loc)
    llvm.call @"__triton_hip_predicated_store_!llvm.void_!llvm.ptr<3>_vector<4xi8>_i1_"(%401, %405, %46) : (!llvm.ptr<3>, vector<4xi8>, i1) -> () loc(#loc)
    rocdl.barrier loc(#loc)
    %406 = llvm.shl %100, %57 : i32 loc(#loc)
    %407 = llvm.xor %64, %406 : i32 loc(#loc)
    %408 = llvm.select %189, %64, %15 : i1, i32 loc(#loc)
    %409 = llvm.xor %407, %408 : i32 loc(#loc)
    %410 = llvm.select %193, %64, %14 : i1, i32 loc(#loc)
    %411 = llvm.xor %409, %410 : i32 loc(#loc)
    %412 = llvm.and %81, %65 : i32 loc(#loc)
    %413 = llvm.icmp "eq" %412, %64 : i32 loc(#loc)
    %414 = llvm.select %413, %64, %55 : i1, i32 loc(#loc)
    %415 = llvm.xor %411, %414 : i32 loc(#loc)
    %416 = llvm.xor %64, %415 : i32 loc(#loc)
    %417 = llvm.xor %416, %378 : i32 loc(#loc)
    %418 = llvm.xor %417, %64 : i32 loc(#loc)
    %419 = llvm.add %418, %64 : i32 loc(#loc)
    %420 = llvm.getelementptr inbounds %37[%419] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %421 = llvm.call @"__triton_hip_predicated_load_vector<4xi8>_!llvm.ptr<3>_i1_vector<4xi8>_"(%420, %46, %13) : (!llvm.ptr<3>, i1, vector<4xi8>) -> vector<4xi8> loc(#loc)
    %422 = llvm.extractelement %421[%64 : i32] : vector<4xi8> loc(#loc)
    %423 = llvm.extractelement %421[%53 : i32] : vector<4xi8> loc(#loc)
    %424 = llvm.extractelement %421[%52 : i32] : vector<4xi8> loc(#loc)
    %425 = llvm.extractelement %421[%57 : i32] : vector<4xi8> loc(#loc)
    %426 = llvm.add %418, %18 : i32 loc(#loc)
    %427 = llvm.getelementptr inbounds %37[%426] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %428 = llvm.call @"__triton_hip_predicated_load_vector<4xi8>_!llvm.ptr<3>_i1_vector<4xi8>_"(%427, %46, %13) : (!llvm.ptr<3>, i1, vector<4xi8>) -> vector<4xi8> loc(#loc)
    %429 = llvm.extractelement %428[%64 : i32] : vector<4xi8> loc(#loc)
    %430 = llvm.extractelement %428[%53 : i32] : vector<4xi8> loc(#loc)
    %431 = llvm.extractelement %428[%52 : i32] : vector<4xi8> loc(#loc)
    %432 = llvm.extractelement %428[%57 : i32] : vector<4xi8> loc(#loc)
    %433 = llvm.xor %417, %17 : i32 loc(#loc)
    %434 = llvm.add %433, %64 : i32 loc(#loc)
    %435 = llvm.getelementptr inbounds %37[%434] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %436 = llvm.call @"__triton_hip_predicated_load_vector<4xi8>_!llvm.ptr<3>_i1_vector<4xi8>_"(%435, %46, %13) : (!llvm.ptr<3>, i1, vector<4xi8>) -> vector<4xi8> loc(#loc)
    %437 = llvm.extractelement %436[%64 : i32] : vector<4xi8> loc(#loc)
    %438 = llvm.extractelement %436[%53 : i32] : vector<4xi8> loc(#loc)
    %439 = llvm.extractelement %436[%52 : i32] : vector<4xi8> loc(#loc)
    %440 = llvm.extractelement %436[%57 : i32] : vector<4xi8> loc(#loc)
    %441 = llvm.add %433, %18 : i32 loc(#loc)
    %442 = llvm.getelementptr inbounds %37[%441] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %443 = llvm.call @"__triton_hip_predicated_load_vector<4xi8>_!llvm.ptr<3>_i1_vector<4xi8>_"(%442, %46, %13) : (!llvm.ptr<3>, i1, vector<4xi8>) -> vector<4xi8> loc(#loc)
    %444 = llvm.extractelement %443[%64 : i32] : vector<4xi8> loc(#loc)
    %445 = llvm.extractelement %443[%53 : i32] : vector<4xi8> loc(#loc)
    %446 = llvm.extractelement %443[%52 : i32] : vector<4xi8> loc(#loc)
    %447 = llvm.extractelement %443[%57 : i32] : vector<4xi8> loc(#loc)
    %448 = llvm.xor %417, %51 : i32 loc(#loc)
    %449 = llvm.add %448, %64 : i32 loc(#loc)
    %450 = llvm.getelementptr inbounds %37[%449] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %451 = llvm.call @"__triton_hip_predicated_load_vector<4xi8>_!llvm.ptr<3>_i1_vector<4xi8>_"(%450, %46, %13) : (!llvm.ptr<3>, i1, vector<4xi8>) -> vector<4xi8> loc(#loc)
    %452 = llvm.extractelement %451[%64 : i32] : vector<4xi8> loc(#loc)
    %453 = llvm.extractelement %451[%53 : i32] : vector<4xi8> loc(#loc)
    %454 = llvm.extractelement %451[%52 : i32] : vector<4xi8> loc(#loc)
    %455 = llvm.extractelement %451[%57 : i32] : vector<4xi8> loc(#loc)
    %456 = llvm.add %448, %18 : i32 loc(#loc)
    %457 = llvm.getelementptr inbounds %37[%456] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %458 = llvm.call @"__triton_hip_predicated_load_vector<4xi8>_!llvm.ptr<3>_i1_vector<4xi8>_"(%457, %46, %13) : (!llvm.ptr<3>, i1, vector<4xi8>) -> vector<4xi8> loc(#loc)
    %459 = llvm.extractelement %458[%64 : i32] : vector<4xi8> loc(#loc)
    %460 = llvm.extractelement %458[%53 : i32] : vector<4xi8> loc(#loc)
    %461 = llvm.extractelement %458[%52 : i32] : vector<4xi8> loc(#loc)
    %462 = llvm.extractelement %458[%57 : i32] : vector<4xi8> loc(#loc)
    %463 = llvm.xor %417, %12 : i32 loc(#loc)
    %464 = llvm.add %463, %64 : i32 loc(#loc)
    %465 = llvm.getelementptr inbounds %37[%464] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %466 = llvm.call @"__triton_hip_predicated_load_vector<4xi8>_!llvm.ptr<3>_i1_vector<4xi8>_"(%465, %46, %13) : (!llvm.ptr<3>, i1, vector<4xi8>) -> vector<4xi8> loc(#loc)
    %467 = llvm.extractelement %466[%64 : i32] : vector<4xi8> loc(#loc)
    %468 = llvm.extractelement %466[%53 : i32] : vector<4xi8> loc(#loc)
    %469 = llvm.extractelement %466[%52 : i32] : vector<4xi8> loc(#loc)
    %470 = llvm.extractelement %466[%57 : i32] : vector<4xi8> loc(#loc)
    %471 = llvm.add %463, %18 : i32 loc(#loc)
    %472 = llvm.getelementptr inbounds %37[%471] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %473 = llvm.call @"__triton_hip_predicated_load_vector<4xi8>_!llvm.ptr<3>_i1_vector<4xi8>_"(%472, %46, %13) : (!llvm.ptr<3>, i1, vector<4xi8>) -> vector<4xi8> loc(#loc)
    %474 = llvm.extractelement %473[%64 : i32] : vector<4xi8> loc(#loc)
    %475 = llvm.extractelement %473[%53 : i32] : vector<4xi8> loc(#loc)
    %476 = llvm.extractelement %473[%52 : i32] : vector<4xi8> loc(#loc)
    %477 = llvm.extractelement %473[%57 : i32] : vector<4xi8> loc(#loc)
    %478 = llvm.mul %99, %72 : i32 loc(#loc)
    %479 = llvm.lshr %124, %64 : i32 loc(#loc)
    %480 = llvm.xor %64, %479 : i32 loc(#loc)
    %481 = llvm.xor %64, %480 : i32 loc(#loc)
    %482 = llvm.xor %481, %64 : i32 loc(#loc)
    %483 = llvm.add %482, %67 : i32 loc(#loc)
    %484 = llvm.add %483, %478 : i32 loc(#loc)
    %485 = rocdl.make.buffer.rsrc %b_scale, %11, %9, %10 : <1> to <8> loc(#loc)
    %486 = llvm.mul %484, %53 : i32 loc(#loc)
    %487 = llvm.select %46, %486, %7 : i1, i32 loc(#loc)
    %488 = rocdl.raw.ptr.buffer.load %485, %487, %64, %64 : i8 loc(#loc)
    %489 = llvm.bitcast %488 : i8 to vector<1xi8> loc(#loc)
    %490 = llvm.extractelement %489[%67 : i32] : vector<1xi8> loc(#loc)
    rocdl.barrier loc(#loc)
    %491 = llvm.and %81, %6 : i32 loc(#loc)
    %492 = llvm.shl %491, %52 : i32 loc(#loc)
    %493 = llvm.xor %64, %492 : i32 loc(#loc)
    %494 = llvm.select %413, %64, %52 : i1, i32 loc(#loc)
    %495 = llvm.xor %493, %494 : i32 loc(#loc)
    %496 = llvm.select %104, %64, %53 : i1, i32 loc(#loc)
    %497 = llvm.xor %495, %496 : i32 loc(#loc)
    %498 = llvm.xor %64, %497 : i32 loc(#loc)
    %499 = llvm.xor %498, %378 : i32 loc(#loc)
    %500 = llvm.xor %499, %64 : i32 loc(#loc)
    %501 = llvm.add %500, %64 : i32 loc(#loc)
    %502 = llvm.getelementptr inbounds %37[%501] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %503 = llvm.insertelement %490, %5[%64 : i32] : vector<1xi8> loc(#loc)
    llvm.call @"__triton_hip_predicated_store_!llvm.void_!llvm.ptr<3>_vector<1xi8>_i1_"(%502, %503, %46) : (!llvm.ptr<3>, vector<1xi8>, i1) -> () loc(#loc)
    rocdl.barrier loc(#loc)
    %504 = llvm.shl %124, %61 : i32 loc(#loc)
    %505 = llvm.xor %64, %504 : i32 loc(#loc)
    %506 = llvm.and %81, %72 : i32 loc(#loc)
    %507 = llvm.icmp "eq" %506, %64 : i32 loc(#loc)
    %508 = llvm.select %507, %64, %52 : i1, i32 loc(#loc)
    %509 = llvm.xor %505, %508 : i32 loc(#loc)
    %510 = llvm.select %413, %64, %53 : i1, i32 loc(#loc)
    %511 = llvm.xor %509, %510 : i32 loc(#loc)
    %512 = llvm.xor %64, %511 : i32 loc(#loc)
    %513 = llvm.xor %512, %378 : i32 loc(#loc)
    %514 = llvm.xor %513, %64 : i32 loc(#loc)
    %515 = llvm.add %514, %64 : i32 loc(#loc)
    %516 = llvm.getelementptr inbounds %37[%515] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %517 = llvm.call @"__triton_hip_predicated_load_vector<1xi8>_!llvm.ptr<3>_i1_vector<1xi8>_"(%516, %46, %8) : (!llvm.ptr<3>, i1, vector<1xi8>) -> vector<1xi8> loc(#loc)
    %518 = llvm.extractelement %517[%64 : i32] : vector<1xi8> loc(#loc)
    %519 = llvm.add %514, %60 : i32 loc(#loc)
    %520 = llvm.getelementptr inbounds %37[%519] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %521 = llvm.call @"__triton_hip_predicated_load_vector<1xi8>_!llvm.ptr<3>_i1_vector<1xi8>_"(%520, %46, %8) : (!llvm.ptr<3>, i1, vector<1xi8>) -> vector<1xi8> loc(#loc)
    %522 = llvm.extractelement %521[%64 : i32] : vector<1xi8> loc(#loc)
    %523 = llvm.add %514, %51 : i32 loc(#loc)
    %524 = llvm.getelementptr inbounds %37[%523] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %525 = llvm.call @"__triton_hip_predicated_load_vector<1xi8>_!llvm.ptr<3>_i1_vector<1xi8>_"(%524, %46, %8) : (!llvm.ptr<3>, i1, vector<1xi8>) -> vector<1xi8> loc(#loc)
    %526 = llvm.extractelement %525[%64 : i32] : vector<1xi8> loc(#loc)
    %527 = llvm.add %514, %4 : i32 loc(#loc)
    %528 = llvm.getelementptr inbounds %37[%527] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %529 = llvm.call @"__triton_hip_predicated_load_vector<1xi8>_!llvm.ptr<3>_i1_vector<1xi8>_"(%528, %46, %8) : (!llvm.ptr<3>, i1, vector<1xi8>) -> vector<1xi8> loc(#loc)
    %530 = llvm.extractelement %529[%64 : i32] : vector<1xi8> loc(#loc)
    %531 = llvm.add %514, %72 : i32 loc(#loc)
    %532 = llvm.getelementptr inbounds %37[%531] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %533 = llvm.call @"__triton_hip_predicated_load_vector<1xi8>_!llvm.ptr<3>_i1_vector<1xi8>_"(%532, %46, %8) : (!llvm.ptr<3>, i1, vector<1xi8>) -> vector<1xi8> loc(#loc)
    %534 = llvm.extractelement %533[%64 : i32] : vector<1xi8> loc(#loc)
    %535 = llvm.add %514, %59 : i32 loc(#loc)
    %536 = llvm.getelementptr inbounds %37[%535] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %537 = llvm.call @"__triton_hip_predicated_load_vector<1xi8>_!llvm.ptr<3>_i1_vector<1xi8>_"(%536, %46, %8) : (!llvm.ptr<3>, i1, vector<1xi8>) -> vector<1xi8> loc(#loc)
    %538 = llvm.extractelement %537[%64 : i32] : vector<1xi8> loc(#loc)
    %539 = llvm.add %514, %49 : i32 loc(#loc)
    %540 = llvm.getelementptr inbounds %37[%539] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %541 = llvm.call @"__triton_hip_predicated_load_vector<1xi8>_!llvm.ptr<3>_i1_vector<1xi8>_"(%540, %46, %8) : (!llvm.ptr<3>, i1, vector<1xi8>) -> vector<1xi8> loc(#loc)
    %542 = llvm.extractelement %541[%64 : i32] : vector<1xi8> loc(#loc)
    %543 = llvm.add %514, %3 : i32 loc(#loc)
    %544 = llvm.getelementptr inbounds %37[%543] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %545 = llvm.call @"__triton_hip_predicated_load_vector<1xi8>_!llvm.ptr<3>_i1_vector<1xi8>_"(%544, %46, %8) : (!llvm.ptr<3>, i1, vector<1xi8>) -> vector<1xi8> loc(#loc)
    %546 = llvm.extractelement %545[%64 : i32] : vector<1xi8> loc(#loc)
    %547 = llvm.zext %518 : i8 to i16 loc(#loc)
    %548 = llvm.zext %526 : i8 to i16 loc(#loc)
    %549 = llvm.zext %534 : i8 to i16 loc(#loc)
    %550 = llvm.zext %542 : i8 to i16 loc(#loc)
    %551 = llvm.shl %547, %71 : i16 loc(#loc)
    %552 = llvm.shl %548, %71 : i16 loc(#loc)
    %553 = llvm.shl %549, %71 : i16 loc(#loc)
    %554 = llvm.shl %550, %71 : i16 loc(#loc)
    %555 = llvm.insertelement %422, %16[%64 : i32] : vector<4xi8> loc(#loc)
    %556 = llvm.insertelement %423, %555[%53 : i32] : vector<4xi8> loc(#loc)
    %557 = llvm.insertelement %424, %556[%52 : i32] : vector<4xi8> loc(#loc)
    %558 = llvm.insertelement %425, %557[%57 : i32] : vector<4xi8> loc(#loc)
    %559 = llvm.bitcast %558 : vector<4xi8> to i32 loc(#loc)
    %560 = llvm.zext %551 : i16 to i32 loc(#loc)
    %561 = llvm.shl %560, %60 : i32 loc(#loc)
    %562 = llvm.bitcast %561 : i32 to f32 loc(#loc)
    %563 = rocdl.cvt.scalef32.pk.bf16.fp4 %559[0], %562 : vector<2xbf16> loc(#loc)
    %564 = rocdl.cvt.scalef32.pk.bf16.fp4 %559[2], %562 : vector<2xbf16> loc(#loc)
    %565 = rocdl.cvt.scalef32.pk.bf16.fp4 %559[1], %562 : vector<2xbf16> loc(#loc)
    %566 = rocdl.cvt.scalef32.pk.bf16.fp4 %559[3], %562 : vector<2xbf16> loc(#loc)
    %567 = llvm.extractelement %563[%64 : i32] : vector<2xbf16> loc(#loc)
    %568 = llvm.extractelement %563[%53 : i32] : vector<2xbf16> loc(#loc)
    %569 = llvm.extractelement %564[%64 : i32] : vector<2xbf16> loc(#loc)
    %570 = llvm.extractelement %564[%53 : i32] : vector<2xbf16> loc(#loc)
    %571 = llvm.extractelement %565[%64 : i32] : vector<2xbf16> loc(#loc)
    %572 = llvm.extractelement %565[%53 : i32] : vector<2xbf16> loc(#loc)
    %573 = llvm.extractelement %566[%64 : i32] : vector<2xbf16> loc(#loc)
    %574 = llvm.extractelement %566[%53 : i32] : vector<2xbf16> loc(#loc)
    %575 = llvm.insertelement %429, %16[%64 : i32] : vector<4xi8> loc(#loc)
    %576 = llvm.insertelement %430, %575[%53 : i32] : vector<4xi8> loc(#loc)
    %577 = llvm.insertelement %431, %576[%52 : i32] : vector<4xi8> loc(#loc)
    %578 = llvm.insertelement %432, %577[%57 : i32] : vector<4xi8> loc(#loc)
    %579 = llvm.bitcast %578 : vector<4xi8> to i32 loc(#loc)
    %580 = llvm.zext %552 : i16 to i32 loc(#loc)
    %581 = llvm.shl %580, %60 : i32 loc(#loc)
    %582 = llvm.bitcast %581 : i32 to f32 loc(#loc)
    %583 = rocdl.cvt.scalef32.pk.bf16.fp4 %579[0], %582 : vector<2xbf16> loc(#loc)
    %584 = rocdl.cvt.scalef32.pk.bf16.fp4 %579[2], %582 : vector<2xbf16> loc(#loc)
    %585 = rocdl.cvt.scalef32.pk.bf16.fp4 %579[1], %582 : vector<2xbf16> loc(#loc)
    %586 = rocdl.cvt.scalef32.pk.bf16.fp4 %579[3], %582 : vector<2xbf16> loc(#loc)
    %587 = llvm.extractelement %583[%64 : i32] : vector<2xbf16> loc(#loc)
    %588 = llvm.extractelement %583[%53 : i32] : vector<2xbf16> loc(#loc)
    %589 = llvm.extractelement %584[%64 : i32] : vector<2xbf16> loc(#loc)
    %590 = llvm.extractelement %584[%53 : i32] : vector<2xbf16> loc(#loc)
    %591 = llvm.extractelement %585[%64 : i32] : vector<2xbf16> loc(#loc)
    %592 = llvm.extractelement %585[%53 : i32] : vector<2xbf16> loc(#loc)
    %593 = llvm.extractelement %586[%64 : i32] : vector<2xbf16> loc(#loc)
    %594 = llvm.extractelement %586[%53 : i32] : vector<2xbf16> loc(#loc)
    %595 = llvm.insertelement %452, %16[%64 : i32] : vector<4xi8> loc(#loc)
    %596 = llvm.insertelement %453, %595[%53 : i32] : vector<4xi8> loc(#loc)
    %597 = llvm.insertelement %454, %596[%52 : i32] : vector<4xi8> loc(#loc)
    %598 = llvm.insertelement %455, %597[%57 : i32] : vector<4xi8> loc(#loc)
    %599 = llvm.bitcast %598 : vector<4xi8> to i32 loc(#loc)
    %600 = llvm.zext %553 : i16 to i32 loc(#loc)
    %601 = llvm.shl %600, %60 : i32 loc(#loc)
    %602 = llvm.bitcast %601 : i32 to f32 loc(#loc)
    %603 = rocdl.cvt.scalef32.pk.bf16.fp4 %599[0], %602 : vector<2xbf16> loc(#loc)
    %604 = rocdl.cvt.scalef32.pk.bf16.fp4 %599[2], %602 : vector<2xbf16> loc(#loc)
    %605 = rocdl.cvt.scalef32.pk.bf16.fp4 %599[1], %602 : vector<2xbf16> loc(#loc)
    %606 = rocdl.cvt.scalef32.pk.bf16.fp4 %599[3], %602 : vector<2xbf16> loc(#loc)
    %607 = llvm.extractelement %603[%64 : i32] : vector<2xbf16> loc(#loc)
    %608 = llvm.extractelement %603[%53 : i32] : vector<2xbf16> loc(#loc)
    %609 = llvm.extractelement %604[%64 : i32] : vector<2xbf16> loc(#loc)
    %610 = llvm.extractelement %604[%53 : i32] : vector<2xbf16> loc(#loc)
    %611 = llvm.extractelement %605[%64 : i32] : vector<2xbf16> loc(#loc)
    %612 = llvm.extractelement %605[%53 : i32] : vector<2xbf16> loc(#loc)
    %613 = llvm.extractelement %606[%64 : i32] : vector<2xbf16> loc(#loc)
    %614 = llvm.extractelement %606[%53 : i32] : vector<2xbf16> loc(#loc)
    %615 = llvm.insertelement %459, %16[%64 : i32] : vector<4xi8> loc(#loc)
    %616 = llvm.insertelement %460, %615[%53 : i32] : vector<4xi8> loc(#loc)
    %617 = llvm.insertelement %461, %616[%52 : i32] : vector<4xi8> loc(#loc)
    %618 = llvm.insertelement %462, %617[%57 : i32] : vector<4xi8> loc(#loc)
    %619 = llvm.bitcast %618 : vector<4xi8> to i32 loc(#loc)
    %620 = llvm.zext %554 : i16 to i32 loc(#loc)
    %621 = llvm.shl %620, %60 : i32 loc(#loc)
    %622 = llvm.bitcast %621 : i32 to f32 loc(#loc)
    %623 = rocdl.cvt.scalef32.pk.bf16.fp4 %619[0], %622 : vector<2xbf16> loc(#loc)
    %624 = rocdl.cvt.scalef32.pk.bf16.fp4 %619[2], %622 : vector<2xbf16> loc(#loc)
    %625 = rocdl.cvt.scalef32.pk.bf16.fp4 %619[1], %622 : vector<2xbf16> loc(#loc)
    %626 = rocdl.cvt.scalef32.pk.bf16.fp4 %619[3], %622 : vector<2xbf16> loc(#loc)
    %627 = llvm.extractelement %623[%64 : i32] : vector<2xbf16> loc(#loc)
    %628 = llvm.extractelement %623[%53 : i32] : vector<2xbf16> loc(#loc)
    %629 = llvm.extractelement %624[%64 : i32] : vector<2xbf16> loc(#loc)
    %630 = llvm.extractelement %624[%53 : i32] : vector<2xbf16> loc(#loc)
    %631 = llvm.extractelement %625[%64 : i32] : vector<2xbf16> loc(#loc)
    %632 = llvm.extractelement %625[%53 : i32] : vector<2xbf16> loc(#loc)
    %633 = llvm.extractelement %626[%64 : i32] : vector<2xbf16> loc(#loc)
    %634 = llvm.extractelement %626[%53 : i32] : vector<2xbf16> loc(#loc)
    %635 = llvm.icmp "eq" %518, %70 : i8 loc(#loc)
    %636 = llvm.icmp "eq" %526, %70 : i8 loc(#loc)
    %637 = llvm.icmp "eq" %534, %70 : i8 loc(#loc)
    %638 = llvm.icmp "eq" %542, %70 : i8 loc(#loc)
    %639 = llvm.select %635, %69, %567 : i1, bf16 loc(#loc)
    %640 = llvm.select %635, %69, %568 : i1, bf16 loc(#loc)
    %641 = llvm.select %635, %69, %569 : i1, bf16 loc(#loc)
    %642 = llvm.select %635, %69, %570 : i1, bf16 loc(#loc)
    %643 = llvm.select %635, %69, %571 : i1, bf16 loc(#loc)
    %644 = llvm.select %635, %69, %572 : i1, bf16 loc(#loc)
    %645 = llvm.select %635, %69, %573 : i1, bf16 loc(#loc)
    %646 = llvm.select %635, %69, %574 : i1, bf16 loc(#loc)
    %647 = llvm.select %636, %69, %587 : i1, bf16 loc(#loc)
    %648 = llvm.select %636, %69, %588 : i1, bf16 loc(#loc)
    %649 = llvm.select %636, %69, %589 : i1, bf16 loc(#loc)
    %650 = llvm.select %636, %69, %590 : i1, bf16 loc(#loc)
    %651 = llvm.select %636, %69, %591 : i1, bf16 loc(#loc)
    %652 = llvm.select %636, %69, %592 : i1, bf16 loc(#loc)
    %653 = llvm.select %636, %69, %593 : i1, bf16 loc(#loc)
    %654 = llvm.select %636, %69, %594 : i1, bf16 loc(#loc)
    %655 = llvm.select %637, %69, %607 : i1, bf16 loc(#loc)
    %656 = llvm.select %637, %69, %608 : i1, bf16 loc(#loc)
    %657 = llvm.select %637, %69, %609 : i1, bf16 loc(#loc)
    %658 = llvm.select %637, %69, %610 : i1, bf16 loc(#loc)
    %659 = llvm.select %637, %69, %611 : i1, bf16 loc(#loc)
    %660 = llvm.select %637, %69, %612 : i1, bf16 loc(#loc)
    %661 = llvm.select %637, %69, %613 : i1, bf16 loc(#loc)
    %662 = llvm.select %637, %69, %614 : i1, bf16 loc(#loc)
    %663 = llvm.select %638, %69, %627 : i1, bf16 loc(#loc)
    %664 = llvm.select %638, %69, %628 : i1, bf16 loc(#loc)
    %665 = llvm.select %638, %69, %629 : i1, bf16 loc(#loc)
    %666 = llvm.select %638, %69, %630 : i1, bf16 loc(#loc)
    %667 = llvm.select %638, %69, %631 : i1, bf16 loc(#loc)
    %668 = llvm.select %638, %69, %632 : i1, bf16 loc(#loc)
    %669 = llvm.select %638, %69, %633 : i1, bf16 loc(#loc)
    %670 = llvm.select %638, %69, %634 : i1, bf16 loc(#loc)
    %671 = llvm.insertelement %259, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %672 = llvm.insertelement %260, %671[%53 : i32] : vector<8xbf16> loc(#loc)
    %673 = llvm.insertelement %261, %672[%52 : i32] : vector<8xbf16> loc(#loc)
    %674 = llvm.insertelement %262, %673[%57 : i32] : vector<8xbf16> loc(#loc)
    %675 = llvm.insertelement %263, %674[%51 : i32] : vector<8xbf16> loc(#loc)
    %676 = llvm.insertelement %264, %675[%61 : i32] : vector<8xbf16> loc(#loc)
    %677 = llvm.insertelement %265, %676[%63 : i32] : vector<8xbf16> loc(#loc)
    %678 = llvm.insertelement %266, %677[%50 : i32] : vector<8xbf16> loc(#loc)
    %679 = llvm.extractelement %678[%64 : i32] : vector<8xbf16> loc(#loc)
    %680 = llvm.insertelement %679, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %681 = llvm.extractelement %678[%53 : i32] : vector<8xbf16> loc(#loc)
    %682 = llvm.insertelement %681, %680[%53 : i32] : vector<8xbf16> loc(#loc)
    %683 = llvm.extractelement %678[%52 : i32] : vector<8xbf16> loc(#loc)
    %684 = llvm.insertelement %683, %682[%52 : i32] : vector<8xbf16> loc(#loc)
    %685 = llvm.extractelement %678[%57 : i32] : vector<8xbf16> loc(#loc)
    %686 = llvm.insertelement %685, %684[%57 : i32] : vector<8xbf16> loc(#loc)
    %687 = llvm.extractelement %678[%51 : i32] : vector<8xbf16> loc(#loc)
    %688 = llvm.insertelement %687, %686[%51 : i32] : vector<8xbf16> loc(#loc)
    %689 = llvm.extractelement %678[%61 : i32] : vector<8xbf16> loc(#loc)
    %690 = llvm.insertelement %689, %688[%61 : i32] : vector<8xbf16> loc(#loc)
    %691 = llvm.extractelement %678[%63 : i32] : vector<8xbf16> loc(#loc)
    %692 = llvm.insertelement %691, %690[%63 : i32] : vector<8xbf16> loc(#loc)
    %693 = llvm.extractelement %678[%50 : i32] : vector<8xbf16> loc(#loc)
    %694 = llvm.insertelement %693, %692[%50 : i32] : vector<8xbf16> loc(#loc)
    %695 = llvm.insertelement %282, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %696 = llvm.insertelement %283, %695[%53 : i32] : vector<8xbf16> loc(#loc)
    %697 = llvm.insertelement %284, %696[%52 : i32] : vector<8xbf16> loc(#loc)
    %698 = llvm.insertelement %285, %697[%57 : i32] : vector<8xbf16> loc(#loc)
    %699 = llvm.insertelement %286, %698[%51 : i32] : vector<8xbf16> loc(#loc)
    %700 = llvm.insertelement %287, %699[%61 : i32] : vector<8xbf16> loc(#loc)
    %701 = llvm.insertelement %288, %700[%63 : i32] : vector<8xbf16> loc(#loc)
    %702 = llvm.insertelement %289, %701[%50 : i32] : vector<8xbf16> loc(#loc)
    %703 = llvm.extractelement %702[%64 : i32] : vector<8xbf16> loc(#loc)
    %704 = llvm.insertelement %703, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %705 = llvm.extractelement %702[%53 : i32] : vector<8xbf16> loc(#loc)
    %706 = llvm.insertelement %705, %704[%53 : i32] : vector<8xbf16> loc(#loc)
    %707 = llvm.extractelement %702[%52 : i32] : vector<8xbf16> loc(#loc)
    %708 = llvm.insertelement %707, %706[%52 : i32] : vector<8xbf16> loc(#loc)
    %709 = llvm.extractelement %702[%57 : i32] : vector<8xbf16> loc(#loc)
    %710 = llvm.insertelement %709, %708[%57 : i32] : vector<8xbf16> loc(#loc)
    %711 = llvm.extractelement %702[%51 : i32] : vector<8xbf16> loc(#loc)
    %712 = llvm.insertelement %711, %710[%51 : i32] : vector<8xbf16> loc(#loc)
    %713 = llvm.extractelement %702[%61 : i32] : vector<8xbf16> loc(#loc)
    %714 = llvm.insertelement %713, %712[%61 : i32] : vector<8xbf16> loc(#loc)
    %715 = llvm.extractelement %702[%63 : i32] : vector<8xbf16> loc(#loc)
    %716 = llvm.insertelement %715, %714[%63 : i32] : vector<8xbf16> loc(#loc)
    %717 = llvm.extractelement %702[%50 : i32] : vector<8xbf16> loc(#loc)
    %718 = llvm.insertelement %717, %716[%50 : i32] : vector<8xbf16> loc(#loc)
    %719 = llvm.insertelement %305, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %720 = llvm.insertelement %306, %719[%53 : i32] : vector<8xbf16> loc(#loc)
    %721 = llvm.insertelement %307, %720[%52 : i32] : vector<8xbf16> loc(#loc)
    %722 = llvm.insertelement %308, %721[%57 : i32] : vector<8xbf16> loc(#loc)
    %723 = llvm.insertelement %309, %722[%51 : i32] : vector<8xbf16> loc(#loc)
    %724 = llvm.insertelement %310, %723[%61 : i32] : vector<8xbf16> loc(#loc)
    %725 = llvm.insertelement %311, %724[%63 : i32] : vector<8xbf16> loc(#loc)
    %726 = llvm.insertelement %312, %725[%50 : i32] : vector<8xbf16> loc(#loc)
    %727 = llvm.extractelement %726[%64 : i32] : vector<8xbf16> loc(#loc)
    %728 = llvm.insertelement %727, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %729 = llvm.extractelement %726[%53 : i32] : vector<8xbf16> loc(#loc)
    %730 = llvm.insertelement %729, %728[%53 : i32] : vector<8xbf16> loc(#loc)
    %731 = llvm.extractelement %726[%52 : i32] : vector<8xbf16> loc(#loc)
    %732 = llvm.insertelement %731, %730[%52 : i32] : vector<8xbf16> loc(#loc)
    %733 = llvm.extractelement %726[%57 : i32] : vector<8xbf16> loc(#loc)
    %734 = llvm.insertelement %733, %732[%57 : i32] : vector<8xbf16> loc(#loc)
    %735 = llvm.extractelement %726[%51 : i32] : vector<8xbf16> loc(#loc)
    %736 = llvm.insertelement %735, %734[%51 : i32] : vector<8xbf16> loc(#loc)
    %737 = llvm.extractelement %726[%61 : i32] : vector<8xbf16> loc(#loc)
    %738 = llvm.insertelement %737, %736[%61 : i32] : vector<8xbf16> loc(#loc)
    %739 = llvm.extractelement %726[%63 : i32] : vector<8xbf16> loc(#loc)
    %740 = llvm.insertelement %739, %738[%63 : i32] : vector<8xbf16> loc(#loc)
    %741 = llvm.extractelement %726[%50 : i32] : vector<8xbf16> loc(#loc)
    %742 = llvm.insertelement %741, %740[%50 : i32] : vector<8xbf16> loc(#loc)
    %743 = llvm.insertelement %328, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %744 = llvm.insertelement %329, %743[%53 : i32] : vector<8xbf16> loc(#loc)
    %745 = llvm.insertelement %330, %744[%52 : i32] : vector<8xbf16> loc(#loc)
    %746 = llvm.insertelement %331, %745[%57 : i32] : vector<8xbf16> loc(#loc)
    %747 = llvm.insertelement %332, %746[%51 : i32] : vector<8xbf16> loc(#loc)
    %748 = llvm.insertelement %333, %747[%61 : i32] : vector<8xbf16> loc(#loc)
    %749 = llvm.insertelement %334, %748[%63 : i32] : vector<8xbf16> loc(#loc)
    %750 = llvm.insertelement %335, %749[%50 : i32] : vector<8xbf16> loc(#loc)
    %751 = llvm.extractelement %750[%64 : i32] : vector<8xbf16> loc(#loc)
    %752 = llvm.insertelement %751, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %753 = llvm.extractelement %750[%53 : i32] : vector<8xbf16> loc(#loc)
    %754 = llvm.insertelement %753, %752[%53 : i32] : vector<8xbf16> loc(#loc)
    %755 = llvm.extractelement %750[%52 : i32] : vector<8xbf16> loc(#loc)
    %756 = llvm.insertelement %755, %754[%52 : i32] : vector<8xbf16> loc(#loc)
    %757 = llvm.extractelement %750[%57 : i32] : vector<8xbf16> loc(#loc)
    %758 = llvm.insertelement %757, %756[%57 : i32] : vector<8xbf16> loc(#loc)
    %759 = llvm.extractelement %750[%51 : i32] : vector<8xbf16> loc(#loc)
    %760 = llvm.insertelement %759, %758[%51 : i32] : vector<8xbf16> loc(#loc)
    %761 = llvm.extractelement %750[%61 : i32] : vector<8xbf16> loc(#loc)
    %762 = llvm.insertelement %761, %760[%61 : i32] : vector<8xbf16> loc(#loc)
    %763 = llvm.extractelement %750[%63 : i32] : vector<8xbf16> loc(#loc)
    %764 = llvm.insertelement %763, %762[%63 : i32] : vector<8xbf16> loc(#loc)
    %765 = llvm.extractelement %750[%50 : i32] : vector<8xbf16> loc(#loc)
    %766 = llvm.insertelement %765, %764[%50 : i32] : vector<8xbf16> loc(#loc)
    %767 = llvm.insertelement %639, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %768 = llvm.insertelement %640, %767[%53 : i32] : vector<8xbf16> loc(#loc)
    %769 = llvm.insertelement %641, %768[%52 : i32] : vector<8xbf16> loc(#loc)
    %770 = llvm.insertelement %642, %769[%57 : i32] : vector<8xbf16> loc(#loc)
    %771 = llvm.insertelement %643, %770[%51 : i32] : vector<8xbf16> loc(#loc)
    %772 = llvm.insertelement %644, %771[%61 : i32] : vector<8xbf16> loc(#loc)
    %773 = llvm.insertelement %645, %772[%63 : i32] : vector<8xbf16> loc(#loc)
    %774 = llvm.insertelement %646, %773[%50 : i32] : vector<8xbf16> loc(#loc)
    %775 = llvm.extractelement %774[%64 : i32] : vector<8xbf16> loc(#loc)
    %776 = llvm.insertelement %775, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %777 = llvm.extractelement %774[%53 : i32] : vector<8xbf16> loc(#loc)
    %778 = llvm.insertelement %777, %776[%53 : i32] : vector<8xbf16> loc(#loc)
    %779 = llvm.extractelement %774[%52 : i32] : vector<8xbf16> loc(#loc)
    %780 = llvm.insertelement %779, %778[%52 : i32] : vector<8xbf16> loc(#loc)
    %781 = llvm.extractelement %774[%57 : i32] : vector<8xbf16> loc(#loc)
    %782 = llvm.insertelement %781, %780[%57 : i32] : vector<8xbf16> loc(#loc)
    %783 = llvm.extractelement %774[%51 : i32] : vector<8xbf16> loc(#loc)
    %784 = llvm.insertelement %783, %782[%51 : i32] : vector<8xbf16> loc(#loc)
    %785 = llvm.extractelement %774[%61 : i32] : vector<8xbf16> loc(#loc)
    %786 = llvm.insertelement %785, %784[%61 : i32] : vector<8xbf16> loc(#loc)
    %787 = llvm.extractelement %774[%63 : i32] : vector<8xbf16> loc(#loc)
    %788 = llvm.insertelement %787, %786[%63 : i32] : vector<8xbf16> loc(#loc)
    %789 = llvm.extractelement %774[%50 : i32] : vector<8xbf16> loc(#loc)
    %790 = llvm.insertelement %789, %788[%50 : i32] : vector<8xbf16> loc(#loc)
    %791 = llvm.insertelement %647, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %792 = llvm.insertelement %648, %791[%53 : i32] : vector<8xbf16> loc(#loc)
    %793 = llvm.insertelement %649, %792[%52 : i32] : vector<8xbf16> loc(#loc)
    %794 = llvm.insertelement %650, %793[%57 : i32] : vector<8xbf16> loc(#loc)
    %795 = llvm.insertelement %651, %794[%51 : i32] : vector<8xbf16> loc(#loc)
    %796 = llvm.insertelement %652, %795[%61 : i32] : vector<8xbf16> loc(#loc)
    %797 = llvm.insertelement %653, %796[%63 : i32] : vector<8xbf16> loc(#loc)
    %798 = llvm.insertelement %654, %797[%50 : i32] : vector<8xbf16> loc(#loc)
    %799 = llvm.extractelement %798[%64 : i32] : vector<8xbf16> loc(#loc)
    %800 = llvm.insertelement %799, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %801 = llvm.extractelement %798[%53 : i32] : vector<8xbf16> loc(#loc)
    %802 = llvm.insertelement %801, %800[%53 : i32] : vector<8xbf16> loc(#loc)
    %803 = llvm.extractelement %798[%52 : i32] : vector<8xbf16> loc(#loc)
    %804 = llvm.insertelement %803, %802[%52 : i32] : vector<8xbf16> loc(#loc)
    %805 = llvm.extractelement %798[%57 : i32] : vector<8xbf16> loc(#loc)
    %806 = llvm.insertelement %805, %804[%57 : i32] : vector<8xbf16> loc(#loc)
    %807 = llvm.extractelement %798[%51 : i32] : vector<8xbf16> loc(#loc)
    %808 = llvm.insertelement %807, %806[%51 : i32] : vector<8xbf16> loc(#loc)
    %809 = llvm.extractelement %798[%61 : i32] : vector<8xbf16> loc(#loc)
    %810 = llvm.insertelement %809, %808[%61 : i32] : vector<8xbf16> loc(#loc)
    %811 = llvm.extractelement %798[%63 : i32] : vector<8xbf16> loc(#loc)
    %812 = llvm.insertelement %811, %810[%63 : i32] : vector<8xbf16> loc(#loc)
    %813 = llvm.extractelement %798[%50 : i32] : vector<8xbf16> loc(#loc)
    %814 = llvm.insertelement %813, %812[%50 : i32] : vector<8xbf16> loc(#loc)
    %815 = llvm.insertelement %655, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %816 = llvm.insertelement %656, %815[%53 : i32] : vector<8xbf16> loc(#loc)
    %817 = llvm.insertelement %657, %816[%52 : i32] : vector<8xbf16> loc(#loc)
    %818 = llvm.insertelement %658, %817[%57 : i32] : vector<8xbf16> loc(#loc)
    %819 = llvm.insertelement %659, %818[%51 : i32] : vector<8xbf16> loc(#loc)
    %820 = llvm.insertelement %660, %819[%61 : i32] : vector<8xbf16> loc(#loc)
    %821 = llvm.insertelement %661, %820[%63 : i32] : vector<8xbf16> loc(#loc)
    %822 = llvm.insertelement %662, %821[%50 : i32] : vector<8xbf16> loc(#loc)
    %823 = llvm.extractelement %822[%64 : i32] : vector<8xbf16> loc(#loc)
    %824 = llvm.insertelement %823, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %825 = llvm.extractelement %822[%53 : i32] : vector<8xbf16> loc(#loc)
    %826 = llvm.insertelement %825, %824[%53 : i32] : vector<8xbf16> loc(#loc)
    %827 = llvm.extractelement %822[%52 : i32] : vector<8xbf16> loc(#loc)
    %828 = llvm.insertelement %827, %826[%52 : i32] : vector<8xbf16> loc(#loc)
    %829 = llvm.extractelement %822[%57 : i32] : vector<8xbf16> loc(#loc)
    %830 = llvm.insertelement %829, %828[%57 : i32] : vector<8xbf16> loc(#loc)
    %831 = llvm.extractelement %822[%51 : i32] : vector<8xbf16> loc(#loc)
    %832 = llvm.insertelement %831, %830[%51 : i32] : vector<8xbf16> loc(#loc)
    %833 = llvm.extractelement %822[%61 : i32] : vector<8xbf16> loc(#loc)
    %834 = llvm.insertelement %833, %832[%61 : i32] : vector<8xbf16> loc(#loc)
    %835 = llvm.extractelement %822[%63 : i32] : vector<8xbf16> loc(#loc)
    %836 = llvm.insertelement %835, %834[%63 : i32] : vector<8xbf16> loc(#loc)
    %837 = llvm.extractelement %822[%50 : i32] : vector<8xbf16> loc(#loc)
    %838 = llvm.insertelement %837, %836[%50 : i32] : vector<8xbf16> loc(#loc)
    %839 = llvm.insertelement %663, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %840 = llvm.insertelement %664, %839[%53 : i32] : vector<8xbf16> loc(#loc)
    %841 = llvm.insertelement %665, %840[%52 : i32] : vector<8xbf16> loc(#loc)
    %842 = llvm.insertelement %666, %841[%57 : i32] : vector<8xbf16> loc(#loc)
    %843 = llvm.insertelement %667, %842[%51 : i32] : vector<8xbf16> loc(#loc)
    %844 = llvm.insertelement %668, %843[%61 : i32] : vector<8xbf16> loc(#loc)
    %845 = llvm.insertelement %669, %844[%63 : i32] : vector<8xbf16> loc(#loc)
    %846 = llvm.insertelement %670, %845[%50 : i32] : vector<8xbf16> loc(#loc)
    %847 = llvm.extractelement %846[%64 : i32] : vector<8xbf16> loc(#loc)
    %848 = llvm.insertelement %847, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %849 = llvm.extractelement %846[%53 : i32] : vector<8xbf16> loc(#loc)
    %850 = llvm.insertelement %849, %848[%53 : i32] : vector<8xbf16> loc(#loc)
    %851 = llvm.extractelement %846[%52 : i32] : vector<8xbf16> loc(#loc)
    %852 = llvm.insertelement %851, %850[%52 : i32] : vector<8xbf16> loc(#loc)
    %853 = llvm.extractelement %846[%57 : i32] : vector<8xbf16> loc(#loc)
    %854 = llvm.insertelement %853, %852[%57 : i32] : vector<8xbf16> loc(#loc)
    %855 = llvm.extractelement %846[%51 : i32] : vector<8xbf16> loc(#loc)
    %856 = llvm.insertelement %855, %854[%51 : i32] : vector<8xbf16> loc(#loc)
    %857 = llvm.extractelement %846[%61 : i32] : vector<8xbf16> loc(#loc)
    %858 = llvm.insertelement %857, %856[%61 : i32] : vector<8xbf16> loc(#loc)
    %859 = llvm.extractelement %846[%63 : i32] : vector<8xbf16> loc(#loc)
    %860 = llvm.insertelement %859, %858[%63 : i32] : vector<8xbf16> loc(#loc)
    %861 = llvm.extractelement %846[%50 : i32] : vector<8xbf16> loc(#loc)
    %862 = llvm.insertelement %861, %860[%50 : i32] : vector<8xbf16> loc(#loc)
    %863 = llvm.insertelement %68, %2[%64 : i32] : vector<4xf32> loc(#loc)
    %864 = llvm.insertelement %68, %863[%53 : i32] : vector<4xf32> loc(#loc)
    %865 = llvm.insertelement %68, %864[%52 : i32] : vector<4xf32> loc(#loc)
    %866 = llvm.insertelement %68, %865[%57 : i32] : vector<4xf32> loc(#loc)
    %867 = rocdl.mfma.f32.16x16x32.bf16 %790, %694, %866, %64, %64, %64 : (vector<8xbf16>, vector<8xbf16>, vector<4xf32>, i32, i32, i32) -> vector<4xf32> loc(#loc)
    %868 = rocdl.mfma.f32.16x16x32.bf16 %814, %718, %867, %64, %64, %64 : (vector<8xbf16>, vector<8xbf16>, vector<4xf32>, i32, i32, i32) -> vector<4xf32> loc(#loc)
    %869 = rocdl.mfma.f32.16x16x32.bf16 %838, %742, %868, %64, %64, %64 : (vector<8xbf16>, vector<8xbf16>, vector<4xf32>, i32, i32, i32) -> vector<4xf32> loc(#loc)
    %870 = rocdl.mfma.f32.16x16x32.bf16 %862, %766, %869, %64, %64, %64 : (vector<8xbf16>, vector<8xbf16>, vector<4xf32>, i32, i32, i32) -> vector<4xf32> loc(#loc)
    %871 = llvm.extractelement %870[%64 : i32] : vector<4xf32> loc(#loc)
    %872 = llvm.extractelement %870[%53 : i32] : vector<4xf32> loc(#loc)
    %873 = llvm.extractelement %870[%52 : i32] : vector<4xf32> loc(#loc)
    %874 = llvm.extractelement %870[%57 : i32] : vector<4xf32> loc(#loc)
    %875 = llvm.zext %522 : i8 to i16 loc(#loc)
    %876 = llvm.zext %530 : i8 to i16 loc(#loc)
    %877 = llvm.zext %538 : i8 to i16 loc(#loc)
    %878 = llvm.zext %546 : i8 to i16 loc(#loc)
    %879 = llvm.shl %875, %71 : i16 loc(#loc)
    %880 = llvm.shl %876, %71 : i16 loc(#loc)
    %881 = llvm.shl %877, %71 : i16 loc(#loc)
    %882 = llvm.shl %878, %71 : i16 loc(#loc)
    %883 = llvm.insertelement %437, %16[%64 : i32] : vector<4xi8> loc(#loc)
    %884 = llvm.insertelement %438, %883[%53 : i32] : vector<4xi8> loc(#loc)
    %885 = llvm.insertelement %439, %884[%52 : i32] : vector<4xi8> loc(#loc)
    %886 = llvm.insertelement %440, %885[%57 : i32] : vector<4xi8> loc(#loc)
    %887 = llvm.bitcast %886 : vector<4xi8> to i32 loc(#loc)
    %888 = llvm.zext %879 : i16 to i32 loc(#loc)
    %889 = llvm.shl %888, %60 : i32 loc(#loc)
    %890 = llvm.bitcast %889 : i32 to f32 loc(#loc)
    %891 = rocdl.cvt.scalef32.pk.bf16.fp4 %887[0], %890 : vector<2xbf16> loc(#loc)
    %892 = rocdl.cvt.scalef32.pk.bf16.fp4 %887[2], %890 : vector<2xbf16> loc(#loc)
    %893 = rocdl.cvt.scalef32.pk.bf16.fp4 %887[1], %890 : vector<2xbf16> loc(#loc)
    %894 = rocdl.cvt.scalef32.pk.bf16.fp4 %887[3], %890 : vector<2xbf16> loc(#loc)
    %895 = llvm.extractelement %891[%64 : i32] : vector<2xbf16> loc(#loc)
    %896 = llvm.extractelement %891[%53 : i32] : vector<2xbf16> loc(#loc)
    %897 = llvm.extractelement %892[%64 : i32] : vector<2xbf16> loc(#loc)
    %898 = llvm.extractelement %892[%53 : i32] : vector<2xbf16> loc(#loc)
    %899 = llvm.extractelement %893[%64 : i32] : vector<2xbf16> loc(#loc)
    %900 = llvm.extractelement %893[%53 : i32] : vector<2xbf16> loc(#loc)
    %901 = llvm.extractelement %894[%64 : i32] : vector<2xbf16> loc(#loc)
    %902 = llvm.extractelement %894[%53 : i32] : vector<2xbf16> loc(#loc)
    %903 = llvm.insertelement %444, %16[%64 : i32] : vector<4xi8> loc(#loc)
    %904 = llvm.insertelement %445, %903[%53 : i32] : vector<4xi8> loc(#loc)
    %905 = llvm.insertelement %446, %904[%52 : i32] : vector<4xi8> loc(#loc)
    %906 = llvm.insertelement %447, %905[%57 : i32] : vector<4xi8> loc(#loc)
    %907 = llvm.bitcast %906 : vector<4xi8> to i32 loc(#loc)
    %908 = llvm.zext %880 : i16 to i32 loc(#loc)
    %909 = llvm.shl %908, %60 : i32 loc(#loc)
    %910 = llvm.bitcast %909 : i32 to f32 loc(#loc)
    %911 = rocdl.cvt.scalef32.pk.bf16.fp4 %907[0], %910 : vector<2xbf16> loc(#loc)
    %912 = rocdl.cvt.scalef32.pk.bf16.fp4 %907[2], %910 : vector<2xbf16> loc(#loc)
    %913 = rocdl.cvt.scalef32.pk.bf16.fp4 %907[1], %910 : vector<2xbf16> loc(#loc)
    %914 = rocdl.cvt.scalef32.pk.bf16.fp4 %907[3], %910 : vector<2xbf16> loc(#loc)
    %915 = llvm.extractelement %911[%64 : i32] : vector<2xbf16> loc(#loc)
    %916 = llvm.extractelement %911[%53 : i32] : vector<2xbf16> loc(#loc)
    %917 = llvm.extractelement %912[%64 : i32] : vector<2xbf16> loc(#loc)
    %918 = llvm.extractelement %912[%53 : i32] : vector<2xbf16> loc(#loc)
    %919 = llvm.extractelement %913[%64 : i32] : vector<2xbf16> loc(#loc)
    %920 = llvm.extractelement %913[%53 : i32] : vector<2xbf16> loc(#loc)
    %921 = llvm.extractelement %914[%64 : i32] : vector<2xbf16> loc(#loc)
    %922 = llvm.extractelement %914[%53 : i32] : vector<2xbf16> loc(#loc)
    %923 = llvm.insertelement %467, %16[%64 : i32] : vector<4xi8> loc(#loc)
    %924 = llvm.insertelement %468, %923[%53 : i32] : vector<4xi8> loc(#loc)
    %925 = llvm.insertelement %469, %924[%52 : i32] : vector<4xi8> loc(#loc)
    %926 = llvm.insertelement %470, %925[%57 : i32] : vector<4xi8> loc(#loc)
    %927 = llvm.bitcast %926 : vector<4xi8> to i32 loc(#loc)
    %928 = llvm.zext %881 : i16 to i32 loc(#loc)
    %929 = llvm.shl %928, %60 : i32 loc(#loc)
    %930 = llvm.bitcast %929 : i32 to f32 loc(#loc)
    %931 = rocdl.cvt.scalef32.pk.bf16.fp4 %927[0], %930 : vector<2xbf16> loc(#loc)
    %932 = rocdl.cvt.scalef32.pk.bf16.fp4 %927[2], %930 : vector<2xbf16> loc(#loc)
    %933 = rocdl.cvt.scalef32.pk.bf16.fp4 %927[1], %930 : vector<2xbf16> loc(#loc)
    %934 = rocdl.cvt.scalef32.pk.bf16.fp4 %927[3], %930 : vector<2xbf16> loc(#loc)
    %935 = llvm.extractelement %931[%64 : i32] : vector<2xbf16> loc(#loc)
    %936 = llvm.extractelement %931[%53 : i32] : vector<2xbf16> loc(#loc)
    %937 = llvm.extractelement %932[%64 : i32] : vector<2xbf16> loc(#loc)
    %938 = llvm.extractelement %932[%53 : i32] : vector<2xbf16> loc(#loc)
    %939 = llvm.extractelement %933[%64 : i32] : vector<2xbf16> loc(#loc)
    %940 = llvm.extractelement %933[%53 : i32] : vector<2xbf16> loc(#loc)
    %941 = llvm.extractelement %934[%64 : i32] : vector<2xbf16> loc(#loc)
    %942 = llvm.extractelement %934[%53 : i32] : vector<2xbf16> loc(#loc)
    %943 = llvm.insertelement %474, %16[%64 : i32] : vector<4xi8> loc(#loc)
    %944 = llvm.insertelement %475, %943[%53 : i32] : vector<4xi8> loc(#loc)
    %945 = llvm.insertelement %476, %944[%52 : i32] : vector<4xi8> loc(#loc)
    %946 = llvm.insertelement %477, %945[%57 : i32] : vector<4xi8> loc(#loc)
    %947 = llvm.bitcast %946 : vector<4xi8> to i32 loc(#loc)
    %948 = llvm.zext %882 : i16 to i32 loc(#loc)
    %949 = llvm.shl %948, %60 : i32 loc(#loc)
    %950 = llvm.bitcast %949 : i32 to f32 loc(#loc)
    %951 = rocdl.cvt.scalef32.pk.bf16.fp4 %947[0], %950 : vector<2xbf16> loc(#loc)
    %952 = rocdl.cvt.scalef32.pk.bf16.fp4 %947[2], %950 : vector<2xbf16> loc(#loc)
    %953 = rocdl.cvt.scalef32.pk.bf16.fp4 %947[1], %950 : vector<2xbf16> loc(#loc)
    %954 = rocdl.cvt.scalef32.pk.bf16.fp4 %947[3], %950 : vector<2xbf16> loc(#loc)
    %955 = llvm.extractelement %951[%64 : i32] : vector<2xbf16> loc(#loc)
    %956 = llvm.extractelement %951[%53 : i32] : vector<2xbf16> loc(#loc)
    %957 = llvm.extractelement %952[%64 : i32] : vector<2xbf16> loc(#loc)
    %958 = llvm.extractelement %952[%53 : i32] : vector<2xbf16> loc(#loc)
    %959 = llvm.extractelement %953[%64 : i32] : vector<2xbf16> loc(#loc)
    %960 = llvm.extractelement %953[%53 : i32] : vector<2xbf16> loc(#loc)
    %961 = llvm.extractelement %954[%64 : i32] : vector<2xbf16> loc(#loc)
    %962 = llvm.extractelement %954[%53 : i32] : vector<2xbf16> loc(#loc)
    %963 = llvm.icmp "eq" %522, %70 : i8 loc(#loc)
    %964 = llvm.icmp "eq" %530, %70 : i8 loc(#loc)
    %965 = llvm.icmp "eq" %538, %70 : i8 loc(#loc)
    %966 = llvm.icmp "eq" %546, %70 : i8 loc(#loc)
    %967 = llvm.select %963, %69, %895 : i1, bf16 loc(#loc)
    %968 = llvm.select %963, %69, %896 : i1, bf16 loc(#loc)
    %969 = llvm.select %963, %69, %897 : i1, bf16 loc(#loc)
    %970 = llvm.select %963, %69, %898 : i1, bf16 loc(#loc)
    %971 = llvm.select %963, %69, %899 : i1, bf16 loc(#loc)
    %972 = llvm.select %963, %69, %900 : i1, bf16 loc(#loc)
    %973 = llvm.select %963, %69, %901 : i1, bf16 loc(#loc)
    %974 = llvm.select %963, %69, %902 : i1, bf16 loc(#loc)
    %975 = llvm.select %964, %69, %915 : i1, bf16 loc(#loc)
    %976 = llvm.select %964, %69, %916 : i1, bf16 loc(#loc)
    %977 = llvm.select %964, %69, %917 : i1, bf16 loc(#loc)
    %978 = llvm.select %964, %69, %918 : i1, bf16 loc(#loc)
    %979 = llvm.select %964, %69, %919 : i1, bf16 loc(#loc)
    %980 = llvm.select %964, %69, %920 : i1, bf16 loc(#loc)
    %981 = llvm.select %964, %69, %921 : i1, bf16 loc(#loc)
    %982 = llvm.select %964, %69, %922 : i1, bf16 loc(#loc)
    %983 = llvm.select %965, %69, %935 : i1, bf16 loc(#loc)
    %984 = llvm.select %965, %69, %936 : i1, bf16 loc(#loc)
    %985 = llvm.select %965, %69, %937 : i1, bf16 loc(#loc)
    %986 = llvm.select %965, %69, %938 : i1, bf16 loc(#loc)
    %987 = llvm.select %965, %69, %939 : i1, bf16 loc(#loc)
    %988 = llvm.select %965, %69, %940 : i1, bf16 loc(#loc)
    %989 = llvm.select %965, %69, %941 : i1, bf16 loc(#loc)
    %990 = llvm.select %965, %69, %942 : i1, bf16 loc(#loc)
    %991 = llvm.select %966, %69, %955 : i1, bf16 loc(#loc)
    %992 = llvm.select %966, %69, %956 : i1, bf16 loc(#loc)
    %993 = llvm.select %966, %69, %957 : i1, bf16 loc(#loc)
    %994 = llvm.select %966, %69, %958 : i1, bf16 loc(#loc)
    %995 = llvm.select %966, %69, %959 : i1, bf16 loc(#loc)
    %996 = llvm.select %966, %69, %960 : i1, bf16 loc(#loc)
    %997 = llvm.select %966, %69, %961 : i1, bf16 loc(#loc)
    %998 = llvm.select %966, %69, %962 : i1, bf16 loc(#loc)
    %999 = llvm.insertelement %270, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %1000 = llvm.insertelement %271, %999[%53 : i32] : vector<8xbf16> loc(#loc)
    %1001 = llvm.insertelement %272, %1000[%52 : i32] : vector<8xbf16> loc(#loc)
    %1002 = llvm.insertelement %273, %1001[%57 : i32] : vector<8xbf16> loc(#loc)
    %1003 = llvm.insertelement %274, %1002[%51 : i32] : vector<8xbf16> loc(#loc)
    %1004 = llvm.insertelement %275, %1003[%61 : i32] : vector<8xbf16> loc(#loc)
    %1005 = llvm.insertelement %276, %1004[%63 : i32] : vector<8xbf16> loc(#loc)
    %1006 = llvm.insertelement %277, %1005[%50 : i32] : vector<8xbf16> loc(#loc)
    %1007 = llvm.extractelement %1006[%64 : i32] : vector<8xbf16> loc(#loc)
    %1008 = llvm.insertelement %1007, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %1009 = llvm.extractelement %1006[%53 : i32] : vector<8xbf16> loc(#loc)
    %1010 = llvm.insertelement %1009, %1008[%53 : i32] : vector<8xbf16> loc(#loc)
    %1011 = llvm.extractelement %1006[%52 : i32] : vector<8xbf16> loc(#loc)
    %1012 = llvm.insertelement %1011, %1010[%52 : i32] : vector<8xbf16> loc(#loc)
    %1013 = llvm.extractelement %1006[%57 : i32] : vector<8xbf16> loc(#loc)
    %1014 = llvm.insertelement %1013, %1012[%57 : i32] : vector<8xbf16> loc(#loc)
    %1015 = llvm.extractelement %1006[%51 : i32] : vector<8xbf16> loc(#loc)
    %1016 = llvm.insertelement %1015, %1014[%51 : i32] : vector<8xbf16> loc(#loc)
    %1017 = llvm.extractelement %1006[%61 : i32] : vector<8xbf16> loc(#loc)
    %1018 = llvm.insertelement %1017, %1016[%61 : i32] : vector<8xbf16> loc(#loc)
    %1019 = llvm.extractelement %1006[%63 : i32] : vector<8xbf16> loc(#loc)
    %1020 = llvm.insertelement %1019, %1018[%63 : i32] : vector<8xbf16> loc(#loc)
    %1021 = llvm.extractelement %1006[%50 : i32] : vector<8xbf16> loc(#loc)
    %1022 = llvm.insertelement %1021, %1020[%50 : i32] : vector<8xbf16> loc(#loc)
    %1023 = llvm.insertelement %293, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %1024 = llvm.insertelement %294, %1023[%53 : i32] : vector<8xbf16> loc(#loc)
    %1025 = llvm.insertelement %295, %1024[%52 : i32] : vector<8xbf16> loc(#loc)
    %1026 = llvm.insertelement %296, %1025[%57 : i32] : vector<8xbf16> loc(#loc)
    %1027 = llvm.insertelement %297, %1026[%51 : i32] : vector<8xbf16> loc(#loc)
    %1028 = llvm.insertelement %298, %1027[%61 : i32] : vector<8xbf16> loc(#loc)
    %1029 = llvm.insertelement %299, %1028[%63 : i32] : vector<8xbf16> loc(#loc)
    %1030 = llvm.insertelement %300, %1029[%50 : i32] : vector<8xbf16> loc(#loc)
    %1031 = llvm.extractelement %1030[%64 : i32] : vector<8xbf16> loc(#loc)
    %1032 = llvm.insertelement %1031, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %1033 = llvm.extractelement %1030[%53 : i32] : vector<8xbf16> loc(#loc)
    %1034 = llvm.insertelement %1033, %1032[%53 : i32] : vector<8xbf16> loc(#loc)
    %1035 = llvm.extractelement %1030[%52 : i32] : vector<8xbf16> loc(#loc)
    %1036 = llvm.insertelement %1035, %1034[%52 : i32] : vector<8xbf16> loc(#loc)
    %1037 = llvm.extractelement %1030[%57 : i32] : vector<8xbf16> loc(#loc)
    %1038 = llvm.insertelement %1037, %1036[%57 : i32] : vector<8xbf16> loc(#loc)
    %1039 = llvm.extractelement %1030[%51 : i32] : vector<8xbf16> loc(#loc)
    %1040 = llvm.insertelement %1039, %1038[%51 : i32] : vector<8xbf16> loc(#loc)
    %1041 = llvm.extractelement %1030[%61 : i32] : vector<8xbf16> loc(#loc)
    %1042 = llvm.insertelement %1041, %1040[%61 : i32] : vector<8xbf16> loc(#loc)
    %1043 = llvm.extractelement %1030[%63 : i32] : vector<8xbf16> loc(#loc)
    %1044 = llvm.insertelement %1043, %1042[%63 : i32] : vector<8xbf16> loc(#loc)
    %1045 = llvm.extractelement %1030[%50 : i32] : vector<8xbf16> loc(#loc)
    %1046 = llvm.insertelement %1045, %1044[%50 : i32] : vector<8xbf16> loc(#loc)
    %1047 = llvm.insertelement %316, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %1048 = llvm.insertelement %317, %1047[%53 : i32] : vector<8xbf16> loc(#loc)
    %1049 = llvm.insertelement %318, %1048[%52 : i32] : vector<8xbf16> loc(#loc)
    %1050 = llvm.insertelement %319, %1049[%57 : i32] : vector<8xbf16> loc(#loc)
    %1051 = llvm.insertelement %320, %1050[%51 : i32] : vector<8xbf16> loc(#loc)
    %1052 = llvm.insertelement %321, %1051[%61 : i32] : vector<8xbf16> loc(#loc)
    %1053 = llvm.insertelement %322, %1052[%63 : i32] : vector<8xbf16> loc(#loc)
    %1054 = llvm.insertelement %323, %1053[%50 : i32] : vector<8xbf16> loc(#loc)
    %1055 = llvm.extractelement %1054[%64 : i32] : vector<8xbf16> loc(#loc)
    %1056 = llvm.insertelement %1055, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %1057 = llvm.extractelement %1054[%53 : i32] : vector<8xbf16> loc(#loc)
    %1058 = llvm.insertelement %1057, %1056[%53 : i32] : vector<8xbf16> loc(#loc)
    %1059 = llvm.extractelement %1054[%52 : i32] : vector<8xbf16> loc(#loc)
    %1060 = llvm.insertelement %1059, %1058[%52 : i32] : vector<8xbf16> loc(#loc)
    %1061 = llvm.extractelement %1054[%57 : i32] : vector<8xbf16> loc(#loc)
    %1062 = llvm.insertelement %1061, %1060[%57 : i32] : vector<8xbf16> loc(#loc)
    %1063 = llvm.extractelement %1054[%51 : i32] : vector<8xbf16> loc(#loc)
    %1064 = llvm.insertelement %1063, %1062[%51 : i32] : vector<8xbf16> loc(#loc)
    %1065 = llvm.extractelement %1054[%61 : i32] : vector<8xbf16> loc(#loc)
    %1066 = llvm.insertelement %1065, %1064[%61 : i32] : vector<8xbf16> loc(#loc)
    %1067 = llvm.extractelement %1054[%63 : i32] : vector<8xbf16> loc(#loc)
    %1068 = llvm.insertelement %1067, %1066[%63 : i32] : vector<8xbf16> loc(#loc)
    %1069 = llvm.extractelement %1054[%50 : i32] : vector<8xbf16> loc(#loc)
    %1070 = llvm.insertelement %1069, %1068[%50 : i32] : vector<8xbf16> loc(#loc)
    %1071 = llvm.insertelement %339, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %1072 = llvm.insertelement %340, %1071[%53 : i32] : vector<8xbf16> loc(#loc)
    %1073 = llvm.insertelement %341, %1072[%52 : i32] : vector<8xbf16> loc(#loc)
    %1074 = llvm.insertelement %342, %1073[%57 : i32] : vector<8xbf16> loc(#loc)
    %1075 = llvm.insertelement %343, %1074[%51 : i32] : vector<8xbf16> loc(#loc)
    %1076 = llvm.insertelement %344, %1075[%61 : i32] : vector<8xbf16> loc(#loc)
    %1077 = llvm.insertelement %345, %1076[%63 : i32] : vector<8xbf16> loc(#loc)
    %1078 = llvm.insertelement %346, %1077[%50 : i32] : vector<8xbf16> loc(#loc)
    %1079 = llvm.extractelement %1078[%64 : i32] : vector<8xbf16> loc(#loc)
    %1080 = llvm.insertelement %1079, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %1081 = llvm.extractelement %1078[%53 : i32] : vector<8xbf16> loc(#loc)
    %1082 = llvm.insertelement %1081, %1080[%53 : i32] : vector<8xbf16> loc(#loc)
    %1083 = llvm.extractelement %1078[%52 : i32] : vector<8xbf16> loc(#loc)
    %1084 = llvm.insertelement %1083, %1082[%52 : i32] : vector<8xbf16> loc(#loc)
    %1085 = llvm.extractelement %1078[%57 : i32] : vector<8xbf16> loc(#loc)
    %1086 = llvm.insertelement %1085, %1084[%57 : i32] : vector<8xbf16> loc(#loc)
    %1087 = llvm.extractelement %1078[%51 : i32] : vector<8xbf16> loc(#loc)
    %1088 = llvm.insertelement %1087, %1086[%51 : i32] : vector<8xbf16> loc(#loc)
    %1089 = llvm.extractelement %1078[%61 : i32] : vector<8xbf16> loc(#loc)
    %1090 = llvm.insertelement %1089, %1088[%61 : i32] : vector<8xbf16> loc(#loc)
    %1091 = llvm.extractelement %1078[%63 : i32] : vector<8xbf16> loc(#loc)
    %1092 = llvm.insertelement %1091, %1090[%63 : i32] : vector<8xbf16> loc(#loc)
    %1093 = llvm.extractelement %1078[%50 : i32] : vector<8xbf16> loc(#loc)
    %1094 = llvm.insertelement %1093, %1092[%50 : i32] : vector<8xbf16> loc(#loc)
    %1095 = llvm.insertelement %967, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %1096 = llvm.insertelement %968, %1095[%53 : i32] : vector<8xbf16> loc(#loc)
    %1097 = llvm.insertelement %969, %1096[%52 : i32] : vector<8xbf16> loc(#loc)
    %1098 = llvm.insertelement %970, %1097[%57 : i32] : vector<8xbf16> loc(#loc)
    %1099 = llvm.insertelement %971, %1098[%51 : i32] : vector<8xbf16> loc(#loc)
    %1100 = llvm.insertelement %972, %1099[%61 : i32] : vector<8xbf16> loc(#loc)
    %1101 = llvm.insertelement %973, %1100[%63 : i32] : vector<8xbf16> loc(#loc)
    %1102 = llvm.insertelement %974, %1101[%50 : i32] : vector<8xbf16> loc(#loc)
    %1103 = llvm.extractelement %1102[%64 : i32] : vector<8xbf16> loc(#loc)
    %1104 = llvm.insertelement %1103, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %1105 = llvm.extractelement %1102[%53 : i32] : vector<8xbf16> loc(#loc)
    %1106 = llvm.insertelement %1105, %1104[%53 : i32] : vector<8xbf16> loc(#loc)
    %1107 = llvm.extractelement %1102[%52 : i32] : vector<8xbf16> loc(#loc)
    %1108 = llvm.insertelement %1107, %1106[%52 : i32] : vector<8xbf16> loc(#loc)
    %1109 = llvm.extractelement %1102[%57 : i32] : vector<8xbf16> loc(#loc)
    %1110 = llvm.insertelement %1109, %1108[%57 : i32] : vector<8xbf16> loc(#loc)
    %1111 = llvm.extractelement %1102[%51 : i32] : vector<8xbf16> loc(#loc)
    %1112 = llvm.insertelement %1111, %1110[%51 : i32] : vector<8xbf16> loc(#loc)
    %1113 = llvm.extractelement %1102[%61 : i32] : vector<8xbf16> loc(#loc)
    %1114 = llvm.insertelement %1113, %1112[%61 : i32] : vector<8xbf16> loc(#loc)
    %1115 = llvm.extractelement %1102[%63 : i32] : vector<8xbf16> loc(#loc)
    %1116 = llvm.insertelement %1115, %1114[%63 : i32] : vector<8xbf16> loc(#loc)
    %1117 = llvm.extractelement %1102[%50 : i32] : vector<8xbf16> loc(#loc)
    %1118 = llvm.insertelement %1117, %1116[%50 : i32] : vector<8xbf16> loc(#loc)
    %1119 = llvm.insertelement %975, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %1120 = llvm.insertelement %976, %1119[%53 : i32] : vector<8xbf16> loc(#loc)
    %1121 = llvm.insertelement %977, %1120[%52 : i32] : vector<8xbf16> loc(#loc)
    %1122 = llvm.insertelement %978, %1121[%57 : i32] : vector<8xbf16> loc(#loc)
    %1123 = llvm.insertelement %979, %1122[%51 : i32] : vector<8xbf16> loc(#loc)
    %1124 = llvm.insertelement %980, %1123[%61 : i32] : vector<8xbf16> loc(#loc)
    %1125 = llvm.insertelement %981, %1124[%63 : i32] : vector<8xbf16> loc(#loc)
    %1126 = llvm.insertelement %982, %1125[%50 : i32] : vector<8xbf16> loc(#loc)
    %1127 = llvm.extractelement %1126[%64 : i32] : vector<8xbf16> loc(#loc)
    %1128 = llvm.insertelement %1127, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %1129 = llvm.extractelement %1126[%53 : i32] : vector<8xbf16> loc(#loc)
    %1130 = llvm.insertelement %1129, %1128[%53 : i32] : vector<8xbf16> loc(#loc)
    %1131 = llvm.extractelement %1126[%52 : i32] : vector<8xbf16> loc(#loc)
    %1132 = llvm.insertelement %1131, %1130[%52 : i32] : vector<8xbf16> loc(#loc)
    %1133 = llvm.extractelement %1126[%57 : i32] : vector<8xbf16> loc(#loc)
    %1134 = llvm.insertelement %1133, %1132[%57 : i32] : vector<8xbf16> loc(#loc)
    %1135 = llvm.extractelement %1126[%51 : i32] : vector<8xbf16> loc(#loc)
    %1136 = llvm.insertelement %1135, %1134[%51 : i32] : vector<8xbf16> loc(#loc)
    %1137 = llvm.extractelement %1126[%61 : i32] : vector<8xbf16> loc(#loc)
    %1138 = llvm.insertelement %1137, %1136[%61 : i32] : vector<8xbf16> loc(#loc)
    %1139 = llvm.extractelement %1126[%63 : i32] : vector<8xbf16> loc(#loc)
    %1140 = llvm.insertelement %1139, %1138[%63 : i32] : vector<8xbf16> loc(#loc)
    %1141 = llvm.extractelement %1126[%50 : i32] : vector<8xbf16> loc(#loc)
    %1142 = llvm.insertelement %1141, %1140[%50 : i32] : vector<8xbf16> loc(#loc)
    %1143 = llvm.insertelement %983, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %1144 = llvm.insertelement %984, %1143[%53 : i32] : vector<8xbf16> loc(#loc)
    %1145 = llvm.insertelement %985, %1144[%52 : i32] : vector<8xbf16> loc(#loc)
    %1146 = llvm.insertelement %986, %1145[%57 : i32] : vector<8xbf16> loc(#loc)
    %1147 = llvm.insertelement %987, %1146[%51 : i32] : vector<8xbf16> loc(#loc)
    %1148 = llvm.insertelement %988, %1147[%61 : i32] : vector<8xbf16> loc(#loc)
    %1149 = llvm.insertelement %989, %1148[%63 : i32] : vector<8xbf16> loc(#loc)
    %1150 = llvm.insertelement %990, %1149[%50 : i32] : vector<8xbf16> loc(#loc)
    %1151 = llvm.extractelement %1150[%64 : i32] : vector<8xbf16> loc(#loc)
    %1152 = llvm.insertelement %1151, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %1153 = llvm.extractelement %1150[%53 : i32] : vector<8xbf16> loc(#loc)
    %1154 = llvm.insertelement %1153, %1152[%53 : i32] : vector<8xbf16> loc(#loc)
    %1155 = llvm.extractelement %1150[%52 : i32] : vector<8xbf16> loc(#loc)
    %1156 = llvm.insertelement %1155, %1154[%52 : i32] : vector<8xbf16> loc(#loc)
    %1157 = llvm.extractelement %1150[%57 : i32] : vector<8xbf16> loc(#loc)
    %1158 = llvm.insertelement %1157, %1156[%57 : i32] : vector<8xbf16> loc(#loc)
    %1159 = llvm.extractelement %1150[%51 : i32] : vector<8xbf16> loc(#loc)
    %1160 = llvm.insertelement %1159, %1158[%51 : i32] : vector<8xbf16> loc(#loc)
    %1161 = llvm.extractelement %1150[%61 : i32] : vector<8xbf16> loc(#loc)
    %1162 = llvm.insertelement %1161, %1160[%61 : i32] : vector<8xbf16> loc(#loc)
    %1163 = llvm.extractelement %1150[%63 : i32] : vector<8xbf16> loc(#loc)
    %1164 = llvm.insertelement %1163, %1162[%63 : i32] : vector<8xbf16> loc(#loc)
    %1165 = llvm.extractelement %1150[%50 : i32] : vector<8xbf16> loc(#loc)
    %1166 = llvm.insertelement %1165, %1164[%50 : i32] : vector<8xbf16> loc(#loc)
    %1167 = llvm.insertelement %991, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %1168 = llvm.insertelement %992, %1167[%53 : i32] : vector<8xbf16> loc(#loc)
    %1169 = llvm.insertelement %993, %1168[%52 : i32] : vector<8xbf16> loc(#loc)
    %1170 = llvm.insertelement %994, %1169[%57 : i32] : vector<8xbf16> loc(#loc)
    %1171 = llvm.insertelement %995, %1170[%51 : i32] : vector<8xbf16> loc(#loc)
    %1172 = llvm.insertelement %996, %1171[%61 : i32] : vector<8xbf16> loc(#loc)
    %1173 = llvm.insertelement %997, %1172[%63 : i32] : vector<8xbf16> loc(#loc)
    %1174 = llvm.insertelement %998, %1173[%50 : i32] : vector<8xbf16> loc(#loc)
    %1175 = llvm.extractelement %1174[%64 : i32] : vector<8xbf16> loc(#loc)
    %1176 = llvm.insertelement %1175, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %1177 = llvm.extractelement %1174[%53 : i32] : vector<8xbf16> loc(#loc)
    %1178 = llvm.insertelement %1177, %1176[%53 : i32] : vector<8xbf16> loc(#loc)
    %1179 = llvm.extractelement %1174[%52 : i32] : vector<8xbf16> loc(#loc)
    %1180 = llvm.insertelement %1179, %1178[%52 : i32] : vector<8xbf16> loc(#loc)
    %1181 = llvm.extractelement %1174[%57 : i32] : vector<8xbf16> loc(#loc)
    %1182 = llvm.insertelement %1181, %1180[%57 : i32] : vector<8xbf16> loc(#loc)
    %1183 = llvm.extractelement %1174[%51 : i32] : vector<8xbf16> loc(#loc)
    %1184 = llvm.insertelement %1183, %1182[%51 : i32] : vector<8xbf16> loc(#loc)
    %1185 = llvm.extractelement %1174[%61 : i32] : vector<8xbf16> loc(#loc)
    %1186 = llvm.insertelement %1185, %1184[%61 : i32] : vector<8xbf16> loc(#loc)
    %1187 = llvm.extractelement %1174[%63 : i32] : vector<8xbf16> loc(#loc)
    %1188 = llvm.insertelement %1187, %1186[%63 : i32] : vector<8xbf16> loc(#loc)
    %1189 = llvm.extractelement %1174[%50 : i32] : vector<8xbf16> loc(#loc)
    %1190 = llvm.insertelement %1189, %1188[%50 : i32] : vector<8xbf16> loc(#loc)
    %1191 = rocdl.mfma.f32.16x16x32.bf16 %1118, %1022, %866, %64, %64, %64 : (vector<8xbf16>, vector<8xbf16>, vector<4xf32>, i32, i32, i32) -> vector<4xf32> loc(#loc)
    %1192 = rocdl.mfma.f32.16x16x32.bf16 %1142, %1046, %1191, %64, %64, %64 : (vector<8xbf16>, vector<8xbf16>, vector<4xf32>, i32, i32, i32) -> vector<4xf32> loc(#loc)
    %1193 = rocdl.mfma.f32.16x16x32.bf16 %1166, %1070, %1192, %64, %64, %64 : (vector<8xbf16>, vector<8xbf16>, vector<4xf32>, i32, i32, i32) -> vector<4xf32> loc(#loc)
    %1194 = rocdl.mfma.f32.16x16x32.bf16 %1190, %1094, %1193, %64, %64, %64 : (vector<8xbf16>, vector<8xbf16>, vector<4xf32>, i32, i32, i32) -> vector<4xf32> loc(#loc)
    %1195 = llvm.extractelement %1194[%64 : i32] : vector<4xf32> loc(#loc)
    %1196 = llvm.extractelement %1194[%53 : i32] : vector<4xf32> loc(#loc)
    %1197 = llvm.extractelement %1194[%52 : i32] : vector<4xf32> loc(#loc)
    %1198 = llvm.extractelement %1194[%57 : i32] : vector<4xf32> loc(#loc)
    %1199 = llvm.fadd %871, %1195 : f32 loc(#loc)
    %1200 = llvm.fadd %872, %1196 : f32 loc(#loc)
    %1201 = llvm.fadd %873, %1197 : f32 loc(#loc)
    %1202 = llvm.fadd %874, %1198 : f32 loc(#loc)
    %1203 = llvm.mul %109, %73 : i32 loc(#loc)
    %1204 = llvm.add %135, %1203 : i32 loc(#loc)
    %1205 = llvm.insertelement %1199, %1[%64 : i32] : vector<2xf32> loc(#loc)
    %1206 = llvm.insertelement %1200, %1205[%53 : i32] : vector<2xf32> loc(#loc)
    %1207 = llvm.fptrunc %1206 : vector<2xf32> to vector<2xbf16> loc(#loc)
    %1208 = llvm.extractelement %1207[%64 : i32] : vector<2xbf16> loc(#loc)
    %1209 = llvm.extractelement %1207[%53 : i32] : vector<2xbf16> loc(#loc)
    %1210 = llvm.insertelement %1201, %1[%64 : i32] : vector<2xf32> loc(#loc)
    %1211 = llvm.insertelement %1202, %1210[%53 : i32] : vector<2xf32> loc(#loc)
    %1212 = llvm.fptrunc %1211 : vector<2xf32> to vector<2xbf16> loc(#loc)
    %1213 = llvm.extractelement %1212[%64 : i32] : vector<2xbf16> loc(#loc)
    %1214 = llvm.extractelement %1212[%53 : i32] : vector<2xbf16> loc(#loc)
    %1215 = rocdl.make.buffer.rsrc %out, %11, %9, %10 : <1> to <8> loc(#loc)
    %1216 = llvm.insertelement %1208, %0[%64 : i32] : vector<4xbf16> loc(#loc)
    %1217 = llvm.insertelement %1209, %1216[%53 : i32] : vector<4xbf16> loc(#loc)
    %1218 = llvm.insertelement %1213, %1217[%52 : i32] : vector<4xbf16> loc(#loc)
    %1219 = llvm.insertelement %1214, %1218[%57 : i32] : vector<4xbf16> loc(#loc)
    %1220 = llvm.bitcast %1219 : vector<4xbf16> to vector<2xi32> loc(#loc)
    %1221 = llvm.mul %1204, %52 : i32 loc(#loc)
    %1222 = llvm.select %46, %1221, %7 : i1, i32 loc(#loc)
    rocdl.raw.ptr.buffer.store %1220, %1215, %1222, %64, %64 : vector<2xi32> loc(#loc)
    llvm.return loc(#loc)
  } loc(#loc)
} loc(#loc)


// -----// IR Dump Before ConvertBuiltinFuncToLLVM (convert-builtin-func-to-llvm) ('builtin.module' operation) //----- //
#loc = loc(unknown)
#loc1 = loc("a_base")
#loc2 = loc("stride_a0")
#loc3 = loc("b_base")
#loc4 = loc("stride_b1")
#loc5 = loc("b_scale")
#loc6 = loc("out")
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.shared = 16384 : i32, ttg.target = "hip:gfx950", "ttg.threads-per-warp" = 64 : i32} {
  llvm.mlir.global external @global_smem() {addr_space = 3 : i32, alignment = 16 : i64} : !llvm.array<0 x i8> loc(#loc)
  llvm.func @"__triton_hip_predicated_load_vector<8xbf16>_!llvm.ptr<1>_i1_vector<8xbf16>_"(!llvm.ptr<1>, i1, vector<8xbf16>) -> vector<8xbf16> attributes {libname = "", libpath = ""} loc(#loc)
  llvm.func @"__triton_hip_predicated_store_!llvm.void_!llvm.ptr<3>_vector<8xbf16>_i1_"(!llvm.ptr<3>, vector<8xbf16>, i1) attributes {libname = "", libpath = ""} loc(#loc)
  llvm.func @"__triton_hip_predicated_load_vector<8xbf16>_!llvm.ptr<3>_i1_vector<8xbf16>_"(!llvm.ptr<3>, i1, vector<8xbf16>) -> vector<8xbf16> attributes {libname = "", libpath = ""} loc(#loc)
  llvm.func @"__triton_hip_predicated_load_vector<16xi8>_!llvm.ptr<1>_i1_vector<16xi8>_"(!llvm.ptr<1>, i1, vector<16xi8>) -> vector<16xi8> attributes {libname = "", libpath = ""} loc(#loc)
  llvm.func @"__triton_hip_predicated_store_!llvm.void_!llvm.ptr<3>_vector<4xi8>_i1_"(!llvm.ptr<3>, vector<4xi8>, i1) attributes {libname = "", libpath = ""} loc(#loc)
  llvm.func @"__triton_hip_predicated_load_vector<4xi8>_!llvm.ptr<3>_i1_vector<4xi8>_"(!llvm.ptr<3>, i1, vector<4xi8>) -> vector<4xi8> attributes {libname = "", libpath = ""} loc(#loc)
  llvm.func @"__triton_hip_predicated_store_!llvm.void_!llvm.ptr<3>_vector<1xi8>_i1_"(!llvm.ptr<3>, vector<1xi8>, i1) attributes {libname = "", libpath = ""} loc(#loc)
  llvm.func @"__triton_hip_predicated_load_vector<1xi8>_!llvm.ptr<3>_i1_vector<1xi8>_"(!llvm.ptr<3>, i1, vector<1xi8>) -> vector<1xi8> attributes {libname = "", libpath = ""} loc(#loc)
  llvm.func @dot_scale_kernel(%a_base: !llvm.ptr<1> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("a_base"), %stride_a0: i32 {tt.divisibility = 16 : i32} loc("stride_a0"), %b_base: !llvm.ptr<1> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("b_base"), %stride_b1: i32 {tt.divisibility = 16 : i32} loc("stride_b1"), %b_scale: !llvm.ptr<1> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("b_scale"), %out: !llvm.ptr<1> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("out"), %arg6: !llvm.ptr<1> loc(unknown), %arg7: !llvm.ptr<1> loc(unknown)) attributes {noinline = false, nvvm.kernel = 1 : ui1, nvvm.reqntid = array<i32: 128>} {
    %0 = llvm.mlir.undef : vector<4xbf16> loc(#loc)
    %1 = llvm.mlir.undef : vector<2xf32> loc(#loc)
    %2 = llvm.mlir.undef : vector<4xf32> loc(#loc)
    %3 = llvm.mlir.constant(28 : i32) : i32 loc(#loc)
    %4 = llvm.mlir.constant(20 : i32) : i32 loc(#loc)
    %5 = llvm.mlir.undef : vector<1xi8> loc(#loc)
    %6 = llvm.mlir.constant(63 : i32) : i32 loc(#loc)
    %7 = llvm.mlir.constant(-2147483648 : i32) : i32 loc(#loc)
    %8 = llvm.mlir.constant(dense<0> : vector<1xi8>) : vector<1xi8> loc(#loc)
    %9 = llvm.mlir.constant(2147483646 : i32) : i32 loc(#loc)
    %10 = llvm.mlir.constant(159744 : i32) : i32 loc(#loc)
    %11 = llvm.mlir.constant(0 : i16) : i16 loc(#loc)
    %12 = llvm.mlir.constant(580 : i32) : i32 loc(#loc)
    %13 = llvm.mlir.constant(dense<0> : vector<4xi8>) : vector<4xi8> loc(#loc)
    %14 = llvm.mlir.constant(260 : i32) : i32 loc(#loc)
    %15 = llvm.mlir.constant(2048 : i32) : i32 loc(#loc)
    %16 = llvm.mlir.undef : vector<4xi8> loc(#loc)
    %17 = llvm.mlir.constant(576 : i32) : i32 loc(#loc)
    %18 = llvm.mlir.constant(1024 : i32) : i32 loc(#loc)
    %19 = llvm.mlir.constant(15 : index) : i32 loc(#loc)
    %20 = llvm.mlir.constant(14 : index) : i32 loc(#loc)
    %21 = llvm.mlir.constant(13 : index) : i32 loc(#loc)
    %22 = llvm.mlir.constant(12 : index) : i32 loc(#loc)
    %23 = llvm.mlir.constant(11 : index) : i32 loc(#loc)
    %24 = llvm.mlir.constant(10 : index) : i32 loc(#loc)
    %25 = llvm.mlir.constant(9 : index) : i32 loc(#loc)
    %26 = llvm.mlir.constant(8 : index) : i32 loc(#loc)
    %27 = llvm.mlir.constant(dense<0> : vector<16xi8>) : vector<16xi8> loc(#loc)
    %28 = llvm.mlir.constant(96 : i32) : i32 loc(#loc)
    %29 = llvm.mlir.constant(30 : i32) : i32 loc(#loc)
    %30 = llvm.mlir.constant(2112 : i32) : i32 loc(#loc)
    %31 = llvm.mlir.undef : vector<8xbf16> loc(#loc)
    %32 = llvm.mlir.constant(8192 : i32) : i32 loc(#loc)
    %33 = llvm.mlir.constant(256 : i32) : i32 loc(#loc)
    %34 = llvm.mlir.constant(4096 : i32) : i32 loc(#loc)
    %35 = llvm.mlir.constant(192 : i32) : i32 loc(#loc)
    %36 = llvm.mlir.constant(206 : i32) : i32 loc(#loc)
    %37 = llvm.mlir.addressof @global_smem : !llvm.ptr<3> loc(#loc)
    %38 = llvm.mlir.constant(7 : index) : i32 loc(#loc)
    %39 = llvm.mlir.constant(6 : index) : i32 loc(#loc)
    %40 = llvm.mlir.constant(5 : index) : i32 loc(#loc)
    %41 = llvm.mlir.constant(4 : index) : i32 loc(#loc)
    %42 = llvm.mlir.constant(3 : index) : i32 loc(#loc)
    %43 = llvm.mlir.constant(2 : index) : i32 loc(#loc)
    %44 = llvm.mlir.constant(1 : index) : i32 loc(#loc)
    %45 = llvm.mlir.constant(dense<0.000000e+00> : vector<8xbf16>) : vector<8xbf16> loc(#loc)
    %46 = llvm.mlir.constant(true) : i1 loc(#loc)
    %47 = llvm.mlir.constant(112 : i32) : i32 loc(#loc)
    %48 = llvm.mlir.constant(14 : i32) : i32 loc(#loc)
    %49 = llvm.mlir.constant(12 : i32) : i32 loc(#loc)
    %50 = llvm.mlir.constant(7 : i32) : i32 loc(#loc)
    %51 = llvm.mlir.constant(4 : i32) : i32 loc(#loc)
    %52 = llvm.mlir.constant(2 : i32) : i32 loc(#loc)
    %53 = llvm.mlir.constant(1 : i32) : i32 loc(#loc)
    %54 = llvm.mlir.constant(31 : i32) : i32 loc(#loc)
    %55 = llvm.mlir.constant(128 : i32) : i32 loc(#loc)
    %56 = llvm.mlir.constant(15 : i32) : i32 loc(#loc)
    %57 = llvm.mlir.constant(3 : i32) : i32 loc(#loc)
    %58 = llvm.mlir.constant(248 : i32) : i32 loc(#loc)
    %59 = llvm.mlir.constant(24 : i32) : i32 loc(#loc)
    %60 = llvm.mlir.constant(16 : i32) : i32 loc(#loc)
    %61 = llvm.mlir.constant(5 : i32) : i32 loc(#loc)
    %62 = llvm.mlir.constant(224 : i32) : i32 loc(#loc)
    %63 = llvm.mlir.constant(6 : i32) : i32 loc(#loc)
    %64 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %65 = llvm.mlir.constant(64 : i32) : i32 loc(#loc)
    %66 = llvm.mlir.constant(255 : i32) : i32 loc(#loc)
    %67 = llvm.mlir.constant(0 : index) : i32 loc(#loc)
    %68 = llvm.mlir.constant(0.000000e+00 : f32) : f32 loc(#loc)
    %69 = llvm.mlir.constant(0x7FC0 : bf16) : bf16 loc(#loc)
    %70 = llvm.mlir.constant(-1 : i8) : i8 loc(#loc)
    %71 = llvm.mlir.constant(7 : i16) : i16 loc(#loc)
    %72 = llvm.mlir.constant(8 : i32) : i32 loc(#loc)
    %73 = llvm.mlir.constant(32 : i32) : i32 loc(#loc)
    %74 = rocdl.workitem.id.x : i32 loc(#loc)
    %75 = llvm.and %74, %66 : i32 loc(#loc)
    %76 = llvm.urem %75, %65 : i32 loc(#loc)
    %77 = llvm.udiv %75, %65 : i32 loc(#loc)
    %78 = llvm.shl %76, %64 : i32 loc(#loc)
    %79 = llvm.or %64, %78 : i32 loc(#loc)
    %80 = llvm.shl %77, %63 : i32 loc(#loc)
    %81 = llvm.or %79, %80 : i32 loc(#loc)
    %82 = llvm.and %81, %62 : i32 loc(#loc)
    %83 = llvm.lshr %82, %61 : i32 loc(#loc)
    %84 = llvm.xor %64, %83 : i32 loc(#loc)
    %85 = llvm.xor %64, %84 : i32 loc(#loc)
    %86 = llvm.xor %85, %64 : i32 loc(#loc)
    %87 = llvm.xor %85, %72 : i32 loc(#loc)
    %88 = llvm.xor %85, %60 : i32 loc(#loc)
    %89 = llvm.xor %85, %59 : i32 loc(#loc)
    %90 = llvm.add %86, %67 : i32 loc(#loc)
    %91 = llvm.add %87, %67 : i32 loc(#loc)
    %92 = llvm.add %88, %67 : i32 loc(#loc)
    %93 = llvm.add %89, %67 : i32 loc(#loc)
    %94 = llvm.and %81, %58 : i32 loc(#loc)
    %95 = llvm.lshr %94, %57 : i32 loc(#loc)
    %96 = llvm.xor %64, %95 : i32 loc(#loc)
    %97 = llvm.xor %64, %96 : i32 loc(#loc)
    %98 = llvm.xor %97, %64 : i32 loc(#loc)
    %99 = llvm.add %98, %67 : i32 loc(#loc)
    %100 = llvm.and %81, %56 : i32 loc(#loc)
    %101 = llvm.lshr %100, %64 : i32 loc(#loc)
    %102 = llvm.xor %64, %101 : i32 loc(#loc)
    %103 = llvm.and %81, %55 : i32 loc(#loc)
    %104 = llvm.icmp "eq" %103, %64 : i32 loc(#loc)
    %105 = llvm.select %104, %64, %60 : i1, i32 loc(#loc)
    %106 = llvm.xor %102, %105 : i32 loc(#loc)
    %107 = llvm.xor %64, %106 : i32 loc(#loc)
    %108 = llvm.xor %107, %64 : i32 loc(#loc)
    %109 = llvm.add %108, %67 : i32 loc(#loc)
    %110 = llvm.mul %90, %stride_a0 : i32 loc(#loc)
    %111 = llvm.mul %91, %stride_a0 : i32 loc(#loc)
    %112 = llvm.mul %92, %stride_a0 : i32 loc(#loc)
    %113 = llvm.mul %93, %stride_a0 : i32 loc(#loc)
    %114 = llvm.and %81, %54 : i32 loc(#loc)
    %115 = llvm.shl %114, %57 : i32 loc(#loc)
    %116 = llvm.xor %64, %115 : i32 loc(#loc)
    %117 = llvm.xor %64, %116 : i32 loc(#loc)
    %118 = llvm.xor %117, %64 : i32 loc(#loc)
    %119 = llvm.add %118, %67 : i32 loc(#loc)
    %120 = llvm.add %119, %110 : i32 loc(#loc)
    %121 = llvm.add %119, %111 : i32 loc(#loc)
    %122 = llvm.add %119, %112 : i32 loc(#loc)
    %123 = llvm.add %119, %113 : i32 loc(#loc)
    %124 = llvm.and %81, %50 : i32 loc(#loc)
    %125 = llvm.shl %124, %51 : i32 loc(#loc)
    %126 = llvm.xor %64, %125 : i32 loc(#loc)
    %127 = llvm.xor %64, %126 : i32 loc(#loc)
    %128 = llvm.xor %127, %64 : i32 loc(#loc)
    %129 = llvm.add %128, %67 : i32 loc(#loc)
    %130 = llvm.and %81, %47 : i32 loc(#loc)
    %131 = llvm.lshr %130, %52 : i32 loc(#loc)
    %132 = llvm.xor %64, %131 : i32 loc(#loc)
    %133 = llvm.xor %64, %132 : i32 loc(#loc)
    %134 = llvm.xor %133, %64 : i32 loc(#loc)
    %135 = llvm.add %134, %67 : i32 loc(#loc)
    %136 = llvm.mul %99, %stride_b1 : i32 loc(#loc)
    %137 = llvm.add %136, %129 : i32 loc(#loc)
    %138 = llvm.getelementptr %a_base[%120] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc)
    %139 = llvm.getelementptr %a_base[%121] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc)
    %140 = llvm.getelementptr %a_base[%122] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc)
    %141 = llvm.getelementptr %a_base[%123] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc)
    %142 = llvm.call @"__triton_hip_predicated_load_vector<8xbf16>_!llvm.ptr<1>_i1_vector<8xbf16>_"(%138, %46, %45) : (!llvm.ptr<1>, i1, vector<8xbf16>) -> vector<8xbf16> loc(#loc)
    %143 = llvm.extractelement %142[%67 : i32] : vector<8xbf16> loc(#loc)
    %144 = llvm.extractelement %142[%44 : i32] : vector<8xbf16> loc(#loc)
    %145 = llvm.extractelement %142[%43 : i32] : vector<8xbf16> loc(#loc)
    %146 = llvm.extractelement %142[%42 : i32] : vector<8xbf16> loc(#loc)
    %147 = llvm.extractelement %142[%41 : i32] : vector<8xbf16> loc(#loc)
    %148 = llvm.extractelement %142[%40 : i32] : vector<8xbf16> loc(#loc)
    %149 = llvm.extractelement %142[%39 : i32] : vector<8xbf16> loc(#loc)
    %150 = llvm.extractelement %142[%38 : i32] : vector<8xbf16> loc(#loc)
    %151 = llvm.call @"__triton_hip_predicated_load_vector<8xbf16>_!llvm.ptr<1>_i1_vector<8xbf16>_"(%139, %46, %45) : (!llvm.ptr<1>, i1, vector<8xbf16>) -> vector<8xbf16> loc(#loc)
    %152 = llvm.extractelement %151[%67 : i32] : vector<8xbf16> loc(#loc)
    %153 = llvm.extractelement %151[%44 : i32] : vector<8xbf16> loc(#loc)
    %154 = llvm.extractelement %151[%43 : i32] : vector<8xbf16> loc(#loc)
    %155 = llvm.extractelement %151[%42 : i32] : vector<8xbf16> loc(#loc)
    %156 = llvm.extractelement %151[%41 : i32] : vector<8xbf16> loc(#loc)
    %157 = llvm.extractelement %151[%40 : i32] : vector<8xbf16> loc(#loc)
    %158 = llvm.extractelement %151[%39 : i32] : vector<8xbf16> loc(#loc)
    %159 = llvm.extractelement %151[%38 : i32] : vector<8xbf16> loc(#loc)
    %160 = llvm.call @"__triton_hip_predicated_load_vector<8xbf16>_!llvm.ptr<1>_i1_vector<8xbf16>_"(%140, %46, %45) : (!llvm.ptr<1>, i1, vector<8xbf16>) -> vector<8xbf16> loc(#loc)
    %161 = llvm.extractelement %160[%67 : i32] : vector<8xbf16> loc(#loc)
    %162 = llvm.extractelement %160[%44 : i32] : vector<8xbf16> loc(#loc)
    %163 = llvm.extractelement %160[%43 : i32] : vector<8xbf16> loc(#loc)
    %164 = llvm.extractelement %160[%42 : i32] : vector<8xbf16> loc(#loc)
    %165 = llvm.extractelement %160[%41 : i32] : vector<8xbf16> loc(#loc)
    %166 = llvm.extractelement %160[%40 : i32] : vector<8xbf16> loc(#loc)
    %167 = llvm.extractelement %160[%39 : i32] : vector<8xbf16> loc(#loc)
    %168 = llvm.extractelement %160[%38 : i32] : vector<8xbf16> loc(#loc)
    %169 = llvm.call @"__triton_hip_predicated_load_vector<8xbf16>_!llvm.ptr<1>_i1_vector<8xbf16>_"(%141, %46, %45) : (!llvm.ptr<1>, i1, vector<8xbf16>) -> vector<8xbf16> loc(#loc)
    %170 = llvm.extractelement %169[%67 : i32] : vector<8xbf16> loc(#loc)
    %171 = llvm.extractelement %169[%44 : i32] : vector<8xbf16> loc(#loc)
    %172 = llvm.extractelement %169[%43 : i32] : vector<8xbf16> loc(#loc)
    %173 = llvm.extractelement %169[%42 : i32] : vector<8xbf16> loc(#loc)
    %174 = llvm.extractelement %169[%41 : i32] : vector<8xbf16> loc(#loc)
    %175 = llvm.extractelement %169[%40 : i32] : vector<8xbf16> loc(#loc)
    %176 = llvm.extractelement %169[%39 : i32] : vector<8xbf16> loc(#loc)
    %177 = llvm.extractelement %169[%38 : i32] : vector<8xbf16> loc(#loc)
    %178 = llvm.and %81, %36 : i32 loc(#loc)
    %179 = llvm.shl %178, %57 : i32 loc(#loc)
    %180 = llvm.xor %64, %179 : i32 loc(#loc)
    %181 = llvm.and %81, %35 : i32 loc(#loc)
    %182 = llvm.lshr %181, %52 : i32 loc(#loc)
    %183 = llvm.xor %180, %182 : i32 loc(#loc)
    %184 = llvm.and %81, %53 : i32 loc(#loc)
    %185 = llvm.icmp "eq" %184, %64 : i32 loc(#loc)
    %186 = llvm.select %185, %64, %34 : i1, i32 loc(#loc)
    %187 = llvm.xor %183, %186 : i32 loc(#loc)
    %188 = llvm.and %81, %60 : i32 loc(#loc)
    %189 = llvm.icmp "eq" %188, %64 : i32 loc(#loc)
    %190 = llvm.select %189, %64, %33 : i1, i32 loc(#loc)
    %191 = llvm.xor %187, %190 : i32 loc(#loc)
    %192 = llvm.and %81, %73 : i32 loc(#loc)
    %193 = llvm.icmp "eq" %192, %64 : i32 loc(#loc)
    %194 = llvm.select %193, %64, %32 : i1, i32 loc(#loc)
    %195 = llvm.xor %191, %194 : i32 loc(#loc)
    %196 = llvm.xor %64, %195 : i32 loc(#loc)
    %197 = llvm.mul %64, %52 : i32 loc(#loc)
    %198 = llvm.xor %196, %197 : i32 loc(#loc)
    %199 = llvm.xor %198, %64 : i32 loc(#loc)
    %200 = llvm.add %199, %64 : i32 loc(#loc)
    %201 = llvm.getelementptr inbounds %37[%200] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %202 = llvm.insertelement %143, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %203 = llvm.insertelement %144, %202[%53 : i32] : vector<8xbf16> loc(#loc)
    %204 = llvm.insertelement %145, %203[%52 : i32] : vector<8xbf16> loc(#loc)
    %205 = llvm.insertelement %146, %204[%57 : i32] : vector<8xbf16> loc(#loc)
    %206 = llvm.insertelement %147, %205[%51 : i32] : vector<8xbf16> loc(#loc)
    %207 = llvm.insertelement %148, %206[%61 : i32] : vector<8xbf16> loc(#loc)
    %208 = llvm.insertelement %149, %207[%63 : i32] : vector<8xbf16> loc(#loc)
    %209 = llvm.insertelement %150, %208[%50 : i32] : vector<8xbf16> loc(#loc)
    llvm.call @"__triton_hip_predicated_store_!llvm.void_!llvm.ptr<3>_vector<8xbf16>_i1_"(%201, %209, %46) : (!llvm.ptr<3>, vector<8xbf16>, i1) -> () loc(#loc)
    %210 = llvm.add %199, %55 : i32 loc(#loc)
    %211 = llvm.getelementptr inbounds %37[%210] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %212 = llvm.insertelement %161, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %213 = llvm.insertelement %162, %212[%53 : i32] : vector<8xbf16> loc(#loc)
    %214 = llvm.insertelement %163, %213[%52 : i32] : vector<8xbf16> loc(#loc)
    %215 = llvm.insertelement %164, %214[%57 : i32] : vector<8xbf16> loc(#loc)
    %216 = llvm.insertelement %165, %215[%51 : i32] : vector<8xbf16> loc(#loc)
    %217 = llvm.insertelement %166, %216[%61 : i32] : vector<8xbf16> loc(#loc)
    %218 = llvm.insertelement %167, %217[%63 : i32] : vector<8xbf16> loc(#loc)
    %219 = llvm.insertelement %168, %218[%50 : i32] : vector<8xbf16> loc(#loc)
    llvm.call @"__triton_hip_predicated_store_!llvm.void_!llvm.ptr<3>_vector<8xbf16>_i1_"(%211, %219, %46) : (!llvm.ptr<3>, vector<8xbf16>, i1) -> () loc(#loc)
    %220 = llvm.xor %198, %30 : i32 loc(#loc)
    %221 = llvm.add %220, %64 : i32 loc(#loc)
    %222 = llvm.getelementptr inbounds %37[%221] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %223 = llvm.insertelement %152, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %224 = llvm.insertelement %153, %223[%53 : i32] : vector<8xbf16> loc(#loc)
    %225 = llvm.insertelement %154, %224[%52 : i32] : vector<8xbf16> loc(#loc)
    %226 = llvm.insertelement %155, %225[%57 : i32] : vector<8xbf16> loc(#loc)
    %227 = llvm.insertelement %156, %226[%51 : i32] : vector<8xbf16> loc(#loc)
    %228 = llvm.insertelement %157, %227[%61 : i32] : vector<8xbf16> loc(#loc)
    %229 = llvm.insertelement %158, %228[%63 : i32] : vector<8xbf16> loc(#loc)
    %230 = llvm.insertelement %159, %229[%50 : i32] : vector<8xbf16> loc(#loc)
    llvm.call @"__triton_hip_predicated_store_!llvm.void_!llvm.ptr<3>_vector<8xbf16>_i1_"(%222, %230, %46) : (!llvm.ptr<3>, vector<8xbf16>, i1) -> () loc(#loc)
    %231 = llvm.add %220, %55 : i32 loc(#loc)
    %232 = llvm.getelementptr inbounds %37[%231] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %233 = llvm.insertelement %170, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %234 = llvm.insertelement %171, %233[%53 : i32] : vector<8xbf16> loc(#loc)
    %235 = llvm.insertelement %172, %234[%52 : i32] : vector<8xbf16> loc(#loc)
    %236 = llvm.insertelement %173, %235[%57 : i32] : vector<8xbf16> loc(#loc)
    %237 = llvm.insertelement %174, %236[%51 : i32] : vector<8xbf16> loc(#loc)
    %238 = llvm.insertelement %175, %237[%61 : i32] : vector<8xbf16> loc(#loc)
    %239 = llvm.insertelement %176, %238[%63 : i32] : vector<8xbf16> loc(#loc)
    %240 = llvm.insertelement %177, %239[%50 : i32] : vector<8xbf16> loc(#loc)
    llvm.call @"__triton_hip_predicated_store_!llvm.void_!llvm.ptr<3>_vector<8xbf16>_i1_"(%232, %240, %46) : (!llvm.ptr<3>, vector<8xbf16>, i1) -> () loc(#loc)
    rocdl.barrier loc(#loc)
    %241 = llvm.and %81, %29 : i32 loc(#loc)
    %242 = llvm.shl %241, %72 : i32 loc(#loc)
    %243 = llvm.xor %64, %242 : i32 loc(#loc)
    %244 = llvm.and %81, %48 : i32 loc(#loc)
    %245 = llvm.shl %244, %57 : i32 loc(#loc)
    %246 = llvm.xor %243, %245 : i32 loc(#loc)
    %247 = llvm.select %185, %64, %32 : i1, i32 loc(#loc)
    %248 = llvm.xor %246, %247 : i32 loc(#loc)
    %249 = llvm.select %193, %64, %60 : i1, i32 loc(#loc)
    %250 = llvm.xor %248, %249 : i32 loc(#loc)
    %251 = llvm.select %104, %64, %55 : i1, i32 loc(#loc)
    %252 = llvm.xor %250, %251 : i32 loc(#loc)
    %253 = llvm.xor %64, %252 : i32 loc(#loc)
    %254 = llvm.xor %253, %197 : i32 loc(#loc)
    %255 = llvm.xor %254, %64 : i32 loc(#loc)
    %256 = llvm.add %255, %64 : i32 loc(#loc)
    %257 = llvm.getelementptr inbounds %37[%256] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %258 = llvm.call @"__triton_hip_predicated_load_vector<8xbf16>_!llvm.ptr<3>_i1_vector<8xbf16>_"(%257, %46, %45) : (!llvm.ptr<3>, i1, vector<8xbf16>) -> vector<8xbf16> loc(#loc)
    %259 = llvm.extractelement %258[%64 : i32] : vector<8xbf16> loc(#loc)
    %260 = llvm.extractelement %258[%53 : i32] : vector<8xbf16> loc(#loc)
    %261 = llvm.extractelement %258[%52 : i32] : vector<8xbf16> loc(#loc)
    %262 = llvm.extractelement %258[%57 : i32] : vector<8xbf16> loc(#loc)
    %263 = llvm.extractelement %258[%51 : i32] : vector<8xbf16> loc(#loc)
    %264 = llvm.extractelement %258[%61 : i32] : vector<8xbf16> loc(#loc)
    %265 = llvm.extractelement %258[%63 : i32] : vector<8xbf16> loc(#loc)
    %266 = llvm.extractelement %258[%50 : i32] : vector<8xbf16> loc(#loc)
    %267 = llvm.add %255, %33 : i32 loc(#loc)
    %268 = llvm.getelementptr inbounds %37[%267] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %269 = llvm.call @"__triton_hip_predicated_load_vector<8xbf16>_!llvm.ptr<3>_i1_vector<8xbf16>_"(%268, %46, %45) : (!llvm.ptr<3>, i1, vector<8xbf16>) -> vector<8xbf16> loc(#loc)
    %270 = llvm.extractelement %269[%64 : i32] : vector<8xbf16> loc(#loc)
    %271 = llvm.extractelement %269[%53 : i32] : vector<8xbf16> loc(#loc)
    %272 = llvm.extractelement %269[%52 : i32] : vector<8xbf16> loc(#loc)
    %273 = llvm.extractelement %269[%57 : i32] : vector<8xbf16> loc(#loc)
    %274 = llvm.extractelement %269[%51 : i32] : vector<8xbf16> loc(#loc)
    %275 = llvm.extractelement %269[%61 : i32] : vector<8xbf16> loc(#loc)
    %276 = llvm.extractelement %269[%63 : i32] : vector<8xbf16> loc(#loc)
    %277 = llvm.extractelement %269[%50 : i32] : vector<8xbf16> loc(#loc)
    %278 = llvm.xor %254, %73 : i32 loc(#loc)
    %279 = llvm.add %278, %64 : i32 loc(#loc)
    %280 = llvm.getelementptr inbounds %37[%279] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %281 = llvm.call @"__triton_hip_predicated_load_vector<8xbf16>_!llvm.ptr<3>_i1_vector<8xbf16>_"(%280, %46, %45) : (!llvm.ptr<3>, i1, vector<8xbf16>) -> vector<8xbf16> loc(#loc)
    %282 = llvm.extractelement %281[%64 : i32] : vector<8xbf16> loc(#loc)
    %283 = llvm.extractelement %281[%53 : i32] : vector<8xbf16> loc(#loc)
    %284 = llvm.extractelement %281[%52 : i32] : vector<8xbf16> loc(#loc)
    %285 = llvm.extractelement %281[%57 : i32] : vector<8xbf16> loc(#loc)
    %286 = llvm.extractelement %281[%51 : i32] : vector<8xbf16> loc(#loc)
    %287 = llvm.extractelement %281[%61 : i32] : vector<8xbf16> loc(#loc)
    %288 = llvm.extractelement %281[%63 : i32] : vector<8xbf16> loc(#loc)
    %289 = llvm.extractelement %281[%50 : i32] : vector<8xbf16> loc(#loc)
    %290 = llvm.add %278, %33 : i32 loc(#loc)
    %291 = llvm.getelementptr inbounds %37[%290] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %292 = llvm.call @"__triton_hip_predicated_load_vector<8xbf16>_!llvm.ptr<3>_i1_vector<8xbf16>_"(%291, %46, %45) : (!llvm.ptr<3>, i1, vector<8xbf16>) -> vector<8xbf16> loc(#loc)
    %293 = llvm.extractelement %292[%64 : i32] : vector<8xbf16> loc(#loc)
    %294 = llvm.extractelement %292[%53 : i32] : vector<8xbf16> loc(#loc)
    %295 = llvm.extractelement %292[%52 : i32] : vector<8xbf16> loc(#loc)
    %296 = llvm.extractelement %292[%57 : i32] : vector<8xbf16> loc(#loc)
    %297 = llvm.extractelement %292[%51 : i32] : vector<8xbf16> loc(#loc)
    %298 = llvm.extractelement %292[%61 : i32] : vector<8xbf16> loc(#loc)
    %299 = llvm.extractelement %292[%63 : i32] : vector<8xbf16> loc(#loc)
    %300 = llvm.extractelement %292[%50 : i32] : vector<8xbf16> loc(#loc)
    %301 = llvm.xor %254, %65 : i32 loc(#loc)
    %302 = llvm.add %301, %64 : i32 loc(#loc)
    %303 = llvm.getelementptr inbounds %37[%302] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %304 = llvm.call @"__triton_hip_predicated_load_vector<8xbf16>_!llvm.ptr<3>_i1_vector<8xbf16>_"(%303, %46, %45) : (!llvm.ptr<3>, i1, vector<8xbf16>) -> vector<8xbf16> loc(#loc)
    %305 = llvm.extractelement %304[%64 : i32] : vector<8xbf16> loc(#loc)
    %306 = llvm.extractelement %304[%53 : i32] : vector<8xbf16> loc(#loc)
    %307 = llvm.extractelement %304[%52 : i32] : vector<8xbf16> loc(#loc)
    %308 = llvm.extractelement %304[%57 : i32] : vector<8xbf16> loc(#loc)
    %309 = llvm.extractelement %304[%51 : i32] : vector<8xbf16> loc(#loc)
    %310 = llvm.extractelement %304[%61 : i32] : vector<8xbf16> loc(#loc)
    %311 = llvm.extractelement %304[%63 : i32] : vector<8xbf16> loc(#loc)
    %312 = llvm.extractelement %304[%50 : i32] : vector<8xbf16> loc(#loc)
    %313 = llvm.add %301, %33 : i32 loc(#loc)
    %314 = llvm.getelementptr inbounds %37[%313] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %315 = llvm.call @"__triton_hip_predicated_load_vector<8xbf16>_!llvm.ptr<3>_i1_vector<8xbf16>_"(%314, %46, %45) : (!llvm.ptr<3>, i1, vector<8xbf16>) -> vector<8xbf16> loc(#loc)
    %316 = llvm.extractelement %315[%64 : i32] : vector<8xbf16> loc(#loc)
    %317 = llvm.extractelement %315[%53 : i32] : vector<8xbf16> loc(#loc)
    %318 = llvm.extractelement %315[%52 : i32] : vector<8xbf16> loc(#loc)
    %319 = llvm.extractelement %315[%57 : i32] : vector<8xbf16> loc(#loc)
    %320 = llvm.extractelement %315[%51 : i32] : vector<8xbf16> loc(#loc)
    %321 = llvm.extractelement %315[%61 : i32] : vector<8xbf16> loc(#loc)
    %322 = llvm.extractelement %315[%63 : i32] : vector<8xbf16> loc(#loc)
    %323 = llvm.extractelement %315[%50 : i32] : vector<8xbf16> loc(#loc)
    %324 = llvm.xor %254, %28 : i32 loc(#loc)
    %325 = llvm.add %324, %64 : i32 loc(#loc)
    %326 = llvm.getelementptr inbounds %37[%325] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %327 = llvm.call @"__triton_hip_predicated_load_vector<8xbf16>_!llvm.ptr<3>_i1_vector<8xbf16>_"(%326, %46, %45) : (!llvm.ptr<3>, i1, vector<8xbf16>) -> vector<8xbf16> loc(#loc)
    %328 = llvm.extractelement %327[%64 : i32] : vector<8xbf16> loc(#loc)
    %329 = llvm.extractelement %327[%53 : i32] : vector<8xbf16> loc(#loc)
    %330 = llvm.extractelement %327[%52 : i32] : vector<8xbf16> loc(#loc)
    %331 = llvm.extractelement %327[%57 : i32] : vector<8xbf16> loc(#loc)
    %332 = llvm.extractelement %327[%51 : i32] : vector<8xbf16> loc(#loc)
    %333 = llvm.extractelement %327[%61 : i32] : vector<8xbf16> loc(#loc)
    %334 = llvm.extractelement %327[%63 : i32] : vector<8xbf16> loc(#loc)
    %335 = llvm.extractelement %327[%50 : i32] : vector<8xbf16> loc(#loc)
    %336 = llvm.add %324, %33 : i32 loc(#loc)
    %337 = llvm.getelementptr inbounds %37[%336] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %338 = llvm.call @"__triton_hip_predicated_load_vector<8xbf16>_!llvm.ptr<3>_i1_vector<8xbf16>_"(%337, %46, %45) : (!llvm.ptr<3>, i1, vector<8xbf16>) -> vector<8xbf16> loc(#loc)
    %339 = llvm.extractelement %338[%64 : i32] : vector<8xbf16> loc(#loc)
    %340 = llvm.extractelement %338[%53 : i32] : vector<8xbf16> loc(#loc)
    %341 = llvm.extractelement %338[%52 : i32] : vector<8xbf16> loc(#loc)
    %342 = llvm.extractelement %338[%57 : i32] : vector<8xbf16> loc(#loc)
    %343 = llvm.extractelement %338[%51 : i32] : vector<8xbf16> loc(#loc)
    %344 = llvm.extractelement %338[%61 : i32] : vector<8xbf16> loc(#loc)
    %345 = llvm.extractelement %338[%63 : i32] : vector<8xbf16> loc(#loc)
    %346 = llvm.extractelement %338[%50 : i32] : vector<8xbf16> loc(#loc)
    %347 = llvm.getelementptr %b_base[%137] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, i8 loc(#loc)
    %348 = llvm.call @"__triton_hip_predicated_load_vector<16xi8>_!llvm.ptr<1>_i1_vector<16xi8>_"(%347, %46, %27) : (!llvm.ptr<1>, i1, vector<16xi8>) -> vector<16xi8> loc(#loc)
    %349 = llvm.extractelement %348[%67 : i32] : vector<16xi8> loc(#loc)
    %350 = llvm.extractelement %348[%44 : i32] : vector<16xi8> loc(#loc)
    %351 = llvm.extractelement %348[%43 : i32] : vector<16xi8> loc(#loc)
    %352 = llvm.extractelement %348[%42 : i32] : vector<16xi8> loc(#loc)
    %353 = llvm.extractelement %348[%41 : i32] : vector<16xi8> loc(#loc)
    %354 = llvm.extractelement %348[%40 : i32] : vector<16xi8> loc(#loc)
    %355 = llvm.extractelement %348[%39 : i32] : vector<16xi8> loc(#loc)
    %356 = llvm.extractelement %348[%38 : i32] : vector<16xi8> loc(#loc)
    %357 = llvm.extractelement %348[%26 : i32] : vector<16xi8> loc(#loc)
    %358 = llvm.extractelement %348[%25 : i32] : vector<16xi8> loc(#loc)
    %359 = llvm.extractelement %348[%24 : i32] : vector<16xi8> loc(#loc)
    %360 = llvm.extractelement %348[%23 : i32] : vector<16xi8> loc(#loc)
    %361 = llvm.extractelement %348[%22 : i32] : vector<16xi8> loc(#loc)
    %362 = llvm.extractelement %348[%21 : i32] : vector<16xi8> loc(#loc)
    %363 = llvm.extractelement %348[%20 : i32] : vector<16xi8> loc(#loc)
    %364 = llvm.extractelement %348[%19 : i32] : vector<16xi8> loc(#loc)
    rocdl.barrier loc(#loc)
    %365 = llvm.lshr %94, %64 : i32 loc(#loc)
    %366 = llvm.xor %64, %365 : i32 loc(#loc)
    %367 = llvm.select %185, %64, %18 : i1, i32 loc(#loc)
    %368 = llvm.xor %366, %367 : i32 loc(#loc)
    %369 = llvm.and %81, %52 : i32 loc(#loc)
    %370 = llvm.icmp "eq" %369, %64 : i32 loc(#loc)
    %371 = llvm.select %370, %64, %51 : i1, i32 loc(#loc)
    %372 = llvm.xor %368, %371 : i32 loc(#loc)
    %373 = llvm.and %81, %51 : i32 loc(#loc)
    %374 = llvm.icmp "eq" %373, %64 : i32 loc(#loc)
    %375 = llvm.select %374, %64, %17 : i1, i32 loc(#loc)
    %376 = llvm.xor %372, %375 : i32 loc(#loc)
    %377 = llvm.xor %64, %376 : i32 loc(#loc)
    %378 = llvm.mul %64, %53 : i32 loc(#loc)
    %379 = llvm.xor %377, %378 : i32 loc(#loc)
    %380 = llvm.xor %379, %64 : i32 loc(#loc)
    %381 = llvm.add %380, %64 : i32 loc(#loc)
    %382 = llvm.getelementptr inbounds %37[%381] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %383 = llvm.insertelement %349, %16[%64 : i32] : vector<4xi8> loc(#loc)
    %384 = llvm.insertelement %350, %383[%53 : i32] : vector<4xi8> loc(#loc)
    %385 = llvm.insertelement %351, %384[%52 : i32] : vector<4xi8> loc(#loc)
    %386 = llvm.insertelement %352, %385[%57 : i32] : vector<4xi8> loc(#loc)
    llvm.call @"__triton_hip_predicated_store_!llvm.void_!llvm.ptr<3>_vector<4xi8>_i1_"(%382, %386, %46) : (!llvm.ptr<3>, vector<4xi8>, i1) -> () loc(#loc)
    %387 = llvm.add %380, %15 : i32 loc(#loc)
    %388 = llvm.getelementptr inbounds %37[%387] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %389 = llvm.insertelement %353, %16[%64 : i32] : vector<4xi8> loc(#loc)
    %390 = llvm.insertelement %354, %389[%53 : i32] : vector<4xi8> loc(#loc)
    %391 = llvm.insertelement %355, %390[%52 : i32] : vector<4xi8> loc(#loc)
    %392 = llvm.insertelement %356, %391[%57 : i32] : vector<4xi8> loc(#loc)
    llvm.call @"__triton_hip_predicated_store_!llvm.void_!llvm.ptr<3>_vector<4xi8>_i1_"(%388, %392, %46) : (!llvm.ptr<3>, vector<4xi8>, i1) -> () loc(#loc)
    %393 = llvm.xor %379, %14 : i32 loc(#loc)
    %394 = llvm.add %393, %64 : i32 loc(#loc)
    %395 = llvm.getelementptr inbounds %37[%394] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %396 = llvm.insertelement %357, %16[%64 : i32] : vector<4xi8> loc(#loc)
    %397 = llvm.insertelement %358, %396[%53 : i32] : vector<4xi8> loc(#loc)
    %398 = llvm.insertelement %359, %397[%52 : i32] : vector<4xi8> loc(#loc)
    %399 = llvm.insertelement %360, %398[%57 : i32] : vector<4xi8> loc(#loc)
    llvm.call @"__triton_hip_predicated_store_!llvm.void_!llvm.ptr<3>_vector<4xi8>_i1_"(%395, %399, %46) : (!llvm.ptr<3>, vector<4xi8>, i1) -> () loc(#loc)
    %400 = llvm.add %393, %15 : i32 loc(#loc)
    %401 = llvm.getelementptr inbounds %37[%400] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %402 = llvm.insertelement %361, %16[%64 : i32] : vector<4xi8> loc(#loc)
    %403 = llvm.insertelement %362, %402[%53 : i32] : vector<4xi8> loc(#loc)
    %404 = llvm.insertelement %363, %403[%52 : i32] : vector<4xi8> loc(#loc)
    %405 = llvm.insertelement %364, %404[%57 : i32] : vector<4xi8> loc(#loc)
    llvm.call @"__triton_hip_predicated_store_!llvm.void_!llvm.ptr<3>_vector<4xi8>_i1_"(%401, %405, %46) : (!llvm.ptr<3>, vector<4xi8>, i1) -> () loc(#loc)
    rocdl.barrier loc(#loc)
    %406 = llvm.shl %100, %57 : i32 loc(#loc)
    %407 = llvm.xor %64, %406 : i32 loc(#loc)
    %408 = llvm.select %189, %64, %15 : i1, i32 loc(#loc)
    %409 = llvm.xor %407, %408 : i32 loc(#loc)
    %410 = llvm.select %193, %64, %14 : i1, i32 loc(#loc)
    %411 = llvm.xor %409, %410 : i32 loc(#loc)
    %412 = llvm.and %81, %65 : i32 loc(#loc)
    %413 = llvm.icmp "eq" %412, %64 : i32 loc(#loc)
    %414 = llvm.select %413, %64, %55 : i1, i32 loc(#loc)
    %415 = llvm.xor %411, %414 : i32 loc(#loc)
    %416 = llvm.xor %64, %415 : i32 loc(#loc)
    %417 = llvm.xor %416, %378 : i32 loc(#loc)
    %418 = llvm.xor %417, %64 : i32 loc(#loc)
    %419 = llvm.add %418, %64 : i32 loc(#loc)
    %420 = llvm.getelementptr inbounds %37[%419] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %421 = llvm.call @"__triton_hip_predicated_load_vector<4xi8>_!llvm.ptr<3>_i1_vector<4xi8>_"(%420, %46, %13) : (!llvm.ptr<3>, i1, vector<4xi8>) -> vector<4xi8> loc(#loc)
    %422 = llvm.extractelement %421[%64 : i32] : vector<4xi8> loc(#loc)
    %423 = llvm.extractelement %421[%53 : i32] : vector<4xi8> loc(#loc)
    %424 = llvm.extractelement %421[%52 : i32] : vector<4xi8> loc(#loc)
    %425 = llvm.extractelement %421[%57 : i32] : vector<4xi8> loc(#loc)
    %426 = llvm.add %418, %18 : i32 loc(#loc)
    %427 = llvm.getelementptr inbounds %37[%426] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %428 = llvm.call @"__triton_hip_predicated_load_vector<4xi8>_!llvm.ptr<3>_i1_vector<4xi8>_"(%427, %46, %13) : (!llvm.ptr<3>, i1, vector<4xi8>) -> vector<4xi8> loc(#loc)
    %429 = llvm.extractelement %428[%64 : i32] : vector<4xi8> loc(#loc)
    %430 = llvm.extractelement %428[%53 : i32] : vector<4xi8> loc(#loc)
    %431 = llvm.extractelement %428[%52 : i32] : vector<4xi8> loc(#loc)
    %432 = llvm.extractelement %428[%57 : i32] : vector<4xi8> loc(#loc)
    %433 = llvm.xor %417, %17 : i32 loc(#loc)
    %434 = llvm.add %433, %64 : i32 loc(#loc)
    %435 = llvm.getelementptr inbounds %37[%434] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %436 = llvm.call @"__triton_hip_predicated_load_vector<4xi8>_!llvm.ptr<3>_i1_vector<4xi8>_"(%435, %46, %13) : (!llvm.ptr<3>, i1, vector<4xi8>) -> vector<4xi8> loc(#loc)
    %437 = llvm.extractelement %436[%64 : i32] : vector<4xi8> loc(#loc)
    %438 = llvm.extractelement %436[%53 : i32] : vector<4xi8> loc(#loc)
    %439 = llvm.extractelement %436[%52 : i32] : vector<4xi8> loc(#loc)
    %440 = llvm.extractelement %436[%57 : i32] : vector<4xi8> loc(#loc)
    %441 = llvm.add %433, %18 : i32 loc(#loc)
    %442 = llvm.getelementptr inbounds %37[%441] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %443 = llvm.call @"__triton_hip_predicated_load_vector<4xi8>_!llvm.ptr<3>_i1_vector<4xi8>_"(%442, %46, %13) : (!llvm.ptr<3>, i1, vector<4xi8>) -> vector<4xi8> loc(#loc)
    %444 = llvm.extractelement %443[%64 : i32] : vector<4xi8> loc(#loc)
    %445 = llvm.extractelement %443[%53 : i32] : vector<4xi8> loc(#loc)
    %446 = llvm.extractelement %443[%52 : i32] : vector<4xi8> loc(#loc)
    %447 = llvm.extractelement %443[%57 : i32] : vector<4xi8> loc(#loc)
    %448 = llvm.xor %417, %51 : i32 loc(#loc)
    %449 = llvm.add %448, %64 : i32 loc(#loc)
    %450 = llvm.getelementptr inbounds %37[%449] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %451 = llvm.call @"__triton_hip_predicated_load_vector<4xi8>_!llvm.ptr<3>_i1_vector<4xi8>_"(%450, %46, %13) : (!llvm.ptr<3>, i1, vector<4xi8>) -> vector<4xi8> loc(#loc)
    %452 = llvm.extractelement %451[%64 : i32] : vector<4xi8> loc(#loc)
    %453 = llvm.extractelement %451[%53 : i32] : vector<4xi8> loc(#loc)
    %454 = llvm.extractelement %451[%52 : i32] : vector<4xi8> loc(#loc)
    %455 = llvm.extractelement %451[%57 : i32] : vector<4xi8> loc(#loc)
    %456 = llvm.add %448, %18 : i32 loc(#loc)
    %457 = llvm.getelementptr inbounds %37[%456] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %458 = llvm.call @"__triton_hip_predicated_load_vector<4xi8>_!llvm.ptr<3>_i1_vector<4xi8>_"(%457, %46, %13) : (!llvm.ptr<3>, i1, vector<4xi8>) -> vector<4xi8> loc(#loc)
    %459 = llvm.extractelement %458[%64 : i32] : vector<4xi8> loc(#loc)
    %460 = llvm.extractelement %458[%53 : i32] : vector<4xi8> loc(#loc)
    %461 = llvm.extractelement %458[%52 : i32] : vector<4xi8> loc(#loc)
    %462 = llvm.extractelement %458[%57 : i32] : vector<4xi8> loc(#loc)
    %463 = llvm.xor %417, %12 : i32 loc(#loc)
    %464 = llvm.add %463, %64 : i32 loc(#loc)
    %465 = llvm.getelementptr inbounds %37[%464] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %466 = llvm.call @"__triton_hip_predicated_load_vector<4xi8>_!llvm.ptr<3>_i1_vector<4xi8>_"(%465, %46, %13) : (!llvm.ptr<3>, i1, vector<4xi8>) -> vector<4xi8> loc(#loc)
    %467 = llvm.extractelement %466[%64 : i32] : vector<4xi8> loc(#loc)
    %468 = llvm.extractelement %466[%53 : i32] : vector<4xi8> loc(#loc)
    %469 = llvm.extractelement %466[%52 : i32] : vector<4xi8> loc(#loc)
    %470 = llvm.extractelement %466[%57 : i32] : vector<4xi8> loc(#loc)
    %471 = llvm.add %463, %18 : i32 loc(#loc)
    %472 = llvm.getelementptr inbounds %37[%471] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %473 = llvm.call @"__triton_hip_predicated_load_vector<4xi8>_!llvm.ptr<3>_i1_vector<4xi8>_"(%472, %46, %13) : (!llvm.ptr<3>, i1, vector<4xi8>) -> vector<4xi8> loc(#loc)
    %474 = llvm.extractelement %473[%64 : i32] : vector<4xi8> loc(#loc)
    %475 = llvm.extractelement %473[%53 : i32] : vector<4xi8> loc(#loc)
    %476 = llvm.extractelement %473[%52 : i32] : vector<4xi8> loc(#loc)
    %477 = llvm.extractelement %473[%57 : i32] : vector<4xi8> loc(#loc)
    %478 = llvm.mul %99, %72 : i32 loc(#loc)
    %479 = llvm.lshr %124, %64 : i32 loc(#loc)
    %480 = llvm.xor %64, %479 : i32 loc(#loc)
    %481 = llvm.xor %64, %480 : i32 loc(#loc)
    %482 = llvm.xor %481, %64 : i32 loc(#loc)
    %483 = llvm.add %482, %67 : i32 loc(#loc)
    %484 = llvm.add %483, %478 : i32 loc(#loc)
    %485 = rocdl.make.buffer.rsrc %b_scale, %11, %9, %10 : <1> to <8> loc(#loc)
    %486 = llvm.mul %484, %53 : i32 loc(#loc)
    %487 = llvm.select %46, %486, %7 : i1, i32 loc(#loc)
    %488 = rocdl.raw.ptr.buffer.load %485, %487, %64, %64 : i8 loc(#loc)
    %489 = llvm.bitcast %488 : i8 to vector<1xi8> loc(#loc)
    %490 = llvm.extractelement %489[%67 : i32] : vector<1xi8> loc(#loc)
    rocdl.barrier loc(#loc)
    %491 = llvm.and %81, %6 : i32 loc(#loc)
    %492 = llvm.shl %491, %52 : i32 loc(#loc)
    %493 = llvm.xor %64, %492 : i32 loc(#loc)
    %494 = llvm.select %413, %64, %52 : i1, i32 loc(#loc)
    %495 = llvm.xor %493, %494 : i32 loc(#loc)
    %496 = llvm.select %104, %64, %53 : i1, i32 loc(#loc)
    %497 = llvm.xor %495, %496 : i32 loc(#loc)
    %498 = llvm.xor %64, %497 : i32 loc(#loc)
    %499 = llvm.xor %498, %378 : i32 loc(#loc)
    %500 = llvm.xor %499, %64 : i32 loc(#loc)
    %501 = llvm.add %500, %64 : i32 loc(#loc)
    %502 = llvm.getelementptr inbounds %37[%501] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %503 = llvm.insertelement %490, %5[%64 : i32] : vector<1xi8> loc(#loc)
    llvm.call @"__triton_hip_predicated_store_!llvm.void_!llvm.ptr<3>_vector<1xi8>_i1_"(%502, %503, %46) : (!llvm.ptr<3>, vector<1xi8>, i1) -> () loc(#loc)
    rocdl.barrier loc(#loc)
    %504 = llvm.shl %124, %61 : i32 loc(#loc)
    %505 = llvm.xor %64, %504 : i32 loc(#loc)
    %506 = llvm.and %81, %72 : i32 loc(#loc)
    %507 = llvm.icmp "eq" %506, %64 : i32 loc(#loc)
    %508 = llvm.select %507, %64, %52 : i1, i32 loc(#loc)
    %509 = llvm.xor %505, %508 : i32 loc(#loc)
    %510 = llvm.select %413, %64, %53 : i1, i32 loc(#loc)
    %511 = llvm.xor %509, %510 : i32 loc(#loc)
    %512 = llvm.xor %64, %511 : i32 loc(#loc)
    %513 = llvm.xor %512, %378 : i32 loc(#loc)
    %514 = llvm.xor %513, %64 : i32 loc(#loc)
    %515 = llvm.add %514, %64 : i32 loc(#loc)
    %516 = llvm.getelementptr inbounds %37[%515] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %517 = llvm.call @"__triton_hip_predicated_load_vector<1xi8>_!llvm.ptr<3>_i1_vector<1xi8>_"(%516, %46, %8) : (!llvm.ptr<3>, i1, vector<1xi8>) -> vector<1xi8> loc(#loc)
    %518 = llvm.extractelement %517[%64 : i32] : vector<1xi8> loc(#loc)
    %519 = llvm.add %514, %60 : i32 loc(#loc)
    %520 = llvm.getelementptr inbounds %37[%519] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %521 = llvm.call @"__triton_hip_predicated_load_vector<1xi8>_!llvm.ptr<3>_i1_vector<1xi8>_"(%520, %46, %8) : (!llvm.ptr<3>, i1, vector<1xi8>) -> vector<1xi8> loc(#loc)
    %522 = llvm.extractelement %521[%64 : i32] : vector<1xi8> loc(#loc)
    %523 = llvm.add %514, %51 : i32 loc(#loc)
    %524 = llvm.getelementptr inbounds %37[%523] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %525 = llvm.call @"__triton_hip_predicated_load_vector<1xi8>_!llvm.ptr<3>_i1_vector<1xi8>_"(%524, %46, %8) : (!llvm.ptr<3>, i1, vector<1xi8>) -> vector<1xi8> loc(#loc)
    %526 = llvm.extractelement %525[%64 : i32] : vector<1xi8> loc(#loc)
    %527 = llvm.add %514, %4 : i32 loc(#loc)
    %528 = llvm.getelementptr inbounds %37[%527] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %529 = llvm.call @"__triton_hip_predicated_load_vector<1xi8>_!llvm.ptr<3>_i1_vector<1xi8>_"(%528, %46, %8) : (!llvm.ptr<3>, i1, vector<1xi8>) -> vector<1xi8> loc(#loc)
    %530 = llvm.extractelement %529[%64 : i32] : vector<1xi8> loc(#loc)
    %531 = llvm.add %514, %72 : i32 loc(#loc)
    %532 = llvm.getelementptr inbounds %37[%531] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %533 = llvm.call @"__triton_hip_predicated_load_vector<1xi8>_!llvm.ptr<3>_i1_vector<1xi8>_"(%532, %46, %8) : (!llvm.ptr<3>, i1, vector<1xi8>) -> vector<1xi8> loc(#loc)
    %534 = llvm.extractelement %533[%64 : i32] : vector<1xi8> loc(#loc)
    %535 = llvm.add %514, %59 : i32 loc(#loc)
    %536 = llvm.getelementptr inbounds %37[%535] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %537 = llvm.call @"__triton_hip_predicated_load_vector<1xi8>_!llvm.ptr<3>_i1_vector<1xi8>_"(%536, %46, %8) : (!llvm.ptr<3>, i1, vector<1xi8>) -> vector<1xi8> loc(#loc)
    %538 = llvm.extractelement %537[%64 : i32] : vector<1xi8> loc(#loc)
    %539 = llvm.add %514, %49 : i32 loc(#loc)
    %540 = llvm.getelementptr inbounds %37[%539] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %541 = llvm.call @"__triton_hip_predicated_load_vector<1xi8>_!llvm.ptr<3>_i1_vector<1xi8>_"(%540, %46, %8) : (!llvm.ptr<3>, i1, vector<1xi8>) -> vector<1xi8> loc(#loc)
    %542 = llvm.extractelement %541[%64 : i32] : vector<1xi8> loc(#loc)
    %543 = llvm.add %514, %3 : i32 loc(#loc)
    %544 = llvm.getelementptr inbounds %37[%543] : (!llvm.ptr<3>, i32) -> !llvm.ptr<3>, i8 loc(#loc)
    %545 = llvm.call @"__triton_hip_predicated_load_vector<1xi8>_!llvm.ptr<3>_i1_vector<1xi8>_"(%544, %46, %8) : (!llvm.ptr<3>, i1, vector<1xi8>) -> vector<1xi8> loc(#loc)
    %546 = llvm.extractelement %545[%64 : i32] : vector<1xi8> loc(#loc)
    %547 = llvm.zext %518 : i8 to i16 loc(#loc)
    %548 = llvm.zext %526 : i8 to i16 loc(#loc)
    %549 = llvm.zext %534 : i8 to i16 loc(#loc)
    %550 = llvm.zext %542 : i8 to i16 loc(#loc)
    %551 = llvm.shl %547, %71 : i16 loc(#loc)
    %552 = llvm.shl %548, %71 : i16 loc(#loc)
    %553 = llvm.shl %549, %71 : i16 loc(#loc)
    %554 = llvm.shl %550, %71 : i16 loc(#loc)
    %555 = llvm.insertelement %422, %16[%64 : i32] : vector<4xi8> loc(#loc)
    %556 = llvm.insertelement %423, %555[%53 : i32] : vector<4xi8> loc(#loc)
    %557 = llvm.insertelement %424, %556[%52 : i32] : vector<4xi8> loc(#loc)
    %558 = llvm.insertelement %425, %557[%57 : i32] : vector<4xi8> loc(#loc)
    %559 = llvm.bitcast %558 : vector<4xi8> to i32 loc(#loc)
    %560 = llvm.zext %551 : i16 to i32 loc(#loc)
    %561 = llvm.shl %560, %60 : i32 loc(#loc)
    %562 = llvm.bitcast %561 : i32 to f32 loc(#loc)
    %563 = rocdl.cvt.scalef32.pk.bf16.fp4 %559[0], %562 : vector<2xbf16> loc(#loc)
    %564 = rocdl.cvt.scalef32.pk.bf16.fp4 %559[2], %562 : vector<2xbf16> loc(#loc)
    %565 = rocdl.cvt.scalef32.pk.bf16.fp4 %559[1], %562 : vector<2xbf16> loc(#loc)
    %566 = rocdl.cvt.scalef32.pk.bf16.fp4 %559[3], %562 : vector<2xbf16> loc(#loc)
    %567 = llvm.extractelement %563[%64 : i32] : vector<2xbf16> loc(#loc)
    %568 = llvm.extractelement %563[%53 : i32] : vector<2xbf16> loc(#loc)
    %569 = llvm.extractelement %564[%64 : i32] : vector<2xbf16> loc(#loc)
    %570 = llvm.extractelement %564[%53 : i32] : vector<2xbf16> loc(#loc)
    %571 = llvm.extractelement %565[%64 : i32] : vector<2xbf16> loc(#loc)
    %572 = llvm.extractelement %565[%53 : i32] : vector<2xbf16> loc(#loc)
    %573 = llvm.extractelement %566[%64 : i32] : vector<2xbf16> loc(#loc)
    %574 = llvm.extractelement %566[%53 : i32] : vector<2xbf16> loc(#loc)
    %575 = llvm.insertelement %429, %16[%64 : i32] : vector<4xi8> loc(#loc)
    %576 = llvm.insertelement %430, %575[%53 : i32] : vector<4xi8> loc(#loc)
    %577 = llvm.insertelement %431, %576[%52 : i32] : vector<4xi8> loc(#loc)
    %578 = llvm.insertelement %432, %577[%57 : i32] : vector<4xi8> loc(#loc)
    %579 = llvm.bitcast %578 : vector<4xi8> to i32 loc(#loc)
    %580 = llvm.zext %552 : i16 to i32 loc(#loc)
    %581 = llvm.shl %580, %60 : i32 loc(#loc)
    %582 = llvm.bitcast %581 : i32 to f32 loc(#loc)
    %583 = rocdl.cvt.scalef32.pk.bf16.fp4 %579[0], %582 : vector<2xbf16> loc(#loc)
    %584 = rocdl.cvt.scalef32.pk.bf16.fp4 %579[2], %582 : vector<2xbf16> loc(#loc)
    %585 = rocdl.cvt.scalef32.pk.bf16.fp4 %579[1], %582 : vector<2xbf16> loc(#loc)
    %586 = rocdl.cvt.scalef32.pk.bf16.fp4 %579[3], %582 : vector<2xbf16> loc(#loc)
    %587 = llvm.extractelement %583[%64 : i32] : vector<2xbf16> loc(#loc)
    %588 = llvm.extractelement %583[%53 : i32] : vector<2xbf16> loc(#loc)
    %589 = llvm.extractelement %584[%64 : i32] : vector<2xbf16> loc(#loc)
    %590 = llvm.extractelement %584[%53 : i32] : vector<2xbf16> loc(#loc)
    %591 = llvm.extractelement %585[%64 : i32] : vector<2xbf16> loc(#loc)
    %592 = llvm.extractelement %585[%53 : i32] : vector<2xbf16> loc(#loc)
    %593 = llvm.extractelement %586[%64 : i32] : vector<2xbf16> loc(#loc)
    %594 = llvm.extractelement %586[%53 : i32] : vector<2xbf16> loc(#loc)
    %595 = llvm.insertelement %452, %16[%64 : i32] : vector<4xi8> loc(#loc)
    %596 = llvm.insertelement %453, %595[%53 : i32] : vector<4xi8> loc(#loc)
    %597 = llvm.insertelement %454, %596[%52 : i32] : vector<4xi8> loc(#loc)
    %598 = llvm.insertelement %455, %597[%57 : i32] : vector<4xi8> loc(#loc)
    %599 = llvm.bitcast %598 : vector<4xi8> to i32 loc(#loc)
    %600 = llvm.zext %553 : i16 to i32 loc(#loc)
    %601 = llvm.shl %600, %60 : i32 loc(#loc)
    %602 = llvm.bitcast %601 : i32 to f32 loc(#loc)
    %603 = rocdl.cvt.scalef32.pk.bf16.fp4 %599[0], %602 : vector<2xbf16> loc(#loc)
    %604 = rocdl.cvt.scalef32.pk.bf16.fp4 %599[2], %602 : vector<2xbf16> loc(#loc)
    %605 = rocdl.cvt.scalef32.pk.bf16.fp4 %599[1], %602 : vector<2xbf16> loc(#loc)
    %606 = rocdl.cvt.scalef32.pk.bf16.fp4 %599[3], %602 : vector<2xbf16> loc(#loc)
    %607 = llvm.extractelement %603[%64 : i32] : vector<2xbf16> loc(#loc)
    %608 = llvm.extractelement %603[%53 : i32] : vector<2xbf16> loc(#loc)
    %609 = llvm.extractelement %604[%64 : i32] : vector<2xbf16> loc(#loc)
    %610 = llvm.extractelement %604[%53 : i32] : vector<2xbf16> loc(#loc)
    %611 = llvm.extractelement %605[%64 : i32] : vector<2xbf16> loc(#loc)
    %612 = llvm.extractelement %605[%53 : i32] : vector<2xbf16> loc(#loc)
    %613 = llvm.extractelement %606[%64 : i32] : vector<2xbf16> loc(#loc)
    %614 = llvm.extractelement %606[%53 : i32] : vector<2xbf16> loc(#loc)
    %615 = llvm.insertelement %459, %16[%64 : i32] : vector<4xi8> loc(#loc)
    %616 = llvm.insertelement %460, %615[%53 : i32] : vector<4xi8> loc(#loc)
    %617 = llvm.insertelement %461, %616[%52 : i32] : vector<4xi8> loc(#loc)
    %618 = llvm.insertelement %462, %617[%57 : i32] : vector<4xi8> loc(#loc)
    %619 = llvm.bitcast %618 : vector<4xi8> to i32 loc(#loc)
    %620 = llvm.zext %554 : i16 to i32 loc(#loc)
    %621 = llvm.shl %620, %60 : i32 loc(#loc)
    %622 = llvm.bitcast %621 : i32 to f32 loc(#loc)
    %623 = rocdl.cvt.scalef32.pk.bf16.fp4 %619[0], %622 : vector<2xbf16> loc(#loc)
    %624 = rocdl.cvt.scalef32.pk.bf16.fp4 %619[2], %622 : vector<2xbf16> loc(#loc)
    %625 = rocdl.cvt.scalef32.pk.bf16.fp4 %619[1], %622 : vector<2xbf16> loc(#loc)
    %626 = rocdl.cvt.scalef32.pk.bf16.fp4 %619[3], %622 : vector<2xbf16> loc(#loc)
    %627 = llvm.extractelement %623[%64 : i32] : vector<2xbf16> loc(#loc)
    %628 = llvm.extractelement %623[%53 : i32] : vector<2xbf16> loc(#loc)
    %629 = llvm.extractelement %624[%64 : i32] : vector<2xbf16> loc(#loc)
    %630 = llvm.extractelement %624[%53 : i32] : vector<2xbf16> loc(#loc)
    %631 = llvm.extractelement %625[%64 : i32] : vector<2xbf16> loc(#loc)
    %632 = llvm.extractelement %625[%53 : i32] : vector<2xbf16> loc(#loc)
    %633 = llvm.extractelement %626[%64 : i32] : vector<2xbf16> loc(#loc)
    %634 = llvm.extractelement %626[%53 : i32] : vector<2xbf16> loc(#loc)
    %635 = llvm.icmp "eq" %518, %70 : i8 loc(#loc)
    %636 = llvm.icmp "eq" %526, %70 : i8 loc(#loc)
    %637 = llvm.icmp "eq" %534, %70 : i8 loc(#loc)
    %638 = llvm.icmp "eq" %542, %70 : i8 loc(#loc)
    %639 = llvm.select %635, %69, %567 : i1, bf16 loc(#loc)
    %640 = llvm.select %635, %69, %568 : i1, bf16 loc(#loc)
    %641 = llvm.select %635, %69, %569 : i1, bf16 loc(#loc)
    %642 = llvm.select %635, %69, %570 : i1, bf16 loc(#loc)
    %643 = llvm.select %635, %69, %571 : i1, bf16 loc(#loc)
    %644 = llvm.select %635, %69, %572 : i1, bf16 loc(#loc)
    %645 = llvm.select %635, %69, %573 : i1, bf16 loc(#loc)
    %646 = llvm.select %635, %69, %574 : i1, bf16 loc(#loc)
    %647 = llvm.select %636, %69, %587 : i1, bf16 loc(#loc)
    %648 = llvm.select %636, %69, %588 : i1, bf16 loc(#loc)
    %649 = llvm.select %636, %69, %589 : i1, bf16 loc(#loc)
    %650 = llvm.select %636, %69, %590 : i1, bf16 loc(#loc)
    %651 = llvm.select %636, %69, %591 : i1, bf16 loc(#loc)
    %652 = llvm.select %636, %69, %592 : i1, bf16 loc(#loc)
    %653 = llvm.select %636, %69, %593 : i1, bf16 loc(#loc)
    %654 = llvm.select %636, %69, %594 : i1, bf16 loc(#loc)
    %655 = llvm.select %637, %69, %607 : i1, bf16 loc(#loc)
    %656 = llvm.select %637, %69, %608 : i1, bf16 loc(#loc)
    %657 = llvm.select %637, %69, %609 : i1, bf16 loc(#loc)
    %658 = llvm.select %637, %69, %610 : i1, bf16 loc(#loc)
    %659 = llvm.select %637, %69, %611 : i1, bf16 loc(#loc)
    %660 = llvm.select %637, %69, %612 : i1, bf16 loc(#loc)
    %661 = llvm.select %637, %69, %613 : i1, bf16 loc(#loc)
    %662 = llvm.select %637, %69, %614 : i1, bf16 loc(#loc)
    %663 = llvm.select %638, %69, %627 : i1, bf16 loc(#loc)
    %664 = llvm.select %638, %69, %628 : i1, bf16 loc(#loc)
    %665 = llvm.select %638, %69, %629 : i1, bf16 loc(#loc)
    %666 = llvm.select %638, %69, %630 : i1, bf16 loc(#loc)
    %667 = llvm.select %638, %69, %631 : i1, bf16 loc(#loc)
    %668 = llvm.select %638, %69, %632 : i1, bf16 loc(#loc)
    %669 = llvm.select %638, %69, %633 : i1, bf16 loc(#loc)
    %670 = llvm.select %638, %69, %634 : i1, bf16 loc(#loc)
    %671 = llvm.insertelement %259, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %672 = llvm.insertelement %260, %671[%53 : i32] : vector<8xbf16> loc(#loc)
    %673 = llvm.insertelement %261, %672[%52 : i32] : vector<8xbf16> loc(#loc)
    %674 = llvm.insertelement %262, %673[%57 : i32] : vector<8xbf16> loc(#loc)
    %675 = llvm.insertelement %263, %674[%51 : i32] : vector<8xbf16> loc(#loc)
    %676 = llvm.insertelement %264, %675[%61 : i32] : vector<8xbf16> loc(#loc)
    %677 = llvm.insertelement %265, %676[%63 : i32] : vector<8xbf16> loc(#loc)
    %678 = llvm.insertelement %266, %677[%50 : i32] : vector<8xbf16> loc(#loc)
    %679 = llvm.extractelement %678[%64 : i32] : vector<8xbf16> loc(#loc)
    %680 = llvm.insertelement %679, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %681 = llvm.extractelement %678[%53 : i32] : vector<8xbf16> loc(#loc)
    %682 = llvm.insertelement %681, %680[%53 : i32] : vector<8xbf16> loc(#loc)
    %683 = llvm.extractelement %678[%52 : i32] : vector<8xbf16> loc(#loc)
    %684 = llvm.insertelement %683, %682[%52 : i32] : vector<8xbf16> loc(#loc)
    %685 = llvm.extractelement %678[%57 : i32] : vector<8xbf16> loc(#loc)
    %686 = llvm.insertelement %685, %684[%57 : i32] : vector<8xbf16> loc(#loc)
    %687 = llvm.extractelement %678[%51 : i32] : vector<8xbf16> loc(#loc)
    %688 = llvm.insertelement %687, %686[%51 : i32] : vector<8xbf16> loc(#loc)
    %689 = llvm.extractelement %678[%61 : i32] : vector<8xbf16> loc(#loc)
    %690 = llvm.insertelement %689, %688[%61 : i32] : vector<8xbf16> loc(#loc)
    %691 = llvm.extractelement %678[%63 : i32] : vector<8xbf16> loc(#loc)
    %692 = llvm.insertelement %691, %690[%63 : i32] : vector<8xbf16> loc(#loc)
    %693 = llvm.extractelement %678[%50 : i32] : vector<8xbf16> loc(#loc)
    %694 = llvm.insertelement %693, %692[%50 : i32] : vector<8xbf16> loc(#loc)
    %695 = llvm.insertelement %282, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %696 = llvm.insertelement %283, %695[%53 : i32] : vector<8xbf16> loc(#loc)
    %697 = llvm.insertelement %284, %696[%52 : i32] : vector<8xbf16> loc(#loc)
    %698 = llvm.insertelement %285, %697[%57 : i32] : vector<8xbf16> loc(#loc)
    %699 = llvm.insertelement %286, %698[%51 : i32] : vector<8xbf16> loc(#loc)
    %700 = llvm.insertelement %287, %699[%61 : i32] : vector<8xbf16> loc(#loc)
    %701 = llvm.insertelement %288, %700[%63 : i32] : vector<8xbf16> loc(#loc)
    %702 = llvm.insertelement %289, %701[%50 : i32] : vector<8xbf16> loc(#loc)
    %703 = llvm.extractelement %702[%64 : i32] : vector<8xbf16> loc(#loc)
    %704 = llvm.insertelement %703, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %705 = llvm.extractelement %702[%53 : i32] : vector<8xbf16> loc(#loc)
    %706 = llvm.insertelement %705, %704[%53 : i32] : vector<8xbf16> loc(#loc)
    %707 = llvm.extractelement %702[%52 : i32] : vector<8xbf16> loc(#loc)
    %708 = llvm.insertelement %707, %706[%52 : i32] : vector<8xbf16> loc(#loc)
    %709 = llvm.extractelement %702[%57 : i32] : vector<8xbf16> loc(#loc)
    %710 = llvm.insertelement %709, %708[%57 : i32] : vector<8xbf16> loc(#loc)
    %711 = llvm.extractelement %702[%51 : i32] : vector<8xbf16> loc(#loc)
    %712 = llvm.insertelement %711, %710[%51 : i32] : vector<8xbf16> loc(#loc)
    %713 = llvm.extractelement %702[%61 : i32] : vector<8xbf16> loc(#loc)
    %714 = llvm.insertelement %713, %712[%61 : i32] : vector<8xbf16> loc(#loc)
    %715 = llvm.extractelement %702[%63 : i32] : vector<8xbf16> loc(#loc)
    %716 = llvm.insertelement %715, %714[%63 : i32] : vector<8xbf16> loc(#loc)
    %717 = llvm.extractelement %702[%50 : i32] : vector<8xbf16> loc(#loc)
    %718 = llvm.insertelement %717, %716[%50 : i32] : vector<8xbf16> loc(#loc)
    %719 = llvm.insertelement %305, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %720 = llvm.insertelement %306, %719[%53 : i32] : vector<8xbf16> loc(#loc)
    %721 = llvm.insertelement %307, %720[%52 : i32] : vector<8xbf16> loc(#loc)
    %722 = llvm.insertelement %308, %721[%57 : i32] : vector<8xbf16> loc(#loc)
    %723 = llvm.insertelement %309, %722[%51 : i32] : vector<8xbf16> loc(#loc)
    %724 = llvm.insertelement %310, %723[%61 : i32] : vector<8xbf16> loc(#loc)
    %725 = llvm.insertelement %311, %724[%63 : i32] : vector<8xbf16> loc(#loc)
    %726 = llvm.insertelement %312, %725[%50 : i32] : vector<8xbf16> loc(#loc)
    %727 = llvm.extractelement %726[%64 : i32] : vector<8xbf16> loc(#loc)
    %728 = llvm.insertelement %727, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %729 = llvm.extractelement %726[%53 : i32] : vector<8xbf16> loc(#loc)
    %730 = llvm.insertelement %729, %728[%53 : i32] : vector<8xbf16> loc(#loc)
    %731 = llvm.extractelement %726[%52 : i32] : vector<8xbf16> loc(#loc)
    %732 = llvm.insertelement %731, %730[%52 : i32] : vector<8xbf16> loc(#loc)
    %733 = llvm.extractelement %726[%57 : i32] : vector<8xbf16> loc(#loc)
    %734 = llvm.insertelement %733, %732[%57 : i32] : vector<8xbf16> loc(#loc)
    %735 = llvm.extractelement %726[%51 : i32] : vector<8xbf16> loc(#loc)
    %736 = llvm.insertelement %735, %734[%51 : i32] : vector<8xbf16> loc(#loc)
    %737 = llvm.extractelement %726[%61 : i32] : vector<8xbf16> loc(#loc)
    %738 = llvm.insertelement %737, %736[%61 : i32] : vector<8xbf16> loc(#loc)
    %739 = llvm.extractelement %726[%63 : i32] : vector<8xbf16> loc(#loc)
    %740 = llvm.insertelement %739, %738[%63 : i32] : vector<8xbf16> loc(#loc)
    %741 = llvm.extractelement %726[%50 : i32] : vector<8xbf16> loc(#loc)
    %742 = llvm.insertelement %741, %740[%50 : i32] : vector<8xbf16> loc(#loc)
    %743 = llvm.insertelement %328, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %744 = llvm.insertelement %329, %743[%53 : i32] : vector<8xbf16> loc(#loc)
    %745 = llvm.insertelement %330, %744[%52 : i32] : vector<8xbf16> loc(#loc)
    %746 = llvm.insertelement %331, %745[%57 : i32] : vector<8xbf16> loc(#loc)
    %747 = llvm.insertelement %332, %746[%51 : i32] : vector<8xbf16> loc(#loc)
    %748 = llvm.insertelement %333, %747[%61 : i32] : vector<8xbf16> loc(#loc)
    %749 = llvm.insertelement %334, %748[%63 : i32] : vector<8xbf16> loc(#loc)
    %750 = llvm.insertelement %335, %749[%50 : i32] : vector<8xbf16> loc(#loc)
    %751 = llvm.extractelement %750[%64 : i32] : vector<8xbf16> loc(#loc)
    %752 = llvm.insertelement %751, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %753 = llvm.extractelement %750[%53 : i32] : vector<8xbf16> loc(#loc)
    %754 = llvm.insertelement %753, %752[%53 : i32] : vector<8xbf16> loc(#loc)
    %755 = llvm.extractelement %750[%52 : i32] : vector<8xbf16> loc(#loc)
    %756 = llvm.insertelement %755, %754[%52 : i32] : vector<8xbf16> loc(#loc)
    %757 = llvm.extractelement %750[%57 : i32] : vector<8xbf16> loc(#loc)
    %758 = llvm.insertelement %757, %756[%57 : i32] : vector<8xbf16> loc(#loc)
    %759 = llvm.extractelement %750[%51 : i32] : vector<8xbf16> loc(#loc)
    %760 = llvm.insertelement %759, %758[%51 : i32] : vector<8xbf16> loc(#loc)
    %761 = llvm.extractelement %750[%61 : i32] : vector<8xbf16> loc(#loc)
    %762 = llvm.insertelement %761, %760[%61 : i32] : vector<8xbf16> loc(#loc)
    %763 = llvm.extractelement %750[%63 : i32] : vector<8xbf16> loc(#loc)
    %764 = llvm.insertelement %763, %762[%63 : i32] : vector<8xbf16> loc(#loc)
    %765 = llvm.extractelement %750[%50 : i32] : vector<8xbf16> loc(#loc)
    %766 = llvm.insertelement %765, %764[%50 : i32] : vector<8xbf16> loc(#loc)
    %767 = llvm.insertelement %639, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %768 = llvm.insertelement %640, %767[%53 : i32] : vector<8xbf16> loc(#loc)
    %769 = llvm.insertelement %641, %768[%52 : i32] : vector<8xbf16> loc(#loc)
    %770 = llvm.insertelement %642, %769[%57 : i32] : vector<8xbf16> loc(#loc)
    %771 = llvm.insertelement %643, %770[%51 : i32] : vector<8xbf16> loc(#loc)
    %772 = llvm.insertelement %644, %771[%61 : i32] : vector<8xbf16> loc(#loc)
    %773 = llvm.insertelement %645, %772[%63 : i32] : vector<8xbf16> loc(#loc)
    %774 = llvm.insertelement %646, %773[%50 : i32] : vector<8xbf16> loc(#loc)
    %775 = llvm.extractelement %774[%64 : i32] : vector<8xbf16> loc(#loc)
    %776 = llvm.insertelement %775, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %777 = llvm.extractelement %774[%53 : i32] : vector<8xbf16> loc(#loc)
    %778 = llvm.insertelement %777, %776[%53 : i32] : vector<8xbf16> loc(#loc)
    %779 = llvm.extractelement %774[%52 : i32] : vector<8xbf16> loc(#loc)
    %780 = llvm.insertelement %779, %778[%52 : i32] : vector<8xbf16> loc(#loc)
    %781 = llvm.extractelement %774[%57 : i32] : vector<8xbf16> loc(#loc)
    %782 = llvm.insertelement %781, %780[%57 : i32] : vector<8xbf16> loc(#loc)
    %783 = llvm.extractelement %774[%51 : i32] : vector<8xbf16> loc(#loc)
    %784 = llvm.insertelement %783, %782[%51 : i32] : vector<8xbf16> loc(#loc)
    %785 = llvm.extractelement %774[%61 : i32] : vector<8xbf16> loc(#loc)
    %786 = llvm.insertelement %785, %784[%61 : i32] : vector<8xbf16> loc(#loc)
    %787 = llvm.extractelement %774[%63 : i32] : vector<8xbf16> loc(#loc)
    %788 = llvm.insertelement %787, %786[%63 : i32] : vector<8xbf16> loc(#loc)
    %789 = llvm.extractelement %774[%50 : i32] : vector<8xbf16> loc(#loc)
    %790 = llvm.insertelement %789, %788[%50 : i32] : vector<8xbf16> loc(#loc)
    %791 = llvm.insertelement %647, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %792 = llvm.insertelement %648, %791[%53 : i32] : vector<8xbf16> loc(#loc)
    %793 = llvm.insertelement %649, %792[%52 : i32] : vector<8xbf16> loc(#loc)
    %794 = llvm.insertelement %650, %793[%57 : i32] : vector<8xbf16> loc(#loc)
    %795 = llvm.insertelement %651, %794[%51 : i32] : vector<8xbf16> loc(#loc)
    %796 = llvm.insertelement %652, %795[%61 : i32] : vector<8xbf16> loc(#loc)
    %797 = llvm.insertelement %653, %796[%63 : i32] : vector<8xbf16> loc(#loc)
    %798 = llvm.insertelement %654, %797[%50 : i32] : vector<8xbf16> loc(#loc)
    %799 = llvm.extractelement %798[%64 : i32] : vector<8xbf16> loc(#loc)
    %800 = llvm.insertelement %799, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %801 = llvm.extractelement %798[%53 : i32] : vector<8xbf16> loc(#loc)
    %802 = llvm.insertelement %801, %800[%53 : i32] : vector<8xbf16> loc(#loc)
    %803 = llvm.extractelement %798[%52 : i32] : vector<8xbf16> loc(#loc)
    %804 = llvm.insertelement %803, %802[%52 : i32] : vector<8xbf16> loc(#loc)
    %805 = llvm.extractelement %798[%57 : i32] : vector<8xbf16> loc(#loc)
    %806 = llvm.insertelement %805, %804[%57 : i32] : vector<8xbf16> loc(#loc)
    %807 = llvm.extractelement %798[%51 : i32] : vector<8xbf16> loc(#loc)
    %808 = llvm.insertelement %807, %806[%51 : i32] : vector<8xbf16> loc(#loc)
    %809 = llvm.extractelement %798[%61 : i32] : vector<8xbf16> loc(#loc)
    %810 = llvm.insertelement %809, %808[%61 : i32] : vector<8xbf16> loc(#loc)
    %811 = llvm.extractelement %798[%63 : i32] : vector<8xbf16> loc(#loc)
    %812 = llvm.insertelement %811, %810[%63 : i32] : vector<8xbf16> loc(#loc)
    %813 = llvm.extractelement %798[%50 : i32] : vector<8xbf16> loc(#loc)
    %814 = llvm.insertelement %813, %812[%50 : i32] : vector<8xbf16> loc(#loc)
    %815 = llvm.insertelement %655, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %816 = llvm.insertelement %656, %815[%53 : i32] : vector<8xbf16> loc(#loc)
    %817 = llvm.insertelement %657, %816[%52 : i32] : vector<8xbf16> loc(#loc)
    %818 = llvm.insertelement %658, %817[%57 : i32] : vector<8xbf16> loc(#loc)
    %819 = llvm.insertelement %659, %818[%51 : i32] : vector<8xbf16> loc(#loc)
    %820 = llvm.insertelement %660, %819[%61 : i32] : vector<8xbf16> loc(#loc)
    %821 = llvm.insertelement %661, %820[%63 : i32] : vector<8xbf16> loc(#loc)
    %822 = llvm.insertelement %662, %821[%50 : i32] : vector<8xbf16> loc(#loc)
    %823 = llvm.extractelement %822[%64 : i32] : vector<8xbf16> loc(#loc)
    %824 = llvm.insertelement %823, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %825 = llvm.extractelement %822[%53 : i32] : vector<8xbf16> loc(#loc)
    %826 = llvm.insertelement %825, %824[%53 : i32] : vector<8xbf16> loc(#loc)
    %827 = llvm.extractelement %822[%52 : i32] : vector<8xbf16> loc(#loc)
    %828 = llvm.insertelement %827, %826[%52 : i32] : vector<8xbf16> loc(#loc)
    %829 = llvm.extractelement %822[%57 : i32] : vector<8xbf16> loc(#loc)
    %830 = llvm.insertelement %829, %828[%57 : i32] : vector<8xbf16> loc(#loc)
    %831 = llvm.extractelement %822[%51 : i32] : vector<8xbf16> loc(#loc)
    %832 = llvm.insertelement %831, %830[%51 : i32] : vector<8xbf16> loc(#loc)
    %833 = llvm.extractelement %822[%61 : i32] : vector<8xbf16> loc(#loc)
    %834 = llvm.insertelement %833, %832[%61 : i32] : vector<8xbf16> loc(#loc)
    %835 = llvm.extractelement %822[%63 : i32] : vector<8xbf16> loc(#loc)
    %836 = llvm.insertelement %835, %834[%63 : i32] : vector<8xbf16> loc(#loc)
    %837 = llvm.extractelement %822[%50 : i32] : vector<8xbf16> loc(#loc)
    %838 = llvm.insertelement %837, %836[%50 : i32] : vector<8xbf16> loc(#loc)
    %839 = llvm.insertelement %663, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %840 = llvm.insertelement %664, %839[%53 : i32] : vector<8xbf16> loc(#loc)
    %841 = llvm.insertelement %665, %840[%52 : i32] : vector<8xbf16> loc(#loc)
    %842 = llvm.insertelement %666, %841[%57 : i32] : vector<8xbf16> loc(#loc)
    %843 = llvm.insertelement %667, %842[%51 : i32] : vector<8xbf16> loc(#loc)
    %844 = llvm.insertelement %668, %843[%61 : i32] : vector<8xbf16> loc(#loc)
    %845 = llvm.insertelement %669, %844[%63 : i32] : vector<8xbf16> loc(#loc)
    %846 = llvm.insertelement %670, %845[%50 : i32] : vector<8xbf16> loc(#loc)
    %847 = llvm.extractelement %846[%64 : i32] : vector<8xbf16> loc(#loc)
    %848 = llvm.insertelement %847, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %849 = llvm.extractelement %846[%53 : i32] : vector<8xbf16> loc(#loc)
    %850 = llvm.insertelement %849, %848[%53 : i32] : vector<8xbf16> loc(#loc)
    %851 = llvm.extractelement %846[%52 : i32] : vector<8xbf16> loc(#loc)
    %852 = llvm.insertelement %851, %850[%52 : i32] : vector<8xbf16> loc(#loc)
    %853 = llvm.extractelement %846[%57 : i32] : vector<8xbf16> loc(#loc)
    %854 = llvm.insertelement %853, %852[%57 : i32] : vector<8xbf16> loc(#loc)
    %855 = llvm.extractelement %846[%51 : i32] : vector<8xbf16> loc(#loc)
    %856 = llvm.insertelement %855, %854[%51 : i32] : vector<8xbf16> loc(#loc)
    %857 = llvm.extractelement %846[%61 : i32] : vector<8xbf16> loc(#loc)
    %858 = llvm.insertelement %857, %856[%61 : i32] : vector<8xbf16> loc(#loc)
    %859 = llvm.extractelement %846[%63 : i32] : vector<8xbf16> loc(#loc)
    %860 = llvm.insertelement %859, %858[%63 : i32] : vector<8xbf16> loc(#loc)
    %861 = llvm.extractelement %846[%50 : i32] : vector<8xbf16> loc(#loc)
    %862 = llvm.insertelement %861, %860[%50 : i32] : vector<8xbf16> loc(#loc)
    %863 = llvm.insertelement %68, %2[%64 : i32] : vector<4xf32> loc(#loc)
    %864 = llvm.insertelement %68, %863[%53 : i32] : vector<4xf32> loc(#loc)
    %865 = llvm.insertelement %68, %864[%52 : i32] : vector<4xf32> loc(#loc)
    %866 = llvm.insertelement %68, %865[%57 : i32] : vector<4xf32> loc(#loc)
    %867 = rocdl.mfma.f32.16x16x32.bf16 %790, %694, %866, %64, %64, %64 : (vector<8xbf16>, vector<8xbf16>, vector<4xf32>, i32, i32, i32) -> vector<4xf32> loc(#loc)
    %868 = rocdl.mfma.f32.16x16x32.bf16 %814, %718, %867, %64, %64, %64 : (vector<8xbf16>, vector<8xbf16>, vector<4xf32>, i32, i32, i32) -> vector<4xf32> loc(#loc)
    %869 = rocdl.mfma.f32.16x16x32.bf16 %838, %742, %868, %64, %64, %64 : (vector<8xbf16>, vector<8xbf16>, vector<4xf32>, i32, i32, i32) -> vector<4xf32> loc(#loc)
    %870 = rocdl.mfma.f32.16x16x32.bf16 %862, %766, %869, %64, %64, %64 : (vector<8xbf16>, vector<8xbf16>, vector<4xf32>, i32, i32, i32) -> vector<4xf32> loc(#loc)
    %871 = llvm.extractelement %870[%64 : i32] : vector<4xf32> loc(#loc)
    %872 = llvm.extractelement %870[%53 : i32] : vector<4xf32> loc(#loc)
    %873 = llvm.extractelement %870[%52 : i32] : vector<4xf32> loc(#loc)
    %874 = llvm.extractelement %870[%57 : i32] : vector<4xf32> loc(#loc)
    %875 = llvm.zext %522 : i8 to i16 loc(#loc)
    %876 = llvm.zext %530 : i8 to i16 loc(#loc)
    %877 = llvm.zext %538 : i8 to i16 loc(#loc)
    %878 = llvm.zext %546 : i8 to i16 loc(#loc)
    %879 = llvm.shl %875, %71 : i16 loc(#loc)
    %880 = llvm.shl %876, %71 : i16 loc(#loc)
    %881 = llvm.shl %877, %71 : i16 loc(#loc)
    %882 = llvm.shl %878, %71 : i16 loc(#loc)
    %883 = llvm.insertelement %437, %16[%64 : i32] : vector<4xi8> loc(#loc)
    %884 = llvm.insertelement %438, %883[%53 : i32] : vector<4xi8> loc(#loc)
    %885 = llvm.insertelement %439, %884[%52 : i32] : vector<4xi8> loc(#loc)
    %886 = llvm.insertelement %440, %885[%57 : i32] : vector<4xi8> loc(#loc)
    %887 = llvm.bitcast %886 : vector<4xi8> to i32 loc(#loc)
    %888 = llvm.zext %879 : i16 to i32 loc(#loc)
    %889 = llvm.shl %888, %60 : i32 loc(#loc)
    %890 = llvm.bitcast %889 : i32 to f32 loc(#loc)
    %891 = rocdl.cvt.scalef32.pk.bf16.fp4 %887[0], %890 : vector<2xbf16> loc(#loc)
    %892 = rocdl.cvt.scalef32.pk.bf16.fp4 %887[2], %890 : vector<2xbf16> loc(#loc)
    %893 = rocdl.cvt.scalef32.pk.bf16.fp4 %887[1], %890 : vector<2xbf16> loc(#loc)
    %894 = rocdl.cvt.scalef32.pk.bf16.fp4 %887[3], %890 : vector<2xbf16> loc(#loc)
    %895 = llvm.extractelement %891[%64 : i32] : vector<2xbf16> loc(#loc)
    %896 = llvm.extractelement %891[%53 : i32] : vector<2xbf16> loc(#loc)
    %897 = llvm.extractelement %892[%64 : i32] : vector<2xbf16> loc(#loc)
    %898 = llvm.extractelement %892[%53 : i32] : vector<2xbf16> loc(#loc)
    %899 = llvm.extractelement %893[%64 : i32] : vector<2xbf16> loc(#loc)
    %900 = llvm.extractelement %893[%53 : i32] : vector<2xbf16> loc(#loc)
    %901 = llvm.extractelement %894[%64 : i32] : vector<2xbf16> loc(#loc)
    %902 = llvm.extractelement %894[%53 : i32] : vector<2xbf16> loc(#loc)
    %903 = llvm.insertelement %444, %16[%64 : i32] : vector<4xi8> loc(#loc)
    %904 = llvm.insertelement %445, %903[%53 : i32] : vector<4xi8> loc(#loc)
    %905 = llvm.insertelement %446, %904[%52 : i32] : vector<4xi8> loc(#loc)
    %906 = llvm.insertelement %447, %905[%57 : i32] : vector<4xi8> loc(#loc)
    %907 = llvm.bitcast %906 : vector<4xi8> to i32 loc(#loc)
    %908 = llvm.zext %880 : i16 to i32 loc(#loc)
    %909 = llvm.shl %908, %60 : i32 loc(#loc)
    %910 = llvm.bitcast %909 : i32 to f32 loc(#loc)
    %911 = rocdl.cvt.scalef32.pk.bf16.fp4 %907[0], %910 : vector<2xbf16> loc(#loc)
    %912 = rocdl.cvt.scalef32.pk.bf16.fp4 %907[2], %910 : vector<2xbf16> loc(#loc)
    %913 = rocdl.cvt.scalef32.pk.bf16.fp4 %907[1], %910 : vector<2xbf16> loc(#loc)
    %914 = rocdl.cvt.scalef32.pk.bf16.fp4 %907[3], %910 : vector<2xbf16> loc(#loc)
    %915 = llvm.extractelement %911[%64 : i32] : vector<2xbf16> loc(#loc)
    %916 = llvm.extractelement %911[%53 : i32] : vector<2xbf16> loc(#loc)
    %917 = llvm.extractelement %912[%64 : i32] : vector<2xbf16> loc(#loc)
    %918 = llvm.extractelement %912[%53 : i32] : vector<2xbf16> loc(#loc)
    %919 = llvm.extractelement %913[%64 : i32] : vector<2xbf16> loc(#loc)
    %920 = llvm.extractelement %913[%53 : i32] : vector<2xbf16> loc(#loc)
    %921 = llvm.extractelement %914[%64 : i32] : vector<2xbf16> loc(#loc)
    %922 = llvm.extractelement %914[%53 : i32] : vector<2xbf16> loc(#loc)
    %923 = llvm.insertelement %467, %16[%64 : i32] : vector<4xi8> loc(#loc)
    %924 = llvm.insertelement %468, %923[%53 : i32] : vector<4xi8> loc(#loc)
    %925 = llvm.insertelement %469, %924[%52 : i32] : vector<4xi8> loc(#loc)
    %926 = llvm.insertelement %470, %925[%57 : i32] : vector<4xi8> loc(#loc)
    %927 = llvm.bitcast %926 : vector<4xi8> to i32 loc(#loc)
    %928 = llvm.zext %881 : i16 to i32 loc(#loc)
    %929 = llvm.shl %928, %60 : i32 loc(#loc)
    %930 = llvm.bitcast %929 : i32 to f32 loc(#loc)
    %931 = rocdl.cvt.scalef32.pk.bf16.fp4 %927[0], %930 : vector<2xbf16> loc(#loc)
    %932 = rocdl.cvt.scalef32.pk.bf16.fp4 %927[2], %930 : vector<2xbf16> loc(#loc)
    %933 = rocdl.cvt.scalef32.pk.bf16.fp4 %927[1], %930 : vector<2xbf16> loc(#loc)
    %934 = rocdl.cvt.scalef32.pk.bf16.fp4 %927[3], %930 : vector<2xbf16> loc(#loc)
    %935 = llvm.extractelement %931[%64 : i32] : vector<2xbf16> loc(#loc)
    %936 = llvm.extractelement %931[%53 : i32] : vector<2xbf16> loc(#loc)
    %937 = llvm.extractelement %932[%64 : i32] : vector<2xbf16> loc(#loc)
    %938 = llvm.extractelement %932[%53 : i32] : vector<2xbf16> loc(#loc)
    %939 = llvm.extractelement %933[%64 : i32] : vector<2xbf16> loc(#loc)
    %940 = llvm.extractelement %933[%53 : i32] : vector<2xbf16> loc(#loc)
    %941 = llvm.extractelement %934[%64 : i32] : vector<2xbf16> loc(#loc)
    %942 = llvm.extractelement %934[%53 : i32] : vector<2xbf16> loc(#loc)
    %943 = llvm.insertelement %474, %16[%64 : i32] : vector<4xi8> loc(#loc)
    %944 = llvm.insertelement %475, %943[%53 : i32] : vector<4xi8> loc(#loc)
    %945 = llvm.insertelement %476, %944[%52 : i32] : vector<4xi8> loc(#loc)
    %946 = llvm.insertelement %477, %945[%57 : i32] : vector<4xi8> loc(#loc)
    %947 = llvm.bitcast %946 : vector<4xi8> to i32 loc(#loc)
    %948 = llvm.zext %882 : i16 to i32 loc(#loc)
    %949 = llvm.shl %948, %60 : i32 loc(#loc)
    %950 = llvm.bitcast %949 : i32 to f32 loc(#loc)
    %951 = rocdl.cvt.scalef32.pk.bf16.fp4 %947[0], %950 : vector<2xbf16> loc(#loc)
    %952 = rocdl.cvt.scalef32.pk.bf16.fp4 %947[2], %950 : vector<2xbf16> loc(#loc)
    %953 = rocdl.cvt.scalef32.pk.bf16.fp4 %947[1], %950 : vector<2xbf16> loc(#loc)
    %954 = rocdl.cvt.scalef32.pk.bf16.fp4 %947[3], %950 : vector<2xbf16> loc(#loc)
    %955 = llvm.extractelement %951[%64 : i32] : vector<2xbf16> loc(#loc)
    %956 = llvm.extractelement %951[%53 : i32] : vector<2xbf16> loc(#loc)
    %957 = llvm.extractelement %952[%64 : i32] : vector<2xbf16> loc(#loc)
    %958 = llvm.extractelement %952[%53 : i32] : vector<2xbf16> loc(#loc)
    %959 = llvm.extractelement %953[%64 : i32] : vector<2xbf16> loc(#loc)
    %960 = llvm.extractelement %953[%53 : i32] : vector<2xbf16> loc(#loc)
    %961 = llvm.extractelement %954[%64 : i32] : vector<2xbf16> loc(#loc)
    %962 = llvm.extractelement %954[%53 : i32] : vector<2xbf16> loc(#loc)
    %963 = llvm.icmp "eq" %522, %70 : i8 loc(#loc)
    %964 = llvm.icmp "eq" %530, %70 : i8 loc(#loc)
    %965 = llvm.icmp "eq" %538, %70 : i8 loc(#loc)
    %966 = llvm.icmp "eq" %546, %70 : i8 loc(#loc)
    %967 = llvm.select %963, %69, %895 : i1, bf16 loc(#loc)
    %968 = llvm.select %963, %69, %896 : i1, bf16 loc(#loc)
    %969 = llvm.select %963, %69, %897 : i1, bf16 loc(#loc)
    %970 = llvm.select %963, %69, %898 : i1, bf16 loc(#loc)
    %971 = llvm.select %963, %69, %899 : i1, bf16 loc(#loc)
    %972 = llvm.select %963, %69, %900 : i1, bf16 loc(#loc)
    %973 = llvm.select %963, %69, %901 : i1, bf16 loc(#loc)
    %974 = llvm.select %963, %69, %902 : i1, bf16 loc(#loc)
    %975 = llvm.select %964, %69, %915 : i1, bf16 loc(#loc)
    %976 = llvm.select %964, %69, %916 : i1, bf16 loc(#loc)
    %977 = llvm.select %964, %69, %917 : i1, bf16 loc(#loc)
    %978 = llvm.select %964, %69, %918 : i1, bf16 loc(#loc)
    %979 = llvm.select %964, %69, %919 : i1, bf16 loc(#loc)
    %980 = llvm.select %964, %69, %920 : i1, bf16 loc(#loc)
    %981 = llvm.select %964, %69, %921 : i1, bf16 loc(#loc)
    %982 = llvm.select %964, %69, %922 : i1, bf16 loc(#loc)
    %983 = llvm.select %965, %69, %935 : i1, bf16 loc(#loc)
    %984 = llvm.select %965, %69, %936 : i1, bf16 loc(#loc)
    %985 = llvm.select %965, %69, %937 : i1, bf16 loc(#loc)
    %986 = llvm.select %965, %69, %938 : i1, bf16 loc(#loc)
    %987 = llvm.select %965, %69, %939 : i1, bf16 loc(#loc)
    %988 = llvm.select %965, %69, %940 : i1, bf16 loc(#loc)
    %989 = llvm.select %965, %69, %941 : i1, bf16 loc(#loc)
    %990 = llvm.select %965, %69, %942 : i1, bf16 loc(#loc)
    %991 = llvm.select %966, %69, %955 : i1, bf16 loc(#loc)
    %992 = llvm.select %966, %69, %956 : i1, bf16 loc(#loc)
    %993 = llvm.select %966, %69, %957 : i1, bf16 loc(#loc)
    %994 = llvm.select %966, %69, %958 : i1, bf16 loc(#loc)
    %995 = llvm.select %966, %69, %959 : i1, bf16 loc(#loc)
    %996 = llvm.select %966, %69, %960 : i1, bf16 loc(#loc)
    %997 = llvm.select %966, %69, %961 : i1, bf16 loc(#loc)
    %998 = llvm.select %966, %69, %962 : i1, bf16 loc(#loc)
    %999 = llvm.insertelement %270, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %1000 = llvm.insertelement %271, %999[%53 : i32] : vector<8xbf16> loc(#loc)
    %1001 = llvm.insertelement %272, %1000[%52 : i32] : vector<8xbf16> loc(#loc)
    %1002 = llvm.insertelement %273, %1001[%57 : i32] : vector<8xbf16> loc(#loc)
    %1003 = llvm.insertelement %274, %1002[%51 : i32] : vector<8xbf16> loc(#loc)
    %1004 = llvm.insertelement %275, %1003[%61 : i32] : vector<8xbf16> loc(#loc)
    %1005 = llvm.insertelement %276, %1004[%63 : i32] : vector<8xbf16> loc(#loc)
    %1006 = llvm.insertelement %277, %1005[%50 : i32] : vector<8xbf16> loc(#loc)
    %1007 = llvm.extractelement %1006[%64 : i32] : vector<8xbf16> loc(#loc)
    %1008 = llvm.insertelement %1007, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %1009 = llvm.extractelement %1006[%53 : i32] : vector<8xbf16> loc(#loc)
    %1010 = llvm.insertelement %1009, %1008[%53 : i32] : vector<8xbf16> loc(#loc)
    %1011 = llvm.extractelement %1006[%52 : i32] : vector<8xbf16> loc(#loc)
    %1012 = llvm.insertelement %1011, %1010[%52 : i32] : vector<8xbf16> loc(#loc)
    %1013 = llvm.extractelement %1006[%57 : i32] : vector<8xbf16> loc(#loc)
    %1014 = llvm.insertelement %1013, %1012[%57 : i32] : vector<8xbf16> loc(#loc)
    %1015 = llvm.extractelement %1006[%51 : i32] : vector<8xbf16> loc(#loc)
    %1016 = llvm.insertelement %1015, %1014[%51 : i32] : vector<8xbf16> loc(#loc)
    %1017 = llvm.extractelement %1006[%61 : i32] : vector<8xbf16> loc(#loc)
    %1018 = llvm.insertelement %1017, %1016[%61 : i32] : vector<8xbf16> loc(#loc)
    %1019 = llvm.extractelement %1006[%63 : i32] : vector<8xbf16> loc(#loc)
    %1020 = llvm.insertelement %1019, %1018[%63 : i32] : vector<8xbf16> loc(#loc)
    %1021 = llvm.extractelement %1006[%50 : i32] : vector<8xbf16> loc(#loc)
    %1022 = llvm.insertelement %1021, %1020[%50 : i32] : vector<8xbf16> loc(#loc)
    %1023 = llvm.insertelement %293, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %1024 = llvm.insertelement %294, %1023[%53 : i32] : vector<8xbf16> loc(#loc)
    %1025 = llvm.insertelement %295, %1024[%52 : i32] : vector<8xbf16> loc(#loc)
    %1026 = llvm.insertelement %296, %1025[%57 : i32] : vector<8xbf16> loc(#loc)
    %1027 = llvm.insertelement %297, %1026[%51 : i32] : vector<8xbf16> loc(#loc)
    %1028 = llvm.insertelement %298, %1027[%61 : i32] : vector<8xbf16> loc(#loc)
    %1029 = llvm.insertelement %299, %1028[%63 : i32] : vector<8xbf16> loc(#loc)
    %1030 = llvm.insertelement %300, %1029[%50 : i32] : vector<8xbf16> loc(#loc)
    %1031 = llvm.extractelement %1030[%64 : i32] : vector<8xbf16> loc(#loc)
    %1032 = llvm.insertelement %1031, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %1033 = llvm.extractelement %1030[%53 : i32] : vector<8xbf16> loc(#loc)
    %1034 = llvm.insertelement %1033, %1032[%53 : i32] : vector<8xbf16> loc(#loc)
    %1035 = llvm.extractelement %1030[%52 : i32] : vector<8xbf16> loc(#loc)
    %1036 = llvm.insertelement %1035, %1034[%52 : i32] : vector<8xbf16> loc(#loc)
    %1037 = llvm.extractelement %1030[%57 : i32] : vector<8xbf16> loc(#loc)
    %1038 = llvm.insertelement %1037, %1036[%57 : i32] : vector<8xbf16> loc(#loc)
    %1039 = llvm.extractelement %1030[%51 : i32] : vector<8xbf16> loc(#loc)
    %1040 = llvm.insertelement %1039, %1038[%51 : i32] : vector<8xbf16> loc(#loc)
    %1041 = llvm.extractelement %1030[%61 : i32] : vector<8xbf16> loc(#loc)
    %1042 = llvm.insertelement %1041, %1040[%61 : i32] : vector<8xbf16> loc(#loc)
    %1043 = llvm.extractelement %1030[%63 : i32] : vector<8xbf16> loc(#loc)
    %1044 = llvm.insertelement %1043, %1042[%63 : i32] : vector<8xbf16> loc(#loc)
    %1045 = llvm.extractelement %1030[%50 : i32] : vector<8xbf16> loc(#loc)
    %1046 = llvm.insertelement %1045, %1044[%50 : i32] : vector<8xbf16> loc(#loc)
    %1047 = llvm.insertelement %316, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %1048 = llvm.insertelement %317, %1047[%53 : i32] : vector<8xbf16> loc(#loc)
    %1049 = llvm.insertelement %318, %1048[%52 : i32] : vector<8xbf16> loc(#loc)
    %1050 = llvm.insertelement %319, %1049[%57 : i32] : vector<8xbf16> loc(#loc)
    %1051 = llvm.insertelement %320, %1050[%51 : i32] : vector<8xbf16> loc(#loc)
    %1052 = llvm.insertelement %321, %1051[%61 : i32] : vector<8xbf16> loc(#loc)
    %1053 = llvm.insertelement %322, %1052[%63 : i32] : vector<8xbf16> loc(#loc)
    %1054 = llvm.insertelement %323, %1053[%50 : i32] : vector<8xbf16> loc(#loc)
    %1055 = llvm.extractelement %1054[%64 : i32] : vector<8xbf16> loc(#loc)
    %1056 = llvm.insertelement %1055, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %1057 = llvm.extractelement %1054[%53 : i32] : vector<8xbf16> loc(#loc)
    %1058 = llvm.insertelement %1057, %1056[%53 : i32] : vector<8xbf16> loc(#loc)
    %1059 = llvm.extractelement %1054[%52 : i32] : vector<8xbf16> loc(#loc)
    %1060 = llvm.insertelement %1059, %1058[%52 : i32] : vector<8xbf16> loc(#loc)
    %1061 = llvm.extractelement %1054[%57 : i32] : vector<8xbf16> loc(#loc)
    %1062 = llvm.insertelement %1061, %1060[%57 : i32] : vector<8xbf16> loc(#loc)
    %1063 = llvm.extractelement %1054[%51 : i32] : vector<8xbf16> loc(#loc)
    %1064 = llvm.insertelement %1063, %1062[%51 : i32] : vector<8xbf16> loc(#loc)
    %1065 = llvm.extractelement %1054[%61 : i32] : vector<8xbf16> loc(#loc)
    %1066 = llvm.insertelement %1065, %1064[%61 : i32] : vector<8xbf16> loc(#loc)
    %1067 = llvm.extractelement %1054[%63 : i32] : vector<8xbf16> loc(#loc)
    %1068 = llvm.insertelement %1067, %1066[%63 : i32] : vector<8xbf16> loc(#loc)
    %1069 = llvm.extractelement %1054[%50 : i32] : vector<8xbf16> loc(#loc)
    %1070 = llvm.insertelement %1069, %1068[%50 : i32] : vector<8xbf16> loc(#loc)
    %1071 = llvm.insertelement %339, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %1072 = llvm.insertelement %340, %1071[%53 : i32] : vector<8xbf16> loc(#loc)
    %1073 = llvm.insertelement %341, %1072[%52 : i32] : vector<8xbf16> loc(#loc)
    %1074 = llvm.insertelement %342, %1073[%57 : i32] : vector<8xbf16> loc(#loc)
    %1075 = llvm.insertelement %343, %1074[%51 : i32] : vector<8xbf16> loc(#loc)
    %1076 = llvm.insertelement %344, %1075[%61 : i32] : vector<8xbf16> loc(#loc)
    %1077 = llvm.insertelement %345, %1076[%63 : i32] : vector<8xbf16> loc(#loc)
    %1078 = llvm.insertelement %346, %1077[%50 : i32] : vector<8xbf16> loc(#loc)
    %1079 = llvm.extractelement %1078[%64 : i32] : vector<8xbf16> loc(#loc)
    %1080 = llvm.insertelement %1079, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %1081 = llvm.extractelement %1078[%53 : i32] : vector<8xbf16> loc(#loc)
    %1082 = llvm.insertelement %1081, %1080[%53 : i32] : vector<8xbf16> loc(#loc)
    %1083 = llvm.extractelement %1078[%52 : i32] : vector<8xbf16> loc(#loc)
    %1084 = llvm.insertelement %1083, %1082[%52 : i32] : vector<8xbf16> loc(#loc)
    %1085 = llvm.extractelement %1078[%57 : i32] : vector<8xbf16> loc(#loc)
    %1086 = llvm.insertelement %1085, %1084[%57 : i32] : vector<8xbf16> loc(#loc)
    %1087 = llvm.extractelement %1078[%51 : i32] : vector<8xbf16> loc(#loc)
    %1088 = llvm.insertelement %1087, %1086[%51 : i32] : vector<8xbf16> loc(#loc)
    %1089 = llvm.extractelement %1078[%61 : i32] : vector<8xbf16> loc(#loc)
    %1090 = llvm.insertelement %1089, %1088[%61 : i32] : vector<8xbf16> loc(#loc)
    %1091 = llvm.extractelement %1078[%63 : i32] : vector<8xbf16> loc(#loc)
    %1092 = llvm.insertelement %1091, %1090[%63 : i32] : vector<8xbf16> loc(#loc)
    %1093 = llvm.extractelement %1078[%50 : i32] : vector<8xbf16> loc(#loc)
    %1094 = llvm.insertelement %1093, %1092[%50 : i32] : vector<8xbf16> loc(#loc)
    %1095 = llvm.insertelement %967, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %1096 = llvm.insertelement %968, %1095[%53 : i32] : vector<8xbf16> loc(#loc)
    %1097 = llvm.insertelement %969, %1096[%52 : i32] : vector<8xbf16> loc(#loc)
    %1098 = llvm.insertelement %970, %1097[%57 : i32] : vector<8xbf16> loc(#loc)
    %1099 = llvm.insertelement %971, %1098[%51 : i32] : vector<8xbf16> loc(#loc)
    %1100 = llvm.insertelement %972, %1099[%61 : i32] : vector<8xbf16> loc(#loc)
    %1101 = llvm.insertelement %973, %1100[%63 : i32] : vector<8xbf16> loc(#loc)
    %1102 = llvm.insertelement %974, %1101[%50 : i32] : vector<8xbf16> loc(#loc)
    %1103 = llvm.extractelement %1102[%64 : i32] : vector<8xbf16> loc(#loc)
    %1104 = llvm.insertelement %1103, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %1105 = llvm.extractelement %1102[%53 : i32] : vector<8xbf16> loc(#loc)
    %1106 = llvm.insertelement %1105, %1104[%53 : i32] : vector<8xbf16> loc(#loc)
    %1107 = llvm.extractelement %1102[%52 : i32] : vector<8xbf16> loc(#loc)
    %1108 = llvm.insertelement %1107, %1106[%52 : i32] : vector<8xbf16> loc(#loc)
    %1109 = llvm.extractelement %1102[%57 : i32] : vector<8xbf16> loc(#loc)
    %1110 = llvm.insertelement %1109, %1108[%57 : i32] : vector<8xbf16> loc(#loc)
    %1111 = llvm.extractelement %1102[%51 : i32] : vector<8xbf16> loc(#loc)
    %1112 = llvm.insertelement %1111, %1110[%51 : i32] : vector<8xbf16> loc(#loc)
    %1113 = llvm.extractelement %1102[%61 : i32] : vector<8xbf16> loc(#loc)
    %1114 = llvm.insertelement %1113, %1112[%61 : i32] : vector<8xbf16> loc(#loc)
    %1115 = llvm.extractelement %1102[%63 : i32] : vector<8xbf16> loc(#loc)
    %1116 = llvm.insertelement %1115, %1114[%63 : i32] : vector<8xbf16> loc(#loc)
    %1117 = llvm.extractelement %1102[%50 : i32] : vector<8xbf16> loc(#loc)
    %1118 = llvm.insertelement %1117, %1116[%50 : i32] : vector<8xbf16> loc(#loc)
    %1119 = llvm.insertelement %975, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %1120 = llvm.insertelement %976, %1119[%53 : i32] : vector<8xbf16> loc(#loc)
    %1121 = llvm.insertelement %977, %1120[%52 : i32] : vector<8xbf16> loc(#loc)
    %1122 = llvm.insertelement %978, %1121[%57 : i32] : vector<8xbf16> loc(#loc)
    %1123 = llvm.insertelement %979, %1122[%51 : i32] : vector<8xbf16> loc(#loc)
    %1124 = llvm.insertelement %980, %1123[%61 : i32] : vector<8xbf16> loc(#loc)
    %1125 = llvm.insertelement %981, %1124[%63 : i32] : vector<8xbf16> loc(#loc)
    %1126 = llvm.insertelement %982, %1125[%50 : i32] : vector<8xbf16> loc(#loc)
    %1127 = llvm.extractelement %1126[%64 : i32] : vector<8xbf16> loc(#loc)
    %1128 = llvm.insertelement %1127, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %1129 = llvm.extractelement %1126[%53 : i32] : vector<8xbf16> loc(#loc)
    %1130 = llvm.insertelement %1129, %1128[%53 : i32] : vector<8xbf16> loc(#loc)
    %1131 = llvm.extractelement %1126[%52 : i32] : vector<8xbf16> loc(#loc)
    %1132 = llvm.insertelement %1131, %1130[%52 : i32] : vector<8xbf16> loc(#loc)
    %1133 = llvm.extractelement %1126[%57 : i32] : vector<8xbf16> loc(#loc)
    %1134 = llvm.insertelement %1133, %1132[%57 : i32] : vector<8xbf16> loc(#loc)
    %1135 = llvm.extractelement %1126[%51 : i32] : vector<8xbf16> loc(#loc)
    %1136 = llvm.insertelement %1135, %1134[%51 : i32] : vector<8xbf16> loc(#loc)
    %1137 = llvm.extractelement %1126[%61 : i32] : vector<8xbf16> loc(#loc)
    %1138 = llvm.insertelement %1137, %1136[%61 : i32] : vector<8xbf16> loc(#loc)
    %1139 = llvm.extractelement %1126[%63 : i32] : vector<8xbf16> loc(#loc)
    %1140 = llvm.insertelement %1139, %1138[%63 : i32] : vector<8xbf16> loc(#loc)
    %1141 = llvm.extractelement %1126[%50 : i32] : vector<8xbf16> loc(#loc)
    %1142 = llvm.insertelement %1141, %1140[%50 : i32] : vector<8xbf16> loc(#loc)
    %1143 = llvm.insertelement %983, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %1144 = llvm.insertelement %984, %1143[%53 : i32] : vector<8xbf16> loc(#loc)
    %1145 = llvm.insertelement %985, %1144[%52 : i32] : vector<8xbf16> loc(#loc)
    %1146 = llvm.insertelement %986, %1145[%57 : i32] : vector<8xbf16> loc(#loc)
    %1147 = llvm.insertelement %987, %1146[%51 : i32] : vector<8xbf16> loc(#loc)
    %1148 = llvm.insertelement %988, %1147[%61 : i32] : vector<8xbf16> loc(#loc)
    %1149 = llvm.insertelement %989, %1148[%63 : i32] : vector<8xbf16> loc(#loc)
    %1150 = llvm.insertelement %990, %1149[%50 : i32] : vector<8xbf16> loc(#loc)
    %1151 = llvm.extractelement %1150[%64 : i32] : vector<8xbf16> loc(#loc)
    %1152 = llvm.insertelement %1151, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %1153 = llvm.extractelement %1150[%53 : i32] : vector<8xbf16> loc(#loc)
    %1154 = llvm.insertelement %1153, %1152[%53 : i32] : vector<8xbf16> loc(#loc)
    %1155 = llvm.extractelement %1150[%52 : i32] : vector<8xbf16> loc(#loc)
    %1156 = llvm.insertelement %1155, %1154[%52 : i32] : vector<8xbf16> loc(#loc)
    %1157 = llvm.extractelement %1150[%57 : i32] : vector<8xbf16> loc(#loc)
    %1158 = llvm.insertelement %1157, %1156[%57 : i32] : vector<8xbf16> loc(#loc)
    %1159 = llvm.extractelement %1150[%51 : i32] : vector<8xbf16> loc(#loc)
    %1160 = llvm.insertelement %1159, %1158[%51 : i32] : vector<8xbf16> loc(#loc)
    %1161 = llvm.extractelement %1150[%61 : i32] : vector<8xbf16> loc(#loc)
    %1162 = llvm.insertelement %1161, %1160[%61 : i32] : vector<8xbf16> loc(#loc)
    %1163 = llvm.extractelement %1150[%63 : i32] : vector<8xbf16> loc(#loc)
    %1164 = llvm.insertelement %1163, %1162[%63 : i32] : vector<8xbf16> loc(#loc)
    %1165 = llvm.extractelement %1150[%50 : i32] : vector<8xbf16> loc(#loc)
    %1166 = llvm.insertelement %1165, %1164[%50 : i32] : vector<8xbf16> loc(#loc)
    %1167 = llvm.insertelement %991, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %1168 = llvm.insertelement %992, %1167[%53 : i32] : vector<8xbf16> loc(#loc)
    %1169 = llvm.insertelement %993, %1168[%52 : i32] : vector<8xbf16> loc(#loc)
    %1170 = llvm.insertelement %994, %1169[%57 : i32] : vector<8xbf16> loc(#loc)
    %1171 = llvm.insertelement %995, %1170[%51 : i32] : vector<8xbf16> loc(#loc)
    %1172 = llvm.insertelement %996, %1171[%61 : i32] : vector<8xbf16> loc(#loc)
    %1173 = llvm.insertelement %997, %1172[%63 : i32] : vector<8xbf16> loc(#loc)
    %1174 = llvm.insertelement %998, %1173[%50 : i32] : vector<8xbf16> loc(#loc)
    %1175 = llvm.extractelement %1174[%64 : i32] : vector<8xbf16> loc(#loc)
    %1176 = llvm.insertelement %1175, %31[%64 : i32] : vector<8xbf16> loc(#loc)
    %1177 = llvm.extractelement %1174[%53 : i32] : vector<8xbf16> loc(#loc)
    %1178 = llvm.insertelement %1177, %1176[%53 : i32] : vector<8xbf16> loc(#loc)
    %1179 = llvm.extractelement %1174[%52 : i32] : vector<8xbf16> loc(#loc)
    %1180 = llvm.insertelement %1179, %1178[%52 : i32] : vector<8xbf16> loc(#loc)
    %1181 = llvm.extractelement %1174[%57 : i32] : vector<8xbf16> loc(#loc)
    %1182 = llvm.insertelement %1181, %1180[%57 : i32] : vector<8xbf16> loc(#loc)
    %1183 = llvm.extractelement %1174[%51 : i32] : vector<8xbf16> loc(#loc)
    %1184 = llvm.insertelement %1183, %1182[%51 : i32] : vector<8xbf16> loc(#loc)
    %1185 = llvm.extractelement %1174[%61 : i32] : vector<8xbf16> loc(#loc)
    %1186 = llvm.insertelement %1185, %1184[%61 : i32] : vector<8xbf16> loc(#loc)
    %1187 = llvm.extractelement %1174[%63 : i32] : vector<8xbf16> loc(#loc)
    %1188 = llvm.insertelement %1187, %1186[%63 : i32] : vector<8xbf16> loc(#loc)
    %1189 = llvm.extractelement %1174[%50 : i32] : vector<8xbf16> loc(#loc)
    %1190 = llvm.insertelement %1189, %1188[%50 : i32] : vector<8xbf16> loc(#loc)
    %1191 = rocdl.mfma.f32.16x16x32.bf16 %1118, %1022, %866, %64, %64, %64 : (vector<8xbf16>, vector<8xbf16>, vector<4xf32>, i32, i32, i32) -> vector<4xf32> loc(#loc)
    %1192 = rocdl.mfma.f32.16x16x32.bf16 %1142, %1046, %1191, %64, %64, %64 : (vector<8xbf16>, vector<8xbf16>, vector<4xf32>, i32, i32, i32) -> vector<4xf32> loc(#loc)
    %1193 = rocdl.mfma.f32.16x16x32.bf16 %1166, %1070, %1192, %64, %64, %64 : (vector<8xbf16>, vector<8xbf16>, vector<4xf32>, i32, i32, i32) -> vector<4xf32> loc(#loc)
    %1194 = rocdl.mfma.f32.16x16x32.bf16 %1190, %1094, %1193, %64, %64, %64 : (vector<8xbf16>, vector<8xbf16>, vector<4xf32>, i32, i32, i32) -> vector<4xf32> loc(#loc)
    %1195 = llvm.extractelement %1194[%64 : i32] : vector<4xf32> loc(#loc)
    %1196 = llvm.extractelement %1194[%53 : i32] : vector<4xf32> loc(#loc)
    %1197 = llvm.extractelement %1194[%52 : i32] : vector<4xf32> loc(#loc)
    %1198 = llvm.extractelement %1194[%57 : i32] : vector<4xf32> loc(#loc)
    %1199 = llvm.fadd %871, %1195 : f32 loc(#loc)
    %1200 = llvm.fadd %872, %1196 : f32 loc(#loc)
    %1201 = llvm.fadd %873, %1197 : f32 loc(#loc)
    %1202 = llvm.fadd %874, %1198 : f32 loc(#loc)
    %1203 = llvm.mul %109, %73 : i32 loc(#loc)
    %1204 = llvm.add %135, %1203 : i32 loc(#loc)
    %1205 = llvm.insertelement %1199, %1[%64 : i32] : vector<2xf32> loc(#loc)
    %1206 = llvm.insertelement %1200, %1205[%53 : i32] : vector<2xf32> loc(#loc)
    %1207 = llvm.fptrunc %1206 : vector<2xf32> to vector<2xbf16> loc(#loc)
    %1208 = llvm.extractelement %1207[%64 : i32] : vector<2xbf16> loc(#loc)
    %1209 = llvm.extractelement %1207[%53 : i32] : vector<2xbf16> loc(#loc)
    %1210 = llvm.insertelement %1201, %1[%64 : i32] : vector<2xf32> loc(#loc)
    %1211 = llvm.insertelement %1202, %1210[%53 : i32] : vector<2xf32> loc(#loc)
    %1212 = llvm.fptrunc %1211 : vector<2xf32> to vector<2xbf16> loc(#loc)
    %1213 = llvm.extractelement %1212[%64 : i32] : vector<2xbf16> loc(#loc)
    %1214 = llvm.extractelement %1212[%53 : i32] : vector<2xbf16> loc(#loc)
    %1215 = rocdl.make.buffer.rsrc %out, %11, %9, %10 : <1> to <8> loc(#loc)
    %1216 = llvm.insertelement %1208, %0[%64 : i32] : vector<4xbf16> loc(#loc)
    %1217 = llvm.insertelement %1209, %1216[%53 : i32] : vector<4xbf16> loc(#loc)
    %1218 = llvm.insertelement %1213, %1217[%52 : i32] : vector<4xbf16> loc(#loc)
    %1219 = llvm.insertelement %1214, %1218[%57 : i32] : vector<4xbf16> loc(#loc)
    %1220 = llvm.bitcast %1219 : vector<4xbf16> to vector<2xi32> loc(#loc)
    %1221 = llvm.mul %1204, %52 : i32 loc(#loc)
    %1222 = llvm.select %46, %1221, %7 : i1, i32 loc(#loc)
    rocdl.raw.ptr.buffer.store %1220, %1215, %1222, %64, %64 : vector<2xi32> loc(#loc)
    llvm.return loc(#loc)
  } loc(#loc)
} loc(#loc)


// -----// AMDGCN Dump //----- //
	.amdgcn_target "amdgcn-amd-amdhsa--gfx950"
	.amdhsa_code_object_version 5
	.text
	.globl	dot_scale_kernel                ; -- Begin function dot_scale_kernel
	.p2align	8
	.type	dot_scale_kernel,@function
dot_scale_kernel:                       ; @dot_scale_kernel
; %bb.1:
	s_load_dwordx2 s[2:3], s[0:1], 0x0
	s_load_dwordx8 s[4:11], s[0:1], 0x8
	s_load_dwordx4 s[12:15], s[0:1], 0x28
	s_waitcnt lgkmcnt(0)
	s_branch .LBB0_0
	.p2align	8
; %bb.2:
.LBB0_0:
	v_lshrrev_b32_e32 v1, 5, v0
	v_lshlrev_b32_e32 v26, 3, v0
	v_or_b32_e32 v3, 24, v1
	v_and_b32_e32 v2, 0xf8, v26
	s_lshl_b32 s5, s4, 3
	v_mad_u64_u32 v[4:5], s[0:1], s4, v1, v[2:3]
	v_add_u32_e32 v6, s5, v4
	v_add_u32_e32 v8, s5, v6
	v_mad_u64_u32 v[2:3], s[0:1], s4, v3, v[2:3]
	v_ashrrev_i32_e32 v5, 31, v4
	v_lshl_add_u64 v[18:19], v[4:5], 1, s[2:3]
	v_ashrrev_i32_e32 v7, 31, v6
	v_ashrrev_i32_e32 v9, 31, v8
	v_ashrrev_i32_e32 v3, 31, v2
	v_lshl_add_u64 v[20:21], v[6:7], 1, s[2:3]
	v_lshl_add_u64 v[22:23], v[8:9], 1, s[2:3]
	v_lshl_add_u64 v[24:25], v[2:3], 1, s[2:3]
	global_load_dwordx4 v[2:5], v[18:19], off
	global_load_dwordx4 v[6:9], v[22:23], off
	global_load_dwordx4 v[10:13], v[20:21], off
	global_load_dwordx4 v[14:17], v[24:25], off
	v_lshrrev_b32_e32 v1, 3, v0
	v_lshrrev_b32_e32 v39, 2, v0
	s_movk_i32 s0, 0x670
	v_and_b32_e32 v38, 7, v0
	v_and_b32_e32 v20, 1, v0
	v_and_b32_e32 v40, 16, v0
	v_mul_lo_u32 v1, s8, v1
	v_and_b32_e32 v19, 48, v39
	v_and_b32_e32 v21, 32, v0
	v_lshlrev_b32_e32 v22, 12, v20
	v_lshlrev_b32_e32 v23, 4, v40
	v_lshl_add_u32 v18, v38, 4, v1
	v_bitop3_b32 v1, v26, v19, s0 bitop3:0x6c
	v_lshlrev_b32_e32 v24, 8, v21
	v_or3_b32 v1, v1, v22, v23
	s_movk_i32 s1, 0x840
	v_ashrrev_i32_e32 v19, 31, v18
	v_or_b32_e32 v22, v1, v24
	v_bitop3_b32 v1, v1, s1, v24 bitop3:0x36
	v_lshl_add_u64 v[18:19], s[6:7], 0, v[18:19]
	v_add_u32_e32 v22, 0, v22
	v_add_u32_e32 v1, 0, v1
	s_movk_i32 s0, 0x1e00
	s_movk_i32 s1, 0x60
	v_and_b32_e32 v48, 0x80, v0
	s_mov_b64 s[16:17], s[10:11]
	s_mov_b32 s19, 0x27000
	s_mov_b32 s18, 0x7ffffffe
	s_and_b32 s17, s17, 0xffff
	v_lshlrev_b32_e32 v40, 7, v40
	v_bfe_u32 v42, v0, 6, 1
	v_and_b32_e32 v39, 2, v39
	v_lshl_add_u32 v38, v38, 5, 0
	v_add3_u32 v49, v38, v39, v42
	s_movk_i32 s5, 0xff
	s_mov_b32 s4, 0x5040100
	s_and_b32 s13, s13, 0xffff
	s_mov_b32 s14, s18
	s_mov_b32 s15, s19
	s_waitcnt vmcnt(3)
	ds_write_b128 v22, v[2:5]
	s_waitcnt vmcnt(2)
	ds_write_b128 v22, v[6:9] offset:128
	s_waitcnt vmcnt(1)
	ds_write_b128 v1, v[10:13]
	s_waitcnt vmcnt(0)
	ds_write_b128 v1, v[14:17] offset:128
	s_waitcnt lgkmcnt(0)
	s_barrier
	global_load_dwordx4 v[30:33], v[18:19], off
	v_lshlrev_b32_e32 v2, 8, v0
	v_lshlrev_b32_e32 v3, 1, v0
	v_and_b32_e32 v5, 0x70, v26
	v_bfe_i32 v4, v0, 2, 1
	v_lshlrev_b32_e32 v6, 13, v20
	v_lshrrev_b32_e32 v7, 1, v21
	v_and_b32_e32 v3, 4, v3
	v_and_or_b32 v2, v2, s0, v5
	v_and_b32_e32 v1, 0xf8, v0
	v_and_b32_e32 v4, 0x240, v4
	v_lshl_or_b32 v3, v20, 10, v3
	v_bitop3_b32 v2, v2, v7, v6 bitop3:0x36
	v_bitop3_b32 v1, v3, v4, v1 bitop3:0x36
	v_or_b32_e32 v3, v2, v48
	v_bitop3_b32 v2, v2, s1, v48 bitop3:0x36
	v_add_u32_e32 v41, 0, v1
	v_xor_b32_e32 v1, 0x104, v1
	v_add_u32_e32 v4, 0, v3
	v_xad_u32 v5, v3, 32, 0
	v_xad_u32 v3, v3, 64, 0
	v_add_u32_e32 v2, 0, v2
	v_add_u32_e32 v1, 0, v1
	ds_read_b128 v[34:37], v4
	ds_read_b128 v[14:17], v4 offset:256
	ds_read_b128 v[26:29], v5
	ds_read_b128 v[10:13], v5 offset:256
	ds_read_b128 v[22:25], v3
	ds_read_b128 v[6:9], v3 offset:256
	ds_read_b128 v[18:21], v2
	ds_read_b128 v[2:5], v2 offset:256
	s_waitcnt lgkmcnt(0)
	s_barrier
	s_movk_i32 s0, 0x240
	s_movk_i32 s1, 0x244
	s_waitcnt vmcnt(0)
	ds_write2st64_b32 v41, v30, v31 offset1:8
	ds_write2st64_b32 v1, v32, v33 offset1:8
	s_waitcnt lgkmcnt(0)
	s_barrier
	buffer_load_ubyte v32, v0, s[16:19], 0 offen
	v_and_b32_e32 v1, 15, v0
	v_bfe_i32 v30, v0, 5, 1
	v_and_b32_e32 v31, 64, v0
	v_lshlrev_b32_e32 v33, 2, v0
	v_lshlrev_b32_e32 v43, 3, v1
	v_and_b32_e32 v30, 0x104, v30
	v_lshlrev_b32_e32 v44, 1, v31
	v_and_b32_e32 v33, 0xfc, v33
	v_or3_b32 v30, v43, v40, v30
	v_lshrrev_b32_e32 v41, 7, v0
	v_lshrrev_b32_e32 v31, 5, v31
	v_add_u32_e32 v33, 0, v33
	v_or_b32_e32 v38, v30, v44
	v_bitop3_b32 v39, v30, s0, v44 bitop3:0x36
	v_bitop3_b32 v30, v30, s1, v44 bitop3:0x36
	v_add3_u32 v33, v33, v31, v41
	v_add_u32_e32 v31, 0, v38
	v_add_u32_e32 v30, 0, v30
	v_add_u32_e32 v39, 0, v39
	v_xad_u32 v38, v38, 4, 0
	ds_read2st64_b32 v[42:43], v31 offset1:4
	ds_read2st64_b32 v[44:45], v39 offset1:4
	ds_read2st64_b32 v[46:47], v38 offset1:4
	ds_read2st64_b32 v[30:31], v30 offset1:4
	s_waitcnt lgkmcnt(0)
	s_barrier
	v_lshrrev_b32_e32 v0, 1, v0
	v_and_b32_e32 v0, 56, v0
	s_waitcnt vmcnt(0)
	ds_write_b8 v33, v32
	s_waitcnt lgkmcnt(0)
	s_barrier
	ds_read_u8 v33, v49
	v_mov_b32_e32 v32, 0x7fc0
	s_waitcnt lgkmcnt(0)
	v_lshlrev_b32_e32 v38, 23, v33
	v_cvt_scalef32_pk_bf16_fp4 v39, v42, v38 op_sel:[0,1,0]
	v_cvt_scalef32_pk_bf16_fp4 v40, v42, v38 op_sel:[1,1,0]
	v_cmp_eq_u32_e32 vcc, s5, v33
	v_cvt_scalef32_pk_bf16_fp4 v33, v42, v38
	v_cvt_scalef32_pk_bf16_fp4 v38, v42, v38 op_sel:[1,0,0]
	v_lshrrev_b32_e32 v41, 16, v39
	v_lshrrev_b32_e32 v42, 16, v40
	v_cndmask_b32_e32 v39, v39, v32, vcc
	v_cndmask_b32_e32 v40, v40, v32, vcc
	v_cndmask_b32_e32 v50, v41, v32, vcc
	v_cndmask_b32_e32 v41, v42, v32, vcc
	v_perm_b32 v41, v41, v40, s4
	v_perm_b32 v40, v50, v39, s4
	v_cndmask_b32_e32 v42, v33, v32, vcc
	v_lshrrev_b32_e32 v33, 16, v33
	v_lshrrev_b32_e32 v39, 16, v38
	v_cndmask_b32_e32 v38, v38, v32, vcc
	v_cndmask_b32_e32 v33, v33, v32, vcc
	v_cndmask_b32_e32 v39, v39, v32, vcc
	v_perm_b32 v39, v39, v38, s4
	v_perm_b32 v38, v33, v42, s4
	ds_read_u8 v33, v49 offset:4
	ds_read_u8 v42, v49 offset:8
	ds_read_u8 v50, v49 offset:12
	ds_read_u8 v51, v49 offset:16
	v_mfma_f32_16x16x32_bf16 a[0:3], v[38:41], v[34:37], 0
	s_waitcnt lgkmcnt(3)
	v_lshlrev_b32_e32 v34, 23, v33
	v_cmp_eq_u32_e64 s[0:1], s5, v33
	v_cvt_scalef32_pk_bf16_fp4 v33, v43, v34
	v_cvt_scalef32_pk_bf16_fp4 v35, v43, v34 op_sel:[1,0,0]
	v_cvt_scalef32_pk_bf16_fp4 v36, v43, v34 op_sel:[0,1,0]
	v_cvt_scalef32_pk_bf16_fp4 v34, v43, v34 op_sel:[1,1,0]
	v_lshrrev_b32_e32 v37, 16, v36
	v_lshrrev_b32_e32 v41, 16, v34
	v_cndmask_b32_e64 v34, v34, v32, s[0:1]
	v_cndmask_b32_e64 v43, v37, v32, s[0:1]
	v_cndmask_b32_e64 v37, v41, v32, s[0:1]
	v_perm_b32 v37, v37, v34, s4
	v_lshrrev_b32_e32 v34, 16, v35
	v_cndmask_b32_e64 v35, v35, v32, s[0:1]
	v_cndmask_b32_e64 v34, v34, v32, s[0:1]
	v_perm_b32 v35, v34, v35, s4
	v_cndmask_b32_e64 v34, v33, v32, s[0:1]
	v_lshrrev_b32_e32 v33, 16, v33
	v_cndmask_b32_e64 v36, v36, v32, s[0:1]
	v_cndmask_b32_e64 v33, v33, v32, s[0:1]
	v_perm_b32 v36, v43, v36, s4
	v_perm_b32 v34, v33, v34, s4
	s_waitcnt lgkmcnt(2)
	v_lshlrev_b32_e32 v39, 23, v42
	v_cvt_scalef32_pk_bf16_fp4 v52, v46, v39 op_sel:[0,1,0]
	v_cmp_eq_u32_e32 vcc, s5, v42
	v_cvt_scalef32_pk_bf16_fp4 v33, v46, v39
	v_cvt_scalef32_pk_bf16_fp4 v42, v46, v39 op_sel:[1,0,0]
	v_cvt_scalef32_pk_bf16_fp4 v39, v46, v39 op_sel:[1,1,0]
	v_mfma_f32_16x16x32_bf16 a[0:3], v[34:37], v[26:29], a[0:3]
	v_lshrrev_b32_e32 v26, 16, v52
	ds_read_u8 v38, v49 offset:20
	v_lshrrev_b32_e32 v27, 16, v39
	v_cndmask_b32_e32 v28, v52, v32, vcc
	v_cndmask_b32_e32 v26, v26, v32, vcc
	v_cndmask_b32_e32 v29, v39, v32, vcc
	v_cndmask_b32_e32 v27, v27, v32, vcc
	v_perm_b32 v28, v26, v28, s4
	v_lshrrev_b32_e32 v26, 16, v42
	v_perm_b32 v29, v27, v29, s4
	v_cndmask_b32_e32 v27, v42, v32, vcc
	v_cndmask_b32_e32 v26, v26, v32, vcc
	v_perm_b32 v27, v26, v27, s4
	v_cndmask_b32_e32 v26, v33, v32, vcc
	v_lshrrev_b32_e32 v33, 16, v33
	v_cndmask_b32_e32 v33, v33, v32, vcc
	s_waitcnt lgkmcnt(2)
	v_lshlrev_b32_e32 v40, 23, v50
	s_waitcnt lgkmcnt(1)
	v_lshlrev_b32_e32 v41, 23, v51
	s_waitcnt lgkmcnt(0)
	v_lshlrev_b32_e32 v43, 23, v38
	v_perm_b32 v26, v33, v26, s4
	v_cvt_scalef32_pk_bf16_fp4 v34, v47, v40
	v_cvt_scalef32_pk_bf16_fp4 v35, v47, v40 op_sel:[1,0,0]
	v_cvt_scalef32_pk_bf16_fp4 v36, v47, v40 op_sel:[0,1,0]
	v_cvt_scalef32_pk_bf16_fp4 v37, v47, v40 op_sel:[1,1,0]
	v_cvt_scalef32_pk_bf16_fp4 v40, v44, v41
	v_cvt_scalef32_pk_bf16_fp4 v46, v44, v41 op_sel:[1,0,0]
	v_cvt_scalef32_pk_bf16_fp4 v47, v44, v41 op_sel:[0,1,0]
	v_cvt_scalef32_pk_bf16_fp4 v41, v44, v41 op_sel:[1,1,0]
	v_cvt_scalef32_pk_bf16_fp4 v44, v45, v43
	v_cvt_scalef32_pk_bf16_fp4 v53, v45, v43 op_sel:[1,0,0]
	v_cvt_scalef32_pk_bf16_fp4 v54, v45, v43 op_sel:[0,1,0]
	v_cvt_scalef32_pk_bf16_fp4 v43, v45, v43 op_sel:[1,1,0]
	ds_read_u8 v42, v49 offset:24
	ds_read_u8 v45, v49 offset:28
	v_cmp_eq_u32_e32 vcc, s5, v50
	v_mfma_f32_16x16x32_bf16 a[0:3], v[26:29], v[22:25], a[0:3]
	v_lshrrev_b32_e32 v23, 16, v36
	s_waitcnt lgkmcnt(1)
	v_lshlrev_b32_e32 v33, 23, v42
	v_lshrrev_b32_e32 v24, 16, v37
	v_cvt_scalef32_pk_bf16_fp4 v49, v30, v33
	v_cvt_scalef32_pk_bf16_fp4 v26, v30, v33 op_sel:[1,0,0]
	v_cvt_scalef32_pk_bf16_fp4 v27, v30, v33 op_sel:[0,1,0]
	v_cvt_scalef32_pk_bf16_fp4 v28, v30, v33 op_sel:[1,1,0]
	v_cndmask_b32_e32 v30, v36, v32, vcc
	v_cndmask_b32_e32 v25, v37, v32, vcc
	v_cndmask_b32_e32 v23, v23, v32, vcc
	v_cndmask_b32_e32 v24, v24, v32, vcc
	v_lshrrev_b32_e32 v22, 16, v34
	v_perm_b32 v25, v24, v25, s4
	v_perm_b32 v24, v23, v30, s4
	v_lshrrev_b32_e32 v23, 16, v35
	v_cndmask_b32_e32 v30, v34, v32, vcc
	v_cndmask_b32_e32 v33, v35, v32, vcc
	v_cndmask_b32_e32 v22, v22, v32, vcc
	v_cndmask_b32_e32 v23, v23, v32, vcc
	v_perm_b32 v23, v23, v33, s4
	v_perm_b32 v22, v22, v30, s4
	v_lshrrev_b32_e32 v34, 16, v40
	v_lshrrev_b32_e32 v30, 16, v46
	v_lshrrev_b32_e32 v33, 16, v47
	v_lshrrev_b32_e32 v35, 16, v41
	v_cmp_eq_u32_e32 vcc, s5, v51
	v_mfma_f32_16x16x32_bf16 a[0:3], v[22:25], v[18:21], a[0:3]
	v_lshrrev_b32_e32 v18, 16, v53
	v_lshrrev_b32_e32 v19, 16, v54
	v_lshrrev_b32_e32 v20, 16, v43
	v_lshrrev_b32_e32 v21, 16, v49
	v_cmp_eq_u32_e64 s[0:1], s5, v38
	v_cmp_eq_u32_e64 s[2:3], s5, v42
	v_cndmask_b32_e32 v40, v40, v32, vcc
	v_cndmask_b32_e32 v34, v34, v32, vcc
	v_cndmask_b32_e32 v46, v46, v32, vcc
	v_cndmask_b32_e32 v30, v30, v32, vcc
	v_cndmask_b32_e32 v47, v47, v32, vcc
	v_cndmask_b32_e32 v33, v33, v32, vcc
	v_cndmask_b32_e32 v41, v41, v32, vcc
	v_cndmask_b32_e32 v35, v35, v32, vcc
	v_cndmask_b32_e64 v51, v53, v32, s[0:1]
	v_cndmask_b32_e64 v52, v18, v32, s[0:1]
	v_cndmask_b32_e64 v53, v54, v32, s[0:1]
	v_cndmask_b32_e64 v54, v19, v32, s[0:1]
	v_cndmask_b32_e64 v55, v20, v32, s[0:1]
	v_cndmask_b32_e64 v56, v21, v32, s[2:3]
	v_perm_b32 v21, v35, v41, s4
	v_perm_b32 v20, v33, v47, s4
	v_perm_b32 v19, v30, v46, s4
	v_perm_b32 v18, v34, v40, s4
	v_lshrrev_b32_e32 v39, 3, v48
	s_waitcnt lgkmcnt(0)
	v_lshlrev_b32_e32 v48, 23, v45
	v_lshrrev_b32_e32 v36, 16, v44
	v_lshrrev_b32_e32 v22, 16, v26
	v_lshrrev_b32_e32 v23, 16, v27
	v_cvt_scalef32_pk_bf16_fp4 v24, v31, v48 op_sel:[1,0,0]
	v_cvt_scalef32_pk_bf16_fp4 v25, v31, v48 op_sel:[0,1,0]
	v_cndmask_b32_e64 v44, v44, v32, s[0:1]
	v_cndmask_b32_e64 v36, v36, v32, s[0:1]
	v_cndmask_b32_e64 v43, v43, v32, s[0:1]
	v_cmp_eq_u32_e32 vcc, s5, v45
	v_lshrrev_b32_e32 v50, 16, v24
	v_lshrrev_b32_e32 v38, 16, v25
	v_cndmask_b32_e64 v57, v22, v32, s[2:3]
	v_cndmask_b32_e64 v58, v23, v32, s[2:3]
	v_cndmask_b32_e32 v59, v24, v32, vcc
	v_cndmask_b32_e32 v60, v25, v32, vcc
	v_perm_b32 v25, v55, v43, s4
	v_perm_b32 v24, v54, v53, s4
	v_perm_b32 v23, v52, v51, s4
	v_perm_b32 v22, v36, v44, s4
	v_mfma_f32_16x16x32_bf16 a[4:7], v[18:21], v[14:17], 0
	v_lshrrev_b32_e32 v37, 16, v28
	v_cvt_scalef32_pk_bf16_fp4 v29, v31, v48
	v_cndmask_b32_e64 v49, v49, v32, s[2:3]
	v_cndmask_b32_e64 v26, v26, v32, s[2:3]
	v_cndmask_b32_e64 v27, v27, v32, s[2:3]
	v_cndmask_b32_e64 v28, v28, v32, s[2:3]
	v_cndmask_b32_e64 v37, v37, v32, s[2:3]
	v_cvt_scalef32_pk_bf16_fp4 v31, v31, v48 op_sel:[1,1,0]
	v_lshrrev_b32_e32 v48, 16, v29
	v_cndmask_b32_e32 v45, v29, v32, vcc
	v_perm_b32 v29, v37, v28, s4
	v_perm_b32 v28, v58, v27, s4
	v_perm_b32 v27, v57, v26, s4
	v_perm_b32 v26, v56, v49, s4
	v_mfma_f32_16x16x32_bf16 a[4:7], v[22:25], v[10:13], a[4:7]
	v_lshrrev_b32_e32 v42, 16, v31
	v_cndmask_b32_e32 v48, v48, v32, vcc
	v_cndmask_b32_e32 v50, v50, v32, vcc
	v_cndmask_b32_e32 v38, v38, v32, vcc
	v_cndmask_b32_e32 v31, v31, v32, vcc
	v_cndmask_b32_e32 v32, v42, v32, vcc
	v_perm_b32 v15, v32, v31, s4
	v_perm_b32 v14, v38, v60, s4
	v_perm_b32 v13, v50, v59, s4
	v_perm_b32 v12, v48, v45, s4
	v_mfma_f32_16x16x32_bf16 a[4:7], v[26:29], v[6:9], a[4:7]
	v_accvgpr_read_b32 v7, a3
	v_accvgpr_read_b32 v6, a2
	v_or_b32_e32 v1, v39, v1
	v_mfma_f32_16x16x32_bf16 a[2:5], v[12:15], v[2:5], a[4:7]
	v_lshl_or_b32 v0, v1, 6, v0
	s_nop 6
	v_accvgpr_read_b32 v3, a5
	v_accvgpr_read_b32 v2, a4
	v_pk_add_f32 v[2:3], v[6:7], v[2:3]
	v_accvgpr_read_b32 v5, a3
	v_accvgpr_read_b32 v7, a1
	v_accvgpr_read_b32 v4, a2
	v_accvgpr_read_b32 v6, a0
	v_pk_add_f32 v[4:5], v[6:7], v[4:5]
	v_cvt_pk_bf16_f32 v3, v2, v3
	v_cvt_pk_bf16_f32 v2, v4, v5
	buffer_store_dwordx2 v[2:3], v0, s[12:15], 0 offen
	s_endpgm
	.section	.rodata,"a",@progbits
	.p2align	6, 0x0
	.amdhsa_kernel dot_scale_kernel
		.amdhsa_group_segment_fixed_size 0
		.amdhsa_private_segment_fixed_size 0
		.amdhsa_kernarg_size 64
		.amdhsa_user_sgpr_count 16
		.amdhsa_user_sgpr_dispatch_ptr 0
		.amdhsa_user_sgpr_queue_ptr 0
		.amdhsa_user_sgpr_kernarg_segment_ptr 1
		.amdhsa_user_sgpr_dispatch_id 0
		.amdhsa_user_sgpr_kernarg_preload_length 14
		.amdhsa_user_sgpr_kernarg_preload_offset 0
		.amdhsa_user_sgpr_private_segment_size 0
		.amdhsa_uses_dynamic_stack 0
		.amdhsa_enable_private_segment 0
		.amdhsa_system_sgpr_workgroup_id_x 1
		.amdhsa_system_sgpr_workgroup_id_y 0
		.amdhsa_system_sgpr_workgroup_id_z 0
		.amdhsa_system_sgpr_workgroup_info 0
		.amdhsa_system_vgpr_workitem_id 0
		.amdhsa_next_free_vgpr 72
		.amdhsa_next_free_sgpr 20
		.amdhsa_accum_offset 64
		.amdhsa_reserve_vcc 1
		.amdhsa_reserve_xnack_mask 1
		.amdhsa_float_round_mode_32 0
		.amdhsa_float_round_mode_16_64 0
		.amdhsa_float_denorm_mode_32 3
		.amdhsa_float_denorm_mode_16_64 3
		.amdhsa_dx10_clamp 1
		.amdhsa_ieee_mode 1
		.amdhsa_fp16_overflow 0
		.amdhsa_tg_split 0
		.amdhsa_exception_fp_ieee_invalid_op 0
		.amdhsa_exception_fp_denorm_src 0
		.amdhsa_exception_fp_ieee_div_zero 0
		.amdhsa_exception_fp_ieee_overflow 0
		.amdhsa_exception_fp_ieee_underflow 0
		.amdhsa_exception_fp_ieee_inexact 0
		.amdhsa_exception_int_div_zero 0
	.end_amdhsa_kernel
	.text
.Lfunc_end0:
	.size	dot_scale_kernel, .Lfunc_end0-dot_scale_kernel
                                        ; -- End function
	.set dot_scale_kernel.num_vgpr, 61
	.set dot_scale_kernel.num_agpr, 8
	.set dot_scale_kernel.numbered_sgpr, 20
	.set dot_scale_kernel.private_seg_size, 0
	.set dot_scale_kernel.uses_vcc, 1
	.set dot_scale_kernel.uses_flat_scratch, 0
	.set dot_scale_kernel.has_dyn_sized_stack, 0
	.set dot_scale_kernel.has_recursion, 0
	.set dot_scale_kernel.has_indirect_call, 0
	.section	.AMDGPU.csdata,"",@progbits
; Kernel info:
; codeLenInByte = 2460
; TotalNumSgprs: 26
; NumVgprs: 61
; NumAgprs: 8
; TotalNumVgprs: 72
; ScratchSize: 0
; MemoryBound: 0
; FloatMode: 240
; IeeeMode: 1
; LDSByteSize: 0 bytes/workgroup (compile time only)
; SGPRBlocks: 3
; VGPRBlocks: 8
; NumSGPRsForWavesPerEU: 26
; NumVGPRsForWavesPerEU: 72
; AccumOffset: 64
; Occupancy: 7
; WaveLimiterHint : 0
; COMPUTE_PGM_RSRC2:SCRATCH_EN: 0
; COMPUTE_PGM_RSRC2:USER_SGPR: 16
; COMPUTE_PGM_RSRC2:TRAP_HANDLER: 0
; COMPUTE_PGM_RSRC2:TGID_X_EN: 1
; COMPUTE_PGM_RSRC2:TGID_Y_EN: 0
; COMPUTE_PGM_RSRC2:TGID_Z_EN: 0
; COMPUTE_PGM_RSRC2:TIDIG_COMP_CNT: 0
; COMPUTE_PGM_RSRC3_GFX90A:ACCUM_OFFSET: 15
; COMPUTE_PGM_RSRC3_GFX90A:TG_SPLIT: 0
	.text
	.p2alignl 6, 3212836864
	.fill 256, 4, 3212836864
	.section	.AMDGPU.gpr_maximums,"",@progbits
	.set amdgpu.max_num_vgpr, 0
	.set amdgpu.max_num_agpr, 0
	.set amdgpu.max_num_sgpr, 0
	.text
	.section	".note.GNU-stack","",@progbits
	.amdgpu_metadata
---
amdhsa.kernels:
  - .agpr_count:     8
    .args:
      - .address_space:  global
        .offset:         0
        .size:           8
        .value_kind:     global_buffer
      - .offset:         8
        .size:           4
        .value_kind:     by_value
      - .address_space:  global
        .offset:         16
        .size:           8
        .value_kind:     global_buffer
      - .offset:         24
        .size:           4
        .value_kind:     by_value
      - .address_space:  global
        .offset:         32
        .size:           8
        .value_kind:     global_buffer
      - .address_space:  global
        .offset:         40
        .size:           8
        .value_kind:     global_buffer
      - .address_space:  global
        .offset:         48
        .size:           8
        .value_kind:     global_buffer
      - .address_space:  global
        .offset:         56
        .size:           8
        .value_kind:     global_buffer
    .group_segment_fixed_size: 0
    .kernarg_segment_align: 8
    .kernarg_segment_size: 64
    .max_flat_workgroup_size: 256
    .name:           dot_scale_kernel
    .private_segment_fixed_size: 0
    .sgpr_count:     26
    .sgpr_spill_count: 0
    .symbol:         dot_scale_kernel.kd
    .uses_dynamic_stack: false
    .vgpr_count:     72
    .vgpr_spill_count: 0
    .wavefront_size: 64
amdhsa.target:   amdgcn-amd-amdhsa--gfx950
amdhsa.version:
  - 1
  - 2
...

	.end_amdgpu_metadata
// -----// IR Dump Before Inliner (inline) ('builtin.module' operation) //----- //
#loc1 = loc("x_ptr")
#loc2 = loc("scale_ptr")
#loc3 = loc("mxfp_ptr")
#loc4 = loc("N")
#loc5 = loc("a")
#loc6 = loc("b")
#loc7 = loc("x")
module {
  tt.func public @mxfp_upcast_kernel(%x_ptr: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("x_ptr"), %scale_ptr: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("scale_ptr"), %mxfp_ptr: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("mxfp_ptr"), %N: i32 {tt.divisibility = 16 : i32} loc("N")) attributes {noinline = false} {
    %0 = tt.get_program_id x : i32 loc(#loc)
    %c256_i32 = arith.constant 256 : i32 loc(#loc)
    %c256_i32_0 = arith.constant 256 : i32 loc(#loc)
    %1 = arith.extsi %0 : i32 to i64 loc(#loc)
    %2 = arith.extsi %c256_i32_0 : i32 to i64 loc(#loc)
    %3 = arith.muli %1, %2 : i64 loc(#loc)
    %c2147483647_i64 = arith.constant 2147483647 : i64 loc(#loc)
    %c-2147483648_i64 = arith.constant -2147483648 : i64 loc(#loc)
    %4 = arith.cmpi sle, %3, %c2147483647_i64 : i64 loc(#loc)
    %5 = arith.cmpi sge, %3, %c-2147483648_i64 : i64 loc(#loc)
    %6 = arith.andi %4, %5 : i1 loc(#loc)
    %7 = arith.muli %0, %c256_i32_0 : i32 loc(#loc)
    %8 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32> loc(#loc)
    %9 = tt.expand_dims %8 {axis = 1 : i32} : tensor<16xi32> -> tensor<16x1xi32> loc(#loc)
    %c16_i32 = arith.constant 16 : i32 loc(#loc)
    %c16_i32_1 = arith.constant 16 : i32 loc(#loc)
    %cst = arith.constant dense<16> : tensor<16x1xi32> loc(#loc)
    %10 = arith.extsi %9 : tensor<16x1xi32> to tensor<16x1xi64> loc(#loc)
    %11 = arith.extsi %cst : tensor<16x1xi32> to tensor<16x1xi64> loc(#loc)
    %12 = arith.muli %10, %11 : tensor<16x1xi64> loc(#loc)
    %c2147483647_i64_2 = arith.constant 2147483647 : i64 loc(#loc)
    %c-2147483648_i64_3 = arith.constant -2147483648 : i64 loc(#loc)
    %cst_4 = arith.constant dense<2147483647> : tensor<16x1xi64> loc(#loc)
    %13 = arith.cmpi sle, %12, %cst_4 : tensor<16x1xi64> loc(#loc)
    %cst_5 = arith.constant dense<-2147483648> : tensor<16x1xi64> loc(#loc)
    %14 = arith.cmpi sge, %12, %cst_5 : tensor<16x1xi64> loc(#loc)
    %15 = arith.andi %13, %14 : tensor<16x1xi1> loc(#loc)
    %16 = arith.muli %9, %cst : tensor<16x1xi32> loc(#loc)
    %17 = tt.splat %7 : i32 -> tensor<16x1xi32> loc(#loc)
    %18 = arith.extsi %17 : tensor<16x1xi32> to tensor<16x1xi64> loc(#loc)
    %19 = arith.extsi %16 : tensor<16x1xi32> to tensor<16x1xi64> loc(#loc)
    %20 = arith.addi %18, %19 : tensor<16x1xi64> loc(#loc)
    %c2147483647_i64_6 = arith.constant 2147483647 : i64 loc(#loc)
    %c-2147483648_i64_7 = arith.constant -2147483648 : i64 loc(#loc)
    %cst_8 = arith.constant dense<2147483647> : tensor<16x1xi64> loc(#loc)
    %21 = arith.cmpi sle, %20, %cst_8 : tensor<16x1xi64> loc(#loc)
    %cst_9 = arith.constant dense<-2147483648> : tensor<16x1xi64> loc(#loc)
    %22 = arith.cmpi sge, %20, %cst_9 : tensor<16x1xi64> loc(#loc)
    %23 = arith.andi %21, %22 : tensor<16x1xi1> loc(#loc)
    %24 = arith.addi %17, %16 : tensor<16x1xi32> loc(#loc)
    %25 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32> loc(#loc)
    %26 = tt.expand_dims %25 {axis = 0 : i32} : tensor<16xi32> -> tensor<1x16xi32> loc(#loc)
    %27 = tt.broadcast %24 : tensor<16x1xi32> -> tensor<16x16xi32> loc(#loc)
    %28 = tt.broadcast %26 : tensor<1x16xi32> -> tensor<16x16xi32> loc(#loc)
    %29 = arith.extsi %27 : tensor<16x16xi32> to tensor<16x16xi64> loc(#loc)
    %30 = arith.extsi %28 : tensor<16x16xi32> to tensor<16x16xi64> loc(#loc)
    %31 = arith.addi %29, %30 : tensor<16x16xi64> loc(#loc)
    %c2147483647_i64_10 = arith.constant 2147483647 : i64 loc(#loc)
    %c-2147483648_i64_11 = arith.constant -2147483648 : i64 loc(#loc)
    %cst_12 = arith.constant dense<2147483647> : tensor<16x16xi64> loc(#loc)
    %32 = arith.cmpi sle, %31, %cst_12 : tensor<16x16xi64> loc(#loc)
    %cst_13 = arith.constant dense<-2147483648> : tensor<16x16xi64> loc(#loc)
    %33 = arith.cmpi sge, %31, %cst_13 : tensor<16x16xi64> loc(#loc)
    %34 = arith.andi %32, %33 : tensor<16x16xi1> loc(#loc)
    %35 = arith.addi %27, %28 : tensor<16x16xi32> loc(#loc)
    %c16_i32_14 = arith.constant 16 : i32 loc(#loc)
    %c16_i32_15 = arith.constant 16 : i32 loc(#loc)
    %36 = arith.extsi %N : i32 to i64 loc(#loc)
    %37 = arith.extsi %c16_i32_15 : i32 to i64 loc(#loc)
    %38 = arith.muli %36, %37 : i64 loc(#loc)
    %c2147483647_i64_16 = arith.constant 2147483647 : i64 loc(#loc)
    %c-2147483648_i64_17 = arith.constant -2147483648 : i64 loc(#loc)
    %39 = arith.cmpi sle, %38, %c2147483647_i64_16 : i64 loc(#loc)
    %40 = arith.cmpi sge, %38, %c-2147483648_i64_17 : i64 loc(#loc)
    %41 = arith.andi %39, %40 : i1 loc(#loc)
    %42 = arith.muli %N, %c16_i32_15 : i32 loc(#loc)
    %43 = tt.splat %42 : i32 -> tensor<16x16xi32> loc(#loc)
    %44 = arith.cmpi slt, %35, %43 : tensor<16x16xi32> loc(#loc)
    %45 = tt.splat %x_ptr : !tt.ptr<i8> -> tensor<16x16x!tt.ptr<i8>> loc(#loc)
    %46 = tt.addptr %45, %35 : tensor<16x16x!tt.ptr<i8>>, tensor<16x16xi32> loc(#loc)
    %47 = tt.load %46, %44 : tensor<16x16x!tt.ptr<i8>> loc(#loc)
    %48 = tt.get_program_id x : i32 loc(#loc)
    %c16_i32_18 = arith.constant 16 : i32 loc(#loc)
    %c16_i32_19 = arith.constant 16 : i32 loc(#loc)
    %49 = arith.extsi %48 : i32 to i64 loc(#loc)
    %50 = arith.extsi %c16_i32_19 : i32 to i64 loc(#loc)
    %51 = arith.muli %49, %50 : i64 loc(#loc)
    %c2147483647_i64_20 = arith.constant 2147483647 : i64 loc(#loc)
    %c-2147483648_i64_21 = arith.constant -2147483648 : i64 loc(#loc)
    %52 = arith.cmpi sle, %51, %c2147483647_i64_20 : i64 loc(#loc)
    %53 = arith.cmpi sge, %51, %c-2147483648_i64_21 : i64 loc(#loc)
    %54 = arith.andi %52, %53 : i1 loc(#loc)
    %55 = arith.muli %48, %c16_i32_19 : i32 loc(#loc)
    %56 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32> loc(#loc)
    %57 = tt.expand_dims %56 {axis = 1 : i32} : tensor<16xi32> -> tensor<16x1xi32> loc(#loc)
    %58 = tt.splat %55 : i32 -> tensor<16x1xi32> loc(#loc)
    %59 = arith.extsi %58 : tensor<16x1xi32> to tensor<16x1xi64> loc(#loc)
    %60 = arith.extsi %57 : tensor<16x1xi32> to tensor<16x1xi64> loc(#loc)
    %61 = arith.addi %59, %60 : tensor<16x1xi64> loc(#loc)
    %c2147483647_i64_22 = arith.constant 2147483647 : i64 loc(#loc)
    %c-2147483648_i64_23 = arith.constant -2147483648 : i64 loc(#loc)
    %cst_24 = arith.constant dense<2147483647> : tensor<16x1xi64> loc(#loc)
    %62 = arith.cmpi sle, %61, %cst_24 : tensor<16x1xi64> loc(#loc)
    %cst_25 = arith.constant dense<-2147483648> : tensor<16x1xi64> loc(#loc)
    %63 = arith.cmpi sge, %61, %cst_25 : tensor<16x1xi64> loc(#loc)
    %64 = arith.andi %62, %63 : tensor<16x1xi1> loc(#loc)
    %65 = arith.addi %58, %57 : tensor<16x1xi32> loc(#loc)
    %66 = tt.splat %N : i32 -> tensor<16x1xi32> loc(#loc)
    %67 = arith.cmpi slt, %65, %66 : tensor<16x1xi32> loc(#loc)
    %68 = tt.splat %scale_ptr : !tt.ptr<i8> -> tensor<16x1x!tt.ptr<i8>> loc(#loc)
    %69 = tt.addptr %68, %65 : tensor<16x1x!tt.ptr<i8>>, tensor<16x1xi32> loc(#loc)
    %70 = tt.load %69, %67 : tensor<16x1x!tt.ptr<i8>> loc(#loc)
    %71 = arith.extui %70 : tensor<16x1xi8> to tensor<16x1xi16> loc(#loc)
    %c7_i32 = arith.constant 7 : i32 loc(#loc)
    %c7_i16 = arith.constant 7 : i16 loc(#loc)
    %cst_26 = arith.constant dense<7> : tensor<16x1xi16> loc(#loc)
    %72 = arith.shli %71, %cst_26 : tensor<16x1xi16> loc(#loc)
    %73 = tt.bitcast %72 : tensor<16x1xi16> -> tensor<16x1xbf16> loc(#loc)
    %c7_i32_27 = arith.constant 7 : i32 loc(#loc)
    %c7_i8 = arith.constant 7 : i8 loc(#loc)
    %cst_28 = arith.constant dense<7> : tensor<16x16xi8> loc(#loc)
    %74 = arith.andi %47, %cst_28 : tensor<16x16xi8> loc(#loc)
    %c112_i32 = arith.constant 112 : i32 loc(#loc)
    %c112_i8 = arith.constant 112 : i8 loc(#loc)
    %cst_29 = arith.constant dense<112> : tensor<16x16xi8> loc(#loc)
    %75 = arith.andi %47, %cst_29 : tensor<16x16xi8> loc(#loc)
    %76 = arith.extui %74 : tensor<16x16xi8> to tensor<16x16xi16> loc(#loc)
    %c6_i32 = arith.constant 6 : i32 loc(#loc)
    %c6_i16 = arith.constant 6 : i16 loc(#loc)
    %cst_30 = arith.constant dense<6> : tensor<16x16xi16> loc(#loc)
    %77 = arith.shli %76, %cst_30 : tensor<16x16xi16> loc(#loc)
    %c8_i32 = arith.constant 8 : i32 loc(#loc)
    %c8_i8 = arith.constant 8 : i8 loc(#loc)
    %cst_31 = arith.constant dense<8> : tensor<16x16xi8> loc(#loc)
    %78 = arith.andi %47, %cst_31 : tensor<16x16xi8> loc(#loc)
    %79 = arith.extui %78 : tensor<16x16xi8> to tensor<16x16xi16> loc(#loc)
    %c12_i32 = arith.constant 12 : i32 loc(#loc)
    %c12_i16 = arith.constant 12 : i16 loc(#loc)
    %cst_32 = arith.constant dense<12> : tensor<16x16xi16> loc(#loc)
    %80 = arith.shli %79, %cst_32 : tensor<16x16xi16> loc(#loc)
    %81 = arith.ori %77, %80 : tensor<16x16xi16> loc(#loc)
    %82 = arith.extui %75 : tensor<16x16xi8> to tensor<16x16xi16> loc(#loc)
    %c2_i32 = arith.constant 2 : i32 loc(#loc)
    %c2_i16 = arith.constant 2 : i16 loc(#loc)
    %cst_33 = arith.constant dense<2> : tensor<16x16xi16> loc(#loc)
    %83 = arith.shli %82, %cst_33 : tensor<16x16xi16> loc(#loc)
    %c128_i32 = arith.constant 128 : i32 loc(#loc)
    %c-128_i8 = arith.constant -128 : i8 loc(#loc)
    %cst_34 = arith.constant dense<-128> : tensor<16x16xi8> loc(#loc)
    %84 = arith.andi %47, %cst_34 : tensor<16x16xi8> loc(#loc)
    %85 = arith.extui %84 : tensor<16x16xi8> to tensor<16x16xi16> loc(#loc)
    %c8_i32_35 = arith.constant 8 : i32 loc(#loc)
    %c8_i16 = arith.constant 8 : i16 loc(#loc)
    %cst_36 = arith.constant dense<8> : tensor<16x16xi16> loc(#loc)
    %86 = arith.shli %85, %cst_36 : tensor<16x16xi16> loc(#loc)
    %87 = arith.ori %83, %86 : tensor<16x16xi16> loc(#loc)
    %c6_i32_37 = arith.constant 6 : i32 loc(#loc)
    %c6_i8 = arith.constant 6 : i8 loc(#loc)
    %cst_38 = arith.constant dense<6> : tensor<16x16xi8> loc(#loc)
    %88 = arith.andi %74, %cst_38 : tensor<16x16xi8> loc(#loc)
    %c0_i32 = arith.constant 0 : i32 loc(#loc)
    %89 = arith.extui %88 : tensor<16x16xi8> to tensor<16x16xi32> loc(#loc)
    %cst_39 = arith.constant dense<0> : tensor<16x16xi32> loc(#loc)
    %90 = arith.cmpi ne, %89, %cst_39 : tensor<16x16xi32> loc(#loc)
    %c16128_i32 = arith.constant 16128 : i32 loc(#loc)
    %c16128_i16 = arith.constant 16128 : i16 loc(#loc)
    %cst_40 = arith.constant dense<16128> : tensor<16x16xi16> loc(#loc)
    %91 = arith.extui %81 : tensor<16x16xi16> to tensor<16x16xi64> loc(#loc)
    %92 = arith.extui %cst_40 : tensor<16x16xi16> to tensor<16x16xi64> loc(#loc)
    %93 = arith.addi %91, %92 : tensor<16x16xi64> loc(#loc)
    %c65535_i64 = arith.constant 65535 : i64 loc(#loc)
    %c0_i64 = arith.constant 0 : i64 loc(#loc)
    %cst_41 = arith.constant dense<65535> : tensor<16x16xi64> loc(#loc)
    %94 = arith.cmpi sle, %93, %cst_41 : tensor<16x16xi64> loc(#loc)
    %cst_42 = arith.constant dense<0> : tensor<16x16xi64> loc(#loc)
    %95 = arith.cmpi sge, %93, %cst_42 : tensor<16x16xi64> loc(#loc)
    %96 = arith.andi %94, %95 : tensor<16x16xi1> loc(#loc)
    %97 = arith.addi %81, %cst_40 : tensor<16x16xi16> loc(#loc)
    %98 = arith.select %90, %97, %81 : tensor<16x16xi1>, tensor<16x16xi16> loc(#loc)
    %c96_i32 = arith.constant 96 : i32 loc(#loc)
    %c96_i8 = arith.constant 96 : i8 loc(#loc)
    %cst_43 = arith.constant dense<96> : tensor<16x16xi8> loc(#loc)
    %99 = arith.andi %75, %cst_43 : tensor<16x16xi8> loc(#loc)
    %c0_i32_44 = arith.constant 0 : i32 loc(#loc)
    %100 = arith.extui %99 : tensor<16x16xi8> to tensor<16x16xi32> loc(#loc)
    %cst_45 = arith.constant dense<0> : tensor<16x16xi32> loc(#loc)
    %101 = arith.cmpi ne, %100, %cst_45 : tensor<16x16xi32> loc(#loc)
    %c16128_i32_46 = arith.constant 16128 : i32 loc(#loc)
    %c16128_i16_47 = arith.constant 16128 : i16 loc(#loc)
    %cst_48 = arith.constant dense<16128> : tensor<16x16xi16> loc(#loc)
    %102 = arith.extui %87 : tensor<16x16xi16> to tensor<16x16xi64> loc(#loc)
    %103 = arith.extui %cst_48 : tensor<16x16xi16> to tensor<16x16xi64> loc(#loc)
    %104 = arith.addi %102, %103 : tensor<16x16xi64> loc(#loc)
    %c65535_i64_49 = arith.constant 65535 : i64 loc(#loc)
    %c0_i64_50 = arith.constant 0 : i64 loc(#loc)
    %cst_51 = arith.constant dense<65535> : tensor<16x16xi64> loc(#loc)
    %105 = arith.cmpi sle, %104, %cst_51 : tensor<16x16xi64> loc(#loc)
    %cst_52 = arith.constant dense<0> : tensor<16x16xi64> loc(#loc)
    %106 = arith.cmpi sge, %104, %cst_52 : tensor<16x16xi64> loc(#loc)
    %107 = arith.andi %105, %106 : tensor<16x16xi1> loc(#loc)
    %108 = arith.addi %87, %cst_48 : tensor<16x16xi16> loc(#loc)
    %109 = arith.select %101, %108, %87 : tensor<16x16xi1>, tensor<16x16xi16> loc(#loc)
    %c1_i32 = arith.constant 1 : i32 loc(#loc)
    %110 = arith.extui %74 : tensor<16x16xi8> to tensor<16x16xi32> loc(#loc)
    %cst_53 = arith.constant dense<1> : tensor<16x16xi32> loc(#loc)
    %111 = arith.cmpi eq, %110, %cst_53 : tensor<16x16xi32> loc(#loc)
    %c32768_i32 = arith.constant 32768 : i32 loc(#loc)
    %c-32768_i16 = arith.constant -32768 : i16 loc(#loc)
    %cst_54 = arith.constant dense<-32768> : tensor<16x16xi16> loc(#loc)
    %112 = arith.andi %98, %cst_54 : tensor<16x16xi16> loc(#loc)
    %c16128_i32_55 = arith.constant 16128 : i32 loc(#loc)
    %c16128_i16_56 = arith.constant 16128 : i16 loc(#loc)
    %cst_57 = arith.constant dense<16128> : tensor<16x16xi16> loc(#loc)
    %113 = arith.ori %cst_57, %112 : tensor<16x16xi16> loc(#loc)
    %114 = arith.select %111, %113, %98 : tensor<16x16xi1>, tensor<16x16xi16> loc(#loc)
    %c16_i32_58 = arith.constant 16 : i32 loc(#loc)
    %115 = arith.extui %75 : tensor<16x16xi8> to tensor<16x16xi32> loc(#loc)
    %cst_59 = arith.constant dense<16> : tensor<16x16xi32> loc(#loc)
    %116 = arith.cmpi eq, %115, %cst_59 : tensor<16x16xi32> loc(#loc)
    %c32768_i32_60 = arith.constant 32768 : i32 loc(#loc)
    %c-32768_i16_61 = arith.constant -32768 : i16 loc(#loc)
    %cst_62 = arith.constant dense<-32768> : tensor<16x16xi16> loc(#loc)
    %117 = arith.andi %109, %cst_62 : tensor<16x16xi16> loc(#loc)
    %c16128_i32_63 = arith.constant 16128 : i32 loc(#loc)
    %c16128_i16_64 = arith.constant 16128 : i16 loc(#loc)
    %cst_65 = arith.constant dense<16128> : tensor<16x16xi16> loc(#loc)
    %118 = arith.ori %cst_65, %117 : tensor<16x16xi16> loc(#loc)
    %119 = arith.select %116, %118, %109 : tensor<16x16xi1>, tensor<16x16xi16> loc(#loc)
    %120 = tt.call @triton.language.standard.interleave__u16S16_16S_u16S16_16S__(%114, %119) : (tensor<16x16xi16>, tensor<16x16xi16>) -> tensor<16x32xi16> loc(#loc)
    %121 = tt.bitcast %120 : tensor<16x32xi16> -> tensor<16x32xbf16> loc(#loc)
    %122 = tt.broadcast %73 : tensor<16x1xbf16> -> tensor<16x32xbf16> loc(#loc)
    %123 = arith.mulf %121, %122 : tensor<16x32xbf16> loc(#loc)
    %c255_i32 = arith.constant 255 : i32 loc(#loc)
    %124 = arith.extui %70 : tensor<16x1xi8> to tensor<16x1xi32> loc(#loc)
    %cst_66 = arith.constant dense<255> : tensor<16x1xi32> loc(#loc)
    %125 = arith.cmpi eq, %124, %cst_66 : tensor<16x1xi32> loc(#loc)
    %cst_67 = arith.constant 0x7FC00000 : f32 loc(#loc)
    %cst_68 = arith.constant 0x7FC0 : bf16 loc(#loc)
    %cst_69 = arith.constant dense<0x7FC0> : tensor<16x32xbf16> loc(#loc)
    %126 = tt.broadcast %125 : tensor<16x1xi1> -> tensor<16x32xi1> loc(#loc)
    %127 = arith.select %126, %cst_69, %123 : tensor<16x32xi1>, tensor<16x32xbf16> loc(#loc)
    %128 = tt.get_program_id x : i32 loc(#loc)
    %c512_i32 = arith.constant 512 : i32 loc(#loc)
    %c512_i32_70 = arith.constant 512 : i32 loc(#loc)
    %129 = arith.extsi %128 : i32 to i64 loc(#loc)
    %130 = arith.extsi %c512_i32_70 : i32 to i64 loc(#loc)
    %131 = arith.muli %129, %130 : i64 loc(#loc)
    %c2147483647_i64_71 = arith.constant 2147483647 : i64 loc(#loc)
    %c-2147483648_i64_72 = arith.constant -2147483648 : i64 loc(#loc)
    %132 = arith.cmpi sle, %131, %c2147483647_i64_71 : i64 loc(#loc)
    %133 = arith.cmpi sge, %131, %c-2147483648_i64_72 : i64 loc(#loc)
    %134 = arith.andi %132, %133 : i1 loc(#loc)
    %135 = arith.muli %128, %c512_i32_70 : i32 loc(#loc)
    %136 = tt.make_range {end = 512 : i32, start = 0 : i32} : tensor<512xi32> loc(#loc)
    %137 = tt.splat %135 : i32 -> tensor<512xi32> loc(#loc)
    %138 = arith.extsi %137 : tensor<512xi32> to tensor<512xi64> loc(#loc)
    %139 = arith.extsi %136 : tensor<512xi32> to tensor<512xi64> loc(#loc)
    %140 = arith.addi %138, %139 : tensor<512xi64> loc(#loc)
    %c2147483647_i64_73 = arith.constant 2147483647 : i64 loc(#loc)
    %c-2147483648_i64_74 = arith.constant -2147483648 : i64 loc(#loc)
    %cst_75 = arith.constant dense<2147483647> : tensor<512xi64> loc(#loc)
    %141 = arith.cmpi sle, %140, %cst_75 : tensor<512xi64> loc(#loc)
    %cst_76 = arith.constant dense<-2147483648> : tensor<512xi64> loc(#loc)
    %142 = arith.cmpi sge, %140, %cst_76 : tensor<512xi64> loc(#loc)
    %143 = arith.andi %141, %142 : tensor<512xi1> loc(#loc)
    %144 = arith.addi %137, %136 : tensor<512xi32> loc(#loc)
    %c32_i32 = arith.constant 32 : i32 loc(#loc)
    %c32_i32_77 = arith.constant 32 : i32 loc(#loc)
    %145 = arith.extsi %N : i32 to i64 loc(#loc)
    %146 = arith.extsi %c32_i32_77 : i32 to i64 loc(#loc)
    %147 = arith.muli %145, %146 : i64 loc(#loc)
    %c2147483647_i64_78 = arith.constant 2147483647 : i64 loc(#loc)
    %c-2147483648_i64_79 = arith.constant -2147483648 : i64 loc(#loc)
    %148 = arith.cmpi sle, %147, %c2147483647_i64_78 : i64 loc(#loc)
    %149 = arith.cmpi sge, %147, %c-2147483648_i64_79 : i64 loc(#loc)
    %150 = arith.andi %148, %149 : i1 loc(#loc)
    %151 = arith.muli %N, %c32_i32_77 : i32 loc(#loc)
    %152 = tt.splat %151 : i32 -> tensor<512xi32> loc(#loc)
    %153 = arith.cmpi slt, %144, %152 : tensor<512xi32> loc(#loc)
    %154 = tt.splat %mxfp_ptr : !tt.ptr<bf16> -> tensor<512x!tt.ptr<bf16>> loc(#loc)
    %155 = tt.addptr %154, %144 : tensor<512x!tt.ptr<bf16>>, tensor<512xi32> loc(#loc)
    %156 = tt.call @"triton.language.standard.ravel__bf16S16_32S__(1,)cconstexpr_False_"(%127) : (tensor<16x32xbf16>) -> tensor<512xbf16> loc(#loc)
    tt.store %155, %156, %153 : tensor<512x!tt.ptr<bf16>> loc(#loc)
    tt.return loc(#loc)
  } loc(#loc)
  tt.func private @triton.language.standard.interleave__u16S16_16S_u16S16_16S__(%a: tensor<16x16xi16> loc("a"), %b: tensor<16x16xi16> loc("b")) -> tensor<16x32xi16> attributes {noinline = false} {
    %0 = tt.join %a, %b : tensor<16x16xi16> -> tensor<16x16x2xi16> loc(#loc)
    %1 = tt.reshape %0 : tensor<16x16x2xi16> -> tensor<16x32xi16> loc(#loc)
    tt.return %1 : tensor<16x32xi16> loc(#loc)
  ^bb1:  // no predecessors
    %2 = ub.poison : tensor<16x32xi16> loc(#loc)
    tt.return %2 : tensor<16x32xi16> loc(#loc)
  } loc(#loc)
  tt.func private @"triton.language.standard.ravel__bf16S16_32S__(1,)cconstexpr_False_"(%x: tensor<16x32xbf16> loc("x")) -> tensor<512xbf16> attributes {noinline = false} {
    %0 = tt.reshape %x : tensor<16x32xbf16> -> tensor<512xbf16> loc(#loc)
    tt.return %0 : tensor<512xbf16> loc(#loc)
  ^bb1:  // no predecessors
    %1 = ub.poison : tensor<512xbf16> loc(#loc)
    tt.return %1 : tensor<512xbf16> loc(#loc)
  } loc(#loc)
} loc(#loc)
#loc = loc(unknown)


// -----// IR Dump Before Canonicalizer (canonicalize) ('tt.func' operation: @triton.language.standard.interleave__u16S16_16S_u16S16_16S__) //----- //
#loc1 = loc("x_ptr")
#loc2 = loc("scale_ptr")
#loc3 = loc("mxfp_ptr")
#loc4 = loc("N")
#loc5 = loc("a")
#loc6 = loc("b")
#loc7 = loc("x")
module {
  tt.func public @mxfp_upcast_kernel(%x_ptr: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("x_ptr"), %scale_ptr: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("scale_ptr"), %mxfp_ptr: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("mxfp_ptr"), %N: i32 {tt.divisibility = 16 : i32} loc("N")) attributes {noinline = false} {
    %0 = tt.get_program_id x : i32 loc(#loc)
    %c256_i32 = arith.constant 256 : i32 loc(#loc)
    %c256_i32_0 = arith.constant 256 : i32 loc(#loc)
    %1 = arith.extsi %0 : i32 to i64 loc(#loc)
    %2 = arith.extsi %c256_i32_0 : i32 to i64 loc(#loc)
    %3 = arith.muli %1, %2 : i64 loc(#loc)
    %c2147483647_i64 = arith.constant 2147483647 : i64 loc(#loc)
    %c-2147483648_i64 = arith.constant -2147483648 : i64 loc(#loc)
    %4 = arith.cmpi sle, %3, %c2147483647_i64 : i64 loc(#loc)
    %5 = arith.cmpi sge, %3, %c-2147483648_i64 : i64 loc(#loc)
    %6 = arith.andi %4, %5 : i1 loc(#loc)
    %7 = arith.muli %0, %c256_i32_0 : i32 loc(#loc)
    %8 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32> loc(#loc)
    %9 = tt.expand_dims %8 {axis = 1 : i32} : tensor<16xi32> -> tensor<16x1xi32> loc(#loc)
    %c16_i32 = arith.constant 16 : i32 loc(#loc)
    %c16_i32_1 = arith.constant 16 : i32 loc(#loc)
    %cst = arith.constant dense<16> : tensor<16x1xi32> loc(#loc)
    %10 = arith.extsi %9 : tensor<16x1xi32> to tensor<16x1xi64> loc(#loc)
    %11 = arith.extsi %cst : tensor<16x1xi32> to tensor<16x1xi64> loc(#loc)
    %12 = arith.muli %10, %11 : tensor<16x1xi64> loc(#loc)
    %c2147483647_i64_2 = arith.constant 2147483647 : i64 loc(#loc)
    %c-2147483648_i64_3 = arith.constant -2147483648 : i64 loc(#loc)
    %cst_4 = arith.constant dense<2147483647> : tensor<16x1xi64> loc(#loc)
    %13 = arith.cmpi sle, %12, %cst_4 : tensor<16x1xi64> loc(#loc)
    %cst_5 = arith.constant dense<-2147483648> : tensor<16x1xi64> loc(#loc)
    %14 = arith.cmpi sge, %12, %cst_5 : tensor<16x1xi64> loc(#loc)
    %15 = arith.andi %13, %14 : tensor<16x1xi1> loc(#loc)
    %16 = arith.muli %9, %cst : tensor<16x1xi32> loc(#loc)
    %17 = tt.splat %7 : i32 -> tensor<16x1xi32> loc(#loc)
    %18 = arith.extsi %17 : tensor<16x1xi32> to tensor<16x1xi64> loc(#loc)
    %19 = arith.extsi %16 : tensor<16x1xi32> to tensor<16x1xi64> loc(#loc)
    %20 = arith.addi %18, %19 : tensor<16x1xi64> loc(#loc)
    %c2147483647_i64_6 = arith.constant 2147483647 : i64 loc(#loc)
    %c-2147483648_i64_7 = arith.constant -2147483648 : i64 loc(#loc)
    %cst_8 = arith.constant dense<2147483647> : tensor<16x1xi64> loc(#loc)
    %21 = arith.cmpi sle, %20, %cst_8 : tensor<16x1xi64> loc(#loc)
    %cst_9 = arith.constant dense<-2147483648> : tensor<16x1xi64> loc(#loc)
    %22 = arith.cmpi sge, %20, %cst_9 : tensor<16x1xi64> loc(#loc)
    %23 = arith.andi %21, %22 : tensor<16x1xi1> loc(#loc)
    %24 = arith.addi %17, %16 : tensor<16x1xi32> loc(#loc)
    %25 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32> loc(#loc)
    %26 = tt.expand_dims %25 {axis = 0 : i32} : tensor<16xi32> -> tensor<1x16xi32> loc(#loc)
    %27 = tt.broadcast %24 : tensor<16x1xi32> -> tensor<16x16xi32> loc(#loc)
    %28 = tt.broadcast %26 : tensor<1x16xi32> -> tensor<16x16xi32> loc(#loc)
    %29 = arith.extsi %27 : tensor<16x16xi32> to tensor<16x16xi64> loc(#loc)
    %30 = arith.extsi %28 : tensor<16x16xi32> to tensor<16x16xi64> loc(#loc)
    %31 = arith.addi %29, %30 : tensor<16x16xi64> loc(#loc)
    %c2147483647_i64_10 = arith.constant 2147483647 : i64 loc(#loc)
    %c-2147483648_i64_11 = arith.constant -2147483648 : i64 loc(#loc)
    %cst_12 = arith.constant dense<2147483647> : tensor<16x16xi64> loc(#loc)
    %32 = arith.cmpi sle, %31, %cst_12 : tensor<16x16xi64> loc(#loc)
    %cst_13 = arith.constant dense<-2147483648> : tensor<16x16xi64> loc(#loc)
    %33 = arith.cmpi sge, %31, %cst_13 : tensor<16x16xi64> loc(#loc)
    %34 = arith.andi %32, %33 : tensor<16x16xi1> loc(#loc)
    %35 = arith.addi %27, %28 : tensor<16x16xi32> loc(#loc)
    %c16_i32_14 = arith.constant 16 : i32 loc(#loc)
    %c16_i32_15 = arith.constant 16 : i32 loc(#loc)
    %36 = arith.extsi %N : i32 to i64 loc(#loc)
    %37 = arith.extsi %c16_i32_15 : i32 to i64 loc(#loc)
    %38 = arith.muli %36, %37 : i64 loc(#loc)
    %c2147483647_i64_16 = arith.constant 2147483647 : i64 loc(#loc)
    %c-2147483648_i64_17 = arith.constant -2147483648 : i64 loc(#loc)
    %39 = arith.cmpi sle, %38, %c2147483647_i64_16 : i64 loc(#loc)
    %40 = arith.cmpi sge, %38, %c-2147483648_i64_17 : i64 loc(#loc)
    %41 = arith.andi %39, %40 : i1 loc(#loc)
    %42 = arith.muli %N, %c16_i32_15 : i32 loc(#loc)
    %43 = tt.splat %42 : i32 -> tensor<16x16xi32> loc(#loc)
    %44 = arith.cmpi slt, %35, %43 : tensor<16x16xi32> loc(#loc)
    %45 = tt.splat %x_ptr : !tt.ptr<i8> -> tensor<16x16x!tt.ptr<i8>> loc(#loc)
    %46 = tt.addptr %45, %35 : tensor<16x16x!tt.ptr<i8>>, tensor<16x16xi32> loc(#loc)
    %47 = tt.load %46, %44 : tensor<16x16x!tt.ptr<i8>> loc(#loc)
    %48 = tt.get_program_id x : i32 loc(#loc)
    %c16_i32_18 = arith.constant 16 : i32 loc(#loc)
    %c16_i32_19 = arith.constant 16 : i32 loc(#loc)
    %49 = arith.extsi %48 : i32 to i64 loc(#loc)
    %50 = arith.extsi %c16_i32_19 : i32 to i64 loc(#loc)
    %51 = arith.muli %49, %50 : i64 loc(#loc)
    %c2147483647_i64_20 = arith.constant 2147483647 : i64 loc(#loc)
    %c-2147483648_i64_21 = arith.constant -2147483648 : i64 loc(#loc)
    %52 = arith.cmpi sle, %51, %c2147483647_i64_20 : i64 loc(#loc)
    %53 = arith.cmpi sge, %51, %c-2147483648_i64_21 : i64 loc(#loc)
    %54 = arith.andi %52, %53 : i1 loc(#loc)
    %55 = arith.muli %48, %c16_i32_19 : i32 loc(#loc)
    %56 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32> loc(#loc)
    %57 = tt.expand_dims %56 {axis = 1 : i32} : tensor<16xi32> -> tensor<16x1xi32> loc(#loc)
    %58 = tt.splat %55 : i32 -> tensor<16x1xi32> loc(#loc)
    %59 = arith.extsi %58 : tensor<16x1xi32> to tensor<16x1xi64> loc(#loc)
    %60 = arith.extsi %57 : tensor<16x1xi32> to tensor<16x1xi64> loc(#loc)
    %61 = arith.addi %59, %60 : tensor<16x1xi64> loc(#loc)
    %c2147483647_i64_22 = arith.constant 2147483647 : i64 loc(#loc)
    %c-2147483648_i64_23 = arith.constant -2147483648 : i64 loc(#loc)
    %cst_24 = arith.constant dense<2147483647> : tensor<16x1xi64> loc(#loc)
    %62 = arith.cmpi sle, %61, %cst_24 : tensor<16x1xi64> loc(#loc)
    %cst_25 = arith.constant dense<-2147483648> : tensor<16x1xi64> loc(#loc)
    %63 = arith.cmpi sge, %61, %cst_25 : tensor<16x1xi64> loc(#loc)
    %64 = arith.andi %62, %63 : tensor<16x1xi1> loc(#loc)
    %65 = arith.addi %58, %57 : tensor<16x1xi32> loc(#loc)
    %66 = tt.splat %N : i32 -> tensor<16x1xi32> loc(#loc)
    %67 = arith.cmpi slt, %65, %66 : tensor<16x1xi32> loc(#loc)
    %68 = tt.splat %scale_ptr : !tt.ptr<i8> -> tensor<16x1x!tt.ptr<i8>> loc(#loc)
    %69 = tt.addptr %68, %65 : tensor<16x1x!tt.ptr<i8>>, tensor<16x1xi32> loc(#loc)
    %70 = tt.load %69, %67 : tensor<16x1x!tt.ptr<i8>> loc(#loc)
    %71 = arith.extui %70 : tensor<16x1xi8> to tensor<16x1xi16> loc(#loc)
    %c7_i32 = arith.constant 7 : i32 loc(#loc)
    %c7_i16 = arith.constant 7 : i16 loc(#loc)
    %cst_26 = arith.constant dense<7> : tensor<16x1xi16> loc(#loc)
    %72 = arith.shli %71, %cst_26 : tensor<16x1xi16> loc(#loc)
    %73 = tt.bitcast %72 : tensor<16x1xi16> -> tensor<16x1xbf16> loc(#loc)
    %c7_i32_27 = arith.constant 7 : i32 loc(#loc)
    %c7_i8 = arith.constant 7 : i8 loc(#loc)
    %cst_28 = arith.constant dense<7> : tensor<16x16xi8> loc(#loc)
    %74 = arith.andi %47, %cst_28 : tensor<16x16xi8> loc(#loc)
    %c112_i32 = arith.constant 112 : i32 loc(#loc)
    %c112_i8 = arith.constant 112 : i8 loc(#loc)
    %cst_29 = arith.constant dense<112> : tensor<16x16xi8> loc(#loc)
    %75 = arith.andi %47, %cst_29 : tensor<16x16xi8> loc(#loc)
    %76 = arith.extui %74 : tensor<16x16xi8> to tensor<16x16xi16> loc(#loc)
    %c6_i32 = arith.constant 6 : i32 loc(#loc)
    %c6_i16 = arith.constant 6 : i16 loc(#loc)
    %cst_30 = arith.constant dense<6> : tensor<16x16xi16> loc(#loc)
    %77 = arith.shli %76, %cst_30 : tensor<16x16xi16> loc(#loc)
    %c8_i32 = arith.constant 8 : i32 loc(#loc)
    %c8_i8 = arith.constant 8 : i8 loc(#loc)
    %cst_31 = arith.constant dense<8> : tensor<16x16xi8> loc(#loc)
    %78 = arith.andi %47, %cst_31 : tensor<16x16xi8> loc(#loc)
    %79 = arith.extui %78 : tensor<16x16xi8> to tensor<16x16xi16> loc(#loc)
    %c12_i32 = arith.constant 12 : i32 loc(#loc)
    %c12_i16 = arith.constant 12 : i16 loc(#loc)
    %cst_32 = arith.constant dense<12> : tensor<16x16xi16> loc(#loc)
    %80 = arith.shli %79, %cst_32 : tensor<16x16xi16> loc(#loc)
    %81 = arith.ori %77, %80 : tensor<16x16xi16> loc(#loc)
    %82 = arith.extui %75 : tensor<16x16xi8> to tensor<16x16xi16> loc(#loc)
    %c2_i32 = arith.constant 2 : i32 loc(#loc)
    %c2_i16 = arith.constant 2 : i16 loc(#loc)
    %cst_33 = arith.constant dense<2> : tensor<16x16xi16> loc(#loc)
    %83 = arith.shli %82, %cst_33 : tensor<16x16xi16> loc(#loc)
    %c128_i32 = arith.constant 128 : i32 loc(#loc)
    %c-128_i8 = arith.constant -128 : i8 loc(#loc)
    %cst_34 = arith.constant dense<-128> : tensor<16x16xi8> loc(#loc)
    %84 = arith.andi %47, %cst_34 : tensor<16x16xi8> loc(#loc)
    %85 = arith.extui %84 : tensor<16x16xi8> to tensor<16x16xi16> loc(#loc)
    %c8_i32_35 = arith.constant 8 : i32 loc(#loc)
    %c8_i16 = arith.constant 8 : i16 loc(#loc)
    %cst_36 = arith.constant dense<8> : tensor<16x16xi16> loc(#loc)
    %86 = arith.shli %85, %cst_36 : tensor<16x16xi16> loc(#loc)
    %87 = arith.ori %83, %86 : tensor<16x16xi16> loc(#loc)
    %c6_i32_37 = arith.constant 6 : i32 loc(#loc)
    %c6_i8 = arith.constant 6 : i8 loc(#loc)
    %cst_38 = arith.constant dense<6> : tensor<16x16xi8> loc(#loc)
    %88 = arith.andi %74, %cst_38 : tensor<16x16xi8> loc(#loc)
    %c0_i32 = arith.constant 0 : i32 loc(#loc)
    %89 = arith.extui %88 : tensor<16x16xi8> to tensor<16x16xi32> loc(#loc)
    %cst_39 = arith.constant dense<0> : tensor<16x16xi32> loc(#loc)
    %90 = arith.cmpi ne, %89, %cst_39 : tensor<16x16xi32> loc(#loc)
    %c16128_i32 = arith.constant 16128 : i32 loc(#loc)
    %c16128_i16 = arith.constant 16128 : i16 loc(#loc)
    %cst_40 = arith.constant dense<16128> : tensor<16x16xi16> loc(#loc)
    %91 = arith.extui %81 : tensor<16x16xi16> to tensor<16x16xi64> loc(#loc)
    %92 = arith.extui %cst_40 : tensor<16x16xi16> to tensor<16x16xi64> loc(#loc)
    %93 = arith.addi %91, %92 : tensor<16x16xi64> loc(#loc)
    %c65535_i64 = arith.constant 65535 : i64 loc(#loc)
    %c0_i64 = arith.constant 0 : i64 loc(#loc)
    %cst_41 = arith.constant dense<65535> : tensor<16x16xi64> loc(#loc)
    %94 = arith.cmpi sle, %93, %cst_41 : tensor<16x16xi64> loc(#loc)
    %cst_42 = arith.constant dense<0> : tensor<16x16xi64> loc(#loc)
    %95 = arith.cmpi sge, %93, %cst_42 : tensor<16x16xi64> loc(#loc)
    %96 = arith.andi %94, %95 : tensor<16x16xi1> loc(#loc)
    %97 = arith.addi %81, %cst_40 : tensor<16x16xi16> loc(#loc)
    %98 = arith.select %90, %97, %81 : tensor<16x16xi1>, tensor<16x16xi16> loc(#loc)
    %c96_i32 = arith.constant 96 : i32 loc(#loc)
    %c96_i8 = arith.constant 96 : i8 loc(#loc)
    %cst_43 = arith.constant dense<96> : tensor<16x16xi8> loc(#loc)
    %99 = arith.andi %75, %cst_43 : tensor<16x16xi8> loc(#loc)
    %c0_i32_44 = arith.constant 0 : i32 loc(#loc)
    %100 = arith.extui %99 : tensor<16x16xi8> to tensor<16x16xi32> loc(#loc)
    %cst_45 = arith.constant dense<0> : tensor<16x16xi32> loc(#loc)
    %101 = arith.cmpi ne, %100, %cst_45 : tensor<16x16xi32> loc(#loc)
    %c16128_i32_46 = arith.constant 16128 : i32 loc(#loc)
    %c16128_i16_47 = arith.constant 16128 : i16 loc(#loc)
    %cst_48 = arith.constant dense<16128> : tensor<16x16xi16> loc(#loc)
    %102 = arith.extui %87 : tensor<16x16xi16> to tensor<16x16xi64> loc(#loc)
    %103 = arith.extui %cst_48 : tensor<16x16xi16> to tensor<16x16xi64> loc(#loc)
    %104 = arith.addi %102, %103 : tensor<16x16xi64> loc(#loc)
    %c65535_i64_49 = arith.constant 65535 : i64 loc(#loc)
    %c0_i64_50 = arith.constant 0 : i64 loc(#loc)
    %cst_51 = arith.constant dense<65535> : tensor<16x16xi64> loc(#loc)
    %105 = arith.cmpi sle, %104, %cst_51 : tensor<16x16xi64> loc(#loc)
    %cst_52 = arith.constant dense<0> : tensor<16x16xi64> loc(#loc)
    %106 = arith.cmpi sge, %104, %cst_52 : tensor<16x16xi64> loc(#loc)
    %107 = arith.andi %105, %106 : tensor<16x16xi1> loc(#loc)
    %108 = arith.addi %87, %cst_48 : tensor<16x16xi16> loc(#loc)
    %109 = arith.select %101, %108, %87 : tensor<16x16xi1>, tensor<16x16xi16> loc(#loc)
    %c1_i32 = arith.constant 1 : i32 loc(#loc)
    %110 = arith.extui %74 : tensor<16x16xi8> to tensor<16x16xi32> loc(#loc)
    %cst_53 = arith.constant dense<1> : tensor<16x16xi32> loc(#loc)
    %111 = arith.cmpi eq, %110, %cst_53 : tensor<16x16xi32> loc(#loc)
    %c32768_i32 = arith.constant 32768 : i32 loc(#loc)
    %c-32768_i16 = arith.constant -32768 : i16 loc(#loc)
    %cst_54 = arith.constant dense<-32768> : tensor<16x16xi16> loc(#loc)
    %112 = arith.andi %98, %cst_54 : tensor<16x16xi16> loc(#loc)
    %c16128_i32_55 = arith.constant 16128 : i32 loc(#loc)
    %c16128_i16_56 = arith.constant 16128 : i16 loc(#loc)
    %cst_57 = arith.constant dense<16128> : tensor<16x16xi16> loc(#loc)
    %113 = arith.ori %cst_57, %112 : tensor<16x16xi16> loc(#loc)
    %114 = arith.select %111, %113, %98 : tensor<16x16xi1>, tensor<16x16xi16> loc(#loc)
    %c16_i32_58 = arith.constant 16 : i32 loc(#loc)
    %115 = arith.extui %75 : tensor<16x16xi8> to tensor<16x16xi32> loc(#loc)
    %cst_59 = arith.constant dense<16> : tensor<16x16xi32> loc(#loc)
    %116 = arith.cmpi eq, %115, %cst_59 : tensor<16x16xi32> loc(#loc)
    %c32768_i32_60 = arith.constant 32768 : i32 loc(#loc)
    %c-32768_i16_61 = arith.constant -32768 : i16 loc(#loc)
    %cst_62 = arith.constant dense<-32768> : tensor<16x16xi16> loc(#loc)
    %117 = arith.andi %109, %cst_62 : tensor<16x16xi16> loc(#loc)
    %c16128_i32_63 = arith.constant 16128 : i32 loc(#loc)
    %c16128_i16_64 = arith.constant 16128 : i16 loc(#loc)
    %cst_65 = arith.constant dense<16128> : tensor<16x16xi16> loc(#loc)
    %118 = arith.ori %cst_65, %117 : tensor<16x16xi16> loc(#loc)
    %119 = arith.select %116, %118, %109 : tensor<16x16xi1>, tensor<16x16xi16> loc(#loc)
    %120 = tt.call @triton.language.standard.interleave__u16S16_16S_u16S16_16S__(%114, %119) : (tensor<16x16xi16>, tensor<16x16xi16>) -> tensor<16x32xi16> loc(#loc)
    %121 = tt.bitcast %120 : tensor<16x32xi16> -> tensor<16x32xbf16> loc(#loc)
    %122 = tt.broadcast %73 : tensor<16x1xbf16> -> tensor<16x32xbf16> loc(#loc)
    %123 = arith.mulf %121, %122 : tensor<16x32xbf16> loc(#loc)
    %c255_i32 = arith.constant 255 : i32 loc(#loc)
    %124 = arith.extui %70 : tensor<16x1xi8> to tensor<16x1xi32> loc(#loc)
    %cst_66 = arith.constant dense<255> : tensor<16x1xi32> loc(#loc)
    %125 = arith.cmpi eq, %124, %cst_66 : tensor<16x1xi32> loc(#loc)
    %cst_67 = arith.constant 0x7FC00000 : f32 loc(#loc)
    %cst_68 = arith.constant 0x7FC0 : bf16 loc(#loc)
    %cst_69 = arith.constant dense<0x7FC0> : tensor<16x32xbf16> loc(#loc)
    %126 = tt.broadcast %125 : tensor<16x1xi1> -> tensor<16x32xi1> loc(#loc)
    %127 = arith.select %126, %cst_69, %123 : tensor<16x32xi1>, tensor<16x32xbf16> loc(#loc)
    %128 = tt.get_program_id x : i32 loc(#loc)
    %c512_i32 = arith.constant 512 : i32 loc(#loc)
    %c512_i32_70 = arith.constant 512 : i32 loc(#loc)
    %129 = arith.extsi %128 : i32 to i64 loc(#loc)
    %130 = arith.extsi %c512_i32_70 : i32 to i64 loc(#loc)
    %131 = arith.muli %129, %130 : i64 loc(#loc)
    %c2147483647_i64_71 = arith.constant 2147483647 : i64 loc(#loc)
    %c-2147483648_i64_72 = arith.constant -2147483648 : i64 loc(#loc)
    %132 = arith.cmpi sle, %131, %c2147483647_i64_71 : i64 loc(#loc)
    %133 = arith.cmpi sge, %131, %c-2147483648_i64_72 : i64 loc(#loc)
    %134 = arith.andi %132, %133 : i1 loc(#loc)
    %135 = arith.muli %128, %c512_i32_70 : i32 loc(#loc)
    %136 = tt.make_range {end = 512 : i32, start = 0 : i32} : tensor<512xi32> loc(#loc)
    %137 = tt.splat %135 : i32 -> tensor<512xi32> loc(#loc)
    %138 = arith.extsi %137 : tensor<512xi32> to tensor<512xi64> loc(#loc)
    %139 = arith.extsi %136 : tensor<512xi32> to tensor<512xi64> loc(#loc)
    %140 = arith.addi %138, %139 : tensor<512xi64> loc(#loc)
    %c2147483647_i64_73 = arith.constant 2147483647 : i64 loc(#loc)
    %c-2147483648_i64_74 = arith.constant -2147483648 : i64 loc(#loc)
    %cst_75 = arith.constant dense<2147483647> : tensor<512xi64> loc(#loc)
    %141 = arith.cmpi sle, %140, %cst_75 : tensor<512xi64> loc(#loc)
    %cst_76 = arith.constant dense<-2147483648> : tensor<512xi64> loc(#loc)
    %142 = arith.cmpi sge, %140, %cst_76 : tensor<512xi64> loc(#loc)
    %143 = arith.andi %141, %142 : tensor<512xi1> loc(#loc)
    %144 = arith.addi %137, %136 : tensor<512xi32> loc(#loc)
    %c32_i32 = arith.constant 32 : i32 loc(#loc)
    %c32_i32_77 = arith.constant 32 : i32 loc(#loc)
    %145 = arith.extsi %N : i32 to i64 loc(#loc)
    %146 = arith.extsi %c32_i32_77 : i32 to i64 loc(#loc)
    %147 = arith.muli %145, %146 : i64 loc(#loc)
    %c2147483647_i64_78 = arith.constant 2147483647 : i64 loc(#loc)
    %c-2147483648_i64_79 = arith.constant -2147483648 : i64 loc(#loc)
    %148 = arith.cmpi sle, %147, %c2147483647_i64_78 : i64 loc(#loc)
    %149 = arith.cmpi sge, %147, %c-2147483648_i64_79 : i64 loc(#loc)
    %150 = arith.andi %148, %149 : i1 loc(#loc)
    %151 = arith.muli %N, %c32_i32_77 : i32 loc(#loc)
    %152 = tt.splat %151 : i32 -> tensor<512xi32> loc(#loc)
    %153 = arith.cmpi slt, %144, %152 : tensor<512xi32> loc(#loc)
    %154 = tt.splat %mxfp_ptr : !tt.ptr<bf16> -> tensor<512x!tt.ptr<bf16>> loc(#loc)
    %155 = tt.addptr %154, %144 : tensor<512x!tt.ptr<bf16>>, tensor<512xi32> loc(#loc)
    %156 = tt.call @"triton.language.standard.ravel__bf16S16_32S__(1,)cconstexpr_False_"(%127) : (tensor<16x32xbf16>) -> tensor<512xbf16> loc(#loc)
    tt.store %155, %156, %153 : tensor<512x!tt.ptr<bf16>> loc(#loc)
    tt.return loc(#loc)
  } loc(#loc)
  tt.func private @triton.language.standard.interleave__u16S16_16S_u16S16_16S__(%a: tensor<16x16xi16> loc("a"), %b: tensor<16x16xi16> loc("b")) -> tensor<16x32xi16> attributes {noinline = false} {
    %0 = tt.join %a, %b : tensor<16x16xi16> -> tensor<16x16x2xi16> loc(#loc)
    %1 = tt.reshape %0 : tensor<16x16x2xi16> -> tensor<16x32xi16> loc(#loc)
    tt.return %1 : tensor<16x32xi16> loc(#loc)
  ^bb1:  // no predecessors
    %2 = ub.poison : tensor<16x32xi16> loc(#loc)
    tt.return %2 : tensor<16x32xi16> loc(#loc)
  } loc(#loc)
  tt.func private @"triton.language.standard.ravel__bf16S16_32S__(1,)cconstexpr_False_"(%x: tensor<16x32xbf16> loc("x")) -> tensor<512xbf16> attributes {noinline = false} {
    %0 = tt.reshape %x : tensor<16x32xbf16> -> tensor<512xbf16> loc(#loc)
    tt.return %0 : tensor<512xbf16> loc(#loc)
  ^bb1:  // no predecessors
    %1 = ub.poison : tensor<512xbf16> loc(#loc)
    tt.return %1 : tensor<512xbf16> loc(#loc)
  } loc(#loc)
} loc(#loc)
#loc = loc(unknown)


// -----// IR Dump Before Canonicalizer (canonicalize) ('tt.func' operation: @triton.language.standard.ravel__bf16S16_32S__(1,)cconstexpr_False_) //----- //
#loc1 = loc("x_ptr")
#loc2 = loc("scale_ptr")
#loc3 = loc("mxfp_ptr")
#loc4 = loc("N")
#loc5 = loc("a")
#loc6 = loc("b")
#loc7 = loc("x")
module {
  tt.func public @mxfp_upcast_kernel(%x_ptr: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("x_ptr"), %scale_ptr: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("scale_ptr"), %mxfp_ptr: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("mxfp_ptr"), %N: i32 {tt.divisibility = 16 : i32} loc("N")) attributes {noinline = false} {
    %0 = tt.get_program_id x : i32 loc(#loc)
    %c256_i32 = arith.constant 256 : i32 loc(#loc)
    %c256_i32_0 = arith.constant 256 : i32 loc(#loc)
    %1 = arith.extsi %0 : i32 to i64 loc(#loc)
    %2 = arith.extsi %c256_i32_0 : i32 to i64 loc(#loc)
    %3 = arith.muli %1, %2 : i64 loc(#loc)
    %c2147483647_i64 = arith.constant 2147483647 : i64 loc(#loc)
    %c-2147483648_i64 = arith.constant -2147483648 : i64 loc(#loc)
    %4 = arith.cmpi sle, %3, %c2147483647_i64 : i64 loc(#loc)
    %5 = arith.cmpi sge, %3, %c-2147483648_i64 : i64 loc(#loc)
    %6 = arith.andi %4, %5 : i1 loc(#loc)
    %7 = arith.muli %0, %c256_i32_0 : i32 loc(#loc)
    %8 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32> loc(#loc)
    %9 = tt.expand_dims %8 {axis = 1 : i32} : tensor<16xi32> -> tensor<16x1xi32> loc(#loc)
    %c16_i32 = arith.constant 16 : i32 loc(#loc)
    %c16_i32_1 = arith.constant 16 : i32 loc(#loc)
    %cst = arith.constant dense<16> : tensor<16x1xi32> loc(#loc)
    %10 = arith.extsi %9 : tensor<16x1xi32> to tensor<16x1xi64> loc(#loc)
    %11 = arith.extsi %cst : tensor<16x1xi32> to tensor<16x1xi64> loc(#loc)
    %12 = arith.muli %10, %11 : tensor<16x1xi64> loc(#loc)
    %c2147483647_i64_2 = arith.constant 2147483647 : i64 loc(#loc)
    %c-2147483648_i64_3 = arith.constant -2147483648 : i64 loc(#loc)
    %cst_4 = arith.constant dense<2147483647> : tensor<16x1xi64> loc(#loc)
    %13 = arith.cmpi sle, %12, %cst_4 : tensor<16x1xi64> loc(#loc)
    %cst_5 = arith.constant dense<-2147483648> : tensor<16x1xi64> loc(#loc)
    %14 = arith.cmpi sge, %12, %cst_5 : tensor<16x1xi64> loc(#loc)
    %15 = arith.andi %13, %14 : tensor<16x1xi1> loc(#loc)
    %16 = arith.muli %9, %cst : tensor<16x1xi32> loc(#loc)
    %17 = tt.splat %7 : i32 -> tensor<16x1xi32> loc(#loc)
    %18 = arith.extsi %17 : tensor<16x1xi32> to tensor<16x1xi64> loc(#loc)
    %19 = arith.extsi %16 : tensor<16x1xi32> to tensor<16x1xi64> loc(#loc)
    %20 = arith.addi %18, %19 : tensor<16x1xi64> loc(#loc)
    %c2147483647_i64_6 = arith.constant 2147483647 : i64 loc(#loc)
    %c-2147483648_i64_7 = arith.constant -2147483648 : i64 loc(#loc)
    %cst_8 = arith.constant dense<2147483647> : tensor<16x1xi64> loc(#loc)
    %21 = arith.cmpi sle, %20, %cst_8 : tensor<16x1xi64> loc(#loc)
    %cst_9 = arith.constant dense<-2147483648> : tensor<16x1xi64> loc(#loc)
    %22 = arith.cmpi sge, %20, %cst_9 : tensor<16x1xi64> loc(#loc)
    %23 = arith.andi %21, %22 : tensor<16x1xi1> loc(#loc)
    %24 = arith.addi %17, %16 : tensor<16x1xi32> loc(#loc)
    %25 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32> loc(#loc)
    %26 = tt.expand_dims %25 {axis = 0 : i32} : tensor<16xi32> -> tensor<1x16xi32> loc(#loc)
    %27 = tt.broadcast %24 : tensor<16x1xi32> -> tensor<16x16xi32> loc(#loc)
    %28 = tt.broadcast %26 : tensor<1x16xi32> -> tensor<16x16xi32> loc(#loc)
    %29 = arith.extsi %27 : tensor<16x16xi32> to tensor<16x16xi64> loc(#loc)
    %30 = arith.extsi %28 : tensor<16x16xi32> to tensor<16x16xi64> loc(#loc)
    %31 = arith.addi %29, %30 : tensor<16x16xi64> loc(#loc)
    %c2147483647_i64_10 = arith.constant 2147483647 : i64 loc(#loc)
    %c-2147483648_i64_11 = arith.constant -2147483648 : i64 loc(#loc)
    %cst_12 = arith.constant dense<2147483647> : tensor<16x16xi64> loc(#loc)
    %32 = arith.cmpi sle, %31, %cst_12 : tensor<16x16xi64> loc(#loc)
    %cst_13 = arith.constant dense<-2147483648> : tensor<16x16xi64> loc(#loc)
    %33 = arith.cmpi sge, %31, %cst_13 : tensor<16x16xi64> loc(#loc)
    %34 = arith.andi %32, %33 : tensor<16x16xi1> loc(#loc)
    %35 = arith.addi %27, %28 : tensor<16x16xi32> loc(#loc)
    %c16_i32_14 = arith.constant 16 : i32 loc(#loc)
    %c16_i32_15 = arith.constant 16 : i32 loc(#loc)
    %36 = arith.extsi %N : i32 to i64 loc(#loc)
    %37 = arith.extsi %c16_i32_15 : i32 to i64 loc(#loc)
    %38 = arith.muli %36, %37 : i64 loc(#loc)
    %c2147483647_i64_16 = arith.constant 2147483647 : i64 loc(#loc)
    %c-2147483648_i64_17 = arith.constant -2147483648 : i64 loc(#loc)
    %39 = arith.cmpi sle, %38, %c2147483647_i64_16 : i64 loc(#loc)
    %40 = arith.cmpi sge, %38, %c-2147483648_i64_17 : i64 loc(#loc)
    %41 = arith.andi %39, %40 : i1 loc(#loc)
    %42 = arith.muli %N, %c16_i32_15 : i32 loc(#loc)
    %43 = tt.splat %42 : i32 -> tensor<16x16xi32> loc(#loc)
    %44 = arith.cmpi slt, %35, %43 : tensor<16x16xi32> loc(#loc)
    %45 = tt.splat %x_ptr : !tt.ptr<i8> -> tensor<16x16x!tt.ptr<i8>> loc(#loc)
    %46 = tt.addptr %45, %35 : tensor<16x16x!tt.ptr<i8>>, tensor<16x16xi32> loc(#loc)
    %47 = tt.load %46, %44 : tensor<16x16x!tt.ptr<i8>> loc(#loc)
    %48 = tt.get_program_id x : i32 loc(#loc)
    %c16_i32_18 = arith.constant 16 : i32 loc(#loc)
    %c16_i32_19 = arith.constant 16 : i32 loc(#loc)
    %49 = arith.extsi %48 : i32 to i64 loc(#loc)
    %50 = arith.extsi %c16_i32_19 : i32 to i64 loc(#loc)
    %51 = arith.muli %49, %50 : i64 loc(#loc)
    %c2147483647_i64_20 = arith.constant 2147483647 : i64 loc(#loc)
    %c-2147483648_i64_21 = arith.constant -2147483648 : i64 loc(#loc)
    %52 = arith.cmpi sle, %51, %c2147483647_i64_20 : i64 loc(#loc)
    %53 = arith.cmpi sge, %51, %c-2147483648_i64_21 : i64 loc(#loc)
    %54 = arith.andi %52, %53 : i1 loc(#loc)
    %55 = arith.muli %48, %c16_i32_19 : i32 loc(#loc)
    %56 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32> loc(#loc)
    %57 = tt.expand_dims %56 {axis = 1 : i32} : tensor<16xi32> -> tensor<16x1xi32> loc(#loc)
    %58 = tt.splat %55 : i32 -> tensor<16x1xi32> loc(#loc)
    %59 = arith.extsi %58 : tensor<16x1xi32> to tensor<16x1xi64> loc(#loc)
    %60 = arith.extsi %57 : tensor<16x1xi32> to tensor<16x1xi64> loc(#loc)
    %61 = arith.addi %59, %60 : tensor<16x1xi64> loc(#loc)
    %c2147483647_i64_22 = arith.constant 2147483647 : i64 loc(#loc)
    %c-2147483648_i64_23 = arith.constant -2147483648 : i64 loc(#loc)
    %cst_24 = arith.constant dense<2147483647> : tensor<16x1xi64> loc(#loc)
    %62 = arith.cmpi sle, %61, %cst_24 : tensor<16x1xi64> loc(#loc)
    %cst_25 = arith.constant dense<-2147483648> : tensor<16x1xi64> loc(#loc)
    %63 = arith.cmpi sge, %61, %cst_25 : tensor<16x1xi64> loc(#loc)
    %64 = arith.andi %62, %63 : tensor<16x1xi1> loc(#loc)
    %65 = arith.addi %58, %57 : tensor<16x1xi32> loc(#loc)
    %66 = tt.splat %N : i32 -> tensor<16x1xi32> loc(#loc)
    %67 = arith.cmpi slt, %65, %66 : tensor<16x1xi32> loc(#loc)
    %68 = tt.splat %scale_ptr : !tt.ptr<i8> -> tensor<16x1x!tt.ptr<i8>> loc(#loc)
    %69 = tt.addptr %68, %65 : tensor<16x1x!tt.ptr<i8>>, tensor<16x1xi32> loc(#loc)
    %70 = tt.load %69, %67 : tensor<16x1x!tt.ptr<i8>> loc(#loc)
    %71 = arith.extui %70 : tensor<16x1xi8> to tensor<16x1xi16> loc(#loc)
    %c7_i32 = arith.constant 7 : i32 loc(#loc)
    %c7_i16 = arith.constant 7 : i16 loc(#loc)
    %cst_26 = arith.constant dense<7> : tensor<16x1xi16> loc(#loc)
    %72 = arith.shli %71, %cst_26 : tensor<16x1xi16> loc(#loc)
    %73 = tt.bitcast %72 : tensor<16x1xi16> -> tensor<16x1xbf16> loc(#loc)
    %c7_i32_27 = arith.constant 7 : i32 loc(#loc)
    %c7_i8 = arith.constant 7 : i8 loc(#loc)
    %cst_28 = arith.constant dense<7> : tensor<16x16xi8> loc(#loc)
    %74 = arith.andi %47, %cst_28 : tensor<16x16xi8> loc(#loc)
    %c112_i32 = arith.constant 112 : i32 loc(#loc)
    %c112_i8 = arith.constant 112 : i8 loc(#loc)
    %cst_29 = arith.constant dense<112> : tensor<16x16xi8> loc(#loc)
    %75 = arith.andi %47, %cst_29 : tensor<16x16xi8> loc(#loc)
    %76 = arith.extui %74 : tensor<16x16xi8> to tensor<16x16xi16> loc(#loc)
    %c6_i32 = arith.constant 6 : i32 loc(#loc)
    %c6_i16 = arith.constant 6 : i16 loc(#loc)
    %cst_30 = arith.constant dense<6> : tensor<16x16xi16> loc(#loc)
    %77 = arith.shli %76, %cst_30 : tensor<16x16xi16> loc(#loc)
    %c8_i32 = arith.constant 8 : i32 loc(#loc)
    %c8_i8 = arith.constant 8 : i8 loc(#loc)
    %cst_31 = arith.constant dense<8> : tensor<16x16xi8> loc(#loc)
    %78 = arith.andi %47, %cst_31 : tensor<16x16xi8> loc(#loc)
    %79 = arith.extui %78 : tensor<16x16xi8> to tensor<16x16xi16> loc(#loc)
    %c12_i32 = arith.constant 12 : i32 loc(#loc)
    %c12_i16 = arith.constant 12 : i16 loc(#loc)
    %cst_32 = arith.constant dense<12> : tensor<16x16xi16> loc(#loc)
    %80 = arith.shli %79, %cst_32 : tensor<16x16xi16> loc(#loc)
    %81 = arith.ori %77, %80 : tensor<16x16xi16> loc(#loc)
    %82 = arith.extui %75 : tensor<16x16xi8> to tensor<16x16xi16> loc(#loc)
    %c2_i32 = arith.constant 2 : i32 loc(#loc)
    %c2_i16 = arith.constant 2 : i16 loc(#loc)
    %cst_33 = arith.constant dense<2> : tensor<16x16xi16> loc(#loc)
    %83 = arith.shli %82, %cst_33 : tensor<16x16xi16> loc(#loc)
    %c128_i32 = arith.constant 128 : i32 loc(#loc)
    %c-128_i8 = arith.constant -128 : i8 loc(#loc)
    %cst_34 = arith.constant dense<-128> : tensor<16x16xi8> loc(#loc)
    %84 = arith.andi %47, %cst_34 : tensor<16x16xi8> loc(#loc)
    %85 = arith.extui %84 : tensor<16x16xi8> to tensor<16x16xi16> loc(#loc)
    %c8_i32_35 = arith.constant 8 : i32 loc(#loc)
    %c8_i16 = arith.constant 8 : i16 loc(#loc)
    %cst_36 = arith.constant dense<8> : tensor<16x16xi16> loc(#loc)
    %86 = arith.shli %85, %cst_36 : tensor<16x16xi16> loc(#loc)
    %87 = arith.ori %83, %86 : tensor<16x16xi16> loc(#loc)
    %c6_i32_37 = arith.constant 6 : i32 loc(#loc)
    %c6_i8 = arith.constant 6 : i8 loc(#loc)
    %cst_38 = arith.constant dense<6> : tensor<16x16xi8> loc(#loc)
    %88 = arith.andi %74, %cst_38 : tensor<16x16xi8> loc(#loc)
    %c0_i32 = arith.constant 0 : i32 loc(#loc)
    %89 = arith.extui %88 : tensor<16x16xi8> to tensor<16x16xi32> loc(#loc)
    %cst_39 = arith.constant dense<0> : tensor<16x16xi32> loc(#loc)
    %90 = arith.cmpi ne, %89, %cst_39 : tensor<16x16xi32> loc(#loc)
    %c16128_i32 = arith.constant 16128 : i32 loc(#loc)
    %c16128_i16 = arith.constant 16128 : i16 loc(#loc)
    %cst_40 = arith.constant dense<16128> : tensor<16x16xi16> loc(#loc)
    %91 = arith.extui %81 : tensor<16x16xi16> to tensor<16x16xi64> loc(#loc)
    %92 = arith.extui %cst_40 : tensor<16x16xi16> to tensor<16x16xi64> loc(#loc)
    %93 = arith.addi %91, %92 : tensor<16x16xi64> loc(#loc)
    %c65535_i64 = arith.constant 65535 : i64 loc(#loc)
    %c0_i64 = arith.constant 0 : i64 loc(#loc)
    %cst_41 = arith.constant dense<65535> : tensor<16x16xi64> loc(#loc)
    %94 = arith.cmpi sle, %93, %cst_41 : tensor<16x16xi64> loc(#loc)
    %cst_42 = arith.constant dense<0> : tensor<16x16xi64> loc(#loc)
    %95 = arith.cmpi sge, %93, %cst_42 : tensor<16x16xi64> loc(#loc)
    %96 = arith.andi %94, %95 : tensor<16x16xi1> loc(#loc)
    %97 = arith.addi %81, %cst_40 : tensor<16x16xi16> loc(#loc)
    %98 = arith.select %90, %97, %81 : tensor<16x16xi1>, tensor<16x16xi16> loc(#loc)
    %c96_i32 = arith.constant 96 : i32 loc(#loc)
    %c96_i8 = arith.constant 96 : i8 loc(#loc)
    %cst_43 = arith.constant dense<96> : tensor<16x16xi8> loc(#loc)
    %99 = arith.andi %75, %cst_43 : tensor<16x16xi8> loc(#loc)
    %c0_i32_44 = arith.constant 0 : i32 loc(#loc)
    %100 = arith.extui %99 : tensor<16x16xi8> to tensor<16x16xi32> loc(#loc)
    %cst_45 = arith.constant dense<0> : tensor<16x16xi32> loc(#loc)
    %101 = arith.cmpi ne, %100, %cst_45 : tensor<16x16xi32> loc(#loc)
    %c16128_i32_46 = arith.constant 16128 : i32 loc(#loc)
    %c16128_i16_47 = arith.constant 16128 : i16 loc(#loc)
    %cst_48 = arith.constant dense<16128> : tensor<16x16xi16> loc(#loc)
    %102 = arith.extui %87 : tensor<16x16xi16> to tensor<16x16xi64> loc(#loc)
    %103 = arith.extui %cst_48 : tensor<16x16xi16> to tensor<16x16xi64> loc(#loc)
    %104 = arith.addi %102, %103 : tensor<16x16xi64> loc(#loc)
    %c65535_i64_49 = arith.constant 65535 : i64 loc(#loc)
    %c0_i64_50 = arith.constant 0 : i64 loc(#loc)
    %cst_51 = arith.constant dense<65535> : tensor<16x16xi64> loc(#loc)
    %105 = arith.cmpi sle, %104, %cst_51 : tensor<16x16xi64> loc(#loc)
    %cst_52 = arith.constant dense<0> : tensor<16x16xi64> loc(#loc)
    %106 = arith.cmpi sge, %104, %cst_52 : tensor<16x16xi64> loc(#loc)
    %107 = arith.andi %105, %106 : tensor<16x16xi1> loc(#loc)
    %108 = arith.addi %87, %cst_48 : tensor<16x16xi16> loc(#loc)
    %109 = arith.select %101, %108, %87 : tensor<16x16xi1>, tensor<16x16xi16> loc(#loc)
    %c1_i32 = arith.constant 1 : i32 loc(#loc)
    %110 = arith.extui %74 : tensor<16x16xi8> to tensor<16x16xi32> loc(#loc)
    %cst_53 = arith.constant dense<1> : tensor<16x16xi32> loc(#loc)
    %111 = arith.cmpi eq, %110, %cst_53 : tensor<16x16xi32> loc(#loc)
    %c32768_i32 = arith.constant 32768 : i32 loc(#loc)
    %c-32768_i16 = arith.constant -32768 : i16 loc(#loc)
    %cst_54 = arith.constant dense<-32768> : tensor<16x16xi16> loc(#loc)
    %112 = arith.andi %98, %cst_54 : tensor<16x16xi16> loc(#loc)
    %c16128_i32_55 = arith.constant 16128 : i32 loc(#loc)
    %c16128_i16_56 = arith.constant 16128 : i16 loc(#loc)
    %cst_57 = arith.constant dense<16128> : tensor<16x16xi16> loc(#loc)
    %113 = arith.ori %cst_57, %112 : tensor<16x16xi16> loc(#loc)
    %114 = arith.select %111, %113, %98 : tensor<16x16xi1>, tensor<16x16xi16> loc(#loc)
    %c16_i32_58 = arith.constant 16 : i32 loc(#loc)
    %115 = arith.extui %75 : tensor<16x16xi8> to tensor<16x16xi32> loc(#loc)
    %cst_59 = arith.constant dense<16> : tensor<16x16xi32> loc(#loc)
    %116 = arith.cmpi eq, %115, %cst_59 : tensor<16x16xi32> loc(#loc)
    %c32768_i32_60 = arith.constant 32768 : i32 loc(#loc)
    %c-32768_i16_61 = arith.constant -32768 : i16 loc(#loc)
    %cst_62 = arith.constant dense<-32768> : tensor<16x16xi16> loc(#loc)
    %117 = arith.andi %109, %cst_62 : tensor<16x16xi16> loc(#loc)
    %c16128_i32_63 = arith.constant 16128 : i32 loc(#loc)
    %c16128_i16_64 = arith.constant 16128 : i16 loc(#loc)
    %cst_65 = arith.constant dense<16128> : tensor<16x16xi16> loc(#loc)
    %118 = arith.ori %cst_65, %117 : tensor<16x16xi16> loc(#loc)
    %119 = arith.select %116, %118, %109 : tensor<16x16xi1>, tensor<16x16xi16> loc(#loc)
    %120 = tt.call @triton.language.standard.interleave__u16S16_16S_u16S16_16S__(%114, %119) : (tensor<16x16xi16>, tensor<16x16xi16>) -> tensor<16x32xi16> loc(#loc)
    %121 = tt.bitcast %120 : tensor<16x32xi16> -> tensor<16x32xbf16> loc(#loc)
    %122 = tt.broadcast %73 : tensor<16x1xbf16> -> tensor<16x32xbf16> loc(#loc)
    %123 = arith.mulf %121, %122 : tensor<16x32xbf16> loc(#loc)
    %c255_i32 = arith.constant 255 : i32 loc(#loc)
    %124 = arith.extui %70 : tensor<16x1xi8> to tensor<16x1xi32> loc(#loc)
    %cst_66 = arith.constant dense<255> : tensor<16x1xi32> loc(#loc)
    %125 = arith.cmpi eq, %124, %cst_66 : tensor<16x1xi32> loc(#loc)
    %cst_67 = arith.constant 0x7FC00000 : f32 loc(#loc)
    %cst_68 = arith.constant 0x7FC0 : bf16 loc(#loc)
    %cst_69 = arith.constant dense<0x7FC0> : tensor<16x32xbf16> loc(#loc)
    %126 = tt.broadcast %125 : tensor<16x1xi1> -> tensor<16x32xi1> loc(#loc)
    %127 = arith.select %126, %cst_69, %123 : tensor<16x32xi1>, tensor<16x32xbf16> loc(#loc)
    %128 = tt.get_program_id x : i32 loc(#loc)
    %c512_i32 = arith.constant 512 : i32 loc(#loc)
    %c512_i32_70 = arith.constant 512 : i32 loc(#loc)
    %129 = arith.extsi %128 : i32 to i64 loc(#loc)
    %130 = arith.extsi %c512_i32_70 : i32 to i64 loc(#loc)
    %131 = arith.muli %129, %130 : i64 loc(#loc)
    %c2147483647_i64_71 = arith.constant 2147483647 : i64 loc(#loc)
    %c-2147483648_i64_72 = arith.constant -2147483648 : i64 loc(#loc)
    %132 = arith.cmpi sle, %131, %c2147483647_i64_71 : i64 loc(#loc)
    %133 = arith.cmpi sge, %131, %c-2147483648_i64_72 : i64 loc(#loc)
    %134 = arith.andi %132, %133 : i1 loc(#loc)
    %135 = arith.muli %128, %c512_i32_70 : i32 loc(#loc)
    %136 = tt.make_range {end = 512 : i32, start = 0 : i32} : tensor<512xi32> loc(#loc)
    %137 = tt.splat %135 : i32 -> tensor<512xi32> loc(#loc)
    %138 = arith.extsi %137 : tensor<512xi32> to tensor<512xi64> loc(#loc)
    %139 = arith.extsi %136 : tensor<512xi32> to tensor<512xi64> loc(#loc)
    %140 = arith.addi %138, %139 : tensor<512xi64> loc(#loc)
    %c2147483647_i64_73 = arith.constant 2147483647 : i64 loc(#loc)
    %c-2147483648_i64_74 = arith.constant -2147483648 : i64 loc(#loc)
    %cst_75 = arith.constant dense<2147483647> : tensor<512xi64> loc(#loc)
    %141 = arith.cmpi sle, %140, %cst_75 : tensor<512xi64> loc(#loc)
    %cst_76 = arith.constant dense<-2147483648> : tensor<512xi64> loc(#loc)
    %142 = arith.cmpi sge, %140, %cst_76 : tensor<512xi64> loc(#loc)
    %143 = arith.andi %141, %142 : tensor<512xi1> loc(#loc)
    %144 = arith.addi %137, %136 : tensor<512xi32> loc(#loc)
    %c32_i32 = arith.constant 32 : i32 loc(#loc)
    %c32_i32_77 = arith.constant 32 : i32 loc(#loc)
    %145 = arith.extsi %N : i32 to i64 loc(#loc)
    %146 = arith.extsi %c32_i32_77 : i32 to i64 loc(#loc)
    %147 = arith.muli %145, %146 : i64 loc(#loc)
    %c2147483647_i64_78 = arith.constant 2147483647 : i64 loc(#loc)
    %c-2147483648_i64_79 = arith.constant -2147483648 : i64 loc(#loc)
    %148 = arith.cmpi sle, %147, %c2147483647_i64_78 : i64 loc(#loc)
    %149 = arith.cmpi sge, %147, %c-2147483648_i64_79 : i64 loc(#loc)
    %150 = arith.andi %148, %149 : i1 loc(#loc)
    %151 = arith.muli %N, %c32_i32_77 : i32 loc(#loc)
    %152 = tt.splat %151 : i32 -> tensor<512xi32> loc(#loc)
    %153 = arith.cmpi slt, %144, %152 : tensor<512xi32> loc(#loc)
    %154 = tt.splat %mxfp_ptr : !tt.ptr<bf16> -> tensor<512x!tt.ptr<bf16>> loc(#loc)
    %155 = tt.addptr %154, %144 : tensor<512x!tt.ptr<bf16>>, tensor<512xi32> loc(#loc)
    %156 = tt.call @"triton.language.standard.ravel__bf16S16_32S__(1,)cconstexpr_False_"(%127) : (tensor<16x32xbf16>) -> tensor<512xbf16> loc(#loc)
    tt.store %155, %156, %153 : tensor<512x!tt.ptr<bf16>> loc(#loc)
    tt.return loc(#loc)
  } loc(#loc)
  tt.func private @triton.language.standard.interleave__u16S16_16S_u16S16_16S__(%a: tensor<16x16xi16> loc("a"), %b: tensor<16x16xi16> loc("b")) -> tensor<16x32xi16> attributes {noinline = false} {
    %0 = tt.join %a, %b : tensor<16x16xi16> -> tensor<16x16x2xi16> loc(#loc)
    %1 = tt.reshape %0 : tensor<16x16x2xi16> -> tensor<16x32xi16> loc(#loc)
    tt.return %1 : tensor<16x32xi16> loc(#loc)
  } loc(#loc)
  tt.func private @"triton.language.standard.ravel__bf16S16_32S__(1,)cconstexpr_False_"(%x: tensor<16x32xbf16> loc("x")) -> tensor<512xbf16> attributes {noinline = false} {
    %0 = tt.reshape %x : tensor<16x32xbf16> -> tensor<512xbf16> loc(#loc)
    tt.return %0 : tensor<512xbf16> loc(#loc)
  ^bb1:  // no predecessors
    %1 = ub.poison : tensor<512xbf16> loc(#loc)
    tt.return %1 : tensor<512xbf16> loc(#loc)
  } loc(#loc)
} loc(#loc)
#loc = loc(unknown)


// -----// IR Dump Before Canonicalizer (canonicalize) ('tt.func' operation: @mxfp_upcast_kernel) //----- //
#loc1 = loc("x_ptr")
#loc2 = loc("scale_ptr")
#loc3 = loc("mxfp_ptr")
#loc4 = loc("N")
#loc5 = loc("a")
#loc6 = loc("b")
#loc7 = loc("x")
module {
  tt.func public @mxfp_upcast_kernel(%x_ptr: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("x_ptr"), %scale_ptr: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("scale_ptr"), %mxfp_ptr: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("mxfp_ptr"), %N: i32 {tt.divisibility = 16 : i32} loc("N")) attributes {noinline = false} {
    %0 = tt.get_program_id x : i32 loc(#loc)
    %c256_i32 = arith.constant 256 : i32 loc(#loc)
    %c256_i32_0 = arith.constant 256 : i32 loc(#loc)
    %1 = arith.extsi %0 : i32 to i64 loc(#loc)
    %2 = arith.extsi %c256_i32_0 : i32 to i64 loc(#loc)
    %3 = arith.muli %1, %2 : i64 loc(#loc)
    %c2147483647_i64 = arith.constant 2147483647 : i64 loc(#loc)
    %c-2147483648_i64 = arith.constant -2147483648 : i64 loc(#loc)
    %4 = arith.cmpi sle, %3, %c2147483647_i64 : i64 loc(#loc)
    %5 = arith.cmpi sge, %3, %c-2147483648_i64 : i64 loc(#loc)
    %6 = arith.andi %4, %5 : i1 loc(#loc)
    %7 = arith.muli %0, %c256_i32_0 : i32 loc(#loc)
    %8 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32> loc(#loc)
    %9 = tt.expand_dims %8 {axis = 1 : i32} : tensor<16xi32> -> tensor<16x1xi32> loc(#loc)
    %c16_i32 = arith.constant 16 : i32 loc(#loc)
    %c16_i32_1 = arith.constant 16 : i32 loc(#loc)
    %cst = arith.constant dense<16> : tensor<16x1xi32> loc(#loc)
    %10 = arith.extsi %9 : tensor<16x1xi32> to tensor<16x1xi64> loc(#loc)
    %11 = arith.extsi %cst : tensor<16x1xi32> to tensor<16x1xi64> loc(#loc)
    %12 = arith.muli %10, %11 : tensor<16x1xi64> loc(#loc)
    %c2147483647_i64_2 = arith.constant 2147483647 : i64 loc(#loc)
    %c-2147483648_i64_3 = arith.constant -2147483648 : i64 loc(#loc)
    %cst_4 = arith.constant dense<2147483647> : tensor<16x1xi64> loc(#loc)
    %13 = arith.cmpi sle, %12, %cst_4 : tensor<16x1xi64> loc(#loc)
    %cst_5 = arith.constant dense<-2147483648> : tensor<16x1xi64> loc(#loc)
    %14 = arith.cmpi sge, %12, %cst_5 : tensor<16x1xi64> loc(#loc)
    %15 = arith.andi %13, %14 : tensor<16x1xi1> loc(#loc)
    %16 = arith.muli %9, %cst : tensor<16x1xi32> loc(#loc)
    %17 = tt.splat %7 : i32 -> tensor<16x1xi32> loc(#loc)
    %18 = arith.extsi %17 : tensor<16x1xi32> to tensor<16x1xi64> loc(#loc)
    %19 = arith.extsi %16 : tensor<16x1xi32> to tensor<16x1xi64> loc(#loc)
    %20 = arith.addi %18, %19 : tensor<16x1xi64> loc(#loc)
    %c2147483647_i64_6 = arith.constant 2147483647 : i64 loc(#loc)
    %c-2147483648_i64_7 = arith.constant -2147483648 : i64 loc(#loc)
    %cst_8 = arith.constant dense<2147483647> : tensor<16x1xi64> loc(#loc)
    %21 = arith.cmpi sle, %20, %cst_8 : tensor<16x1xi64> loc(#loc)
    %cst_9 = arith.constant dense<-2147483648> : tensor<16x1xi64> loc(#loc)
    %22 = arith.cmpi sge, %20, %cst_9 : tensor<16x1xi64> loc(#loc)
    %23 = arith.andi %21, %22 : tensor<16x1xi1> loc(#loc)
    %24 = arith.addi %17, %16 : tensor<16x1xi32> loc(#loc)
    %25 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32> loc(#loc)
    %26 = tt.expand_dims %25 {axis = 0 : i32} : tensor<16xi32> -> tensor<1x16xi32> loc(#loc)
    %27 = tt.broadcast %24 : tensor<16x1xi32> -> tensor<16x16xi32> loc(#loc)
    %28 = tt.broadcast %26 : tensor<1x16xi32> -> tensor<16x16xi32> loc(#loc)
    %29 = arith.extsi %27 : tensor<16x16xi32> to tensor<16x16xi64> loc(#loc)
    %30 = arith.extsi %28 : tensor<16x16xi32> to tensor<16x16xi64> loc(#loc)
    %31 = arith.addi %29, %30 : tensor<16x16xi64> loc(#loc)
    %c2147483647_i64_10 = arith.constant 2147483647 : i64 loc(#loc)
    %c-2147483648_i64_11 = arith.constant -2147483648 : i64 loc(#loc)
    %cst_12 = arith.constant dense<2147483647> : tensor<16x16xi64> loc(#loc)
    %32 = arith.cmpi sle, %31, %cst_12 : tensor<16x16xi64> loc(#loc)
    %cst_13 = arith.constant dense<-2147483648> : tensor<16x16xi64> loc(#loc)
    %33 = arith.cmpi sge, %31, %cst_13 : tensor<16x16xi64> loc(#loc)
    %34 = arith.andi %32, %33 : tensor<16x16xi1> loc(#loc)
    %35 = arith.addi %27, %28 : tensor<16x16xi32> loc(#loc)
    %c16_i32_14 = arith.constant 16 : i32 loc(#loc)
    %c16_i32_15 = arith.constant 16 : i32 loc(#loc)
    %36 = arith.extsi %N : i32 to i64 loc(#loc)
    %37 = arith.extsi %c16_i32_15 : i32 to i64 loc(#loc)
    %38 = arith.muli %36, %37 : i64 loc(#loc)
    %c2147483647_i64_16 = arith.constant 2147483647 : i64 loc(#loc)
    %c-2147483648_i64_17 = arith.constant -2147483648 : i64 loc(#loc)
    %39 = arith.cmpi sle, %38, %c2147483647_i64_16 : i64 loc(#loc)
    %40 = arith.cmpi sge, %38, %c-2147483648_i64_17 : i64 loc(#loc)
    %41 = arith.andi %39, %40 : i1 loc(#loc)
    %42 = arith.muli %N, %c16_i32_15 : i32 loc(#loc)
    %43 = tt.splat %42 : i32 -> tensor<16x16xi32> loc(#loc)
    %44 = arith.cmpi slt, %35, %43 : tensor<16x16xi32> loc(#loc)
    %45 = tt.splat %x_ptr : !tt.ptr<i8> -> tensor<16x16x!tt.ptr<i8>> loc(#loc)
    %46 = tt.addptr %45, %35 : tensor<16x16x!tt.ptr<i8>>, tensor<16x16xi32> loc(#loc)
    %47 = tt.load %46, %44 : tensor<16x16x!tt.ptr<i8>> loc(#loc)
    %48 = tt.get_program_id x : i32 loc(#loc)
    %c16_i32_18 = arith.constant 16 : i32 loc(#loc)
    %c16_i32_19 = arith.constant 16 : i32 loc(#loc)
    %49 = arith.extsi %48 : i32 to i64 loc(#loc)
    %50 = arith.extsi %c16_i32_19 : i32 to i64 loc(#loc)
    %51 = arith.muli %49, %50 : i64 loc(#loc)
    %c2147483647_i64_20 = arith.constant 2147483647 : i64 loc(#loc)
    %c-2147483648_i64_21 = arith.constant -2147483648 : i64 loc(#loc)
    %52 = arith.cmpi sle, %51, %c2147483647_i64_20 : i64 loc(#loc)
    %53 = arith.cmpi sge, %51, %c-2147483648_i64_21 : i64 loc(#loc)
    %54 = arith.andi %52, %53 : i1 loc(#loc)
    %55 = arith.muli %48, %c16_i32_19 : i32 loc(#loc)
    %56 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32> loc(#loc)
    %57 = tt.expand_dims %56 {axis = 1 : i32} : tensor<16xi32> -> tensor<16x1xi32> loc(#loc)
    %58 = tt.splat %55 : i32 -> tensor<16x1xi32> loc(#loc)
    %59 = arith.extsi %58 : tensor<16x1xi32> to tensor<16x1xi64> loc(#loc)
    %60 = arith.extsi %57 : tensor<16x1xi32> to tensor<16x1xi64> loc(#loc)
    %61 = arith.addi %59, %60 : tensor<16x1xi64> loc(#loc)
    %c2147483647_i64_22 = arith.constant 2147483647 : i64 loc(#loc)
    %c-2147483648_i64_23 = arith.constant -2147483648 : i64 loc(#loc)
    %cst_24 = arith.constant dense<2147483647> : tensor<16x1xi64> loc(#loc)
    %62 = arith.cmpi sle, %61, %cst_24 : tensor<16x1xi64> loc(#loc)
    %cst_25 = arith.constant dense<-2147483648> : tensor<16x1xi64> loc(#loc)
    %63 = arith.cmpi sge, %61, %cst_25 : tensor<16x1xi64> loc(#loc)
    %64 = arith.andi %62, %63 : tensor<16x1xi1> loc(#loc)
    %65 = arith.addi %58, %57 : tensor<16x1xi32> loc(#loc)
    %66 = tt.splat %N : i32 -> tensor<16x1xi32> loc(#loc)
    %67 = arith.cmpi slt, %65, %66 : tensor<16x1xi32> loc(#loc)
    %68 = tt.splat %scale_ptr : !tt.ptr<i8> -> tensor<16x1x!tt.ptr<i8>> loc(#loc)
    %69 = tt.addptr %68, %65 : tensor<16x1x!tt.ptr<i8>>, tensor<16x1xi32> loc(#loc)
    %70 = tt.load %69, %67 : tensor<16x1x!tt.ptr<i8>> loc(#loc)
    %71 = arith.extui %70 : tensor<16x1xi8> to tensor<16x1xi16> loc(#loc)
    %c7_i32 = arith.constant 7 : i32 loc(#loc)
    %c7_i16 = arith.constant 7 : i16 loc(#loc)
    %cst_26 = arith.constant dense<7> : tensor<16x1xi16> loc(#loc)
    %72 = arith.shli %71, %cst_26 : tensor<16x1xi16> loc(#loc)
    %73 = tt.bitcast %72 : tensor<16x1xi16> -> tensor<16x1xbf16> loc(#loc)
    %c7_i32_27 = arith.constant 7 : i32 loc(#loc)
    %c7_i8 = arith.constant 7 : i8 loc(#loc)
    %cst_28 = arith.constant dense<7> : tensor<16x16xi8> loc(#loc)
    %74 = arith.andi %47, %cst_28 : tensor<16x16xi8> loc(#loc)
    %c112_i32 = arith.constant 112 : i32 loc(#loc)
    %c112_i8 = arith.constant 112 : i8 loc(#loc)
    %cst_29 = arith.constant dense<112> : tensor<16x16xi8> loc(#loc)
    %75 = arith.andi %47, %cst_29 : tensor<16x16xi8> loc(#loc)
    %76 = arith.extui %74 : tensor<16x16xi8> to tensor<16x16xi16> loc(#loc)
    %c6_i32 = arith.constant 6 : i32 loc(#loc)
    %c6_i16 = arith.constant 6 : i16 loc(#loc)
    %cst_30 = arith.constant dense<6> : tensor<16x16xi16> loc(#loc)
    %77 = arith.shli %76, %cst_30 : tensor<16x16xi16> loc(#loc)
    %c8_i32 = arith.constant 8 : i32 loc(#loc)
    %c8_i8 = arith.constant 8 : i8 loc(#loc)
    %cst_31 = arith.constant dense<8> : tensor<16x16xi8> loc(#loc)
    %78 = arith.andi %47, %cst_31 : tensor<16x16xi8> loc(#loc)
    %79 = arith.extui %78 : tensor<16x16xi8> to tensor<16x16xi16> loc(#loc)
    %c12_i32 = arith.constant 12 : i32 loc(#loc)
    %c12_i16 = arith.constant 12 : i16 loc(#loc)
    %cst_32 = arith.constant dense<12> : tensor<16x16xi16> loc(#loc)
    %80 = arith.shli %79, %cst_32 : tensor<16x16xi16> loc(#loc)
    %81 = arith.ori %77, %80 : tensor<16x16xi16> loc(#loc)
    %82 = arith.extui %75 : tensor<16x16xi8> to tensor<16x16xi16> loc(#loc)
    %c2_i32 = arith.constant 2 : i32 loc(#loc)
    %c2_i16 = arith.constant 2 : i16 loc(#loc)
    %cst_33 = arith.constant dense<2> : tensor<16x16xi16> loc(#loc)
    %83 = arith.shli %82, %cst_33 : tensor<16x16xi16> loc(#loc)
    %c128_i32 = arith.constant 128 : i32 loc(#loc)
    %c-128_i8 = arith.constant -128 : i8 loc(#loc)
    %cst_34 = arith.constant dense<-128> : tensor<16x16xi8> loc(#loc)
    %84 = arith.andi %47, %cst_34 : tensor<16x16xi8> loc(#loc)
    %85 = arith.extui %84 : tensor<16x16xi8> to tensor<16x16xi16> loc(#loc)
    %c8_i32_35 = arith.constant 8 : i32 loc(#loc)
    %c8_i16 = arith.constant 8 : i16 loc(#loc)
    %cst_36 = arith.constant dense<8> : tensor<16x16xi16> loc(#loc)
    %86 = arith.shli %85, %cst_36 : tensor<16x16xi16> loc(#loc)
    %87 = arith.ori %83, %86 : tensor<16x16xi16> loc(#loc)
    %c6_i32_37 = arith.constant 6 : i32 loc(#loc)
    %c6_i8 = arith.constant 6 : i8 loc(#loc)
    %cst_38 = arith.constant dense<6> : tensor<16x16xi8> loc(#loc)
    %88 = arith.andi %74, %cst_38 : tensor<16x16xi8> loc(#loc)
    %c0_i32 = arith.constant 0 : i32 loc(#loc)
    %89 = arith.extui %88 : tensor<16x16xi8> to tensor<16x16xi32> loc(#loc)
    %cst_39 = arith.constant dense<0> : tensor<16x16xi32> loc(#loc)
    %90 = arith.cmpi ne, %89, %cst_39 : tensor<16x16xi32> loc(#loc)
    %c16128_i32 = arith.constant 16128 : i32 loc(#loc)
    %c16128_i16 = arith.constant 16128 : i16 loc(#loc)
    %cst_40 = arith.constant dense<16128> : tensor<16x16xi16> loc(#loc)
    %91 = arith.extui %81 : tensor<16x16xi16> to tensor<16x16xi64> loc(#loc)
    %92 = arith.extui %cst_40 : tensor<16x16xi16> to tensor<16x16xi64> loc(#loc)
    %93 = arith.addi %91, %92 : tensor<16x16xi64> loc(#loc)
    %c65535_i64 = arith.constant 65535 : i64 loc(#loc)
    %c0_i64 = arith.constant 0 : i64 loc(#loc)
    %cst_41 = arith.constant dense<65535> : tensor<16x16xi64> loc(#loc)
    %94 = arith.cmpi sle, %93, %cst_41 : tensor<16x16xi64> loc(#loc)
    %cst_42 = arith.constant dense<0> : tensor<16x16xi64> loc(#loc)
    %95 = arith.cmpi sge, %93, %cst_42 : tensor<16x16xi64> loc(#loc)
    %96 = arith.andi %94, %95 : tensor<16x16xi1> loc(#loc)
    %97 = arith.addi %81, %cst_40 : tensor<16x16xi16> loc(#loc)
    %98 = arith.select %90, %97, %81 : tensor<16x16xi1>, tensor<16x16xi16> loc(#loc)
    %c96_i32 = arith.constant 96 : i32 loc(#loc)
    %c96_i8 = arith.constant 96 : i8 loc(#loc)
    %cst_43 = arith.constant dense<96> : tensor<16x16xi8> loc(#loc)
    %99 = arith.andi %75, %cst_43 : tensor<16x16xi8> loc(#loc)
    %c0_i32_44 = arith.constant 0 : i32 loc(#loc)
    %100 = arith.extui %99 : tensor<16x16xi8> to tensor<16x16xi32> loc(#loc)
    %cst_45 = arith.constant dense<0> : tensor<16x16xi32> loc(#loc)
    %101 = arith.cmpi ne, %100, %cst_45 : tensor<16x16xi32> loc(#loc)
    %c16128_i32_46 = arith.constant 16128 : i32 loc(#loc)
    %c16128_i16_47 = arith.constant 16128 : i16 loc(#loc)
    %cst_48 = arith.constant dense<16128> : tensor<16x16xi16> loc(#loc)
    %102 = arith.extui %87 : tensor<16x16xi16> to tensor<16x16xi64> loc(#loc)
    %103 = arith.extui %cst_48 : tensor<16x16xi16> to tensor<16x16xi64> loc(#loc)
    %104 = arith.addi %102, %103 : tensor<16x16xi64> loc(#loc)
    %c65535_i64_49 = arith.constant 65535 : i64 loc(#loc)
    %c0_i64_50 = arith.constant 0 : i64 loc(#loc)
    %cst_51 = arith.constant dense<65535> : tensor<16x16xi64> loc(#loc)
    %105 = arith.cmpi sle, %104, %cst_51 : tensor<16x16xi64> loc(#loc)
    %cst_52 = arith.constant dense<0> : tensor<16x16xi64> loc(#loc)
    %106 = arith.cmpi sge, %104, %cst_52 : tensor<16x16xi64> loc(#loc)
    %107 = arith.andi %105, %106 : tensor<16x16xi1> loc(#loc)
    %108 = arith.addi %87, %cst_48 : tensor<16x16xi16> loc(#loc)
    %109 = arith.select %101, %108, %87 : tensor<16x16xi1>, tensor<16x16xi16> loc(#loc)
    %c1_i32 = arith.constant 1 : i32 loc(#loc)
    %110 = arith.extui %74 : tensor<16x16xi8> to tensor<16x16xi32> loc(#loc)
    %cst_53 = arith.constant dense<1> : tensor<16x16xi32> loc(#loc)
    %111 = arith.cmpi eq, %110, %cst_53 : tensor<16x16xi32> loc(#loc)
    %c32768_i32 = arith.constant 32768 : i32 loc(#loc)
    %c-32768_i16 = arith.constant -32768 : i16 loc(#loc)
    %cst_54 = arith.constant dense<-32768> : tensor<16x16xi16> loc(#loc)
    %112 = arith.andi %98, %cst_54 : tensor<16x16xi16> loc(#loc)
    %c16128_i32_55 = arith.constant 16128 : i32 loc(#loc)
    %c16128_i16_56 = arith.constant 16128 : i16 loc(#loc)
    %cst_57 = arith.constant dense<16128> : tensor<16x16xi16> loc(#loc)
    %113 = arith.ori %cst_57, %112 : tensor<16x16xi16> loc(#loc)
    %114 = arith.select %111, %113, %98 : tensor<16x16xi1>, tensor<16x16xi16> loc(#loc)
    %c16_i32_58 = arith.constant 16 : i32 loc(#loc)
    %115 = arith.extui %75 : tensor<16x16xi8> to tensor<16x16xi32> loc(#loc)
    %cst_59 = arith.constant dense<16> : tensor<16x16xi32> loc(#loc)
    %116 = arith.cmpi eq, %115, %cst_59 : tensor<16x16xi32> loc(#loc)
    %c32768_i32_60 = arith.constant 32768 : i32 loc(#loc)
    %c-32768_i16_61 = arith.constant -32768 : i16 loc(#loc)
    %cst_62 = arith.constant dense<-32768> : tensor<16x16xi16> loc(#loc)
    %117 = arith.andi %109, %cst_62 : tensor<16x16xi16> loc(#loc)
    %c16128_i32_63 = arith.constant 16128 : i32 loc(#loc)
    %c16128_i16_64 = arith.constant 16128 : i16 loc(#loc)
    %cst_65 = arith.constant dense<16128> : tensor<16x16xi16> loc(#loc)
    %118 = arith.ori %cst_65, %117 : tensor<16x16xi16> loc(#loc)
    %119 = arith.select %116, %118, %109 : tensor<16x16xi1>, tensor<16x16xi16> loc(#loc)
    %120 = tt.call @triton.language.standard.interleave__u16S16_16S_u16S16_16S__(%114, %119) : (tensor<16x16xi16>, tensor<16x16xi16>) -> tensor<16x32xi16> loc(#loc)
    %121 = tt.bitcast %120 : tensor<16x32xi16> -> tensor<16x32xbf16> loc(#loc)
    %122 = tt.broadcast %73 : tensor<16x1xbf16> -> tensor<16x32xbf16> loc(#loc)
    %123 = arith.mulf %121, %122 : tensor<16x32xbf16> loc(#loc)
    %c255_i32 = arith.constant 255 : i32 loc(#loc)
    %124 = arith.extui %70 : tensor<16x1xi8> to tensor<16x1xi32> loc(#loc)
    %cst_66 = arith.constant dense<255> : tensor<16x1xi32> loc(#loc)
    %125 = arith.cmpi eq, %124, %cst_66 : tensor<16x1xi32> loc(#loc)
    %cst_67 = arith.constant 0x7FC00000 : f32 loc(#loc)
    %cst_68 = arith.constant 0x7FC0 : bf16 loc(#loc)
    %cst_69 = arith.constant dense<0x7FC0> : tensor<16x32xbf16> loc(#loc)
    %126 = tt.broadcast %125 : tensor<16x1xi1> -> tensor<16x32xi1> loc(#loc)
    %127 = arith.select %126, %cst_69, %123 : tensor<16x32xi1>, tensor<16x32xbf16> loc(#loc)
    %128 = tt.get_program_id x : i32 loc(#loc)
    %c512_i32 = arith.constant 512 : i32 loc(#loc)
    %c512_i32_70 = arith.constant 512 : i32 loc(#loc)
    %129 = arith.extsi %128 : i32 to i64 loc(#loc)
    %130 = arith.extsi %c512_i32_70 : i32 to i64 loc(#loc)
    %131 = arith.muli %129, %130 : i64 loc(#loc)
    %c2147483647_i64_71 = arith.constant 2147483647 : i64 loc(#loc)
    %c-2147483648_i64_72 = arith.constant -2147483648 : i64 loc(#loc)
    %132 = arith.cmpi sle, %131, %c2147483647_i64_71 : i64 loc(#loc)
    %133 = arith.cmpi sge, %131, %c-2147483648_i64_72 : i64 loc(#loc)
    %134 = arith.andi %132, %133 : i1 loc(#loc)
    %135 = arith.muli %128, %c512_i32_70 : i32 loc(#loc)
    %136 = tt.make_range {end = 512 : i32, start = 0 : i32} : tensor<512xi32> loc(#loc)
    %137 = tt.splat %135 : i32 -> tensor<512xi32> loc(#loc)
    %138 = arith.extsi %137 : tensor<512xi32> to tensor<512xi64> loc(#loc)
    %139 = arith.extsi %136 : tensor<512xi32> to tensor<512xi64> loc(#loc)
    %140 = arith.addi %138, %139 : tensor<512xi64> loc(#loc)
    %c2147483647_i64_73 = arith.constant 2147483647 : i64 loc(#loc)
    %c-2147483648_i64_74 = arith.constant -2147483648 : i64 loc(#loc)
    %cst_75 = arith.constant dense<2147483647> : tensor<512xi64> loc(#loc)
    %141 = arith.cmpi sle, %140, %cst_75 : tensor<512xi64> loc(#loc)
    %cst_76 = arith.constant dense<-2147483648> : tensor<512xi64> loc(#loc)
    %142 = arith.cmpi sge, %140, %cst_76 : tensor<512xi64> loc(#loc)
    %143 = arith.andi %141, %142 : tensor<512xi1> loc(#loc)
    %144 = arith.addi %137, %136 : tensor<512xi32> loc(#loc)
    %c32_i32 = arith.constant 32 : i32 loc(#loc)
    %c32_i32_77 = arith.constant 32 : i32 loc(#loc)
    %145 = arith.extsi %N : i32 to i64 loc(#loc)
    %146 = arith.extsi %c32_i32_77 : i32 to i64 loc(#loc)
    %147 = arith.muli %145, %146 : i64 loc(#loc)
    %c2147483647_i64_78 = arith.constant 2147483647 : i64 loc(#loc)
    %c-2147483648_i64_79 = arith.constant -2147483648 : i64 loc(#loc)
    %148 = arith.cmpi sle, %147, %c2147483647_i64_78 : i64 loc(#loc)
    %149 = arith.cmpi sge, %147, %c-2147483648_i64_79 : i64 loc(#loc)
    %150 = arith.andi %148, %149 : i1 loc(#loc)
    %151 = arith.muli %N, %c32_i32_77 : i32 loc(#loc)
    %152 = tt.splat %151 : i32 -> tensor<512xi32> loc(#loc)
    %153 = arith.cmpi slt, %144, %152 : tensor<512xi32> loc(#loc)
    %154 = tt.splat %mxfp_ptr : !tt.ptr<bf16> -> tensor<512x!tt.ptr<bf16>> loc(#loc)
    %155 = tt.addptr %154, %144 : tensor<512x!tt.ptr<bf16>>, tensor<512xi32> loc(#loc)
    %156 = tt.call @"triton.language.standard.ravel__bf16S16_32S__(1,)cconstexpr_False_"(%127) : (tensor<16x32xbf16>) -> tensor<512xbf16> loc(#loc)
    tt.store %155, %156, %153 : tensor<512x!tt.ptr<bf16>> loc(#loc)
    tt.return loc(#loc)
  } loc(#loc)
  tt.func private @triton.language.standard.interleave__u16S16_16S_u16S16_16S__(%a: tensor<16x16xi16> loc("a"), %b: tensor<16x16xi16> loc("b")) -> tensor<16x32xi16> attributes {noinline = false} {
    %0 = tt.join %a, %b : tensor<16x16xi16> -> tensor<16x16x2xi16> loc(#loc)
    %1 = tt.reshape %0 : tensor<16x16x2xi16> -> tensor<16x32xi16> loc(#loc)
    tt.return %1 : tensor<16x32xi16> loc(#loc)
  } loc(#loc)
  tt.func private @"triton.language.standard.ravel__bf16S16_32S__(1,)cconstexpr_False_"(%x: tensor<16x32xbf16> loc("x")) -> tensor<512xbf16> attributes {noinline = false} {
    %0 = tt.reshape %x : tensor<16x32xbf16> -> tensor<512xbf16> loc(#loc)
    tt.return %0 : tensor<512xbf16> loc(#loc)
  } loc(#loc)
} loc(#loc)
#loc = loc(unknown)


// -----// IR Dump Before Canonicalizer (canonicalize) ('tt.func' operation: @mxfp_upcast_kernel) //----- //
#loc1 = loc("x_ptr")
#loc2 = loc("scale_ptr")
#loc3 = loc("mxfp_ptr")
#loc4 = loc("N")
module {
  tt.func public @mxfp_upcast_kernel(%x_ptr: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("x_ptr"), %scale_ptr: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("scale_ptr"), %mxfp_ptr: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("mxfp_ptr"), %N: i32 {tt.divisibility = 16 : i32} loc("N")) attributes {noinline = false} {
    %c32_i32 = arith.constant 32 : i32 loc(#loc)
    %c512_i32 = arith.constant 512 : i32 loc(#loc)
    %cst = arith.constant dense<0x7FC0> : tensor<16x32xbf16> loc(#loc)
    %cst_0 = arith.constant dense<255> : tensor<16x1xi32> loc(#loc)
    %cst_1 = arith.constant dense<16> : tensor<16x16xi32> loc(#loc)
    %cst_2 = arith.constant dense<-32768> : tensor<16x16xi16> loc(#loc)
    %cst_3 = arith.constant dense<1> : tensor<16x16xi32> loc(#loc)
    %cst_4 = arith.constant dense<96> : tensor<16x16xi8> loc(#loc)
    %cst_5 = arith.constant dense<16128> : tensor<16x16xi16> loc(#loc)
    %cst_6 = arith.constant dense<0> : tensor<16x16xi32> loc(#loc)
    %cst_7 = arith.constant dense<6> : tensor<16x16xi8> loc(#loc)
    %cst_8 = arith.constant dense<8> : tensor<16x16xi16> loc(#loc)
    %cst_9 = arith.constant dense<-128> : tensor<16x16xi8> loc(#loc)
    %cst_10 = arith.constant dense<2> : tensor<16x16xi16> loc(#loc)
    %cst_11 = arith.constant dense<12> : tensor<16x16xi16> loc(#loc)
    %cst_12 = arith.constant dense<8> : tensor<16x16xi8> loc(#loc)
    %cst_13 = arith.constant dense<6> : tensor<16x16xi16> loc(#loc)
    %cst_14 = arith.constant dense<112> : tensor<16x16xi8> loc(#loc)
    %cst_15 = arith.constant dense<7> : tensor<16x16xi8> loc(#loc)
    %cst_16 = arith.constant dense<7> : tensor<16x1xi16> loc(#loc)
    %cst_17 = arith.constant dense<16> : tensor<16x1xi32> loc(#loc)
    %c16_i32 = arith.constant 16 : i32 loc(#loc)
    %c256_i32 = arith.constant 256 : i32 loc(#loc)
    %0 = tt.get_program_id x : i32 loc(#loc)
    %1 = arith.muli %0, %c256_i32 : i32 loc(#loc)
    %2 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32> loc(#loc)
    %3 = tt.expand_dims %2 {axis = 1 : i32} : tensor<16xi32> -> tensor<16x1xi32> loc(#loc)
    %4 = arith.muli %3, %cst_17 : tensor<16x1xi32> loc(#loc)
    %5 = tt.splat %1 : i32 -> tensor<16x1xi32> loc(#loc)
    %6 = arith.addi %5, %4 : tensor<16x1xi32> loc(#loc)
    %7 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32> loc(#loc)
    %8 = tt.expand_dims %7 {axis = 0 : i32} : tensor<16xi32> -> tensor<1x16xi32> loc(#loc)
    %9 = tt.broadcast %6 : tensor<16x1xi32> -> tensor<16x16xi32> loc(#loc)
    %10 = tt.broadcast %8 : tensor<1x16xi32> -> tensor<16x16xi32> loc(#loc)
    %11 = arith.addi %9, %10 : tensor<16x16xi32> loc(#loc)
    %12 = arith.muli %N, %c16_i32 : i32 loc(#loc)
    %13 = tt.splat %12 : i32 -> tensor<16x16xi32> loc(#loc)
    %14 = arith.cmpi slt, %11, %13 : tensor<16x16xi32> loc(#loc)
    %15 = tt.splat %x_ptr : !tt.ptr<i8> -> tensor<16x16x!tt.ptr<i8>> loc(#loc)
    %16 = tt.addptr %15, %11 : tensor<16x16x!tt.ptr<i8>>, tensor<16x16xi32> loc(#loc)
    %17 = tt.load %16, %14 : tensor<16x16x!tt.ptr<i8>> loc(#loc)
    %18 = tt.get_program_id x : i32 loc(#loc)
    %19 = arith.muli %18, %c16_i32 : i32 loc(#loc)
    %20 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32> loc(#loc)
    %21 = tt.expand_dims %20 {axis = 1 : i32} : tensor<16xi32> -> tensor<16x1xi32> loc(#loc)
    %22 = tt.splat %19 : i32 -> tensor<16x1xi32> loc(#loc)
    %23 = arith.addi %22, %21 : tensor<16x1xi32> loc(#loc)
    %24 = tt.splat %N : i32 -> tensor<16x1xi32> loc(#loc)
    %25 = arith.cmpi slt, %23, %24 : tensor<16x1xi32> loc(#loc)
    %26 = tt.splat %scale_ptr : !tt.ptr<i8> -> tensor<16x1x!tt.ptr<i8>> loc(#loc)
    %27 = tt.addptr %26, %23 : tensor<16x1x!tt.ptr<i8>>, tensor<16x1xi32> loc(#loc)
    %28 = tt.load %27, %25 : tensor<16x1x!tt.ptr<i8>> loc(#loc)
    %29 = arith.extui %28 : tensor<16x1xi8> to tensor<16x1xi16> loc(#loc)
    %30 = arith.shli %29, %cst_16 : tensor<16x1xi16> loc(#loc)
    %31 = tt.bitcast %30 : tensor<16x1xi16> -> tensor<16x1xbf16> loc(#loc)
    %32 = arith.andi %17, %cst_15 : tensor<16x16xi8> loc(#loc)
    %33 = arith.andi %17, %cst_14 : tensor<16x16xi8> loc(#loc)
    %34 = arith.extui %32 : tensor<16x16xi8> to tensor<16x16xi16> loc(#loc)
    %35 = arith.shli %34, %cst_13 : tensor<16x16xi16> loc(#loc)
    %36 = arith.andi %17, %cst_12 : tensor<16x16xi8> loc(#loc)
    %37 = arith.extui %36 : tensor<16x16xi8> to tensor<16x16xi16> loc(#loc)
    %38 = arith.shli %37, %cst_11 : tensor<16x16xi16> loc(#loc)
    %39 = arith.ori %35, %38 : tensor<16x16xi16> loc(#loc)
    %40 = arith.extui %33 : tensor<16x16xi8> to tensor<16x16xi16> loc(#loc)
    %41 = arith.shli %40, %cst_10 : tensor<16x16xi16> loc(#loc)
    %42 = arith.andi %17, %cst_9 : tensor<16x16xi8> loc(#loc)
    %43 = arith.extui %42 : tensor<16x16xi8> to tensor<16x16xi16> loc(#loc)
    %44 = arith.shli %43, %cst_8 : tensor<16x16xi16> loc(#loc)
    %45 = arith.ori %41, %44 : tensor<16x16xi16> loc(#loc)
    %46 = arith.andi %32, %cst_7 : tensor<16x16xi8> loc(#loc)
    %47 = arith.extui %46 : tensor<16x16xi8> to tensor<16x16xi32> loc(#loc)
    %48 = arith.cmpi ne, %47, %cst_6 : tensor<16x16xi32> loc(#loc)
    %49 = arith.addi %39, %cst_5 : tensor<16x16xi16> loc(#loc)
    %50 = arith.select %48, %49, %39 : tensor<16x16xi1>, tensor<16x16xi16> loc(#loc)
    %51 = arith.andi %33, %cst_4 : tensor<16x16xi8> loc(#loc)
    %52 = arith.extui %51 : tensor<16x16xi8> to tensor<16x16xi32> loc(#loc)
    %53 = arith.cmpi ne, %52, %cst_6 : tensor<16x16xi32> loc(#loc)
    %54 = arith.addi %45, %cst_5 : tensor<16x16xi16> loc(#loc)
    %55 = arith.select %53, %54, %45 : tensor<16x16xi1>, tensor<16x16xi16> loc(#loc)
    %56 = arith.extui %32 : tensor<16x16xi8> to tensor<16x16xi32> loc(#loc)
    %57 = arith.cmpi eq, %56, %cst_3 : tensor<16x16xi32> loc(#loc)
    %58 = arith.andi %50, %cst_2 : tensor<16x16xi16> loc(#loc)
    %59 = arith.ori %58, %cst_5 : tensor<16x16xi16> loc(#loc)
    %60 = arith.select %57, %59, %50 : tensor<16x16xi1>, tensor<16x16xi16> loc(#loc)
    %61 = arith.extui %33 : tensor<16x16xi8> to tensor<16x16xi32> loc(#loc)
    %62 = arith.cmpi eq, %61, %cst_1 : tensor<16x16xi32> loc(#loc)
    %63 = arith.andi %55, %cst_2 : tensor<16x16xi16> loc(#loc)
    %64 = arith.ori %63, %cst_5 : tensor<16x16xi16> loc(#loc)
    %65 = arith.select %62, %64, %55 : tensor<16x16xi1>, tensor<16x16xi16> loc(#loc)
    %66 = tt.join %60, %65 : tensor<16x16xi16> -> tensor<16x16x2xi16> loc(#loc)
    %67 = tt.reshape %66 : tensor<16x16x2xi16> -> tensor<16x32xi16> loc(#loc)
    %68 = tt.bitcast %67 : tensor<16x32xi16> -> tensor<16x32xbf16> loc(#loc)
    %69 = tt.broadcast %31 : tensor<16x1xbf16> -> tensor<16x32xbf16> loc(#loc)
    %70 = arith.mulf %68, %69 : tensor<16x32xbf16> loc(#loc)
    %71 = arith.extui %28 : tensor<16x1xi8> to tensor<16x1xi32> loc(#loc)
    %72 = arith.cmpi eq, %71, %cst_0 : tensor<16x1xi32> loc(#loc)
    %73 = tt.broadcast %72 : tensor<16x1xi1> -> tensor<16x32xi1> loc(#loc)
    %74 = arith.select %73, %cst, %70 : tensor<16x32xi1>, tensor<16x32xbf16> loc(#loc)
    %75 = tt.get_program_id x : i32 loc(#loc)
    %76 = arith.muli %75, %c512_i32 : i32 loc(#loc)
    %77 = tt.make_range {end = 512 : i32, start = 0 : i32} : tensor<512xi32> loc(#loc)
    %78 = tt.splat %76 : i32 -> tensor<512xi32> loc(#loc)
    %79 = arith.addi %78, %77 : tensor<512xi32> loc(#loc)
    %80 = arith.muli %N, %c32_i32 : i32 loc(#loc)
    %81 = tt.splat %80 : i32 -> tensor<512xi32> loc(#loc)
    %82 = arith.cmpi slt, %79, %81 : tensor<512xi32> loc(#loc)
    %83 = tt.splat %mxfp_ptr : !tt.ptr<bf16> -> tensor<512x!tt.ptr<bf16>> loc(#loc)
    %84 = tt.addptr %83, %79 : tensor<512x!tt.ptr<bf16>>, tensor<512xi32> loc(#loc)
    %85 = tt.reshape %74 : tensor<16x32xbf16> -> tensor<512xbf16> loc(#loc)
    tt.store %84, %85, %82 : tensor<512x!tt.ptr<bf16>> loc(#loc)
    tt.return loc(#loc)
  } loc(#loc)
  tt.func private @triton.language.standard.interleave__u16S16_16S_u16S16_16S__(tensor<16x16xi16>, tensor<16x16xi16>) -> tensor<16x32xi16> attributes {noinline = false} loc(#loc)
  tt.func private @"triton.language.standard.ravel__bf16S16_32S__(1,)cconstexpr_False_"(tensor<16x32xbf16>) -> tensor<512xbf16> attributes {noinline = false} loc(#loc)
} loc(#loc)
#loc = loc(unknown)


// -----// IR Dump Before TritonRewriteTensorPointer (triton-rewrite-tensor-pointer) ('builtin.module' operation) //----- //
#loc1 = loc("x_ptr")
#loc2 = loc("scale_ptr")
#loc3 = loc("mxfp_ptr")
#loc4 = loc("N")
module {
  tt.func public @mxfp_upcast_kernel(%x_ptr: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("x_ptr"), %scale_ptr: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("scale_ptr"), %mxfp_ptr: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("mxfp_ptr"), %N: i32 {tt.divisibility = 16 : i32} loc("N")) attributes {noinline = false} {
    %c32_i32 = arith.constant 32 : i32 loc(#loc)
    %c512_i32 = arith.constant 512 : i32 loc(#loc)
    %cst = arith.constant dense<0x7FC0> : tensor<16x32xbf16> loc(#loc)
    %cst_0 = arith.constant dense<255> : tensor<16x1xi32> loc(#loc)
    %cst_1 = arith.constant dense<16> : tensor<16x16xi32> loc(#loc)
    %cst_2 = arith.constant dense<-32768> : tensor<16x16xi16> loc(#loc)
    %cst_3 = arith.constant dense<1> : tensor<16x16xi32> loc(#loc)
    %cst_4 = arith.constant dense<96> : tensor<16x16xi8> loc(#loc)
    %cst_5 = arith.constant dense<16128> : tensor<16x16xi16> loc(#loc)
    %cst_6 = arith.constant dense<0> : tensor<16x16xi32> loc(#loc)
    %cst_7 = arith.constant dense<6> : tensor<16x16xi8> loc(#loc)
    %cst_8 = arith.constant dense<8> : tensor<16x16xi16> loc(#loc)
    %cst_9 = arith.constant dense<-128> : tensor<16x16xi8> loc(#loc)
    %cst_10 = arith.constant dense<2> : tensor<16x16xi16> loc(#loc)
    %cst_11 = arith.constant dense<12> : tensor<16x16xi16> loc(#loc)
    %cst_12 = arith.constant dense<8> : tensor<16x16xi8> loc(#loc)
    %cst_13 = arith.constant dense<6> : tensor<16x16xi16> loc(#loc)
    %cst_14 = arith.constant dense<112> : tensor<16x16xi8> loc(#loc)
    %cst_15 = arith.constant dense<7> : tensor<16x16xi8> loc(#loc)
    %cst_16 = arith.constant dense<7> : tensor<16x1xi16> loc(#loc)
    %cst_17 = arith.constant dense<16> : tensor<16x1xi32> loc(#loc)
    %c16_i32 = arith.constant 16 : i32 loc(#loc)
    %c256_i32 = arith.constant 256 : i32 loc(#loc)
    %0 = tt.get_program_id x : i32 loc(#loc)
    %1 = arith.muli %0, %c256_i32 : i32 loc(#loc)
    %2 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32> loc(#loc)
    %3 = tt.expand_dims %2 {axis = 1 : i32} : tensor<16xi32> -> tensor<16x1xi32> loc(#loc)
    %4 = arith.muli %3, %cst_17 : tensor<16x1xi32> loc(#loc)
    %5 = tt.splat %1 : i32 -> tensor<16x1xi32> loc(#loc)
    %6 = arith.addi %5, %4 : tensor<16x1xi32> loc(#loc)
    %7 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32> loc(#loc)
    %8 = tt.expand_dims %7 {axis = 0 : i32} : tensor<16xi32> -> tensor<1x16xi32> loc(#loc)
    %9 = tt.broadcast %6 : tensor<16x1xi32> -> tensor<16x16xi32> loc(#loc)
    %10 = tt.broadcast %8 : tensor<1x16xi32> -> tensor<16x16xi32> loc(#loc)
    %11 = arith.addi %9, %10 : tensor<16x16xi32> loc(#loc)
    %12 = arith.muli %N, %c16_i32 : i32 loc(#loc)
    %13 = tt.splat %12 : i32 -> tensor<16x16xi32> loc(#loc)
    %14 = arith.cmpi slt, %11, %13 : tensor<16x16xi32> loc(#loc)
    %15 = tt.splat %x_ptr : !tt.ptr<i8> -> tensor<16x16x!tt.ptr<i8>> loc(#loc)
    %16 = tt.addptr %15, %11 : tensor<16x16x!tt.ptr<i8>>, tensor<16x16xi32> loc(#loc)
    %17 = tt.load %16, %14 : tensor<16x16x!tt.ptr<i8>> loc(#loc)
    %18 = tt.get_program_id x : i32 loc(#loc)
    %19 = arith.muli %18, %c16_i32 : i32 loc(#loc)
    %20 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32> loc(#loc)
    %21 = tt.expand_dims %20 {axis = 1 : i32} : tensor<16xi32> -> tensor<16x1xi32> loc(#loc)
    %22 = tt.splat %19 : i32 -> tensor<16x1xi32> loc(#loc)
    %23 = arith.addi %22, %21 : tensor<16x1xi32> loc(#loc)
    %24 = tt.splat %N : i32 -> tensor<16x1xi32> loc(#loc)
    %25 = arith.cmpi slt, %23, %24 : tensor<16x1xi32> loc(#loc)
    %26 = tt.splat %scale_ptr : !tt.ptr<i8> -> tensor<16x1x!tt.ptr<i8>> loc(#loc)
    %27 = tt.addptr %26, %23 : tensor<16x1x!tt.ptr<i8>>, tensor<16x1xi32> loc(#loc)
    %28 = tt.load %27, %25 : tensor<16x1x!tt.ptr<i8>> loc(#loc)
    %29 = arith.extui %28 : tensor<16x1xi8> to tensor<16x1xi16> loc(#loc)
    %30 = arith.shli %29, %cst_16 : tensor<16x1xi16> loc(#loc)
    %31 = tt.bitcast %30 : tensor<16x1xi16> -> tensor<16x1xbf16> loc(#loc)
    %32 = arith.andi %17, %cst_15 : tensor<16x16xi8> loc(#loc)
    %33 = arith.andi %17, %cst_14 : tensor<16x16xi8> loc(#loc)
    %34 = arith.extui %32 : tensor<16x16xi8> to tensor<16x16xi16> loc(#loc)
    %35 = arith.shli %34, %cst_13 : tensor<16x16xi16> loc(#loc)
    %36 = arith.andi %17, %cst_12 : tensor<16x16xi8> loc(#loc)
    %37 = arith.extui %36 : tensor<16x16xi8> to tensor<16x16xi16> loc(#loc)
    %38 = arith.shli %37, %cst_11 : tensor<16x16xi16> loc(#loc)
    %39 = arith.ori %35, %38 : tensor<16x16xi16> loc(#loc)
    %40 = arith.extui %33 : tensor<16x16xi8> to tensor<16x16xi16> loc(#loc)
    %41 = arith.shli %40, %cst_10 : tensor<16x16xi16> loc(#loc)
    %42 = arith.andi %17, %cst_9 : tensor<16x16xi8> loc(#loc)
    %43 = arith.extui %42 : tensor<16x16xi8> to tensor<16x16xi16> loc(#loc)
    %44 = arith.shli %43, %cst_8 : tensor<16x16xi16> loc(#loc)
    %45 = arith.ori %41, %44 : tensor<16x16xi16> loc(#loc)
    %46 = arith.andi %32, %cst_7 : tensor<16x16xi8> loc(#loc)
    %47 = arith.extui %46 : tensor<16x16xi8> to tensor<16x16xi32> loc(#loc)
    %48 = arith.cmpi ne, %47, %cst_6 : tensor<16x16xi32> loc(#loc)
    %49 = arith.addi %39, %cst_5 : tensor<16x16xi16> loc(#loc)
    %50 = arith.select %48, %49, %39 : tensor<16x16xi1>, tensor<16x16xi16> loc(#loc)
    %51 = arith.andi %33, %cst_4 : tensor<16x16xi8> loc(#loc)
    %52 = arith.extui %51 : tensor<16x16xi8> to tensor<16x16xi32> loc(#loc)
    %53 = arith.cmpi ne, %52, %cst_6 : tensor<16x16xi32> loc(#loc)
    %54 = arith.addi %45, %cst_5 : tensor<16x16xi16> loc(#loc)
    %55 = arith.select %53, %54, %45 : tensor<16x16xi1>, tensor<16x16xi16> loc(#loc)
    %56 = arith.extui %32 : tensor<16x16xi8> to tensor<16x16xi32> loc(#loc)
    %57 = arith.cmpi eq, %56, %cst_3 : tensor<16x16xi32> loc(#loc)
    %58 = arith.andi %50, %cst_2 : tensor<16x16xi16> loc(#loc)
    %59 = arith.ori %58, %cst_5 : tensor<16x16xi16> loc(#loc)
    %60 = arith.select %57, %59, %50 : tensor<16x16xi1>, tensor<16x16xi16> loc(#loc)
    %61 = arith.extui %33 : tensor<16x16xi8> to tensor<16x16xi32> loc(#loc)
    %62 = arith.cmpi eq, %61, %cst_1 : tensor<16x16xi32> loc(#loc)
    %63 = arith.andi %55, %cst_2 : tensor<16x16xi16> loc(#loc)
    %64 = arith.ori %63, %cst_5 : tensor<16x16xi16> loc(#loc)
    %65 = arith.select %62, %64, %55 : tensor<16x16xi1>, tensor<16x16xi16> loc(#loc)
    %66 = tt.join %60, %65 : tensor<16x16xi16> -> tensor<16x16x2xi16> loc(#loc)
    %67 = tt.reshape %66 : tensor<16x16x2xi16> -> tensor<16x32xi16> loc(#loc)
    %68 = tt.bitcast %67 : tensor<16x32xi16> -> tensor<16x32xbf16> loc(#loc)
    %69 = tt.broadcast %31 : tensor<16x1xbf16> -> tensor<16x32xbf16> loc(#loc)
    %70 = arith.mulf %68, %69 : tensor<16x32xbf16> loc(#loc)
    %71 = arith.extui %28 : tensor<16x1xi8> to tensor<16x1xi32> loc(#loc)
    %72 = arith.cmpi eq, %71, %cst_0 : tensor<16x1xi32> loc(#loc)
    %73 = tt.broadcast %72 : tensor<16x1xi1> -> tensor<16x32xi1> loc(#loc)
    %74 = arith.select %73, %cst, %70 : tensor<16x32xi1>, tensor<16x32xbf16> loc(#loc)
    %75 = tt.get_program_id x : i32 loc(#loc)
    %76 = arith.muli %75, %c512_i32 : i32 loc(#loc)
    %77 = tt.make_range {end = 512 : i32, start = 0 : i32} : tensor<512xi32> loc(#loc)
    %78 = tt.splat %76 : i32 -> tensor<512xi32> loc(#loc)
    %79 = arith.addi %78, %77 : tensor<512xi32> loc(#loc)
    %80 = arith.muli %N, %c32_i32 : i32 loc(#loc)
    %81 = tt.splat %80 : i32 -> tensor<512xi32> loc(#loc)
    %82 = arith.cmpi slt, %79, %81 : tensor<512xi32> loc(#loc)
    %83 = tt.splat %mxfp_ptr : !tt.ptr<bf16> -> tensor<512x!tt.ptr<bf16>> loc(#loc)
    %84 = tt.addptr %83, %79 : tensor<512x!tt.ptr<bf16>>, tensor<512xi32> loc(#loc)
    %85 = tt.reshape %74 : tensor<16x32xbf16> -> tensor<512xbf16> loc(#loc)
    tt.store %84, %85, %82 : tensor<512x!tt.ptr<bf16>> loc(#loc)
    tt.return loc(#loc)
  } loc(#loc)
} loc(#loc)
#loc = loc(unknown)


// -----// IR Dump Before TritonRewriteTensorDescriptorToPointer (triton-rewrite-tensor-descriptor-to-pointer) ('builtin.module' operation) //----- //
#loc1 = loc("x_ptr")
#loc2 = loc("scale_ptr")
#loc3 = loc("mxfp_ptr")
#loc4 = loc("N")
module {
  tt.func public @mxfp_upcast_kernel(%x_ptr: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("x_ptr"), %scale_ptr: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("scale_ptr"), %mxfp_ptr: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("mxfp_ptr"), %N: i32 {tt.divisibility = 16 : i32} loc("N")) attributes {noinline = false} {
    %c32_i32 = arith.constant 32 : i32 loc(#loc)
    %c512_i32 = arith.constant 512 : i32 loc(#loc)
    %cst = arith.constant dense<0x7FC0> : tensor<16x32xbf16> loc(#loc)
    %cst_0 = arith.constant dense<255> : tensor<16x1xi32> loc(#loc)
    %cst_1 = arith.constant dense<16> : tensor<16x16xi32> loc(#loc)
    %cst_2 = arith.constant dense<-32768> : tensor<16x16xi16> loc(#loc)
    %cst_3 = arith.constant dense<1> : tensor<16x16xi32> loc(#loc)
    %cst_4 = arith.constant dense<96> : tensor<16x16xi8> loc(#loc)
    %cst_5 = arith.constant dense<16128> : tensor<16x16xi16> loc(#loc)
    %cst_6 = arith.constant dense<0> : tensor<16x16xi32> loc(#loc)
    %cst_7 = arith.constant dense<6> : tensor<16x16xi8> loc(#loc)
    %cst_8 = arith.constant dense<8> : tensor<16x16xi16> loc(#loc)
    %cst_9 = arith.constant dense<-128> : tensor<16x16xi8> loc(#loc)
    %cst_10 = arith.constant dense<2> : tensor<16x16xi16> loc(#loc)
    %cst_11 = arith.constant dense<12> : tensor<16x16xi16> loc(#loc)
    %cst_12 = arith.constant dense<8> : tensor<16x16xi8> loc(#loc)
    %cst_13 = arith.constant dense<6> : tensor<16x16xi16> loc(#loc)
    %cst_14 = arith.constant dense<112> : tensor<16x16xi8> loc(#loc)
    %cst_15 = arith.constant dense<7> : tensor<16x16xi8> loc(#loc)
    %cst_16 = arith.constant dense<7> : tensor<16x1xi16> loc(#loc)
    %cst_17 = arith.constant dense<16> : tensor<16x1xi32> loc(#loc)
    %c16_i32 = arith.constant 16 : i32 loc(#loc)
    %c256_i32 = arith.constant 256 : i32 loc(#loc)
    %0 = tt.get_program_id x : i32 loc(#loc)
    %1 = arith.muli %0, %c256_i32 : i32 loc(#loc)
    %2 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32> loc(#loc)
    %3 = tt.expand_dims %2 {axis = 1 : i32} : tensor<16xi32> -> tensor<16x1xi32> loc(#loc)
    %4 = arith.muli %3, %cst_17 : tensor<16x1xi32> loc(#loc)
    %5 = tt.splat %1 : i32 -> tensor<16x1xi32> loc(#loc)
    %6 = arith.addi %5, %4 : tensor<16x1xi32> loc(#loc)
    %7 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32> loc(#loc)
    %8 = tt.expand_dims %7 {axis = 0 : i32} : tensor<16xi32> -> tensor<1x16xi32> loc(#loc)
    %9 = tt.broadcast %6 : tensor<16x1xi32> -> tensor<16x16xi32> loc(#loc)
    %10 = tt.broadcast %8 : tensor<1x16xi32> -> tensor<16x16xi32> loc(#loc)
    %11 = arith.addi %9, %10 : tensor<16x16xi32> loc(#loc)
    %12 = arith.muli %N, %c16_i32 : i32 loc(#loc)
    %13 = tt.splat %12 : i32 -> tensor<16x16xi32> loc(#loc)
    %14 = arith.cmpi slt, %11, %13 : tensor<16x16xi32> loc(#loc)
    %15 = tt.splat %x_ptr : !tt.ptr<i8> -> tensor<16x16x!tt.ptr<i8>> loc(#loc)
    %16 = tt.addptr %15, %11 : tensor<16x16x!tt.ptr<i8>>, tensor<16x16xi32> loc(#loc)
    %17 = tt.load %16, %14 : tensor<16x16x!tt.ptr<i8>> loc(#loc)
    %18 = tt.get_program_id x : i32 loc(#loc)
    %19 = arith.muli %18, %c16_i32 : i32 loc(#loc)
    %20 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32> loc(#loc)
    %21 = tt.expand_dims %20 {axis = 1 : i32} : tensor<16xi32> -> tensor<16x1xi32> loc(#loc)
    %22 = tt.splat %19 : i32 -> tensor<16x1xi32> loc(#loc)
    %23 = arith.addi %22, %21 : tensor<16x1xi32> loc(#loc)
    %24 = tt.splat %N : i32 -> tensor<16x1xi32> loc(#loc)
    %25 = arith.cmpi slt, %23, %24 : tensor<16x1xi32> loc(#loc)
    %26 = tt.splat %scale_ptr : !tt.ptr<i8> -> tensor<16x1x!tt.ptr<i8>> loc(#loc)
    %27 = tt.addptr %26, %23 : tensor<16x1x!tt.ptr<i8>>, tensor<16x1xi32> loc(#loc)
    %28 = tt.load %27, %25 : tensor<16x1x!tt.ptr<i8>> loc(#loc)
    %29 = arith.extui %28 : tensor<16x1xi8> to tensor<16x1xi16> loc(#loc)
    %30 = arith.shli %29, %cst_16 : tensor<16x1xi16> loc(#loc)
    %31 = tt.bitcast %30 : tensor<16x1xi16> -> tensor<16x1xbf16> loc(#loc)
    %32 = arith.andi %17, %cst_15 : tensor<16x16xi8> loc(#loc)
    %33 = arith.andi %17, %cst_14 : tensor<16x16xi8> loc(#loc)
    %34 = arith.extui %32 : tensor<16x16xi8> to tensor<16x16xi16> loc(#loc)
    %35 = arith.shli %34, %cst_13 : tensor<16x16xi16> loc(#loc)
    %36 = arith.andi %17, %cst_12 : tensor<16x16xi8> loc(#loc)
    %37 = arith.extui %36 : tensor<16x16xi8> to tensor<16x16xi16> loc(#loc)
    %38 = arith.shli %37, %cst_11 : tensor<16x16xi16> loc(#loc)
    %39 = arith.ori %35, %38 : tensor<16x16xi16> loc(#loc)
    %40 = arith.extui %33 : tensor<16x16xi8> to tensor<16x16xi16> loc(#loc)
    %41 = arith.shli %40, %cst_10 : tensor<16x16xi16> loc(#loc)
    %42 = arith.andi %17, %cst_9 : tensor<16x16xi8> loc(#loc)
    %43 = arith.extui %42 : tensor<16x16xi8> to tensor<16x16xi16> loc(#loc)
    %44 = arith.shli %43, %cst_8 : tensor<16x16xi16> loc(#loc)
    %45 = arith.ori %41, %44 : tensor<16x16xi16> loc(#loc)
    %46 = arith.andi %32, %cst_7 : tensor<16x16xi8> loc(#loc)
    %47 = arith.extui %46 : tensor<16x16xi8> to tensor<16x16xi32> loc(#loc)
    %48 = arith.cmpi ne, %47, %cst_6 : tensor<16x16xi32> loc(#loc)
    %49 = arith.addi %39, %cst_5 : tensor<16x16xi16> loc(#loc)
    %50 = arith.select %48, %49, %39 : tensor<16x16xi1>, tensor<16x16xi16> loc(#loc)
    %51 = arith.andi %33, %cst_4 : tensor<16x16xi8> loc(#loc)
    %52 = arith.extui %51 : tensor<16x16xi8> to tensor<16x16xi32> loc(#loc)
    %53 = arith.cmpi ne, %52, %cst_6 : tensor<16x16xi32> loc(#loc)
    %54 = arith.addi %45, %cst_5 : tensor<16x16xi16> loc(#loc)
    %55 = arith.select %53, %54, %45 : tensor<16x16xi1>, tensor<16x16xi16> loc(#loc)
    %56 = arith.extui %32 : tensor<16x16xi8> to tensor<16x16xi32> loc(#loc)
    %57 = arith.cmpi eq, %56, %cst_3 : tensor<16x16xi32> loc(#loc)
    %58 = arith.andi %50, %cst_2 : tensor<16x16xi16> loc(#loc)
    %59 = arith.ori %58, %cst_5 : tensor<16x16xi16> loc(#loc)
    %60 = arith.select %57, %59, %50 : tensor<16x16xi1>, tensor<16x16xi16> loc(#loc)
    %61 = arith.extui %33 : tensor<16x16xi8> to tensor<16x16xi32> loc(#loc)
    %62 = arith.cmpi eq, %61, %cst_1 : tensor<16x16xi32> loc(#loc)
    %63 = arith.andi %55, %cst_2 : tensor<16x16xi16> loc(#loc)
    %64 = arith.ori %63, %cst_5 : tensor<16x16xi16> loc(#loc)
    %65 = arith.select %62, %64, %55 : tensor<16x16xi1>, tensor<16x16xi16> loc(#loc)
    %66 = tt.join %60, %65 : tensor<16x16xi16> -> tensor<16x16x2xi16> loc(#loc)
    %67 = tt.reshape %66 : tensor<16x16x2xi16> -> tensor<16x32xi16> loc(#loc)
    %68 = tt.bitcast %67 : tensor<16x32xi16> -> tensor<16x32xbf16> loc(#loc)
    %69 = tt.broadcast %31 : tensor<16x1xbf16> -> tensor<16x32xbf16> loc(#loc)
    %70 = arith.mulf %68, %69 : tensor<16x32xbf16> loc(#loc)
    %71 = arith.extui %28 : tensor<16x1xi8> to tensor<16x1xi32> loc(#loc)
    %72 = arith.cmpi eq, %71, %cst_0 : tensor<16x1xi32> loc(#loc)
    %73 = tt.broadcast %72 : tensor<16x1xi1> -> tensor<16x32xi1> loc(#loc)
    %74 = arith.select %73, %cst, %70 : tensor<16x32xi1>, tensor<16x32xbf16> loc(#loc)
    %75 = tt.get_program_id x : i32 loc(#loc)
    %76 = arith.muli %75, %c512_i32 : i32 loc(#loc)
    %77 = tt.make_range {end = 512 : i32, start = 0 : i32} : tensor<512xi32> loc(#loc)
    %78 = tt.splat %76 : i32 -> tensor<512xi32> loc(#loc)
    %79 = arith.addi %78, %77 : tensor<512xi32> loc(#loc)
    %80 = arith.muli %N, %c32_i32 : i32 loc(#loc)
    %81 = tt.splat %80 : i32 -> tensor<512xi32> loc(#loc)
    %82 = arith.cmpi slt, %79, %81 : tensor<512xi32> loc(#loc)
    %83 = tt.splat %mxfp_ptr : !tt.ptr<bf16> -> tensor<512x!tt.ptr<bf16>> loc(#loc)
    %84 = tt.addptr %83, %79 : tensor<512x!tt.ptr<bf16>>, tensor<512xi32> loc(#loc)
    %85 = tt.reshape %74 : tensor<16x32xbf16> -> tensor<512xbf16> loc(#loc)
    tt.store %84, %85, %82 : tensor<512x!tt.ptr<bf16>> loc(#loc)
    tt.return loc(#loc)
  } loc(#loc)
} loc(#loc)
#loc = loc(unknown)


// -----// IR Dump Before Canonicalizer (canonicalize) ('builtin.module' operation) //----- //
#loc1 = loc("x_ptr")
#loc2 = loc("scale_ptr")
#loc3 = loc("mxfp_ptr")
#loc4 = loc("N")
module {
  tt.func public @mxfp_upcast_kernel(%x_ptr: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("x_ptr"), %scale_ptr: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("scale_ptr"), %mxfp_ptr: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("mxfp_ptr"), %N: i32 {tt.divisibility = 16 : i32} loc("N")) attributes {noinline = false} {
    %c32_i32 = arith.constant 32 : i32 loc(#loc)
    %c512_i32 = arith.constant 512 : i32 loc(#loc)
    %cst = arith.constant dense<0x7FC0> : tensor<16x32xbf16> loc(#loc)
    %cst_0 = arith.constant dense<255> : tensor<16x1xi32> loc(#loc)
    %cst_1 = arith.constant dense<16> : tensor<16x16xi32> loc(#loc)
    %cst_2 = arith.constant dense<-32768> : tensor<16x16xi16> loc(#loc)
    %cst_3 = arith.constant dense<1> : tensor<16x16xi32> loc(#loc)
    %cst_4 = arith.constant dense<96> : tensor<16x16xi8> loc(#loc)
    %cst_5 = arith.constant dense<16128> : tensor<16x16xi16> loc(#loc)
    %cst_6 = arith.constant dense<0> : tensor<16x16xi32> loc(#loc)
    %cst_7 = arith.constant dense<6> : tensor<16x16xi8> loc(#loc)
    %cst_8 = arith.constant dense<8> : tensor<16x16xi16> loc(#loc)
    %cst_9 = arith.constant dense<-128> : tensor<16x16xi8> loc(#loc)
    %cst_10 = arith.constant dense<2> : tensor<16x16xi16> loc(#loc)
    %cst_11 = arith.constant dense<12> : tensor<16x16xi16> loc(#loc)
    %cst_12 = arith.constant dense<8> : tensor<16x16xi8> loc(#loc)
    %cst_13 = arith.constant dense<6> : tensor<16x16xi16> loc(#loc)
    %cst_14 = arith.constant dense<112> : tensor<16x16xi8> loc(#loc)
    %cst_15 = arith.constant dense<7> : tensor<16x16xi8> loc(#loc)
    %cst_16 = arith.constant dense<7> : tensor<16x1xi16> loc(#loc)
    %cst_17 = arith.constant dense<16> : tensor<16x1xi32> loc(#loc)
    %c16_i32 = arith.constant 16 : i32 loc(#loc)
    %c256_i32 = arith.constant 256 : i32 loc(#loc)
    %0 = tt.get_program_id x : i32 loc(#loc)
    %1 = arith.muli %0, %c256_i32 : i32 loc(#loc)
    %2 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32> loc(#loc)
    %3 = tt.expand_dims %2 {axis = 1 : i32} : tensor<16xi32> -> tensor<16x1xi32> loc(#loc)
    %4 = arith.muli %3, %cst_17 : tensor<16x1xi32> loc(#loc)
    %5 = tt.splat %1 : i32 -> tensor<16x1xi32> loc(#loc)
    %6 = arith.addi %5, %4 : tensor<16x1xi32> loc(#loc)
    %7 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32> loc(#loc)
    %8 = tt.expand_dims %7 {axis = 0 : i32} : tensor<16xi32> -> tensor<1x16xi32> loc(#loc)
    %9 = tt.broadcast %6 : tensor<16x1xi32> -> tensor<16x16xi32> loc(#loc)
    %10 = tt.broadcast %8 : tensor<1x16xi32> -> tensor<16x16xi32> loc(#loc)
    %11 = arith.addi %9, %10 : tensor<16x16xi32> loc(#loc)
    %12 = arith.muli %N, %c16_i32 : i32 loc(#loc)
    %13 = tt.splat %12 : i32 -> tensor<16x16xi32> loc(#loc)
    %14 = arith.cmpi slt, %11, %13 : tensor<16x16xi32> loc(#loc)
    %15 = tt.splat %x_ptr : !tt.ptr<i8> -> tensor<16x16x!tt.ptr<i8>> loc(#loc)
    %16 = tt.addptr %15, %11 : tensor<16x16x!tt.ptr<i8>>, tensor<16x16xi32> loc(#loc)
    %17 = tt.load %16, %14 : tensor<16x16x!tt.ptr<i8>> loc(#loc)
    %18 = tt.get_program_id x : i32 loc(#loc)
    %19 = arith.muli %18, %c16_i32 : i32 loc(#loc)
    %20 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32> loc(#loc)
    %21 = tt.expand_dims %20 {axis = 1 : i32} : tensor<16xi32> -> tensor<16x1xi32> loc(#loc)
    %22 = tt.splat %19 : i32 -> tensor<16x1xi32> loc(#loc)
    %23 = arith.addi %22, %21 : tensor<16x1xi32> loc(#loc)
    %24 = tt.splat %N : i32 -> tensor<16x1xi32> loc(#loc)
    %25 = arith.cmpi slt, %23, %24 : tensor<16x1xi32> loc(#loc)
    %26 = tt.splat %scale_ptr : !tt.ptr<i8> -> tensor<16x1x!tt.ptr<i8>> loc(#loc)
    %27 = tt.addptr %26, %23 : tensor<16x1x!tt.ptr<i8>>, tensor<16x1xi32> loc(#loc)
    %28 = tt.load %27, %25 : tensor<16x1x!tt.ptr<i8>> loc(#loc)
    %29 = arith.extui %28 : tensor<16x1xi8> to tensor<16x1xi16> loc(#loc)
    %30 = arith.shli %29, %cst_16 : tensor<16x1xi16> loc(#loc)
    %31 = tt.bitcast %30 : tensor<16x1xi16> -> tensor<16x1xbf16> loc(#loc)
    %32 = arith.andi %17, %cst_15 : tensor<16x16xi8> loc(#loc)
    %33 = arith.andi %17, %cst_14 : tensor<16x16xi8> loc(#loc)
    %34 = arith.extui %32 : tensor<16x16xi8> to tensor<16x16xi16> loc(#loc)
    %35 = arith.shli %34, %cst_13 : tensor<16x16xi16> loc(#loc)
    %36 = arith.andi %17, %cst_12 : tensor<16x16xi8> loc(#loc)
    %37 = arith.extui %36 : tensor<16x16xi8> to tensor<16x16xi16> loc(#loc)
    %38 = arith.shli %37, %cst_11 : tensor<16x16xi16> loc(#loc)
    %39 = arith.ori %35, %38 : tensor<16x16xi16> loc(#loc)
    %40 = arith.extui %33 : tensor<16x16xi8> to tensor<16x16xi16> loc(#loc)
    %41 = arith.shli %40, %cst_10 : tensor<16x16xi16> loc(#loc)
    %42 = arith.andi %17, %cst_9 : tensor<16x16xi8> loc(#loc)
    %43 = arith.extui %42 : tensor<16x16xi8> to tensor<16x16xi16> loc(#loc)
    %44 = arith.shli %43, %cst_8 : tensor<16x16xi16> loc(#loc)
    %45 = arith.ori %41, %44 : tensor<16x16xi16> loc(#loc)
    %46 = arith.andi %32, %cst_7 : tensor<16x16xi8> loc(#loc)
    %47 = arith.extui %46 : tensor<16x16xi8> to tensor<16x16xi32> loc(#loc)
    %48 = arith.cmpi ne, %47, %cst_6 : tensor<16x16xi32> loc(#loc)
    %49 = arith.addi %39, %cst_5 : tensor<16x16xi16> loc(#loc)
    %50 = arith.select %48, %49, %39 : tensor<16x16xi1>, tensor<16x16xi16> loc(#loc)
    %51 = arith.andi %33, %cst_4 : tensor<16x16xi8> loc(#loc)
    %52 = arith.extui %51 : tensor<16x16xi8> to tensor<16x16xi32> loc(#loc)
    %53 = arith.cmpi ne, %52, %cst_6 : tensor<16x16xi32> loc(#loc)
    %54 = arith.addi %45, %cst_5 : tensor<16x16xi16> loc(#loc)
    %55 = arith.select %53, %54, %45 : tensor<16x16xi1>, tensor<16x16xi16> loc(#loc)
    %56 = arith.extui %32 : tensor<16x16xi8> to tensor<16x16xi32> loc(#loc)
    %57 = arith.cmpi eq, %56, %cst_3 : tensor<16x16xi32> loc(#loc)
    %58 = arith.andi %50, %cst_2 : tensor<16x16xi16> loc(#loc)
    %59 = arith.ori %58, %cst_5 : tensor<16x16xi16> loc(#loc)
    %60 = arith.select %57, %59, %50 : tensor<16x16xi1>, tensor<16x16xi16> loc(#loc)
    %61 = arith.extui %33 : tensor<16x16xi8> to tensor<16x16xi32> loc(#loc)
    %62 = arith.cmpi eq, %61, %cst_1 : tensor<16x16xi32> loc(#loc)
    %63 = arith.andi %55, %cst_2 : tensor<16x16xi16> loc(#loc)
    %64 = arith.ori %63, %cst_5 : tensor<16x16xi16> loc(#loc)
    %65 = arith.select %62, %64, %55 : tensor<16x16xi1>, tensor<16x16xi16> loc(#loc)
    %66 = tt.join %60, %65 : tensor<16x16xi16> -> tensor<16x16x2xi16> loc(#loc)
    %67 = tt.reshape %66 : tensor<16x16x2xi16> -> tensor<16x32xi16> loc(#loc)
    %68 = tt.bitcast %67 : tensor<16x32xi16> -> tensor<16x32xbf16> loc(#loc)
    %69 = tt.broadcast %31 : tensor<16x1xbf16> -> tensor<16x32xbf16> loc(#loc)
    %70 = arith.mulf %68, %69 : tensor<16x32xbf16> loc(#loc)
    %71 = arith.extui %28 : tensor<16x1xi8> to tensor<16x1xi32> loc(#loc)
    %72 = arith.cmpi eq, %71, %cst_0 : tensor<16x1xi32> loc(#loc)
    %73 = tt.broadcast %72 : tensor<16x1xi1> -> tensor<16x32xi1> loc(#loc)
    %74 = arith.select %73, %cst, %70 : tensor<16x32xi1>, tensor<16x32xbf16> loc(#loc)
    %75 = tt.get_program_id x : i32 loc(#loc)
    %76 = arith.muli %75, %c512_i32 : i32 loc(#loc)
    %77 = tt.make_range {end = 512 : i32, start = 0 : i32} : tensor<512xi32> loc(#loc)
    %78 = tt.splat %76 : i32 -> tensor<512xi32> loc(#loc)
    %79 = arith.addi %78, %77 : tensor<512xi32> loc(#loc)
    %80 = arith.muli %N, %c32_i32 : i32 loc(#loc)
    %81 = tt.splat %80 : i32 -> tensor<512xi32> loc(#loc)
    %82 = arith.cmpi slt, %79, %81 : tensor<512xi32> loc(#loc)
    %83 = tt.splat %mxfp_ptr : !tt.ptr<bf16> -> tensor<512x!tt.ptr<bf16>> loc(#loc)
    %84 = tt.addptr %83, %79 : tensor<512x!tt.ptr<bf16>>, tensor<512xi32> loc(#loc)
    %85 = tt.reshape %74 : tensor<16x32xbf16> -> tensor<512xbf16> loc(#loc)
    tt.store %84, %85, %82 : tensor<512x!tt.ptr<bf16>> loc(#loc)
    tt.return loc(#loc)
  } loc(#loc)
} loc(#loc)
#loc = loc(unknown)


// -----// IR Dump Before TritonCombineOps (triton-combine) ('builtin.module' operation) //----- //
#loc1 = loc("x_ptr")
#loc2 = loc("scale_ptr")
#loc3 = loc("mxfp_ptr")
#loc4 = loc("N")
module {
  tt.func public @mxfp_upcast_kernel(%x_ptr: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("x_ptr"), %scale_ptr: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("scale_ptr"), %mxfp_ptr: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("mxfp_ptr"), %N: i32 {tt.divisibility = 16 : i32} loc("N")) attributes {noinline = false} {
    %c32_i32 = arith.constant 32 : i32 loc(#loc)
    %c512_i32 = arith.constant 512 : i32 loc(#loc)
    %cst = arith.constant dense<0x7FC0> : tensor<16x32xbf16> loc(#loc)
    %cst_0 = arith.constant dense<255> : tensor<16x1xi32> loc(#loc)
    %cst_1 = arith.constant dense<16> : tensor<16x16xi32> loc(#loc)
    %cst_2 = arith.constant dense<-32768> : tensor<16x16xi16> loc(#loc)
    %cst_3 = arith.constant dense<1> : tensor<16x16xi32> loc(#loc)
    %cst_4 = arith.constant dense<96> : tensor<16x16xi8> loc(#loc)
    %cst_5 = arith.constant dense<16128> : tensor<16x16xi16> loc(#loc)
    %cst_6 = arith.constant dense<0> : tensor<16x16xi32> loc(#loc)
    %cst_7 = arith.constant dense<6> : tensor<16x16xi8> loc(#loc)
    %cst_8 = arith.constant dense<8> : tensor<16x16xi16> loc(#loc)
    %cst_9 = arith.constant dense<-128> : tensor<16x16xi8> loc(#loc)
    %cst_10 = arith.constant dense<2> : tensor<16x16xi16> loc(#loc)
    %cst_11 = arith.constant dense<12> : tensor<16x16xi16> loc(#loc)
    %cst_12 = arith.constant dense<8> : tensor<16x16xi8> loc(#loc)
    %cst_13 = arith.constant dense<6> : tensor<16x16xi16> loc(#loc)
    %cst_14 = arith.constant dense<112> : tensor<16x16xi8> loc(#loc)
    %cst_15 = arith.constant dense<7> : tensor<16x16xi8> loc(#loc)
    %cst_16 = arith.constant dense<7> : tensor<16x1xi16> loc(#loc)
    %cst_17 = arith.constant dense<16> : tensor<16x1xi32> loc(#loc)
    %c16_i32 = arith.constant 16 : i32 loc(#loc)
    %c256_i32 = arith.constant 256 : i32 loc(#loc)
    %0 = tt.get_program_id x : i32 loc(#loc)
    %1 = arith.muli %0, %c256_i32 : i32 loc(#loc)
    %2 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32> loc(#loc)
    %3 = tt.expand_dims %2 {axis = 1 : i32} : tensor<16xi32> -> tensor<16x1xi32> loc(#loc)
    %4 = arith.muli %3, %cst_17 : tensor<16x1xi32> loc(#loc)
    %5 = tt.splat %1 : i32 -> tensor<16x1xi32> loc(#loc)
    %6 = arith.addi %5, %4 : tensor<16x1xi32> loc(#loc)
    %7 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32> loc(#loc)
    %8 = tt.expand_dims %7 {axis = 0 : i32} : tensor<16xi32> -> tensor<1x16xi32> loc(#loc)
    %9 = tt.broadcast %6 : tensor<16x1xi32> -> tensor<16x16xi32> loc(#loc)
    %10 = tt.broadcast %8 : tensor<1x16xi32> -> tensor<16x16xi32> loc(#loc)
    %11 = arith.addi %9, %10 : tensor<16x16xi32> loc(#loc)
    %12 = arith.muli %N, %c16_i32 : i32 loc(#loc)
    %13 = tt.splat %12 : i32 -> tensor<16x16xi32> loc(#loc)
    %14 = arith.cmpi slt, %11, %13 : tensor<16x16xi32> loc(#loc)
    %15 = tt.splat %x_ptr : !tt.ptr<i8> -> tensor<16x16x!tt.ptr<i8>> loc(#loc)
    %16 = tt.addptr %15, %11 : tensor<16x16x!tt.ptr<i8>>, tensor<16x16xi32> loc(#loc)
    %17 = tt.load %16, %14 : tensor<16x16x!tt.ptr<i8>> loc(#loc)
    %18 = tt.get_program_id x : i32 loc(#loc)
    %19 = arith.muli %18, %c16_i32 : i32 loc(#loc)
    %20 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32> loc(#loc)
    %21 = tt.expand_dims %20 {axis = 1 : i32} : tensor<16xi32> -> tensor<16x1xi32> loc(#loc)
    %22 = tt.splat %19 : i32 -> tensor<16x1xi32> loc(#loc)
    %23 = arith.addi %22, %21 : tensor<16x1xi32> loc(#loc)
    %24 = tt.splat %N : i32 -> tensor<16x1xi32> loc(#loc)
    %25 = arith.cmpi slt, %23, %24 : tensor<16x1xi32> loc(#loc)
    %26 = tt.splat %scale_ptr : !tt.ptr<i8> -> tensor<16x1x!tt.ptr<i8>> loc(#loc)
    %27 = tt.addptr %26, %23 : tensor<16x1x!tt.ptr<i8>>, tensor<16x1xi32> loc(#loc)
    %28 = tt.load %27, %25 : tensor<16x1x!tt.ptr<i8>> loc(#loc)
    %29 = arith.extui %28 : tensor<16x1xi8> to tensor<16x1xi16> loc(#loc)
    %30 = arith.shli %29, %cst_16 : tensor<16x1xi16> loc(#loc)
    %31 = tt.bitcast %30 : tensor<16x1xi16> -> tensor<16x1xbf16> loc(#loc)
    %32 = arith.andi %17, %cst_15 : tensor<16x16xi8> loc(#loc)
    %33 = arith.andi %17, %cst_14 : tensor<16x16xi8> loc(#loc)
    %34 = arith.extui %32 : tensor<16x16xi8> to tensor<16x16xi16> loc(#loc)
    %35 = arith.shli %34, %cst_13 : tensor<16x16xi16> loc(#loc)
    %36 = arith.andi %17, %cst_12 : tensor<16x16xi8> loc(#loc)
    %37 = arith.extui %36 : tensor<16x16xi8> to tensor<16x16xi16> loc(#loc)
    %38 = arith.shli %37, %cst_11 : tensor<16x16xi16> loc(#loc)
    %39 = arith.ori %35, %38 : tensor<16x16xi16> loc(#loc)
    %40 = arith.extui %33 : tensor<16x16xi8> to tensor<16x16xi16> loc(#loc)
    %41 = arith.shli %40, %cst_10 : tensor<16x16xi16> loc(#loc)
    %42 = arith.andi %17, %cst_9 : tensor<16x16xi8> loc(#loc)
    %43 = arith.extui %42 : tensor<16x16xi8> to tensor<16x16xi16> loc(#loc)
    %44 = arith.shli %43, %cst_8 : tensor<16x16xi16> loc(#loc)
    %45 = arith.ori %41, %44 : tensor<16x16xi16> loc(#loc)
    %46 = arith.andi %32, %cst_7 : tensor<16x16xi8> loc(#loc)
    %47 = arith.extui %46 : tensor<16x16xi8> to tensor<16x16xi32> loc(#loc)
    %48 = arith.cmpi ne, %47, %cst_6 : tensor<16x16xi32> loc(#loc)
    %49 = arith.addi %39, %cst_5 : tensor<16x16xi16> loc(#loc)
    %50 = arith.select %48, %49, %39 : tensor<16x16xi1>, tensor<16x16xi16> loc(#loc)
    %51 = arith.andi %33, %cst_4 : tensor<16x16xi8> loc(#loc)
    %52 = arith.extui %51 : tensor<16x16xi8> to tensor<16x16xi32> loc(#loc)
    %53 = arith.cmpi ne, %52, %cst_6 : tensor<16x16xi32> loc(#loc)
    %54 = arith.addi %45, %cst_5 : tensor<16x16xi16> loc(#loc)
    %55 = arith.select %53, %54, %45 : tensor<16x16xi1>, tensor<16x16xi16> loc(#loc)
    %56 = arith.extui %32 : tensor<16x16xi8> to tensor<16x16xi32> loc(#loc)
    %57 = arith.cmpi eq, %56, %cst_3 : tensor<16x16xi32> loc(#loc)
    %58 = arith.andi %50, %cst_2 : tensor<16x16xi16> loc(#loc)
    %59 = arith.ori %58, %cst_5 : tensor<16x16xi16> loc(#loc)
    %60 = arith.select %57, %59, %50 : tensor<16x16xi1>, tensor<16x16xi16> loc(#loc)
    %61 = arith.extui %33 : tensor<16x16xi8> to tensor<16x16xi32> loc(#loc)
    %62 = arith.cmpi eq, %61, %cst_1 : tensor<16x16xi32> loc(#loc)
    %63 = arith.andi %55, %cst_2 : tensor<16x16xi16> loc(#loc)
    %64 = arith.ori %63, %cst_5 : tensor<16x16xi16> loc(#loc)
    %65 = arith.select %62, %64, %55 : tensor<16x16xi1>, tensor<16x16xi16> loc(#loc)
    %66 = tt.join %60, %65 : tensor<16x16xi16> -> tensor<16x16x2xi16> loc(#loc)
    %67 = tt.reshape %66 : tensor<16x16x2xi16> -> tensor<16x32xi16> loc(#loc)
    %68 = tt.bitcast %67 : tensor<16x32xi16> -> tensor<16x32xbf16> loc(#loc)
    %69 = tt.broadcast %31 : tensor<16x1xbf16> -> tensor<16x32xbf16> loc(#loc)
    %70 = arith.mulf %68, %69 : tensor<16x32xbf16> loc(#loc)
    %71 = arith.extui %28 : tensor<16x1xi8> to tensor<16x1xi32> loc(#loc)
    %72 = arith.cmpi eq, %71, %cst_0 : tensor<16x1xi32> loc(#loc)
    %73 = tt.broadcast %72 : tensor<16x1xi1> -> tensor<16x32xi1> loc(#loc)
    %74 = arith.select %73, %cst, %70 : tensor<16x32xi1>, tensor<16x32xbf16> loc(#loc)
    %75 = tt.get_program_id x : i32 loc(#loc)
    %76 = arith.muli %75, %c512_i32 : i32 loc(#loc)
    %77 = tt.make_range {end = 512 : i32, start = 0 : i32} : tensor<512xi32> loc(#loc)
    %78 = tt.splat %76 : i32 -> tensor<512xi32> loc(#loc)
    %79 = arith.addi %78, %77 : tensor<512xi32> loc(#loc)
    %80 = arith.muli %N, %c32_i32 : i32 loc(#loc)
    %81 = tt.splat %80 : i32 -> tensor<512xi32> loc(#loc)
    %82 = arith.cmpi slt, %79, %81 : tensor<512xi32> loc(#loc)
    %83 = tt.splat %mxfp_ptr : !tt.ptr<bf16> -> tensor<512x!tt.ptr<bf16>> loc(#loc)
    %84 = tt.addptr %83, %79 : tensor<512x!tt.ptr<bf16>>, tensor<512xi32> loc(#loc)
    %85 = tt.reshape %74 : tensor<16x32xbf16> -> tensor<512xbf16> loc(#loc)
    tt.store %84, %85, %82 : tensor<512x!tt.ptr<bf16>> loc(#loc)
    tt.return loc(#loc)
  } loc(#loc)
} loc(#loc)
#loc = loc(unknown)


// -----// IR Dump Before TritonReorderBroadcast (triton-reorder-broadcast) ('builtin.module' operation) //----- //
#loc1 = loc("x_ptr")
#loc2 = loc("scale_ptr")
#loc3 = loc("mxfp_ptr")
#loc4 = loc("N")
module {
  tt.func public @mxfp_upcast_kernel(%x_ptr: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("x_ptr"), %scale_ptr: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("scale_ptr"), %mxfp_ptr: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("mxfp_ptr"), %N: i32 {tt.divisibility = 16 : i32} loc("N")) attributes {noinline = false} {
    %c32_i32 = arith.constant 32 : i32 loc(#loc)
    %c512_i32 = arith.constant 512 : i32 loc(#loc)
    %cst = arith.constant dense<0x7FC0> : tensor<16x32xbf16> loc(#loc)
    %cst_0 = arith.constant dense<255> : tensor<16x1xi32> loc(#loc)
    %cst_1 = arith.constant dense<16> : tensor<16x16xi32> loc(#loc)
    %cst_2 = arith.constant dense<-32768> : tensor<16x16xi16> loc(#loc)
    %cst_3 = arith.constant dense<1> : tensor<16x16xi32> loc(#loc)
    %cst_4 = arith.constant dense<96> : tensor<16x16xi8> loc(#loc)
    %cst_5 = arith.constant dense<16128> : tensor<16x16xi16> loc(#loc)
    %cst_6 = arith.constant dense<0> : tensor<16x16xi32> loc(#loc)
    %cst_7 = arith.constant dense<6> : tensor<16x16xi8> loc(#loc)
    %cst_8 = arith.constant dense<8> : tensor<16x16xi16> loc(#loc)
    %cst_9 = arith.constant dense<-128> : tensor<16x16xi8> loc(#loc)
    %cst_10 = arith.constant dense<2> : tensor<16x16xi16> loc(#loc)
    %cst_11 = arith.constant dense<12> : tensor<16x16xi16> loc(#loc)
    %cst_12 = arith.constant dense<8> : tensor<16x16xi8> loc(#loc)
    %cst_13 = arith.constant dense<6> : tensor<16x16xi16> loc(#loc)
    %cst_14 = arith.constant dense<112> : tensor<16x16xi8> loc(#loc)
    %cst_15 = arith.constant dense<7> : tensor<16x16xi8> loc(#loc)
    %cst_16 = arith.constant dense<7> : tensor<16x1xi16> loc(#loc)
    %cst_17 = arith.constant dense<16> : tensor<16x1xi32> loc(#loc)
    %c16_i32 = arith.constant 16 : i32 loc(#loc)
    %c256_i32 = arith.constant 256 : i32 loc(#loc)
    %0 = tt.get_program_id x : i32 loc(#loc)
    %1 = arith.muli %0, %c256_i32 : i32 loc(#loc)
    %2 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32> loc(#loc)
    %3 = tt.expand_dims %2 {axis = 1 : i32} : tensor<16xi32> -> tensor<16x1xi32> loc(#loc)
    %4 = arith.muli %3, %cst_17 : tensor<16x1xi32> loc(#loc)
    %5 = tt.splat %1 : i32 -> tensor<16x1xi32> loc(#loc)
    %6 = arith.addi %5, %4 : tensor<16x1xi32> loc(#loc)
    %7 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32> loc(#loc)
    %8 = tt.expand_dims %7 {axis = 0 : i32} : tensor<16xi32> -> tensor<1x16xi32> loc(#loc)
    %9 = tt.broadcast %6 : tensor<16x1xi32> -> tensor<16x16xi32> loc(#loc)
    %10 = tt.broadcast %8 : tensor<1x16xi32> -> tensor<16x16xi32> loc(#loc)
    %11 = arith.addi %9, %10 : tensor<16x16xi32> loc(#loc)
    %12 = arith.muli %N, %c16_i32 : i32 loc(#loc)
    %13 = tt.splat %12 : i32 -> tensor<16x16xi32> loc(#loc)
    %14 = arith.cmpi slt, %11, %13 : tensor<16x16xi32> loc(#loc)
    %15 = tt.splat %x_ptr : !tt.ptr<i8> -> tensor<16x16x!tt.ptr<i8>> loc(#loc)
    %16 = tt.addptr %15, %11 : tensor<16x16x!tt.ptr<i8>>, tensor<16x16xi32> loc(#loc)
    %17 = tt.load %16, %14 : tensor<16x16x!tt.ptr<i8>> loc(#loc)
    %18 = tt.get_program_id x : i32 loc(#loc)
    %19 = arith.muli %18, %c16_i32 : i32 loc(#loc)
    %20 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32> loc(#loc)
    %21 = tt.expand_dims %20 {axis = 1 : i32} : tensor<16xi32> -> tensor<16x1xi32> loc(#loc)
    %22 = tt.splat %19 : i32 -> tensor<16x1xi32> loc(#loc)
    %23 = arith.addi %22, %21 : tensor<16x1xi32> loc(#loc)
    %24 = tt.splat %N : i32 -> tensor<16x1xi32> loc(#loc)
    %25 = arith.cmpi slt, %23, %24 : tensor<16x1xi32> loc(#loc)
    %26 = tt.splat %scale_ptr : !tt.ptr<i8> -> tensor<16x1x!tt.ptr<i8>> loc(#loc)
    %27 = tt.addptr %26, %23 : tensor<16x1x!tt.ptr<i8>>, tensor<16x1xi32> loc(#loc)
    %28 = tt.load %27, %25 : tensor<16x1x!tt.ptr<i8>> loc(#loc)
    %29 = arith.extui %28 : tensor<16x1xi8> to tensor<16x1xi16> loc(#loc)
    %30 = arith.shli %29, %cst_16 : tensor<16x1xi16> loc(#loc)
    %31 = tt.bitcast %30 : tensor<16x1xi16> -> tensor<16x1xbf16> loc(#loc)
    %32 = arith.andi %17, %cst_15 : tensor<16x16xi8> loc(#loc)
    %33 = arith.andi %17, %cst_14 : tensor<16x16xi8> loc(#loc)
    %34 = arith.extui %32 : tensor<16x16xi8> to tensor<16x16xi16> loc(#loc)
    %35 = arith.shli %34, %cst_13 : tensor<16x16xi16> loc(#loc)
    %36 = arith.andi %17, %cst_12 : tensor<16x16xi8> loc(#loc)
    %37 = arith.extui %36 : tensor<16x16xi8> to tensor<16x16xi16> loc(#loc)
    %38 = arith.shli %37, %cst_11 : tensor<16x16xi16> loc(#loc)
    %39 = arith.ori %35, %38 : tensor<16x16xi16> loc(#loc)
    %40 = arith.extui %33 : tensor<16x16xi8> to tensor<16x16xi16> loc(#loc)
    %41 = arith.shli %40, %cst_10 : tensor<16x16xi16> loc(#loc)
    %42 = arith.andi %17, %cst_9 : tensor<16x16xi8> loc(#loc)
    %43 = arith.extui %42 : tensor<16x16xi8> to tensor<16x16xi16> loc(#loc)
    %44 = arith.shli %43, %cst_8 : tensor<16x16xi16> loc(#loc)
    %45 = arith.ori %41, %44 : tensor<16x16xi16> loc(#loc)
    %46 = arith.andi %32, %cst_7 : tensor<16x16xi8> loc(#loc)
    %47 = arith.extui %46 : tensor<16x16xi8> to tensor<16x16xi32> loc(#loc)
    %48 = arith.cmpi ne, %47, %cst_6 : tensor<16x16xi32> loc(#loc)
    %49 = arith.addi %39, %cst_5 : tensor<16x16xi16> loc(#loc)
    %50 = arith.select %48, %49, %39 : tensor<16x16xi1>, tensor<16x16xi16> loc(#loc)
    %51 = arith.andi %33, %cst_4 : tensor<16x16xi8> loc(#loc)
    %52 = arith.extui %51 : tensor<16x16xi8> to tensor<16x16xi32> loc(#loc)
    %53 = arith.cmpi ne, %52, %cst_6 : tensor<16x16xi32> loc(#loc)
    %54 = arith.addi %45, %cst_5 : tensor<16x16xi16> loc(#loc)
    %55 = arith.select %53, %54, %45 : tensor<16x16xi1>, tensor<16x16xi16> loc(#loc)
    %56 = arith.extui %32 : tensor<16x16xi8> to tensor<16x16xi32> loc(#loc)
    %57 = arith.cmpi eq, %56, %cst_3 : tensor<16x16xi32> loc(#loc)
    %58 = arith.andi %50, %cst_2 : tensor<16x16xi16> loc(#loc)
    %59 = arith.ori %58, %cst_5 : tensor<16x16xi16> loc(#loc)
    %60 = arith.select %57, %59, %50 : tensor<16x16xi1>, tensor<16x16xi16> loc(#loc)
    %61 = arith.extui %33 : tensor<16x16xi8> to tensor<16x16xi32> loc(#loc)
    %62 = arith.cmpi eq, %61, %cst_1 : tensor<16x16xi32> loc(#loc)
    %63 = arith.andi %55, %cst_2 : tensor<16x16xi16> loc(#loc)
    %64 = arith.ori %63, %cst_5 : tensor<16x16xi16> loc(#loc)
    %65 = arith.select %62, %64, %55 : tensor<16x16xi1>, tensor<16x16xi16> loc(#loc)
    %66 = tt.join %60, %65 : tensor<16x16xi16> -> tensor<16x16x2xi16> loc(#loc)
    %67 = tt.reshape %66 : tensor<16x16x2xi16> -> tensor<16x32xi16> loc(#loc)
    %68 = tt.bitcast %67 : tensor<16x32xi16> -> tensor<16x32xbf16> loc(#loc)
    %69 = tt.broadcast %31 : tensor<16x1xbf16> -> tensor<16x32xbf16> loc(#loc)
    %70 = arith.mulf %68, %69 : tensor<16x32xbf16> loc(#loc)
    %71 = arith.extui %28 : tensor<16x1xi8> to tensor<16x1xi32> loc(#loc)
    %72 = arith.cmpi eq, %71, %cst_0 : tensor<16x1xi32> loc(#loc)
    %73 = tt.broadcast %72 : tensor<16x1xi1> -> tensor<16x32xi1> loc(#loc)
    %74 = arith.select %73, %cst, %70 : tensor<16x32xi1>, tensor<16x32xbf16> loc(#loc)
    %75 = tt.get_program_id x : i32 loc(#loc)
    %76 = arith.muli %75, %c512_i32 : i32 loc(#loc)
    %77 = tt.make_range {end = 512 : i32, start = 0 : i32} : tensor<512xi32> loc(#loc)
    %78 = tt.splat %76 : i32 -> tensor<512xi32> loc(#loc)
    %79 = arith.addi %78, %77 : tensor<512xi32> loc(#loc)
    %80 = arith.muli %N, %c32_i32 : i32 loc(#loc)
    %81 = tt.splat %80 : i32 -> tensor<512xi32> loc(#loc)
    %82 = arith.cmpi slt, %79, %81 : tensor<512xi32> loc(#loc)
    %83 = tt.splat %mxfp_ptr : !tt.ptr<bf16> -> tensor<512x!tt.ptr<bf16>> loc(#loc)
    %84 = tt.addptr %83, %79 : tensor<512x!tt.ptr<bf16>>, tensor<512xi32> loc(#loc)
    %85 = tt.reshape %74 : tensor<16x32xbf16> -> tensor<512xbf16> loc(#loc)
    tt.store %84, %85, %82 : tensor<512x!tt.ptr<bf16>> loc(#loc)
    tt.return loc(#loc)
  } loc(#loc)
} loc(#loc)
#loc = loc(unknown)


// -----// IR Dump Before CSE (cse) ('builtin.module' operation) //----- //
#loc1 = loc("x_ptr")
#loc2 = loc("scale_ptr")
#loc3 = loc("mxfp_ptr")
#loc4 = loc("N")
module {
  tt.func public @mxfp_upcast_kernel(%x_ptr: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("x_ptr"), %scale_ptr: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("scale_ptr"), %mxfp_ptr: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("mxfp_ptr"), %N: i32 {tt.divisibility = 16 : i32} loc("N")) attributes {noinline = false} {
    %c32_i32 = arith.constant 32 : i32 loc(#loc)
    %c512_i32 = arith.constant 512 : i32 loc(#loc)
    %cst = arith.constant dense<0x7FC0> : tensor<16x32xbf16> loc(#loc)
    %cst_0 = arith.constant dense<255> : tensor<16x1xi32> loc(#loc)
    %cst_1 = arith.constant dense<16> : tensor<16x16xi32> loc(#loc)
    %cst_2 = arith.constant dense<-32768> : tensor<16x16xi16> loc(#loc)
    %cst_3 = arith.constant dense<1> : tensor<16x16xi32> loc(#loc)
    %cst_4 = arith.constant dense<96> : tensor<16x16xi8> loc(#loc)
    %cst_5 = arith.constant dense<16128> : tensor<16x16xi16> loc(#loc)
    %cst_6 = arith.constant dense<0> : tensor<16x16xi32> loc(#loc)
    %cst_7 = arith.constant dense<6> : tensor<16x16xi8> loc(#loc)
    %cst_8 = arith.constant dense<8> : tensor<16x16xi16> loc(#loc)
    %cst_9 = arith.constant dense<-128> : tensor<16x16xi8> loc(#loc)
    %cst_10 = arith.constant dense<2> : tensor<16x16xi16> loc(#loc)
    %cst_11 = arith.constant dense<12> : tensor<16x16xi16> loc(#loc)
    %cst_12 = arith.constant dense<8> : tensor<16x16xi8> loc(#loc)
    %cst_13 = arith.constant dense<6> : tensor<16x16xi16> loc(#loc)
    %cst_14 = arith.constant dense<112> : tensor<16x16xi8> loc(#loc)
    %cst_15 = arith.constant dense<7> : tensor<16x16xi8> loc(#loc)
    %cst_16 = arith.constant dense<7> : tensor<16x1xi16> loc(#loc)
    %cst_17 = arith.constant dense<16> : tensor<16x1xi32> loc(#loc)
    %c16_i32 = arith.constant 16 : i32 loc(#loc)
    %c256_i32 = arith.constant 256 : i32 loc(#loc)
    %0 = tt.get_program_id x : i32 loc(#loc)
    %1 = arith.muli %0, %c256_i32 : i32 loc(#loc)
    %2 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32> loc(#loc)
    %3 = tt.expand_dims %2 {axis = 1 : i32} : tensor<16xi32> -> tensor<16x1xi32> loc(#loc)
    %4 = arith.muli %3, %cst_17 : tensor<16x1xi32> loc(#loc)
    %5 = tt.splat %1 : i32 -> tensor<16x1xi32> loc(#loc)
    %6 = arith.addi %5, %4 : tensor<16x1xi32> loc(#loc)
    %7 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32> loc(#loc)
    %8 = tt.expand_dims %7 {axis = 0 : i32} : tensor<16xi32> -> tensor<1x16xi32> loc(#loc)
    %9 = tt.broadcast %6 : tensor<16x1xi32> -> tensor<16x16xi32> loc(#loc)
    %10 = tt.broadcast %8 : tensor<1x16xi32> -> tensor<16x16xi32> loc(#loc)
    %11 = arith.addi %9, %10 : tensor<16x16xi32> loc(#loc)
    %12 = arith.muli %N, %c16_i32 : i32 loc(#loc)
    %13 = tt.splat %12 : i32 -> tensor<16x16xi32> loc(#loc)
    %14 = arith.cmpi slt, %11, %13 : tensor<16x16xi32> loc(#loc)
    %15 = tt.splat %x_ptr : !tt.ptr<i8> -> tensor<16x16x!tt.ptr<i8>> loc(#loc)
    %16 = tt.addptr %15, %11 : tensor<16x16x!tt.ptr<i8>>, tensor<16x16xi32> loc(#loc)
    %17 = tt.load %16, %14 : tensor<16x16x!tt.ptr<i8>> loc(#loc)
    %18 = tt.get_program_id x : i32 loc(#loc)
    %19 = arith.muli %18, %c16_i32 : i32 loc(#loc)
    %20 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32> loc(#loc)
    %21 = tt.expand_dims %20 {axis = 1 : i32} : tensor<16xi32> -> tensor<16x1xi32> loc(#loc)
    %22 = tt.splat %19 : i32 -> tensor<16x1xi32> loc(#loc)
    %23 = arith.addi %22, %21 : tensor<16x1xi32> loc(#loc)
    %24 = tt.splat %N : i32 -> tensor<16x1xi32> loc(#loc)
    %25 = arith.cmpi slt, %23, %24 : tensor<16x1xi32> loc(#loc)
    %26 = tt.splat %scale_ptr : !tt.ptr<i8> -> tensor<16x1x!tt.ptr<i8>> loc(#loc)
    %27 = tt.addptr %26, %23 : tensor<16x1x!tt.ptr<i8>>, tensor<16x1xi32> loc(#loc)
    %28 = tt.load %27, %25 : tensor<16x1x!tt.ptr<i8>> loc(#loc)
    %29 = arith.extui %28 : tensor<16x1xi8> to tensor<16x1xi16> loc(#loc)
    %30 = arith.shli %29, %cst_16 : tensor<16x1xi16> loc(#loc)
    %31 = tt.bitcast %30 : tensor<16x1xi16> -> tensor<16x1xbf16> loc(#loc)
    %32 = arith.andi %17, %cst_15 : tensor<16x16xi8> loc(#loc)
    %33 = arith.andi %17, %cst_14 : tensor<16x16xi8> loc(#loc)
    %34 = arith.extui %32 : tensor<16x16xi8> to tensor<16x16xi16> loc(#loc)
    %35 = arith.shli %34, %cst_13 : tensor<16x16xi16> loc(#loc)
    %36 = arith.andi %17, %cst_12 : tensor<16x16xi8> loc(#loc)
    %37 = arith.extui %36 : tensor<16x16xi8> to tensor<16x16xi16> loc(#loc)
    %38 = arith.shli %37, %cst_11 : tensor<16x16xi16> loc(#loc)
    %39 = arith.ori %35, %38 : tensor<16x16xi16> loc(#loc)
    %40 = arith.extui %33 : tensor<16x16xi8> to tensor<16x16xi16> loc(#loc)
    %41 = arith.shli %40, %cst_10 : tensor<16x16xi16> loc(#loc)
    %42 = arith.andi %17, %cst_9 : tensor<16x16xi8> loc(#loc)
    %43 = arith.extui %42 : tensor<16x16xi8> to tensor<16x16xi16> loc(#loc)
    %44 = arith.shli %43, %cst_8 : tensor<16x16xi16> loc(#loc)
    %45 = arith.ori %41, %44 : tensor<16x16xi16> loc(#loc)
    %46 = arith.andi %32, %cst_7 : tensor<16x16xi8> loc(#loc)
    %47 = arith.extui %46 : tensor<16x16xi8> to tensor<16x16xi32> loc(#loc)
    %48 = arith.cmpi ne, %47, %cst_6 : tensor<16x16xi32> loc(#loc)
    %49 = arith.addi %39, %cst_5 : tensor<16x16xi16> loc(#loc)
    %50 = arith.select %48, %49, %39 : tensor<16x16xi1>, tensor<16x16xi16> loc(#loc)
    %51 = arith.andi %33, %cst_4 : tensor<16x16xi8> loc(#loc)
    %52 = arith.extui %51 : tensor<16x16xi8> to tensor<16x16xi32> loc(#loc)
    %53 = arith.cmpi ne, %52, %cst_6 : tensor<16x16xi32> loc(#loc)
    %54 = arith.addi %45, %cst_5 : tensor<16x16xi16> loc(#loc)
    %55 = arith.select %53, %54, %45 : tensor<16x16xi1>, tensor<16x16xi16> loc(#loc)
    %56 = arith.extui %32 : tensor<16x16xi8> to tensor<16x16xi32> loc(#loc)
    %57 = arith.cmpi eq, %56, %cst_3 : tensor<16x16xi32> loc(#loc)
    %58 = arith.andi %50, %cst_2 : tensor<16x16xi16> loc(#loc)
    %59 = arith.ori %58, %cst_5 : tensor<16x16xi16> loc(#loc)
    %60 = arith.select %57, %59, %50 : tensor<16x16xi1>, tensor<16x16xi16> loc(#loc)
    %61 = arith.extui %33 : tensor<16x16xi8> to tensor<16x16xi32> loc(#loc)
    %62 = arith.cmpi eq, %61, %cst_1 : tensor<16x16xi32> loc(#loc)
    %63 = arith.andi %55, %cst_2 : tensor<16x16xi16> loc(#loc)
    %64 = arith.ori %63, %cst_5 : tensor<16x16xi16> loc(#loc)
    %65 = arith.select %62, %64, %55 : tensor<16x16xi1>, tensor<16x16xi16> loc(#loc)
    %66 = tt.join %60, %65 : tensor<16x16xi16> -> tensor<16x16x2xi16> loc(#loc)
    %67 = tt.reshape %66 : tensor<16x16x2xi16> -> tensor<16x32xi16> loc(#loc)
    %68 = tt.bitcast %67 : tensor<16x32xi16> -> tensor<16x32xbf16> loc(#loc)
    %69 = tt.broadcast %31 : tensor<16x1xbf16> -> tensor<16x32xbf16> loc(#loc)
    %70 = arith.mulf %68, %69 : tensor<16x32xbf16> loc(#loc)
    %71 = arith.extui %28 : tensor<16x1xi8> to tensor<16x1xi32> loc(#loc)
    %72 = arith.cmpi eq, %71, %cst_0 : tensor<16x1xi32> loc(#loc)
    %73 = tt.broadcast %72 : tensor<16x1xi1> -> tensor<16x32xi1> loc(#loc)
    %74 = arith.select %73, %cst, %70 : tensor<16x32xi1>, tensor<16x32xbf16> loc(#loc)
    %75 = tt.get_program_id x : i32 loc(#loc)
    %76 = arith.muli %75, %c512_i32 : i32 loc(#loc)
    %77 = tt.make_range {end = 512 : i32, start = 0 : i32} : tensor<512xi32> loc(#loc)
    %78 = tt.splat %76 : i32 -> tensor<512xi32> loc(#loc)
    %79 = arith.addi %78, %77 : tensor<512xi32> loc(#loc)
    %80 = arith.muli %N, %c32_i32 : i32 loc(#loc)
    %81 = tt.splat %80 : i32 -> tensor<512xi32> loc(#loc)
    %82 = arith.cmpi slt, %79, %81 : tensor<512xi32> loc(#loc)
    %83 = tt.splat %mxfp_ptr : !tt.ptr<bf16> -> tensor<512x!tt.ptr<bf16>> loc(#loc)
    %84 = tt.addptr %83, %79 : tensor<512x!tt.ptr<bf16>>, tensor<512xi32> loc(#loc)
    %85 = tt.reshape %74 : tensor<16x32xbf16> -> tensor<512xbf16> loc(#loc)
    tt.store %84, %85, %82 : tensor<512x!tt.ptr<bf16>> loc(#loc)
    tt.return loc(#loc)
  } loc(#loc)
} loc(#loc)
#loc = loc(unknown)


// -----// IR Dump Before TritonLoopInvariantCodeMotion (triton-licm) ('builtin.module' operation) //----- //
#loc1 = loc("x_ptr")
#loc2 = loc("scale_ptr")
#loc3 = loc("mxfp_ptr")
#loc4 = loc("N")
module {
  tt.func public @mxfp_upcast_kernel(%x_ptr: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("x_ptr"), %scale_ptr: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("scale_ptr"), %mxfp_ptr: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("mxfp_ptr"), %N: i32 {tt.divisibility = 16 : i32} loc("N")) attributes {noinline = false} {
    %c32_i32 = arith.constant 32 : i32 loc(#loc)
    %c512_i32 = arith.constant 512 : i32 loc(#loc)
    %cst = arith.constant dense<0x7FC0> : tensor<16x32xbf16> loc(#loc)
    %cst_0 = arith.constant dense<255> : tensor<16x1xi32> loc(#loc)
    %cst_1 = arith.constant dense<16> : tensor<16x16xi32> loc(#loc)
    %cst_2 = arith.constant dense<-32768> : tensor<16x16xi16> loc(#loc)
    %cst_3 = arith.constant dense<1> : tensor<16x16xi32> loc(#loc)
    %cst_4 = arith.constant dense<96> : tensor<16x16xi8> loc(#loc)
    %cst_5 = arith.constant dense<16128> : tensor<16x16xi16> loc(#loc)
    %cst_6 = arith.constant dense<0> : tensor<16x16xi32> loc(#loc)
    %cst_7 = arith.constant dense<6> : tensor<16x16xi8> loc(#loc)
    %cst_8 = arith.constant dense<8> : tensor<16x16xi16> loc(#loc)
    %cst_9 = arith.constant dense<-128> : tensor<16x16xi8> loc(#loc)
    %cst_10 = arith.constant dense<2> : tensor<16x16xi16> loc(#loc)
    %cst_11 = arith.constant dense<12> : tensor<16x16xi16> loc(#loc)
    %cst_12 = arith.constant dense<8> : tensor<16x16xi8> loc(#loc)
    %cst_13 = arith.constant dense<6> : tensor<16x16xi16> loc(#loc)
    %cst_14 = arith.constant dense<112> : tensor<16x16xi8> loc(#loc)
    %cst_15 = arith.constant dense<7> : tensor<16x16xi8> loc(#loc)
    %cst_16 = arith.constant dense<7> : tensor<16x1xi16> loc(#loc)
    %cst_17 = arith.constant dense<16> : tensor<16x1xi32> loc(#loc)
    %c16_i32 = arith.constant 16 : i32 loc(#loc)
    %c256_i32 = arith.constant 256 : i32 loc(#loc)
    %0 = tt.get_program_id x : i32 loc(#loc)
    %1 = arith.muli %0, %c256_i32 : i32 loc(#loc)
    %2 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32> loc(#loc)
    %3 = tt.expand_dims %2 {axis = 1 : i32} : tensor<16xi32> -> tensor<16x1xi32> loc(#loc)
    %4 = arith.muli %3, %cst_17 : tensor<16x1xi32> loc(#loc)
    %5 = tt.splat %1 : i32 -> tensor<16x1xi32> loc(#loc)
    %6 = arith.addi %5, %4 : tensor<16x1xi32> loc(#loc)
    %7 = tt.expand_dims %2 {axis = 0 : i32} : tensor<16xi32> -> tensor<1x16xi32> loc(#loc)
    %8 = tt.broadcast %6 : tensor<16x1xi32> -> tensor<16x16xi32> loc(#loc)
    %9 = tt.broadcast %7 : tensor<1x16xi32> -> tensor<16x16xi32> loc(#loc)
    %10 = arith.addi %8, %9 : tensor<16x16xi32> loc(#loc)
    %11 = arith.muli %N, %c16_i32 : i32 loc(#loc)
    %12 = tt.splat %11 : i32 -> tensor<16x16xi32> loc(#loc)
    %13 = arith.cmpi slt, %10, %12 : tensor<16x16xi32> loc(#loc)
    %14 = tt.splat %x_ptr : !tt.ptr<i8> -> tensor<16x16x!tt.ptr<i8>> loc(#loc)
    %15 = tt.addptr %14, %10 : tensor<16x16x!tt.ptr<i8>>, tensor<16x16xi32> loc(#loc)
    %16 = tt.load %15, %13 : tensor<16x16x!tt.ptr<i8>> loc(#loc)
    %17 = arith.muli %0, %c16_i32 : i32 loc(#loc)
    %18 = tt.splat %17 : i32 -> tensor<16x1xi32> loc(#loc)
    %19 = arith.addi %18, %3 : tensor<16x1xi32> loc(#loc)
    %20 = tt.splat %N : i32 -> tensor<16x1xi32> loc(#loc)
    %21 = arith.cmpi slt, %19, %20 : tensor<16x1xi32> loc(#loc)
    %22 = tt.splat %scale_ptr : !tt.ptr<i8> -> tensor<16x1x!tt.ptr<i8>> loc(#loc)
    %23 = tt.addptr %22, %19 : tensor<16x1x!tt.ptr<i8>>, tensor<16x1xi32> loc(#loc)
    %24 = tt.load %23, %21 : tensor<16x1x!tt.ptr<i8>> loc(#loc)
    %25 = arith.extui %24 : tensor<16x1xi8> to tensor<16x1xi16> loc(#loc)
    %26 = arith.shli %25, %cst_16 : tensor<16x1xi16> loc(#loc)
    %27 = tt.bitcast %26 : tensor<16x1xi16> -> tensor<16x1xbf16> loc(#loc)
    %28 = arith.andi %16, %cst_15 : tensor<16x16xi8> loc(#loc)
    %29 = arith.andi %16, %cst_14 : tensor<16x16xi8> loc(#loc)
    %30 = arith.extui %28 : tensor<16x16xi8> to tensor<16x16xi16> loc(#loc)
    %31 = arith.shli %30, %cst_13 : tensor<16x16xi16> loc(#loc)
    %32 = arith.andi %16, %cst_12 : tensor<16x16xi8> loc(#loc)
    %33 = arith.extui %32 : tensor<16x16xi8> to tensor<16x16xi16> loc(#loc)
    %34 = arith.shli %33, %cst_11 : tensor<16x16xi16> loc(#loc)
    %35 = arith.ori %31, %34 : tensor<16x16xi16> loc(#loc)
    %36 = arith.extui %29 : tensor<16x16xi8> to tensor<16x16xi16> loc(#loc)
    %37 = arith.shli %36, %cst_10 : tensor<16x16xi16> loc(#loc)
    %38 = arith.andi %16, %cst_9 : tensor<16x16xi8> loc(#loc)
    %39 = arith.extui %38 : tensor<16x16xi8> to tensor<16x16xi16> loc(#loc)
    %40 = arith.shli %39, %cst_8 : tensor<16x16xi16> loc(#loc)
    %41 = arith.ori %37, %40 : tensor<16x16xi16> loc(#loc)
    %42 = arith.andi %28, %cst_7 : tensor<16x16xi8> loc(#loc)
    %43 = arith.extui %42 : tensor<16x16xi8> to tensor<16x16xi32> loc(#loc)
    %44 = arith.cmpi ne, %43, %cst_6 : tensor<16x16xi32> loc(#loc)
    %45 = arith.addi %35, %cst_5 : tensor<16x16xi16> loc(#loc)
    %46 = arith.select %44, %45, %35 : tensor<16x16xi1>, tensor<16x16xi16> loc(#loc)
    %47 = arith.andi %29, %cst_4 : tensor<16x16xi8> loc(#loc)
    %48 = arith.extui %47 : tensor<16x16xi8> to tensor<16x16xi32> loc(#loc)
    %49 = arith.cmpi ne, %48, %cst_6 : tensor<16x16xi32> loc(#loc)
    %50 = arith.addi %41, %cst_5 : tensor<16x16xi16> loc(#loc)
    %51 = arith.select %49, %50, %41 : tensor<16x16xi1>, tensor<16x16xi16> loc(#loc)
    %52 = arith.extui %28 : tensor<16x16xi8> to tensor<16x16xi32> loc(#loc)
    %53 = arith.cmpi eq, %52, %cst_3 : tensor<16x16xi32> loc(#loc)
    %54 = arith.andi %46, %cst_2 : tensor<16x16xi16> loc(#loc)
    %55 = arith.ori %54, %cst_5 : tensor<16x16xi16> loc(#loc)
    %56 = arith.select %53, %55, %46 : tensor<16x16xi1>, tensor<16x16xi16> loc(#loc)
    %57 = arith.extui %29 : tensor<16x16xi8> to tensor<16x16xi32> loc(#loc)
    %58 = arith.cmpi eq, %57, %cst_1 : tensor<16x16xi32> loc(#loc)
    %59 = arith.andi %51, %cst_2 : tensor<16x16xi16> loc(#loc)
    %60 = arith.ori %59, %cst_5 : tensor<16x16xi16> loc(#loc)
    %61 = arith.select %58, %60, %51 : tensor<16x16xi1>, tensor<16x16xi16> loc(#loc)
    %62 = tt.join %56, %61 : tensor<16x16xi16> -> tensor<16x16x2xi16> loc(#loc)
    %63 = tt.reshape %62 : tensor<16x16x2xi16> -> tensor<16x32xi16> loc(#loc)
    %64 = tt.bitcast %63 : tensor<16x32xi16> -> tensor<16x32xbf16> loc(#loc)
    %65 = tt.broadcast %27 : tensor<16x1xbf16> -> tensor<16x32xbf16> loc(#loc)
    %66 = arith.mulf %64, %65 : tensor<16x32xbf16> loc(#loc)
    %67 = arith.extui %24 : tensor<16x1xi8> to tensor<16x1xi32> loc(#loc)
    %68 = arith.cmpi eq, %67, %cst_0 : tensor<16x1xi32> loc(#loc)
    %69 = tt.broadcast %68 : tensor<16x1xi1> -> tensor<16x32xi1> loc(#loc)
    %70 = arith.select %69, %cst, %66 : tensor<16x32xi1>, tensor<16x32xbf16> loc(#loc)
    %71 = arith.muli %0, %c512_i32 : i32 loc(#loc)
    %72 = tt.make_range {end = 512 : i32, start = 0 : i32} : tensor<512xi32> loc(#loc)
    %73 = tt.splat %71 : i32 -> tensor<512xi32> loc(#loc)
    %74 = arith.addi %73, %72 : tensor<512xi32> loc(#loc)
    %75 = arith.muli %N, %c32_i32 : i32 loc(#loc)
    %76 = tt.splat %75 : i32 -> tensor<512xi32> loc(#loc)
    %77 = arith.cmpi slt, %74, %76 : tensor<512xi32> loc(#loc)
    %78 = tt.splat %mxfp_ptr : !tt.ptr<bf16> -> tensor<512x!tt.ptr<bf16>> loc(#loc)
    %79 = tt.addptr %78, %74 : tensor<512x!tt.ptr<bf16>>, tensor<512xi32> loc(#loc)
    %80 = tt.reshape %70 : tensor<16x32xbf16> -> tensor<512xbf16> loc(#loc)
    tt.store %79, %80, %77 : tensor<512x!tt.ptr<bf16>> loc(#loc)
    tt.return loc(#loc)
  } loc(#loc)
} loc(#loc)
#loc = loc(unknown)


// -----// IR Dump Before SymbolDCE (symbol-dce) ('builtin.module' operation) //----- //
#loc1 = loc("x_ptr")
#loc2 = loc("scale_ptr")
#loc3 = loc("mxfp_ptr")
#loc4 = loc("N")
module {
  tt.func public @mxfp_upcast_kernel(%x_ptr: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("x_ptr"), %scale_ptr: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("scale_ptr"), %mxfp_ptr: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("mxfp_ptr"), %N: i32 {tt.divisibility = 16 : i32} loc("N")) attributes {noinline = false} {
    %c32_i32 = arith.constant 32 : i32 loc(#loc)
    %c512_i32 = arith.constant 512 : i32 loc(#loc)
    %cst = arith.constant dense<0x7FC0> : tensor<16x32xbf16> loc(#loc)
    %cst_0 = arith.constant dense<255> : tensor<16x1xi32> loc(#loc)
    %cst_1 = arith.constant dense<16> : tensor<16x16xi32> loc(#loc)
    %cst_2 = arith.constant dense<-32768> : tensor<16x16xi16> loc(#loc)
    %cst_3 = arith.constant dense<1> : tensor<16x16xi32> loc(#loc)
    %cst_4 = arith.constant dense<96> : tensor<16x16xi8> loc(#loc)
    %cst_5 = arith.constant dense<16128> : tensor<16x16xi16> loc(#loc)
    %cst_6 = arith.constant dense<0> : tensor<16x16xi32> loc(#loc)
    %cst_7 = arith.constant dense<6> : tensor<16x16xi8> loc(#loc)
    %cst_8 = arith.constant dense<8> : tensor<16x16xi16> loc(#loc)
    %cst_9 = arith.constant dense<-128> : tensor<16x16xi8> loc(#loc)
    %cst_10 = arith.constant dense<2> : tensor<16x16xi16> loc(#loc)
    %cst_11 = arith.constant dense<12> : tensor<16x16xi16> loc(#loc)
    %cst_12 = arith.constant dense<8> : tensor<16x16xi8> loc(#loc)
    %cst_13 = arith.constant dense<6> : tensor<16x16xi16> loc(#loc)
    %cst_14 = arith.constant dense<112> : tensor<16x16xi8> loc(#loc)
    %cst_15 = arith.constant dense<7> : tensor<16x16xi8> loc(#loc)
    %cst_16 = arith.constant dense<7> : tensor<16x1xi16> loc(#loc)
    %cst_17 = arith.constant dense<16> : tensor<16x1xi32> loc(#loc)
    %c16_i32 = arith.constant 16 : i32 loc(#loc)
    %c256_i32 = arith.constant 256 : i32 loc(#loc)
    %0 = tt.get_program_id x : i32 loc(#loc)
    %1 = arith.muli %0, %c256_i32 : i32 loc(#loc)
    %2 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32> loc(#loc)
    %3 = tt.expand_dims %2 {axis = 1 : i32} : tensor<16xi32> -> tensor<16x1xi32> loc(#loc)
    %4 = arith.muli %3, %cst_17 : tensor<16x1xi32> loc(#loc)
    %5 = tt.splat %1 : i32 -> tensor<16x1xi32> loc(#loc)
    %6 = arith.addi %5, %4 : tensor<16x1xi32> loc(#loc)
    %7 = tt.expand_dims %2 {axis = 0 : i32} : tensor<16xi32> -> tensor<1x16xi32> loc(#loc)
    %8 = tt.broadcast %6 : tensor<16x1xi32> -> tensor<16x16xi32> loc(#loc)
    %9 = tt.broadcast %7 : tensor<1x16xi32> -> tensor<16x16xi32> loc(#loc)
    %10 = arith.addi %8, %9 : tensor<16x16xi32> loc(#loc)
    %11 = arith.muli %N, %c16_i32 : i32 loc(#loc)
    %12 = tt.splat %11 : i32 -> tensor<16x16xi32> loc(#loc)
    %13 = arith.cmpi slt, %10, %12 : tensor<16x16xi32> loc(#loc)
    %14 = tt.splat %x_ptr : !tt.ptr<i8> -> tensor<16x16x!tt.ptr<i8>> loc(#loc)
    %15 = tt.addptr %14, %10 : tensor<16x16x!tt.ptr<i8>>, tensor<16x16xi32> loc(#loc)
    %16 = tt.load %15, %13 : tensor<16x16x!tt.ptr<i8>> loc(#loc)
    %17 = arith.muli %0, %c16_i32 : i32 loc(#loc)
    %18 = tt.splat %17 : i32 -> tensor<16x1xi32> loc(#loc)
    %19 = arith.addi %18, %3 : tensor<16x1xi32> loc(#loc)
    %20 = tt.splat %N : i32 -> tensor<16x1xi32> loc(#loc)
    %21 = arith.cmpi slt, %19, %20 : tensor<16x1xi32> loc(#loc)
    %22 = tt.splat %scale_ptr : !tt.ptr<i8> -> tensor<16x1x!tt.ptr<i8>> loc(#loc)
    %23 = tt.addptr %22, %19 : tensor<16x1x!tt.ptr<i8>>, tensor<16x1xi32> loc(#loc)
    %24 = tt.load %23, %21 : tensor<16x1x!tt.ptr<i8>> loc(#loc)
    %25 = arith.extui %24 : tensor<16x1xi8> to tensor<16x1xi16> loc(#loc)
    %26 = arith.shli %25, %cst_16 : tensor<16x1xi16> loc(#loc)
    %27 = tt.bitcast %26 : tensor<16x1xi16> -> tensor<16x1xbf16> loc(#loc)
    %28 = arith.andi %16, %cst_15 : tensor<16x16xi8> loc(#loc)
    %29 = arith.andi %16, %cst_14 : tensor<16x16xi8> loc(#loc)
    %30 = arith.extui %28 : tensor<16x16xi8> to tensor<16x16xi16> loc(#loc)
    %31 = arith.shli %30, %cst_13 : tensor<16x16xi16> loc(#loc)
    %32 = arith.andi %16, %cst_12 : tensor<16x16xi8> loc(#loc)
    %33 = arith.extui %32 : tensor<16x16xi8> to tensor<16x16xi16> loc(#loc)
    %34 = arith.shli %33, %cst_11 : tensor<16x16xi16> loc(#loc)
    %35 = arith.ori %31, %34 : tensor<16x16xi16> loc(#loc)
    %36 = arith.extui %29 : tensor<16x16xi8> to tensor<16x16xi16> loc(#loc)
    %37 = arith.shli %36, %cst_10 : tensor<16x16xi16> loc(#loc)
    %38 = arith.andi %16, %cst_9 : tensor<16x16xi8> loc(#loc)
    %39 = arith.extui %38 : tensor<16x16xi8> to tensor<16x16xi16> loc(#loc)
    %40 = arith.shli %39, %cst_8 : tensor<16x16xi16> loc(#loc)
    %41 = arith.ori %37, %40 : tensor<16x16xi16> loc(#loc)
    %42 = arith.andi %28, %cst_7 : tensor<16x16xi8> loc(#loc)
    %43 = arith.extui %42 : tensor<16x16xi8> to tensor<16x16xi32> loc(#loc)
    %44 = arith.cmpi ne, %43, %cst_6 : tensor<16x16xi32> loc(#loc)
    %45 = arith.addi %35, %cst_5 : tensor<16x16xi16> loc(#loc)
    %46 = arith.select %44, %45, %35 : tensor<16x16xi1>, tensor<16x16xi16> loc(#loc)
    %47 = arith.andi %29, %cst_4 : tensor<16x16xi8> loc(#loc)
    %48 = arith.extui %47 : tensor<16x16xi8> to tensor<16x16xi32> loc(#loc)
    %49 = arith.cmpi ne, %48, %cst_6 : tensor<16x16xi32> loc(#loc)
    %50 = arith.addi %41, %cst_5 : tensor<16x16xi16> loc(#loc)
    %51 = arith.select %49, %50, %41 : tensor<16x16xi1>, tensor<16x16xi16> loc(#loc)
    %52 = arith.extui %28 : tensor<16x16xi8> to tensor<16x16xi32> loc(#loc)
    %53 = arith.cmpi eq, %52, %cst_3 : tensor<16x16xi32> loc(#loc)
    %54 = arith.andi %46, %cst_2 : tensor<16x16xi16> loc(#loc)
    %55 = arith.ori %54, %cst_5 : tensor<16x16xi16> loc(#loc)
    %56 = arith.select %53, %55, %46 : tensor<16x16xi1>, tensor<16x16xi16> loc(#loc)
    %57 = arith.extui %29 : tensor<16x16xi8> to tensor<16x16xi32> loc(#loc)
    %58 = arith.cmpi eq, %57, %cst_1 : tensor<16x16xi32> loc(#loc)
    %59 = arith.andi %51, %cst_2 : tensor<16x16xi16> loc(#loc)
    %60 = arith.ori %59, %cst_5 : tensor<16x16xi16> loc(#loc)
    %61 = arith.select %58, %60, %51 : tensor<16x16xi1>, tensor<16x16xi16> loc(#loc)
    %62 = tt.join %56, %61 : tensor<16x16xi16> -> tensor<16x16x2xi16> loc(#loc)
    %63 = tt.reshape %62 : tensor<16x16x2xi16> -> tensor<16x32xi16> loc(#loc)
    %64 = tt.bitcast %63 : tensor<16x32xi16> -> tensor<16x32xbf16> loc(#loc)
    %65 = tt.broadcast %27 : tensor<16x1xbf16> -> tensor<16x32xbf16> loc(#loc)
    %66 = arith.mulf %64, %65 : tensor<16x32xbf16> loc(#loc)
    %67 = arith.extui %24 : tensor<16x1xi8> to tensor<16x1xi32> loc(#loc)
    %68 = arith.cmpi eq, %67, %cst_0 : tensor<16x1xi32> loc(#loc)
    %69 = tt.broadcast %68 : tensor<16x1xi1> -> tensor<16x32xi1> loc(#loc)
    %70 = arith.select %69, %cst, %66 : tensor<16x32xi1>, tensor<16x32xbf16> loc(#loc)
    %71 = arith.muli %0, %c512_i32 : i32 loc(#loc)
    %72 = tt.make_range {end = 512 : i32, start = 0 : i32} : tensor<512xi32> loc(#loc)
    %73 = tt.splat %71 : i32 -> tensor<512xi32> loc(#loc)
    %74 = arith.addi %73, %72 : tensor<512xi32> loc(#loc)
    %75 = arith.muli %N, %c32_i32 : i32 loc(#loc)
    %76 = tt.splat %75 : i32 -> tensor<512xi32> loc(#loc)
    %77 = arith.cmpi slt, %74, %76 : tensor<512xi32> loc(#loc)
    %78 = tt.splat %mxfp_ptr : !tt.ptr<bf16> -> tensor<512x!tt.ptr<bf16>> loc(#loc)
    %79 = tt.addptr %78, %74 : tensor<512x!tt.ptr<bf16>>, tensor<512xi32> loc(#loc)
    %80 = tt.reshape %70 : tensor<16x32xbf16> -> tensor<512xbf16> loc(#loc)
    tt.store %79, %80, %77 : tensor<512x!tt.ptr<bf16>> loc(#loc)
    tt.return loc(#loc)
  } loc(#loc)
} loc(#loc)
#loc = loc(unknown)


// -----// IR Dump Before TritonLoopUnroll (triton-loop-unroll) ('builtin.module' operation) //----- //
#loc1 = loc("x_ptr")
#loc2 = loc("scale_ptr")
#loc3 = loc("mxfp_ptr")
#loc4 = loc("N")
module {
  tt.func public @mxfp_upcast_kernel(%x_ptr: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("x_ptr"), %scale_ptr: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("scale_ptr"), %mxfp_ptr: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("mxfp_ptr"), %N: i32 {tt.divisibility = 16 : i32} loc("N")) attributes {noinline = false} {
    %c32_i32 = arith.constant 32 : i32 loc(#loc)
    %c512_i32 = arith.constant 512 : i32 loc(#loc)
    %cst = arith.constant dense<0x7FC0> : tensor<16x32xbf16> loc(#loc)
    %cst_0 = arith.constant dense<255> : tensor<16x1xi32> loc(#loc)
    %cst_1 = arith.constant dense<16> : tensor<16x16xi32> loc(#loc)
    %cst_2 = arith.constant dense<-32768> : tensor<16x16xi16> loc(#loc)
    %cst_3 = arith.constant dense<1> : tensor<16x16xi32> loc(#loc)
    %cst_4 = arith.constant dense<96> : tensor<16x16xi8> loc(#loc)
    %cst_5 = arith.constant dense<16128> : tensor<16x16xi16> loc(#loc)
    %cst_6 = arith.constant dense<0> : tensor<16x16xi32> loc(#loc)
    %cst_7 = arith.constant dense<6> : tensor<16x16xi8> loc(#loc)
    %cst_8 = arith.constant dense<8> : tensor<16x16xi16> loc(#loc)
    %cst_9 = arith.constant dense<-128> : tensor<16x16xi8> loc(#loc)
    %cst_10 = arith.constant dense<2> : tensor<16x16xi16> loc(#loc)
    %cst_11 = arith.constant dense<12> : tensor<16x16xi16> loc(#loc)
    %cst_12 = arith.constant dense<8> : tensor<16x16xi8> loc(#loc)
    %cst_13 = arith.constant dense<6> : tensor<16x16xi16> loc(#loc)
    %cst_14 = arith.constant dense<112> : tensor<16x16xi8> loc(#loc)
    %cst_15 = arith.constant dense<7> : tensor<16x16xi8> loc(#loc)
    %cst_16 = arith.constant dense<7> : tensor<16x1xi16> loc(#loc)
    %cst_17 = arith.constant dense<16> : tensor<16x1xi32> loc(#loc)
    %c16_i32 = arith.constant 16 : i32 loc(#loc)
    %c256_i32 = arith.constant 256 : i32 loc(#loc)
    %0 = tt.get_program_id x : i32 loc(#loc)
    %1 = arith.muli %0, %c256_i32 : i32 loc(#loc)
    %2 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32> loc(#loc)
    %3 = tt.expand_dims %2 {axis = 1 : i32} : tensor<16xi32> -> tensor<16x1xi32> loc(#loc)
    %4 = arith.muli %3, %cst_17 : tensor<16x1xi32> loc(#loc)
    %5 = tt.splat %1 : i32 -> tensor<16x1xi32> loc(#loc)
    %6 = arith.addi %5, %4 : tensor<16x1xi32> loc(#loc)
    %7 = tt.expand_dims %2 {axis = 0 : i32} : tensor<16xi32> -> tensor<1x16xi32> loc(#loc)
    %8 = tt.broadcast %6 : tensor<16x1xi32> -> tensor<16x16xi32> loc(#loc)
    %9 = tt.broadcast %7 : tensor<1x16xi32> -> tensor<16x16xi32> loc(#loc)
    %10 = arith.addi %8, %9 : tensor<16x16xi32> loc(#loc)
    %11 = arith.muli %N, %c16_i32 : i32 loc(#loc)
    %12 = tt.splat %11 : i32 -> tensor<16x16xi32> loc(#loc)
    %13 = arith.cmpi slt, %10, %12 : tensor<16x16xi32> loc(#loc)
    %14 = tt.splat %x_ptr : !tt.ptr<i8> -> tensor<16x16x!tt.ptr<i8>> loc(#loc)
    %15 = tt.addptr %14, %10 : tensor<16x16x!tt.ptr<i8>>, tensor<16x16xi32> loc(#loc)
    %16 = tt.load %15, %13 : tensor<16x16x!tt.ptr<i8>> loc(#loc)
    %17 = arith.muli %0, %c16_i32 : i32 loc(#loc)
    %18 = tt.splat %17 : i32 -> tensor<16x1xi32> loc(#loc)
    %19 = arith.addi %18, %3 : tensor<16x1xi32> loc(#loc)
    %20 = tt.splat %N : i32 -> tensor<16x1xi32> loc(#loc)
    %21 = arith.cmpi slt, %19, %20 : tensor<16x1xi32> loc(#loc)
    %22 = tt.splat %scale_ptr : !tt.ptr<i8> -> tensor<16x1x!tt.ptr<i8>> loc(#loc)
    %23 = tt.addptr %22, %19 : tensor<16x1x!tt.ptr<i8>>, tensor<16x1xi32> loc(#loc)
    %24 = tt.load %23, %21 : tensor<16x1x!tt.ptr<i8>> loc(#loc)
    %25 = arith.extui %24 : tensor<16x1xi8> to tensor<16x1xi16> loc(#loc)
    %26 = arith.shli %25, %cst_16 : tensor<16x1xi16> loc(#loc)
    %27 = tt.bitcast %26 : tensor<16x1xi16> -> tensor<16x1xbf16> loc(#loc)
    %28 = arith.andi %16, %cst_15 : tensor<16x16xi8> loc(#loc)
    %29 = arith.andi %16, %cst_14 : tensor<16x16xi8> loc(#loc)
    %30 = arith.extui %28 : tensor<16x16xi8> to tensor<16x16xi16> loc(#loc)
    %31 = arith.shli %30, %cst_13 : tensor<16x16xi16> loc(#loc)
    %32 = arith.andi %16, %cst_12 : tensor<16x16xi8> loc(#loc)
    %33 = arith.extui %32 : tensor<16x16xi8> to tensor<16x16xi16> loc(#loc)
    %34 = arith.shli %33, %cst_11 : tensor<16x16xi16> loc(#loc)
    %35 = arith.ori %31, %34 : tensor<16x16xi16> loc(#loc)
    %36 = arith.extui %29 : tensor<16x16xi8> to tensor<16x16xi16> loc(#loc)
    %37 = arith.shli %36, %cst_10 : tensor<16x16xi16> loc(#loc)
    %38 = arith.andi %16, %cst_9 : tensor<16x16xi8> loc(#loc)
    %39 = arith.extui %38 : tensor<16x16xi8> to tensor<16x16xi16> loc(#loc)
    %40 = arith.shli %39, %cst_8 : tensor<16x16xi16> loc(#loc)
    %41 = arith.ori %37, %40 : tensor<16x16xi16> loc(#loc)
    %42 = arith.andi %28, %cst_7 : tensor<16x16xi8> loc(#loc)
    %43 = arith.extui %42 : tensor<16x16xi8> to tensor<16x16xi32> loc(#loc)
    %44 = arith.cmpi ne, %43, %cst_6 : tensor<16x16xi32> loc(#loc)
    %45 = arith.addi %35, %cst_5 : tensor<16x16xi16> loc(#loc)
    %46 = arith.select %44, %45, %35 : tensor<16x16xi1>, tensor<16x16xi16> loc(#loc)
    %47 = arith.andi %29, %cst_4 : tensor<16x16xi8> loc(#loc)
    %48 = arith.extui %47 : tensor<16x16xi8> to tensor<16x16xi32> loc(#loc)
    %49 = arith.cmpi ne, %48, %cst_6 : tensor<16x16xi32> loc(#loc)
    %50 = arith.addi %41, %cst_5 : tensor<16x16xi16> loc(#loc)
    %51 = arith.select %49, %50, %41 : tensor<16x16xi1>, tensor<16x16xi16> loc(#loc)
    %52 = arith.extui %28 : tensor<16x16xi8> to tensor<16x16xi32> loc(#loc)
    %53 = arith.cmpi eq, %52, %cst_3 : tensor<16x16xi32> loc(#loc)
    %54 = arith.andi %46, %cst_2 : tensor<16x16xi16> loc(#loc)
    %55 = arith.ori %54, %cst_5 : tensor<16x16xi16> loc(#loc)
    %56 = arith.select %53, %55, %46 : tensor<16x16xi1>, tensor<16x16xi16> loc(#loc)
    %57 = arith.extui %29 : tensor<16x16xi8> to tensor<16x16xi32> loc(#loc)
    %58 = arith.cmpi eq, %57, %cst_1 : tensor<16x16xi32> loc(#loc)
    %59 = arith.andi %51, %cst_2 : tensor<16x16xi16> loc(#loc)
    %60 = arith.ori %59, %cst_5 : tensor<16x16xi16> loc(#loc)
    %61 = arith.select %58, %60, %51 : tensor<16x16xi1>, tensor<16x16xi16> loc(#loc)
    %62 = tt.join %56, %61 : tensor<16x16xi16> -> tensor<16x16x2xi16> loc(#loc)
    %63 = tt.reshape %62 : tensor<16x16x2xi16> -> tensor<16x32xi16> loc(#loc)
    %64 = tt.bitcast %63 : tensor<16x32xi16> -> tensor<16x32xbf16> loc(#loc)
    %65 = tt.broadcast %27 : tensor<16x1xbf16> -> tensor<16x32xbf16> loc(#loc)
    %66 = arith.mulf %64, %65 : tensor<16x32xbf16> loc(#loc)
    %67 = arith.extui %24 : tensor<16x1xi8> to tensor<16x1xi32> loc(#loc)
    %68 = arith.cmpi eq, %67, %cst_0 : tensor<16x1xi32> loc(#loc)
    %69 = tt.broadcast %68 : tensor<16x1xi1> -> tensor<16x32xi1> loc(#loc)
    %70 = arith.select %69, %cst, %66 : tensor<16x32xi1>, tensor<16x32xbf16> loc(#loc)
    %71 = arith.muli %0, %c512_i32 : i32 loc(#loc)
    %72 = tt.make_range {end = 512 : i32, start = 0 : i32} : tensor<512xi32> loc(#loc)
    %73 = tt.splat %71 : i32 -> tensor<512xi32> loc(#loc)
    %74 = arith.addi %73, %72 : tensor<512xi32> loc(#loc)
    %75 = arith.muli %N, %c32_i32 : i32 loc(#loc)
    %76 = tt.splat %75 : i32 -> tensor<512xi32> loc(#loc)
    %77 = arith.cmpi slt, %74, %76 : tensor<512xi32> loc(#loc)
    %78 = tt.splat %mxfp_ptr : !tt.ptr<bf16> -> tensor<512x!tt.ptr<bf16>> loc(#loc)
    %79 = tt.addptr %78, %74 : tensor<512x!tt.ptr<bf16>>, tensor<512xi32> loc(#loc)
    %80 = tt.reshape %70 : tensor<16x32xbf16> -> tensor<512xbf16> loc(#loc)
    tt.store %79, %80, %77 : tensor<512x!tt.ptr<bf16>> loc(#loc)
    tt.return loc(#loc)
  } loc(#loc)
} loc(#loc)
#loc = loc(unknown)


// -----// IR Dump Before ConvertTritonToTritonGPU (convert-triton-to-tritongpu) ('builtin.module' operation) //----- //
#loc1 = loc("x_ptr")
#loc2 = loc("scale_ptr")
#loc3 = loc("mxfp_ptr")
#loc4 = loc("N")
module {
  tt.func public @mxfp_upcast_kernel(%x_ptr: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("x_ptr"), %scale_ptr: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("scale_ptr"), %mxfp_ptr: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("mxfp_ptr"), %N: i32 {tt.divisibility = 16 : i32} loc("N")) attributes {noinline = false} {
    %c32_i32 = arith.constant 32 : i32 loc(#loc)
    %c512_i32 = arith.constant 512 : i32 loc(#loc)
    %cst = arith.constant dense<0x7FC0> : tensor<16x32xbf16> loc(#loc)
    %cst_0 = arith.constant dense<255> : tensor<16x1xi32> loc(#loc)
    %cst_1 = arith.constant dense<16> : tensor<16x16xi32> loc(#loc)
    %cst_2 = arith.constant dense<-32768> : tensor<16x16xi16> loc(#loc)
    %cst_3 = arith.constant dense<1> : tensor<16x16xi32> loc(#loc)
    %cst_4 = arith.constant dense<96> : tensor<16x16xi8> loc(#loc)
    %cst_5 = arith.constant dense<16128> : tensor<16x16xi16> loc(#loc)
    %cst_6 = arith.constant dense<0> : tensor<16x16xi32> loc(#loc)
    %cst_7 = arith.constant dense<6> : tensor<16x16xi8> loc(#loc)
    %cst_8 = arith.constant dense<8> : tensor<16x16xi16> loc(#loc)
    %cst_9 = arith.constant dense<-128> : tensor<16x16xi8> loc(#loc)
    %cst_10 = arith.constant dense<2> : tensor<16x16xi16> loc(#loc)
    %cst_11 = arith.constant dense<12> : tensor<16x16xi16> loc(#loc)
    %cst_12 = arith.constant dense<8> : tensor<16x16xi8> loc(#loc)
    %cst_13 = arith.constant dense<6> : tensor<16x16xi16> loc(#loc)
    %cst_14 = arith.constant dense<112> : tensor<16x16xi8> loc(#loc)
    %cst_15 = arith.constant dense<7> : tensor<16x16xi8> loc(#loc)
    %cst_16 = arith.constant dense<7> : tensor<16x1xi16> loc(#loc)
    %cst_17 = arith.constant dense<16> : tensor<16x1xi32> loc(#loc)
    %c16_i32 = arith.constant 16 : i32 loc(#loc)
    %c256_i32 = arith.constant 256 : i32 loc(#loc)
    %0 = tt.get_program_id x : i32 loc(#loc)
    %1 = arith.muli %0, %c256_i32 : i32 loc(#loc)
    %2 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32> loc(#loc)
    %3 = tt.expand_dims %2 {axis = 1 : i32} : tensor<16xi32> -> tensor<16x1xi32> loc(#loc)
    %4 = arith.muli %3, %cst_17 : tensor<16x1xi32> loc(#loc)
    %5 = tt.splat %1 : i32 -> tensor<16x1xi32> loc(#loc)
    %6 = arith.addi %5, %4 : tensor<16x1xi32> loc(#loc)
    %7 = tt.expand_dims %2 {axis = 0 : i32} : tensor<16xi32> -> tensor<1x16xi32> loc(#loc)
    %8 = tt.broadcast %6 : tensor<16x1xi32> -> tensor<16x16xi32> loc(#loc)
    %9 = tt.broadcast %7 : tensor<1x16xi32> -> tensor<16x16xi32> loc(#loc)
    %10 = arith.addi %8, %9 : tensor<16x16xi32> loc(#loc)
    %11 = arith.muli %N, %c16_i32 : i32 loc(#loc)
    %12 = tt.splat %11 : i32 -> tensor<16x16xi32> loc(#loc)
    %13 = arith.cmpi slt, %10, %12 : tensor<16x16xi32> loc(#loc)
    %14 = tt.splat %x_ptr : !tt.ptr<i8> -> tensor<16x16x!tt.ptr<i8>> loc(#loc)
    %15 = tt.addptr %14, %10 : tensor<16x16x!tt.ptr<i8>>, tensor<16x16xi32> loc(#loc)
    %16 = tt.load %15, %13 : tensor<16x16x!tt.ptr<i8>> loc(#loc)
    %17 = arith.muli %0, %c16_i32 : i32 loc(#loc)
    %18 = tt.splat %17 : i32 -> tensor<16x1xi32> loc(#loc)
    %19 = arith.addi %18, %3 : tensor<16x1xi32> loc(#loc)
    %20 = tt.splat %N : i32 -> tensor<16x1xi32> loc(#loc)
    %21 = arith.cmpi slt, %19, %20 : tensor<16x1xi32> loc(#loc)
    %22 = tt.splat %scale_ptr : !tt.ptr<i8> -> tensor<16x1x!tt.ptr<i8>> loc(#loc)
    %23 = tt.addptr %22, %19 : tensor<16x1x!tt.ptr<i8>>, tensor<16x1xi32> loc(#loc)
    %24 = tt.load %23, %21 : tensor<16x1x!tt.ptr<i8>> loc(#loc)
    %25 = arith.extui %24 : tensor<16x1xi8> to tensor<16x1xi16> loc(#loc)
    %26 = arith.shli %25, %cst_16 : tensor<16x1xi16> loc(#loc)
    %27 = tt.bitcast %26 : tensor<16x1xi16> -> tensor<16x1xbf16> loc(#loc)
    %28 = arith.andi %16, %cst_15 : tensor<16x16xi8> loc(#loc)
    %29 = arith.andi %16, %cst_14 : tensor<16x16xi8> loc(#loc)
    %30 = arith.extui %28 : tensor<16x16xi8> to tensor<16x16xi16> loc(#loc)
    %31 = arith.shli %30, %cst_13 : tensor<16x16xi16> loc(#loc)
    %32 = arith.andi %16, %cst_12 : tensor<16x16xi8> loc(#loc)
    %33 = arith.extui %32 : tensor<16x16xi8> to tensor<16x16xi16> loc(#loc)
    %34 = arith.shli %33, %cst_11 : tensor<16x16xi16> loc(#loc)
    %35 = arith.ori %31, %34 : tensor<16x16xi16> loc(#loc)
    %36 = arith.extui %29 : tensor<16x16xi8> to tensor<16x16xi16> loc(#loc)
    %37 = arith.shli %36, %cst_10 : tensor<16x16xi16> loc(#loc)
    %38 = arith.andi %16, %cst_9 : tensor<16x16xi8> loc(#loc)
    %39 = arith.extui %38 : tensor<16x16xi8> to tensor<16x16xi16> loc(#loc)
    %40 = arith.shli %39, %cst_8 : tensor<16x16xi16> loc(#loc)
    %41 = arith.ori %37, %40 : tensor<16x16xi16> loc(#loc)
    %42 = arith.andi %28, %cst_7 : tensor<16x16xi8> loc(#loc)
    %43 = arith.extui %42 : tensor<16x16xi8> to tensor<16x16xi32> loc(#loc)
    %44 = arith.cmpi ne, %43, %cst_6 : tensor<16x16xi32> loc(#loc)
    %45 = arith.addi %35, %cst_5 : tensor<16x16xi16> loc(#loc)
    %46 = arith.select %44, %45, %35 : tensor<16x16xi1>, tensor<16x16xi16> loc(#loc)
    %47 = arith.andi %29, %cst_4 : tensor<16x16xi8> loc(#loc)
    %48 = arith.extui %47 : tensor<16x16xi8> to tensor<16x16xi32> loc(#loc)
    %49 = arith.cmpi ne, %48, %cst_6 : tensor<16x16xi32> loc(#loc)
    %50 = arith.addi %41, %cst_5 : tensor<16x16xi16> loc(#loc)
    %51 = arith.select %49, %50, %41 : tensor<16x16xi1>, tensor<16x16xi16> loc(#loc)
    %52 = arith.extui %28 : tensor<16x16xi8> to tensor<16x16xi32> loc(#loc)
    %53 = arith.cmpi eq, %52, %cst_3 : tensor<16x16xi32> loc(#loc)
    %54 = arith.andi %46, %cst_2 : tensor<16x16xi16> loc(#loc)
    %55 = arith.ori %54, %cst_5 : tensor<16x16xi16> loc(#loc)
    %56 = arith.select %53, %55, %46 : tensor<16x16xi1>, tensor<16x16xi16> loc(#loc)
    %57 = arith.extui %29 : tensor<16x16xi8> to tensor<16x16xi32> loc(#loc)
    %58 = arith.cmpi eq, %57, %cst_1 : tensor<16x16xi32> loc(#loc)
    %59 = arith.andi %51, %cst_2 : tensor<16x16xi16> loc(#loc)
    %60 = arith.ori %59, %cst_5 : tensor<16x16xi16> loc(#loc)
    %61 = arith.select %58, %60, %51 : tensor<16x16xi1>, tensor<16x16xi16> loc(#loc)
    %62 = tt.join %56, %61 : tensor<16x16xi16> -> tensor<16x16x2xi16> loc(#loc)
    %63 = tt.reshape %62 : tensor<16x16x2xi16> -> tensor<16x32xi16> loc(#loc)
    %64 = tt.bitcast %63 : tensor<16x32xi16> -> tensor<16x32xbf16> loc(#loc)
    %65 = tt.broadcast %27 : tensor<16x1xbf16> -> tensor<16x32xbf16> loc(#loc)
    %66 = arith.mulf %64, %65 : tensor<16x32xbf16> loc(#loc)
    %67 = arith.extui %24 : tensor<16x1xi8> to tensor<16x1xi32> loc(#loc)
    %68 = arith.cmpi eq, %67, %cst_0 : tensor<16x1xi32> loc(#loc)
    %69 = tt.broadcast %68 : tensor<16x1xi1> -> tensor<16x32xi1> loc(#loc)
    %70 = arith.select %69, %cst, %66 : tensor<16x32xi1>, tensor<16x32xbf16> loc(#loc)
    %71 = arith.muli %0, %c512_i32 : i32 loc(#loc)
    %72 = tt.make_range {end = 512 : i32, start = 0 : i32} : tensor<512xi32> loc(#loc)
    %73 = tt.splat %71 : i32 -> tensor<512xi32> loc(#loc)
    %74 = arith.addi %73, %72 : tensor<512xi32> loc(#loc)
    %75 = arith.muli %N, %c32_i32 : i32 loc(#loc)
    %76 = tt.splat %75 : i32 -> tensor<512xi32> loc(#loc)
    %77 = arith.cmpi slt, %74, %76 : tensor<512xi32> loc(#loc)
    %78 = tt.splat %mxfp_ptr : !tt.ptr<bf16> -> tensor<512x!tt.ptr<bf16>> loc(#loc)
    %79 = tt.addptr %78, %74 : tensor<512x!tt.ptr<bf16>>, tensor<512xi32> loc(#loc)
    %80 = tt.reshape %70 : tensor<16x32xbf16> -> tensor<512xbf16> loc(#loc)
    tt.store %79, %80, %77 : tensor<512x!tt.ptr<bf16>> loc(#loc)
    tt.return loc(#loc)
  } loc(#loc)
} loc(#loc)
#loc = loc(unknown)


// -----// IR Dump Before TritonGPUCoalesce (tritongpu-coalesce) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 32], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [64, 1], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked2 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [4, 16], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked3 = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [64], warpsPerCTA = [4], order = [0]}>
#blocked4 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [64, 1], warpsPerCTA = [4, 1], order = [0, 1]}>
#blocked5 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 64], warpsPerCTA = [1, 4], order = [0, 1]}>
#blocked6 = #ttg.blocked<{sizePerThread = [1, 1, 2], threadsPerWarp = [4, 16, 1], warpsPerCTA = [4, 1, 1], order = [2, 1, 0]}>
#blocked7 = #ttg.blocked<{sizePerThread = [1, 1, 1], threadsPerWarp = [2, 16, 2], warpsPerCTA = [4, 1, 1], order = [2, 1, 0]}>
#loc1 = loc("x_ptr")
#loc2 = loc("scale_ptr")
#loc3 = loc("mxfp_ptr")
#loc4 = loc("N")
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "hip:gfx950", "ttg.threads-per-warp" = 64 : i32} {
  tt.func public @mxfp_upcast_kernel(%x_ptr: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("x_ptr"), %scale_ptr: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("scale_ptr"), %mxfp_ptr: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("mxfp_ptr"), %N: i32 {tt.divisibility = 16 : i32} loc("N")) attributes {noinline = false} {
    %c32_i32 = arith.constant 32 : i32 loc(#loc)
    %c512_i32 = arith.constant 512 : i32 loc(#loc)
    %cst = arith.constant dense<0x7FC0> : tensor<16x32xbf16, #blocked> loc(#loc)
    %cst_0 = arith.constant dense<255> : tensor<16x1xi32, #blocked1> loc(#loc)
    %cst_1 = arith.constant dense<16> : tensor<16x16xi32, #blocked2> loc(#loc)
    %cst_2 = arith.constant dense<-32768> : tensor<16x16xi16, #blocked2> loc(#loc)
    %cst_3 = arith.constant dense<1> : tensor<16x16xi32, #blocked2> loc(#loc)
    %cst_4 = arith.constant dense<96> : tensor<16x16xi8, #blocked2> loc(#loc)
    %cst_5 = arith.constant dense<16128> : tensor<16x16xi16, #blocked2> loc(#loc)
    %cst_6 = arith.constant dense<0> : tensor<16x16xi32, #blocked2> loc(#loc)
    %cst_7 = arith.constant dense<6> : tensor<16x16xi8, #blocked2> loc(#loc)
    %cst_8 = arith.constant dense<8> : tensor<16x16xi16, #blocked2> loc(#loc)
    %cst_9 = arith.constant dense<-128> : tensor<16x16xi8, #blocked2> loc(#loc)
    %cst_10 = arith.constant dense<2> : tensor<16x16xi16, #blocked2> loc(#loc)
    %cst_11 = arith.constant dense<12> : tensor<16x16xi16, #blocked2> loc(#loc)
    %cst_12 = arith.constant dense<8> : tensor<16x16xi8, #blocked2> loc(#loc)
    %cst_13 = arith.constant dense<6> : tensor<16x16xi16, #blocked2> loc(#loc)
    %cst_14 = arith.constant dense<112> : tensor<16x16xi8, #blocked2> loc(#loc)
    %cst_15 = arith.constant dense<7> : tensor<16x16xi8, #blocked2> loc(#loc)
    %cst_16 = arith.constant dense<7> : tensor<16x1xi16, #blocked1> loc(#loc)
    %cst_17 = arith.constant dense<16> : tensor<16x1xi32, #blocked1> loc(#loc)
    %c16_i32 = arith.constant 16 : i32 loc(#loc)
    %c256_i32 = arith.constant 256 : i32 loc(#loc)
    %0 = tt.get_program_id x : i32 loc(#loc)
    %1 = arith.muli %0, %c256_i32 : i32 loc(#loc)
    %2 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #blocked3> loc(#loc)
    %3 = ttg.convert_layout %2 : tensor<16xi32, #blocked3> -> tensor<16xi32, #ttg.slice<{dim = 1, parent = #blocked4}>> loc(#loc)
    %4 = tt.expand_dims %3 {axis = 1 : i32} : tensor<16xi32, #ttg.slice<{dim = 1, parent = #blocked4}>> -> tensor<16x1xi32, #blocked4> loc(#loc)
    %5 = ttg.convert_layout %4 : tensor<16x1xi32, #blocked4> -> tensor<16x1xi32, #blocked1> loc(#loc)
    %6 = arith.muli %5, %cst_17 : tensor<16x1xi32, #blocked1> loc(#loc)
    %7 = tt.splat %1 : i32 -> tensor<16x1xi32, #blocked1> loc(#loc)
    %8 = arith.addi %7, %6 : tensor<16x1xi32, #blocked1> loc(#loc)
    %9 = ttg.convert_layout %2 : tensor<16xi32, #blocked3> -> tensor<16xi32, #ttg.slice<{dim = 0, parent = #blocked5}>> loc(#loc)
    %10 = tt.expand_dims %9 {axis = 0 : i32} : tensor<16xi32, #ttg.slice<{dim = 0, parent = #blocked5}>> -> tensor<1x16xi32, #blocked5> loc(#loc)
    %11 = ttg.convert_layout %10 : tensor<1x16xi32, #blocked5> -> tensor<1x16xi32, #blocked2> loc(#loc)
    %12 = tt.broadcast %8 : tensor<16x1xi32, #blocked1> -> tensor<16x16xi32, #blocked1> loc(#loc)
    %13 = ttg.convert_layout %12 : tensor<16x16xi32, #blocked1> -> tensor<16x16xi32, #blocked2> loc(#loc)
    %14 = tt.broadcast %11 : tensor<1x16xi32, #blocked2> -> tensor<16x16xi32, #blocked2> loc(#loc)
    %15 = arith.addi %13, %14 : tensor<16x16xi32, #blocked2> loc(#loc)
    %16 = arith.muli %N, %c16_i32 : i32 loc(#loc)
    %17 = tt.splat %16 : i32 -> tensor<16x16xi32, #blocked2> loc(#loc)
    %18 = arith.cmpi slt, %15, %17 : tensor<16x16xi32, #blocked2> loc(#loc)
    %19 = tt.splat %x_ptr : !tt.ptr<i8> -> tensor<16x16x!tt.ptr<i8>, #blocked2> loc(#loc)
    %20 = tt.addptr %19, %15 : tensor<16x16x!tt.ptr<i8>, #blocked2>, tensor<16x16xi32, #blocked2> loc(#loc)
    %21 = tt.load %20, %18 : tensor<16x16x!tt.ptr<i8>, #blocked2> loc(#loc)
    %22 = arith.muli %0, %c16_i32 : i32 loc(#loc)
    %23 = tt.splat %22 : i32 -> tensor<16x1xi32, #blocked1> loc(#loc)
    %24 = arith.addi %23, %5 : tensor<16x1xi32, #blocked1> loc(#loc)
    %25 = tt.splat %N : i32 -> tensor<16x1xi32, #blocked1> loc(#loc)
    %26 = arith.cmpi slt, %24, %25 : tensor<16x1xi32, #blocked1> loc(#loc)
    %27 = tt.splat %scale_ptr : !tt.ptr<i8> -> tensor<16x1x!tt.ptr<i8>, #blocked1> loc(#loc)
    %28 = tt.addptr %27, %24 : tensor<16x1x!tt.ptr<i8>, #blocked1>, tensor<16x1xi32, #blocked1> loc(#loc)
    %29 = tt.load %28, %26 : tensor<16x1x!tt.ptr<i8>, #blocked1> loc(#loc)
    %30 = arith.extui %29 : tensor<16x1xi8, #blocked1> to tensor<16x1xi16, #blocked1> loc(#loc)
    %31 = arith.shli %30, %cst_16 : tensor<16x1xi16, #blocked1> loc(#loc)
    %32 = tt.bitcast %31 : tensor<16x1xi16, #blocked1> -> tensor<16x1xbf16, #blocked1> loc(#loc)
    %33 = arith.andi %21, %cst_15 : tensor<16x16xi8, #blocked2> loc(#loc)
    %34 = arith.andi %21, %cst_14 : tensor<16x16xi8, #blocked2> loc(#loc)
    %35 = arith.extui %33 : tensor<16x16xi8, #blocked2> to tensor<16x16xi16, #blocked2> loc(#loc)
    %36 = arith.shli %35, %cst_13 : tensor<16x16xi16, #blocked2> loc(#loc)
    %37 = arith.andi %21, %cst_12 : tensor<16x16xi8, #blocked2> loc(#loc)
    %38 = arith.extui %37 : tensor<16x16xi8, #blocked2> to tensor<16x16xi16, #blocked2> loc(#loc)
    %39 = arith.shli %38, %cst_11 : tensor<16x16xi16, #blocked2> loc(#loc)
    %40 = arith.ori %36, %39 : tensor<16x16xi16, #blocked2> loc(#loc)
    %41 = arith.extui %34 : tensor<16x16xi8, #blocked2> to tensor<16x16xi16, #blocked2> loc(#loc)
    %42 = arith.shli %41, %cst_10 : tensor<16x16xi16, #blocked2> loc(#loc)
    %43 = arith.andi %21, %cst_9 : tensor<16x16xi8, #blocked2> loc(#loc)
    %44 = arith.extui %43 : tensor<16x16xi8, #blocked2> to tensor<16x16xi16, #blocked2> loc(#loc)
    %45 = arith.shli %44, %cst_8 : tensor<16x16xi16, #blocked2> loc(#loc)
    %46 = arith.ori %42, %45 : tensor<16x16xi16, #blocked2> loc(#loc)
    %47 = arith.andi %33, %cst_7 : tensor<16x16xi8, #blocked2> loc(#loc)
    %48 = arith.extui %47 : tensor<16x16xi8, #blocked2> to tensor<16x16xi32, #blocked2> loc(#loc)
    %49 = arith.cmpi ne, %48, %cst_6 : tensor<16x16xi32, #blocked2> loc(#loc)
    %50 = arith.addi %40, %cst_5 : tensor<16x16xi16, #blocked2> loc(#loc)
    %51 = arith.select %49, %50, %40 : tensor<16x16xi1, #blocked2>, tensor<16x16xi16, #blocked2> loc(#loc)
    %52 = arith.andi %34, %cst_4 : tensor<16x16xi8, #blocked2> loc(#loc)
    %53 = arith.extui %52 : tensor<16x16xi8, #blocked2> to tensor<16x16xi32, #blocked2> loc(#loc)
    %54 = arith.cmpi ne, %53, %cst_6 : tensor<16x16xi32, #blocked2> loc(#loc)
    %55 = arith.addi %46, %cst_5 : tensor<16x16xi16, #blocked2> loc(#loc)
    %56 = arith.select %54, %55, %46 : tensor<16x16xi1, #blocked2>, tensor<16x16xi16, #blocked2> loc(#loc)
    %57 = arith.extui %33 : tensor<16x16xi8, #blocked2> to tensor<16x16xi32, #blocked2> loc(#loc)
    %58 = arith.cmpi eq, %57, %cst_3 : tensor<16x16xi32, #blocked2> loc(#loc)
    %59 = arith.andi %51, %cst_2 : tensor<16x16xi16, #blocked2> loc(#loc)
    %60 = arith.ori %59, %cst_5 : tensor<16x16xi16, #blocked2> loc(#loc)
    %61 = arith.select %58, %60, %51 : tensor<16x16xi1, #blocked2>, tensor<16x16xi16, #blocked2> loc(#loc)
    %62 = arith.extui %34 : tensor<16x16xi8, #blocked2> to tensor<16x16xi32, #blocked2> loc(#loc)
    %63 = arith.cmpi eq, %62, %cst_1 : tensor<16x16xi32, #blocked2> loc(#loc)
    %64 = arith.andi %56, %cst_2 : tensor<16x16xi16, #blocked2> loc(#loc)
    %65 = arith.ori %64, %cst_5 : tensor<16x16xi16, #blocked2> loc(#loc)
    %66 = arith.select %63, %65, %56 : tensor<16x16xi1, #blocked2>, tensor<16x16xi16, #blocked2> loc(#loc)
    %67 = tt.join %61, %66 : tensor<16x16xi16, #blocked2> -> tensor<16x16x2xi16, #blocked6> loc(#loc)
    %68 = ttg.convert_layout %67 : tensor<16x16x2xi16, #blocked6> -> tensor<16x16x2xi16, #blocked7> loc(#loc)
    %69 = tt.reshape %68 : tensor<16x16x2xi16, #blocked7> -> tensor<16x32xi16, #blocked> loc(#loc)
    %70 = tt.bitcast %69 : tensor<16x32xi16, #blocked> -> tensor<16x32xbf16, #blocked> loc(#loc)
    %71 = tt.broadcast %32 : tensor<16x1xbf16, #blocked1> -> tensor<16x32xbf16, #blocked1> loc(#loc)
    %72 = ttg.convert_layout %71 : tensor<16x32xbf16, #blocked1> -> tensor<16x32xbf16, #blocked> loc(#loc)
    %73 = arith.mulf %70, %72 : tensor<16x32xbf16, #blocked> loc(#loc)
    %74 = arith.extui %29 : tensor<16x1xi8, #blocked1> to tensor<16x1xi32, #blocked1> loc(#loc)
    %75 = arith.cmpi eq, %74, %cst_0 : tensor<16x1xi32, #blocked1> loc(#loc)
    %76 = tt.broadcast %75 : tensor<16x1xi1, #blocked1> -> tensor<16x32xi1, #blocked1> loc(#loc)
    %77 = ttg.convert_layout %76 : tensor<16x32xi1, #blocked1> -> tensor<16x32xi1, #blocked> loc(#loc)
    %78 = arith.select %77, %cst, %73 : tensor<16x32xi1, #blocked>, tensor<16x32xbf16, #blocked> loc(#loc)
    %79 = arith.muli %0, %c512_i32 : i32 loc(#loc)
    %80 = tt.make_range {end = 512 : i32, start = 0 : i32} : tensor<512xi32, #blocked3> loc(#loc)
    %81 = tt.splat %79 : i32 -> tensor<512xi32, #blocked3> loc(#loc)
    %82 = arith.addi %81, %80 : tensor<512xi32, #blocked3> loc(#loc)
    %83 = arith.muli %N, %c32_i32 : i32 loc(#loc)
    %84 = tt.splat %83 : i32 -> tensor<512xi32, #blocked3> loc(#loc)
    %85 = arith.cmpi slt, %82, %84 : tensor<512xi32, #blocked3> loc(#loc)
    %86 = tt.splat %mxfp_ptr : !tt.ptr<bf16> -> tensor<512x!tt.ptr<bf16>, #blocked3> loc(#loc)
    %87 = tt.addptr %86, %82 : tensor<512x!tt.ptr<bf16>, #blocked3>, tensor<512xi32, #blocked3> loc(#loc)
    %88 = tt.reshape %78 : tensor<16x32xbf16, #blocked> -> tensor<512xbf16, #blocked3> loc(#loc)
    tt.store %87, %88, %85 : tensor<512x!tt.ptr<bf16>, #blocked3> loc(#loc)
    tt.return loc(#loc)
  } loc(#loc)
} loc(#loc)
#loc = loc(unknown)


// -----// IR Dump Before TritonGPURemoveLayoutConversions (tritongpu-remove-layout-conversions) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 32], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [64, 1], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked2 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [4, 16], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked3 = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [64], warpsPerCTA = [4], order = [0]}>
#blocked4 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [64, 1], warpsPerCTA = [4, 1], order = [0, 1]}>
#blocked5 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 64], warpsPerCTA = [1, 4], order = [0, 1]}>
#blocked6 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [16, 4], warpsPerCTA = [1, 4], order = [0, 1]}>
#blocked7 = #ttg.blocked<{sizePerThread = [1, 1, 2], threadsPerWarp = [4, 16, 1], warpsPerCTA = [4, 1, 1], order = [2, 1, 0]}>
#blocked8 = #ttg.blocked<{sizePerThread = [1, 1, 1], threadsPerWarp = [2, 16, 2], warpsPerCTA = [4, 1, 1], order = [2, 1, 0]}>
#blocked9 = #ttg.blocked<{sizePerThread = [2], threadsPerWarp = [64], warpsPerCTA = [4], order = [0]}>
#loc1 = loc("x_ptr")
#loc2 = loc("scale_ptr")
#loc3 = loc("mxfp_ptr")
#loc4 = loc("N")
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "hip:gfx950", "ttg.threads-per-warp" = 64 : i32} {
  tt.func public @mxfp_upcast_kernel(%x_ptr: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("x_ptr"), %scale_ptr: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("scale_ptr"), %mxfp_ptr: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("mxfp_ptr"), %N: i32 {tt.divisibility = 16 : i32} loc("N")) attributes {noinline = false} {
    %c32_i32 = arith.constant 32 : i32 loc(#loc)
    %c512_i32 = arith.constant 512 : i32 loc(#loc)
    %cst = arith.constant dense<0x7FC0> : tensor<16x32xbf16, #blocked> loc(#loc)
    %cst_0 = arith.constant dense<255> : tensor<16x1xi32, #blocked1> loc(#loc)
    %cst_1 = arith.constant dense<16> : tensor<16x16xi32, #blocked2> loc(#loc)
    %cst_2 = arith.constant dense<-32768> : tensor<16x16xi16, #blocked2> loc(#loc)
    %cst_3 = arith.constant dense<1> : tensor<16x16xi32, #blocked2> loc(#loc)
    %cst_4 = arith.constant dense<96> : tensor<16x16xi8, #blocked2> loc(#loc)
    %cst_5 = arith.constant dense<16128> : tensor<16x16xi16, #blocked2> loc(#loc)
    %cst_6 = arith.constant dense<0> : tensor<16x16xi32, #blocked2> loc(#loc)
    %cst_7 = arith.constant dense<6> : tensor<16x16xi8, #blocked2> loc(#loc)
    %cst_8 = arith.constant dense<8> : tensor<16x16xi16, #blocked2> loc(#loc)
    %cst_9 = arith.constant dense<-128> : tensor<16x16xi8, #blocked2> loc(#loc)
    %cst_10 = arith.constant dense<2> : tensor<16x16xi16, #blocked2> loc(#loc)
    %cst_11 = arith.constant dense<12> : tensor<16x16xi16, #blocked2> loc(#loc)
    %cst_12 = arith.constant dense<8> : tensor<16x16xi8, #blocked2> loc(#loc)
    %cst_13 = arith.constant dense<6> : tensor<16x16xi16, #blocked2> loc(#loc)
    %cst_14 = arith.constant dense<112> : tensor<16x16xi8, #blocked2> loc(#loc)
    %cst_15 = arith.constant dense<7> : tensor<16x16xi8, #blocked2> loc(#loc)
    %cst_16 = arith.constant dense<7> : tensor<16x1xi16, #blocked1> loc(#loc)
    %cst_17 = arith.constant dense<16> : tensor<16x1xi32, #blocked1> loc(#loc)
    %c16_i32 = arith.constant 16 : i32 loc(#loc)
    %c256_i32 = arith.constant 256 : i32 loc(#loc)
    %0 = tt.get_program_id x : i32 loc(#loc)
    %1 = arith.muli %0, %c256_i32 : i32 loc(#loc)
    %2 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #blocked3> loc(#loc)
    %3 = ttg.convert_layout %2 : tensor<16xi32, #blocked3> -> tensor<16xi32, #ttg.slice<{dim = 1, parent = #blocked4}>> loc(#loc)
    %4 = tt.expand_dims %3 {axis = 1 : i32} : tensor<16xi32, #ttg.slice<{dim = 1, parent = #blocked4}>> -> tensor<16x1xi32, #blocked4> loc(#loc)
    %5 = ttg.convert_layout %4 : tensor<16x1xi32, #blocked4> -> tensor<16x1xi32, #blocked1> loc(#loc)
    %6 = arith.muli %5, %cst_17 : tensor<16x1xi32, #blocked1> loc(#loc)
    %7 = tt.splat %1 : i32 -> tensor<16x1xi32, #blocked1> loc(#loc)
    %8 = arith.addi %7, %6 : tensor<16x1xi32, #blocked1> loc(#loc)
    %9 = ttg.convert_layout %2 : tensor<16xi32, #blocked3> -> tensor<16xi32, #ttg.slice<{dim = 0, parent = #blocked5}>> loc(#loc)
    %10 = tt.expand_dims %9 {axis = 0 : i32} : tensor<16xi32, #ttg.slice<{dim = 0, parent = #blocked5}>> -> tensor<1x16xi32, #blocked5> loc(#loc)
    %11 = ttg.convert_layout %10 : tensor<1x16xi32, #blocked5> -> tensor<1x16xi32, #blocked2> loc(#loc)
    %12 = tt.broadcast %8 : tensor<16x1xi32, #blocked1> -> tensor<16x16xi32, #blocked1> loc(#loc)
    %13 = ttg.convert_layout %12 : tensor<16x16xi32, #blocked1> -> tensor<16x16xi32, #blocked2> loc(#loc)
    %14 = tt.broadcast %11 : tensor<1x16xi32, #blocked2> -> tensor<16x16xi32, #blocked2> loc(#loc)
    %15 = arith.addi %13, %14 : tensor<16x16xi32, #blocked2> loc(#loc)
    %16 = arith.muli %N, %c16_i32 : i32 loc(#loc)
    %17 = tt.splat %16 : i32 -> tensor<16x16xi32, #blocked2> loc(#loc)
    %18 = arith.cmpi slt, %15, %17 : tensor<16x16xi32, #blocked2> loc(#loc)
    %19 = tt.splat %x_ptr : !tt.ptr<i8> -> tensor<16x16x!tt.ptr<i8>, #blocked2> loc(#loc)
    %20 = tt.addptr %19, %15 : tensor<16x16x!tt.ptr<i8>, #blocked2>, tensor<16x16xi32, #blocked2> loc(#loc)
    %21 = ttg.convert_layout %20 : tensor<16x16x!tt.ptr<i8>, #blocked2> -> tensor<16x16x!tt.ptr<i8>, #blocked2> loc(#loc)
    %22 = ttg.convert_layout %18 : tensor<16x16xi1, #blocked2> -> tensor<16x16xi1, #blocked2> loc(#loc)
    %23 = tt.load %21, %22 : tensor<16x16x!tt.ptr<i8>, #blocked2> loc(#loc)
    %24 = arith.muli %0, %c16_i32 : i32 loc(#loc)
    %25 = tt.splat %24 : i32 -> tensor<16x1xi32, #blocked1> loc(#loc)
    %26 = arith.addi %25, %5 : tensor<16x1xi32, #blocked1> loc(#loc)
    %27 = tt.splat %N : i32 -> tensor<16x1xi32, #blocked1> loc(#loc)
    %28 = arith.cmpi slt, %26, %27 : tensor<16x1xi32, #blocked1> loc(#loc)
    %29 = tt.splat %scale_ptr : !tt.ptr<i8> -> tensor<16x1x!tt.ptr<i8>, #blocked1> loc(#loc)
    %30 = tt.addptr %29, %26 : tensor<16x1x!tt.ptr<i8>, #blocked1>, tensor<16x1xi32, #blocked1> loc(#loc)
    %31 = ttg.convert_layout %30 : tensor<16x1x!tt.ptr<i8>, #blocked1> -> tensor<16x1x!tt.ptr<i8>, #blocked6> loc(#loc)
    %32 = ttg.convert_layout %28 : tensor<16x1xi1, #blocked1> -> tensor<16x1xi1, #blocked6> loc(#loc)
    %33 = tt.load %31, %32 : tensor<16x1x!tt.ptr<i8>, #blocked6> loc(#loc)
    %34 = ttg.convert_layout %33 : tensor<16x1xi8, #blocked6> -> tensor<16x1xi8, #blocked1> loc(#loc)
    %35 = arith.extui %34 : tensor<16x1xi8, #blocked1> to tensor<16x1xi16, #blocked1> loc(#loc)
    %36 = arith.shli %35, %cst_16 : tensor<16x1xi16, #blocked1> loc(#loc)
    %37 = tt.bitcast %36 : tensor<16x1xi16, #blocked1> -> tensor<16x1xbf16, #blocked1> loc(#loc)
    %38 = arith.andi %23, %cst_15 : tensor<16x16xi8, #blocked2> loc(#loc)
    %39 = arith.andi %23, %cst_14 : tensor<16x16xi8, #blocked2> loc(#loc)
    %40 = arith.extui %38 : tensor<16x16xi8, #blocked2> to tensor<16x16xi16, #blocked2> loc(#loc)
    %41 = arith.shli %40, %cst_13 : tensor<16x16xi16, #blocked2> loc(#loc)
    %42 = arith.andi %23, %cst_12 : tensor<16x16xi8, #blocked2> loc(#loc)
    %43 = arith.extui %42 : tensor<16x16xi8, #blocked2> to tensor<16x16xi16, #blocked2> loc(#loc)
    %44 = arith.shli %43, %cst_11 : tensor<16x16xi16, #blocked2> loc(#loc)
    %45 = arith.ori %41, %44 : tensor<16x16xi16, #blocked2> loc(#loc)
    %46 = arith.extui %39 : tensor<16x16xi8, #blocked2> to tensor<16x16xi16, #blocked2> loc(#loc)
    %47 = arith.shli %46, %cst_10 : tensor<16x16xi16, #blocked2> loc(#loc)
    %48 = arith.andi %23, %cst_9 : tensor<16x16xi8, #blocked2> loc(#loc)
    %49 = arith.extui %48 : tensor<16x16xi8, #blocked2> to tensor<16x16xi16, #blocked2> loc(#loc)
    %50 = arith.shli %49, %cst_8 : tensor<16x16xi16, #blocked2> loc(#loc)
    %51 = arith.ori %47, %50 : tensor<16x16xi16, #blocked2> loc(#loc)
    %52 = arith.andi %38, %cst_7 : tensor<16x16xi8, #blocked2> loc(#loc)
    %53 = arith.extui %52 : tensor<16x16xi8, #blocked2> to tensor<16x16xi32, #blocked2> loc(#loc)
    %54 = arith.cmpi ne, %53, %cst_6 : tensor<16x16xi32, #blocked2> loc(#loc)
    %55 = arith.addi %45, %cst_5 : tensor<16x16xi16, #blocked2> loc(#loc)
    %56 = arith.select %54, %55, %45 : tensor<16x16xi1, #blocked2>, tensor<16x16xi16, #blocked2> loc(#loc)
    %57 = arith.andi %39, %cst_4 : tensor<16x16xi8, #blocked2> loc(#loc)
    %58 = arith.extui %57 : tensor<16x16xi8, #blocked2> to tensor<16x16xi32, #blocked2> loc(#loc)
    %59 = arith.cmpi ne, %58, %cst_6 : tensor<16x16xi32, #blocked2> loc(#loc)
    %60 = arith.addi %51, %cst_5 : tensor<16x16xi16, #blocked2> loc(#loc)
    %61 = arith.select %59, %60, %51 : tensor<16x16xi1, #blocked2>, tensor<16x16xi16, #blocked2> loc(#loc)
    %62 = arith.extui %38 : tensor<16x16xi8, #blocked2> to tensor<16x16xi32, #blocked2> loc(#loc)
    %63 = arith.cmpi eq, %62, %cst_3 : tensor<16x16xi32, #blocked2> loc(#loc)
    %64 = arith.andi %56, %cst_2 : tensor<16x16xi16, #blocked2> loc(#loc)
    %65 = arith.ori %64, %cst_5 : tensor<16x16xi16, #blocked2> loc(#loc)
    %66 = arith.select %63, %65, %56 : tensor<16x16xi1, #blocked2>, tensor<16x16xi16, #blocked2> loc(#loc)
    %67 = arith.extui %39 : tensor<16x16xi8, #blocked2> to tensor<16x16xi32, #blocked2> loc(#loc)
    %68 = arith.cmpi eq, %67, %cst_1 : tensor<16x16xi32, #blocked2> loc(#loc)
    %69 = arith.andi %61, %cst_2 : tensor<16x16xi16, #blocked2> loc(#loc)
    %70 = arith.ori %69, %cst_5 : tensor<16x16xi16, #blocked2> loc(#loc)
    %71 = arith.select %68, %70, %61 : tensor<16x16xi1, #blocked2>, tensor<16x16xi16, #blocked2> loc(#loc)
    %72 = tt.join %66, %71 : tensor<16x16xi16, #blocked2> -> tensor<16x16x2xi16, #blocked7> loc(#loc)
    %73 = ttg.convert_layout %72 : tensor<16x16x2xi16, #blocked7> -> tensor<16x16x2xi16, #blocked8> loc(#loc)
    %74 = tt.reshape %73 : tensor<16x16x2xi16, #blocked8> -> tensor<16x32xi16, #blocked> loc(#loc)
    %75 = tt.bitcast %74 : tensor<16x32xi16, #blocked> -> tensor<16x32xbf16, #blocked> loc(#loc)
    %76 = tt.broadcast %37 : tensor<16x1xbf16, #blocked1> -> tensor<16x32xbf16, #blocked1> loc(#loc)
    %77 = ttg.convert_layout %76 : tensor<16x32xbf16, #blocked1> -> tensor<16x32xbf16, #blocked> loc(#loc)
    %78 = arith.mulf %75, %77 : tensor<16x32xbf16, #blocked> loc(#loc)
    %79 = arith.extui %34 : tensor<16x1xi8, #blocked1> to tensor<16x1xi32, #blocked1> loc(#loc)
    %80 = arith.cmpi eq, %79, %cst_0 : tensor<16x1xi32, #blocked1> loc(#loc)
    %81 = tt.broadcast %80 : tensor<16x1xi1, #blocked1> -> tensor<16x32xi1, #blocked1> loc(#loc)
    %82 = ttg.convert_layout %81 : tensor<16x32xi1, #blocked1> -> tensor<16x32xi1, #blocked> loc(#loc)
    %83 = arith.select %82, %cst, %78 : tensor<16x32xi1, #blocked>, tensor<16x32xbf16, #blocked> loc(#loc)
    %84 = arith.muli %0, %c512_i32 : i32 loc(#loc)
    %85 = tt.make_range {end = 512 : i32, start = 0 : i32} : tensor<512xi32, #blocked3> loc(#loc)
    %86 = tt.splat %84 : i32 -> tensor<512xi32, #blocked3> loc(#loc)
    %87 = arith.addi %86, %85 : tensor<512xi32, #blocked3> loc(#loc)
    %88 = arith.muli %N, %c32_i32 : i32 loc(#loc)
    %89 = tt.splat %88 : i32 -> tensor<512xi32, #blocked3> loc(#loc)
    %90 = arith.cmpi slt, %87, %89 : tensor<512xi32, #blocked3> loc(#loc)
    %91 = tt.splat %mxfp_ptr : !tt.ptr<bf16> -> tensor<512x!tt.ptr<bf16>, #blocked3> loc(#loc)
    %92 = tt.addptr %91, %87 : tensor<512x!tt.ptr<bf16>, #blocked3>, tensor<512xi32, #blocked3> loc(#loc)
    %93 = tt.reshape %83 : tensor<16x32xbf16, #blocked> -> tensor<512xbf16, #blocked3> loc(#loc)
    %94 = ttg.convert_layout %92 : tensor<512x!tt.ptr<bf16>, #blocked3> -> tensor<512x!tt.ptr<bf16>, #blocked9> loc(#loc)
    %95 = ttg.convert_layout %93 : tensor<512xbf16, #blocked3> -> tensor<512xbf16, #blocked9> loc(#loc)
    %96 = ttg.convert_layout %90 : tensor<512xi1, #blocked3> -> tensor<512xi1, #blocked9> loc(#loc)
    tt.store %94, %95, %96 : tensor<512x!tt.ptr<bf16>, #blocked9> loc(#loc)
    tt.return loc(#loc)
  } loc(#loc)
} loc(#loc)
#loc = loc(unknown)


// -----// IR Dump Before TritonGPUOptimizeThreadLocality (tritongpu-optimize-thread-locality) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 2], threadsPerWarp = [4, 16], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [4, 16], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked2 = #ttg.blocked<{sizePerThread = [1, 1, 2], threadsPerWarp = [4, 16, 1], warpsPerCTA = [4, 1, 1], order = [2, 1, 0]}>
#blocked3 = #ttg.blocked<{sizePerThread = [2], threadsPerWarp = [64], warpsPerCTA = [4], order = [0]}>
#loc1 = loc("x_ptr")
#loc2 = loc("scale_ptr")
#loc3 = loc("mxfp_ptr")
#loc4 = loc("N")
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "hip:gfx950", "ttg.threads-per-warp" = 64 : i32} {
  tt.func public @mxfp_upcast_kernel(%x_ptr: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("x_ptr"), %scale_ptr: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("scale_ptr"), %mxfp_ptr: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("mxfp_ptr"), %N: i32 {tt.divisibility = 16 : i32} loc("N")) attributes {noinline = false} {
    %cst = arith.constant dense<0x7FC0> : tensor<16x32xbf16, #blocked> loc(#loc)
    %c512_i32 = arith.constant 512 : i32 loc(#loc)
    %c32_i32 = arith.constant 32 : i32 loc(#loc)
    %cst_0 = arith.constant dense<16> : tensor<16x16xi32, #blocked1> loc(#loc)
    %cst_1 = arith.constant dense<-32768> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_2 = arith.constant dense<1> : tensor<16x16xi32, #blocked1> loc(#loc)
    %cst_3 = arith.constant dense<96> : tensor<16x16xi8, #blocked1> loc(#loc)
    %cst_4 = arith.constant dense<16128> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_5 = arith.constant dense<0> : tensor<16x16xi32, #blocked1> loc(#loc)
    %cst_6 = arith.constant dense<6> : tensor<16x16xi8, #blocked1> loc(#loc)
    %cst_7 = arith.constant dense<8> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_8 = arith.constant dense<-128> : tensor<16x16xi8, #blocked1> loc(#loc)
    %cst_9 = arith.constant dense<2> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_10 = arith.constant dense<12> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_11 = arith.constant dense<8> : tensor<16x16xi8, #blocked1> loc(#loc)
    %cst_12 = arith.constant dense<6> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_13 = arith.constant dense<112> : tensor<16x16xi8, #blocked1> loc(#loc)
    %cst_14 = arith.constant dense<7> : tensor<16x16xi8, #blocked1> loc(#loc)
    %c256_i32 = arith.constant 256 : i32 loc(#loc)
    %c16_i32 = arith.constant 16 : i32 loc(#loc)
    %cst_15 = arith.constant dense<16> : tensor<16x1xi32, #blocked1> loc(#loc)
    %cst_16 = arith.constant dense<7> : tensor<16x1xi16, #blocked> loc(#loc)
    %cst_17 = arith.constant dense<255> : tensor<16x1xi32, #blocked> loc(#loc)
    %0 = tt.get_program_id x : i32 loc(#loc)
    %1 = arith.muli %0, %c256_i32 : i32 loc(#loc)
    %2 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc)
    %3 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc)
    %4 = tt.expand_dims %2 {axis = 1 : i32} : tensor<16xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> -> tensor<16x1xi32, #blocked1> loc(#loc)
    %5 = tt.expand_dims %3 {axis = 1 : i32} : tensor<16xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<16x1xi32, #blocked> loc(#loc)
    %6 = arith.muli %4, %cst_15 : tensor<16x1xi32, #blocked1> loc(#loc)
    %7 = tt.splat %1 : i32 -> tensor<16x1xi32, #blocked1> loc(#loc)
    %8 = arith.addi %7, %6 : tensor<16x1xi32, #blocked1> loc(#loc)
    %9 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc)
    %10 = tt.expand_dims %9 {axis = 0 : i32} : tensor<16xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x16xi32, #blocked1> loc(#loc)
    %11 = tt.broadcast %8 : tensor<16x1xi32, #blocked1> -> tensor<16x16xi32, #blocked1> loc(#loc)
    %12 = tt.broadcast %10 : tensor<1x16xi32, #blocked1> -> tensor<16x16xi32, #blocked1> loc(#loc)
    %13 = arith.addi %11, %12 : tensor<16x16xi32, #blocked1> loc(#loc)
    %14 = arith.muli %N, %c16_i32 : i32 loc(#loc)
    %15 = tt.splat %14 : i32 -> tensor<16x16xi32, #blocked1> loc(#loc)
    %16 = arith.cmpi slt, %13, %15 : tensor<16x16xi32, #blocked1> loc(#loc)
    %17 = tt.splat %x_ptr : !tt.ptr<i8> -> tensor<16x16x!tt.ptr<i8>, #blocked1> loc(#loc)
    %18 = tt.addptr %17, %13 : tensor<16x16x!tt.ptr<i8>, #blocked1>, tensor<16x16xi32, #blocked1> loc(#loc)
    %19 = tt.load %18, %16 : tensor<16x16x!tt.ptr<i8>, #blocked1> loc(#loc)
    %20 = arith.muli %0, %c16_i32 : i32 loc(#loc)
    %21 = tt.splat %20 : i32 -> tensor<16x1xi32, #blocked> loc(#loc)
    %22 = arith.addi %21, %5 : tensor<16x1xi32, #blocked> loc(#loc)
    %23 = tt.splat %N : i32 -> tensor<16x1xi32, #blocked> loc(#loc)
    %24 = arith.cmpi slt, %22, %23 : tensor<16x1xi32, #blocked> loc(#loc)
    %25 = tt.splat %scale_ptr : !tt.ptr<i8> -> tensor<16x1x!tt.ptr<i8>, #blocked> loc(#loc)
    %26 = tt.addptr %25, %22 : tensor<16x1x!tt.ptr<i8>, #blocked>, tensor<16x1xi32, #blocked> loc(#loc)
    %27 = tt.load %26, %24 : tensor<16x1x!tt.ptr<i8>, #blocked> loc(#loc)
    %28 = arith.extui %27 : tensor<16x1xi8, #blocked> to tensor<16x1xi16, #blocked> loc(#loc)
    %29 = arith.shli %28, %cst_16 : tensor<16x1xi16, #blocked> loc(#loc)
    %30 = tt.bitcast %29 : tensor<16x1xi16, #blocked> -> tensor<16x1xbf16, #blocked> loc(#loc)
    %31 = arith.andi %19, %cst_14 : tensor<16x16xi8, #blocked1> loc(#loc)
    %32 = arith.andi %19, %cst_13 : tensor<16x16xi8, #blocked1> loc(#loc)
    %33 = arith.extui %31 : tensor<16x16xi8, #blocked1> to tensor<16x16xi16, #blocked1> loc(#loc)
    %34 = arith.shli %33, %cst_12 : tensor<16x16xi16, #blocked1> loc(#loc)
    %35 = arith.andi %19, %cst_11 : tensor<16x16xi8, #blocked1> loc(#loc)
    %36 = arith.extui %35 : tensor<16x16xi8, #blocked1> to tensor<16x16xi16, #blocked1> loc(#loc)
    %37 = arith.shli %36, %cst_10 : tensor<16x16xi16, #blocked1> loc(#loc)
    %38 = arith.ori %34, %37 : tensor<16x16xi16, #blocked1> loc(#loc)
    %39 = arith.extui %32 : tensor<16x16xi8, #blocked1> to tensor<16x16xi16, #blocked1> loc(#loc)
    %40 = arith.shli %39, %cst_9 : tensor<16x16xi16, #blocked1> loc(#loc)
    %41 = arith.andi %19, %cst_8 : tensor<16x16xi8, #blocked1> loc(#loc)
    %42 = arith.extui %41 : tensor<16x16xi8, #blocked1> to tensor<16x16xi16, #blocked1> loc(#loc)
    %43 = arith.shli %42, %cst_7 : tensor<16x16xi16, #blocked1> loc(#loc)
    %44 = arith.ori %40, %43 : tensor<16x16xi16, #blocked1> loc(#loc)
    %45 = arith.andi %31, %cst_6 : tensor<16x16xi8, #blocked1> loc(#loc)
    %46 = arith.extui %45 : tensor<16x16xi8, #blocked1> to tensor<16x16xi32, #blocked1> loc(#loc)
    %47 = arith.cmpi ne, %46, %cst_5 : tensor<16x16xi32, #blocked1> loc(#loc)
    %48 = arith.addi %38, %cst_4 : tensor<16x16xi16, #blocked1> loc(#loc)
    %49 = arith.select %47, %48, %38 : tensor<16x16xi1, #blocked1>, tensor<16x16xi16, #blocked1> loc(#loc)
    %50 = arith.andi %32, %cst_3 : tensor<16x16xi8, #blocked1> loc(#loc)
    %51 = arith.extui %50 : tensor<16x16xi8, #blocked1> to tensor<16x16xi32, #blocked1> loc(#loc)
    %52 = arith.cmpi ne, %51, %cst_5 : tensor<16x16xi32, #blocked1> loc(#loc)
    %53 = arith.addi %44, %cst_4 : tensor<16x16xi16, #blocked1> loc(#loc)
    %54 = arith.select %52, %53, %44 : tensor<16x16xi1, #blocked1>, tensor<16x16xi16, #blocked1> loc(#loc)
    %55 = arith.extui %31 : tensor<16x16xi8, #blocked1> to tensor<16x16xi32, #blocked1> loc(#loc)
    %56 = arith.cmpi eq, %55, %cst_2 : tensor<16x16xi32, #blocked1> loc(#loc)
    %57 = arith.andi %49, %cst_1 : tensor<16x16xi16, #blocked1> loc(#loc)
    %58 = arith.ori %57, %cst_4 : tensor<16x16xi16, #blocked1> loc(#loc)
    %59 = arith.select %56, %58, %49 : tensor<16x16xi1, #blocked1>, tensor<16x16xi16, #blocked1> loc(#loc)
    %60 = arith.extui %32 : tensor<16x16xi8, #blocked1> to tensor<16x16xi32, #blocked1> loc(#loc)
    %61 = arith.cmpi eq, %60, %cst_0 : tensor<16x16xi32, #blocked1> loc(#loc)
    %62 = arith.andi %54, %cst_1 : tensor<16x16xi16, #blocked1> loc(#loc)
    %63 = arith.ori %62, %cst_4 : tensor<16x16xi16, #blocked1> loc(#loc)
    %64 = arith.select %61, %63, %54 : tensor<16x16xi1, #blocked1>, tensor<16x16xi16, #blocked1> loc(#loc)
    %65 = tt.join %59, %64 : tensor<16x16xi16, #blocked1> -> tensor<16x16x2xi16, #blocked2> loc(#loc)
    %66 = tt.reshape %65 : tensor<16x16x2xi16, #blocked2> -> tensor<16x32xi16, #blocked> loc(#loc)
    %67 = tt.bitcast %66 : tensor<16x32xi16, #blocked> -> tensor<16x32xbf16, #blocked> loc(#loc)
    %68 = tt.broadcast %30 : tensor<16x1xbf16, #blocked> -> tensor<16x32xbf16, #blocked> loc(#loc)
    %69 = arith.mulf %67, %68 : tensor<16x32xbf16, #blocked> loc(#loc)
    %70 = arith.extui %27 : tensor<16x1xi8, #blocked> to tensor<16x1xi32, #blocked> loc(#loc)
    %71 = arith.cmpi eq, %70, %cst_17 : tensor<16x1xi32, #blocked> loc(#loc)
    %72 = tt.broadcast %71 : tensor<16x1xi1, #blocked> -> tensor<16x32xi1, #blocked> loc(#loc)
    %73 = arith.select %72, %cst, %69 : tensor<16x32xi1, #blocked>, tensor<16x32xbf16, #blocked> loc(#loc)
    %74 = arith.muli %0, %c512_i32 : i32 loc(#loc)
    %75 = tt.make_range {end = 512 : i32, start = 0 : i32} : tensor<512xi32, #blocked3> loc(#loc)
    %76 = tt.splat %74 : i32 -> tensor<512xi32, #blocked3> loc(#loc)
    %77 = arith.addi %76, %75 : tensor<512xi32, #blocked3> loc(#loc)
    %78 = arith.muli %N, %c32_i32 : i32 loc(#loc)
    %79 = tt.splat %78 : i32 -> tensor<512xi32, #blocked3> loc(#loc)
    %80 = arith.cmpi slt, %77, %79 : tensor<512xi32, #blocked3> loc(#loc)
    %81 = tt.splat %mxfp_ptr : !tt.ptr<bf16> -> tensor<512x!tt.ptr<bf16>, #blocked3> loc(#loc)
    %82 = tt.addptr %81, %77 : tensor<512x!tt.ptr<bf16>, #blocked3>, tensor<512xi32, #blocked3> loc(#loc)
    %83 = tt.reshape %73 : tensor<16x32xbf16, #blocked> -> tensor<512xbf16, #blocked3> loc(#loc)
    tt.store %82, %83, %80 : tensor<512x!tt.ptr<bf16>, #blocked3> loc(#loc)
    tt.return loc(#loc)
  } loc(#loc)
} loc(#loc)
#loc = loc(unknown)


// -----// IR Dump Before TritonAMDGPUAccelerateMatmul (tritonamdgpu-accelerate-matmul) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 2], threadsPerWarp = [4, 16], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [4, 16], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked2 = #ttg.blocked<{sizePerThread = [1, 1, 2], threadsPerWarp = [4, 16, 1], warpsPerCTA = [4, 1, 1], order = [2, 1, 0]}>
#blocked3 = #ttg.blocked<{sizePerThread = [2], threadsPerWarp = [64], warpsPerCTA = [4], order = [0]}>
#loc1 = loc("x_ptr")
#loc2 = loc("scale_ptr")
#loc3 = loc("mxfp_ptr")
#loc4 = loc("N")
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "hip:gfx950", "ttg.threads-per-warp" = 64 : i32} {
  tt.func public @mxfp_upcast_kernel(%x_ptr: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("x_ptr"), %scale_ptr: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("scale_ptr"), %mxfp_ptr: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("mxfp_ptr"), %N: i32 {tt.divisibility = 16 : i32} loc("N")) attributes {noinline = false} {
    %cst = arith.constant dense<0x7FC0> : tensor<16x32xbf16, #blocked> loc(#loc)
    %c512_i32 = arith.constant 512 : i32 loc(#loc)
    %c32_i32 = arith.constant 32 : i32 loc(#loc)
    %cst_0 = arith.constant dense<16> : tensor<16x16xi32, #blocked1> loc(#loc)
    %cst_1 = arith.constant dense<-32768> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_2 = arith.constant dense<1> : tensor<16x16xi32, #blocked1> loc(#loc)
    %cst_3 = arith.constant dense<96> : tensor<16x16xi8, #blocked1> loc(#loc)
    %cst_4 = arith.constant dense<16128> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_5 = arith.constant dense<0> : tensor<16x16xi32, #blocked1> loc(#loc)
    %cst_6 = arith.constant dense<6> : tensor<16x16xi8, #blocked1> loc(#loc)
    %cst_7 = arith.constant dense<8> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_8 = arith.constant dense<-128> : tensor<16x16xi8, #blocked1> loc(#loc)
    %cst_9 = arith.constant dense<2> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_10 = arith.constant dense<12> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_11 = arith.constant dense<8> : tensor<16x16xi8, #blocked1> loc(#loc)
    %cst_12 = arith.constant dense<6> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_13 = arith.constant dense<112> : tensor<16x16xi8, #blocked1> loc(#loc)
    %cst_14 = arith.constant dense<7> : tensor<16x16xi8, #blocked1> loc(#loc)
    %c256_i32 = arith.constant 256 : i32 loc(#loc)
    %c16_i32 = arith.constant 16 : i32 loc(#loc)
    %cst_15 = arith.constant dense<16> : tensor<16x1xi32, #blocked1> loc(#loc)
    %cst_16 = arith.constant dense<7> : tensor<16x1xi16, #blocked> loc(#loc)
    %cst_17 = arith.constant dense<255> : tensor<16x1xi32, #blocked> loc(#loc)
    %0 = tt.get_program_id x : i32 loc(#loc)
    %1 = arith.muli %0, %c256_i32 : i32 loc(#loc)
    %2 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc)
    %3 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc)
    %4 = tt.expand_dims %2 {axis = 1 : i32} : tensor<16xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> -> tensor<16x1xi32, #blocked1> loc(#loc)
    %5 = tt.expand_dims %3 {axis = 1 : i32} : tensor<16xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<16x1xi32, #blocked> loc(#loc)
    %6 = arith.muli %4, %cst_15 : tensor<16x1xi32, #blocked1> loc(#loc)
    %7 = tt.splat %1 : i32 -> tensor<16x1xi32, #blocked1> loc(#loc)
    %8 = arith.addi %7, %6 : tensor<16x1xi32, #blocked1> loc(#loc)
    %9 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc)
    %10 = tt.expand_dims %9 {axis = 0 : i32} : tensor<16xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x16xi32, #blocked1> loc(#loc)
    %11 = tt.broadcast %8 : tensor<16x1xi32, #blocked1> -> tensor<16x16xi32, #blocked1> loc(#loc)
    %12 = tt.broadcast %10 : tensor<1x16xi32, #blocked1> -> tensor<16x16xi32, #blocked1> loc(#loc)
    %13 = arith.addi %11, %12 : tensor<16x16xi32, #blocked1> loc(#loc)
    %14 = arith.muli %N, %c16_i32 : i32 loc(#loc)
    %15 = tt.splat %14 : i32 -> tensor<16x16xi32, #blocked1> loc(#loc)
    %16 = arith.cmpi slt, %13, %15 : tensor<16x16xi32, #blocked1> loc(#loc)
    %17 = tt.splat %x_ptr : !tt.ptr<i8> -> tensor<16x16x!tt.ptr<i8>, #blocked1> loc(#loc)
    %18 = tt.addptr %17, %13 : tensor<16x16x!tt.ptr<i8>, #blocked1>, tensor<16x16xi32, #blocked1> loc(#loc)
    %19 = tt.load %18, %16 : tensor<16x16x!tt.ptr<i8>, #blocked1> loc(#loc)
    %20 = arith.muli %0, %c16_i32 : i32 loc(#loc)
    %21 = tt.splat %20 : i32 -> tensor<16x1xi32, #blocked> loc(#loc)
    %22 = arith.addi %21, %5 : tensor<16x1xi32, #blocked> loc(#loc)
    %23 = tt.splat %N : i32 -> tensor<16x1xi32, #blocked> loc(#loc)
    %24 = arith.cmpi slt, %22, %23 : tensor<16x1xi32, #blocked> loc(#loc)
    %25 = tt.splat %scale_ptr : !tt.ptr<i8> -> tensor<16x1x!tt.ptr<i8>, #blocked> loc(#loc)
    %26 = tt.addptr %25, %22 : tensor<16x1x!tt.ptr<i8>, #blocked>, tensor<16x1xi32, #blocked> loc(#loc)
    %27 = tt.load %26, %24 : tensor<16x1x!tt.ptr<i8>, #blocked> loc(#loc)
    %28 = arith.extui %27 : tensor<16x1xi8, #blocked> to tensor<16x1xi16, #blocked> loc(#loc)
    %29 = arith.shli %28, %cst_16 : tensor<16x1xi16, #blocked> loc(#loc)
    %30 = tt.bitcast %29 : tensor<16x1xi16, #blocked> -> tensor<16x1xbf16, #blocked> loc(#loc)
    %31 = arith.andi %19, %cst_14 : tensor<16x16xi8, #blocked1> loc(#loc)
    %32 = arith.andi %19, %cst_13 : tensor<16x16xi8, #blocked1> loc(#loc)
    %33 = arith.extui %31 : tensor<16x16xi8, #blocked1> to tensor<16x16xi16, #blocked1> loc(#loc)
    %34 = arith.shli %33, %cst_12 : tensor<16x16xi16, #blocked1> loc(#loc)
    %35 = arith.andi %19, %cst_11 : tensor<16x16xi8, #blocked1> loc(#loc)
    %36 = arith.extui %35 : tensor<16x16xi8, #blocked1> to tensor<16x16xi16, #blocked1> loc(#loc)
    %37 = arith.shli %36, %cst_10 : tensor<16x16xi16, #blocked1> loc(#loc)
    %38 = arith.ori %34, %37 : tensor<16x16xi16, #blocked1> loc(#loc)
    %39 = arith.extui %32 : tensor<16x16xi8, #blocked1> to tensor<16x16xi16, #blocked1> loc(#loc)
    %40 = arith.shli %39, %cst_9 : tensor<16x16xi16, #blocked1> loc(#loc)
    %41 = arith.andi %19, %cst_8 : tensor<16x16xi8, #blocked1> loc(#loc)
    %42 = arith.extui %41 : tensor<16x16xi8, #blocked1> to tensor<16x16xi16, #blocked1> loc(#loc)
    %43 = arith.shli %42, %cst_7 : tensor<16x16xi16, #blocked1> loc(#loc)
    %44 = arith.ori %40, %43 : tensor<16x16xi16, #blocked1> loc(#loc)
    %45 = arith.andi %31, %cst_6 : tensor<16x16xi8, #blocked1> loc(#loc)
    %46 = arith.extui %45 : tensor<16x16xi8, #blocked1> to tensor<16x16xi32, #blocked1> loc(#loc)
    %47 = arith.cmpi ne, %46, %cst_5 : tensor<16x16xi32, #blocked1> loc(#loc)
    %48 = arith.addi %38, %cst_4 : tensor<16x16xi16, #blocked1> loc(#loc)
    %49 = arith.select %47, %48, %38 : tensor<16x16xi1, #blocked1>, tensor<16x16xi16, #blocked1> loc(#loc)
    %50 = arith.andi %32, %cst_3 : tensor<16x16xi8, #blocked1> loc(#loc)
    %51 = arith.extui %50 : tensor<16x16xi8, #blocked1> to tensor<16x16xi32, #blocked1> loc(#loc)
    %52 = arith.cmpi ne, %51, %cst_5 : tensor<16x16xi32, #blocked1> loc(#loc)
    %53 = arith.addi %44, %cst_4 : tensor<16x16xi16, #blocked1> loc(#loc)
    %54 = arith.select %52, %53, %44 : tensor<16x16xi1, #blocked1>, tensor<16x16xi16, #blocked1> loc(#loc)
    %55 = arith.extui %31 : tensor<16x16xi8, #blocked1> to tensor<16x16xi32, #blocked1> loc(#loc)
    %56 = arith.cmpi eq, %55, %cst_2 : tensor<16x16xi32, #blocked1> loc(#loc)
    %57 = arith.andi %49, %cst_1 : tensor<16x16xi16, #blocked1> loc(#loc)
    %58 = arith.ori %57, %cst_4 : tensor<16x16xi16, #blocked1> loc(#loc)
    %59 = arith.select %56, %58, %49 : tensor<16x16xi1, #blocked1>, tensor<16x16xi16, #blocked1> loc(#loc)
    %60 = arith.extui %32 : tensor<16x16xi8, #blocked1> to tensor<16x16xi32, #blocked1> loc(#loc)
    %61 = arith.cmpi eq, %60, %cst_0 : tensor<16x16xi32, #blocked1> loc(#loc)
    %62 = arith.andi %54, %cst_1 : tensor<16x16xi16, #blocked1> loc(#loc)
    %63 = arith.ori %62, %cst_4 : tensor<16x16xi16, #blocked1> loc(#loc)
    %64 = arith.select %61, %63, %54 : tensor<16x16xi1, #blocked1>, tensor<16x16xi16, #blocked1> loc(#loc)
    %65 = tt.join %59, %64 : tensor<16x16xi16, #blocked1> -> tensor<16x16x2xi16, #blocked2> loc(#loc)
    %66 = tt.reshape %65 : tensor<16x16x2xi16, #blocked2> -> tensor<16x32xi16, #blocked> loc(#loc)
    %67 = tt.bitcast %66 : tensor<16x32xi16, #blocked> -> tensor<16x32xbf16, #blocked> loc(#loc)
    %68 = tt.broadcast %30 : tensor<16x1xbf16, #blocked> -> tensor<16x32xbf16, #blocked> loc(#loc)
    %69 = arith.mulf %67, %68 : tensor<16x32xbf16, #blocked> loc(#loc)
    %70 = arith.extui %27 : tensor<16x1xi8, #blocked> to tensor<16x1xi32, #blocked> loc(#loc)
    %71 = arith.cmpi eq, %70, %cst_17 : tensor<16x1xi32, #blocked> loc(#loc)
    %72 = tt.broadcast %71 : tensor<16x1xi1, #blocked> -> tensor<16x32xi1, #blocked> loc(#loc)
    %73 = arith.select %72, %cst, %69 : tensor<16x32xi1, #blocked>, tensor<16x32xbf16, #blocked> loc(#loc)
    %74 = arith.muli %0, %c512_i32 : i32 loc(#loc)
    %75 = tt.make_range {end = 512 : i32, start = 0 : i32} : tensor<512xi32, #blocked3> loc(#loc)
    %76 = tt.splat %74 : i32 -> tensor<512xi32, #blocked3> loc(#loc)
    %77 = arith.addi %76, %75 : tensor<512xi32, #blocked3> loc(#loc)
    %78 = arith.muli %N, %c32_i32 : i32 loc(#loc)
    %79 = tt.splat %78 : i32 -> tensor<512xi32, #blocked3> loc(#loc)
    %80 = arith.cmpi slt, %77, %79 : tensor<512xi32, #blocked3> loc(#loc)
    %81 = tt.splat %mxfp_ptr : !tt.ptr<bf16> -> tensor<512x!tt.ptr<bf16>, #blocked3> loc(#loc)
    %82 = tt.addptr %81, %77 : tensor<512x!tt.ptr<bf16>, #blocked3>, tensor<512xi32, #blocked3> loc(#loc)
    %83 = tt.reshape %73 : tensor<16x32xbf16, #blocked> -> tensor<512xbf16, #blocked3> loc(#loc)
    tt.store %82, %83, %80 : tensor<512x!tt.ptr<bf16>, #blocked3> loc(#loc)
    tt.return loc(#loc)
  } loc(#loc)
} loc(#loc)
#loc = loc(unknown)


// -----// IR Dump Before TritonGPURemoveLayoutConversions (tritongpu-remove-layout-conversions) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 2], threadsPerWarp = [4, 16], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [4, 16], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked2 = #ttg.blocked<{sizePerThread = [1, 1, 2], threadsPerWarp = [4, 16, 1], warpsPerCTA = [4, 1, 1], order = [2, 1, 0]}>
#blocked3 = #ttg.blocked<{sizePerThread = [2], threadsPerWarp = [64], warpsPerCTA = [4], order = [0]}>
#loc1 = loc("x_ptr")
#loc2 = loc("scale_ptr")
#loc3 = loc("mxfp_ptr")
#loc4 = loc("N")
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "hip:gfx950", "ttg.threads-per-warp" = 64 : i32} {
  tt.func public @mxfp_upcast_kernel(%x_ptr: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("x_ptr"), %scale_ptr: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("scale_ptr"), %mxfp_ptr: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("mxfp_ptr"), %N: i32 {tt.divisibility = 16 : i32} loc("N")) attributes {noinline = false} {
    %cst = arith.constant dense<0x7FC0> : tensor<16x32xbf16, #blocked> loc(#loc)
    %c512_i32 = arith.constant 512 : i32 loc(#loc)
    %c32_i32 = arith.constant 32 : i32 loc(#loc)
    %cst_0 = arith.constant dense<16> : tensor<16x16xi32, #blocked1> loc(#loc)
    %cst_1 = arith.constant dense<-32768> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_2 = arith.constant dense<1> : tensor<16x16xi32, #blocked1> loc(#loc)
    %cst_3 = arith.constant dense<96> : tensor<16x16xi8, #blocked1> loc(#loc)
    %cst_4 = arith.constant dense<16128> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_5 = arith.constant dense<0> : tensor<16x16xi32, #blocked1> loc(#loc)
    %cst_6 = arith.constant dense<6> : tensor<16x16xi8, #blocked1> loc(#loc)
    %cst_7 = arith.constant dense<8> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_8 = arith.constant dense<-128> : tensor<16x16xi8, #blocked1> loc(#loc)
    %cst_9 = arith.constant dense<2> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_10 = arith.constant dense<12> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_11 = arith.constant dense<8> : tensor<16x16xi8, #blocked1> loc(#loc)
    %cst_12 = arith.constant dense<6> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_13 = arith.constant dense<112> : tensor<16x16xi8, #blocked1> loc(#loc)
    %cst_14 = arith.constant dense<7> : tensor<16x16xi8, #blocked1> loc(#loc)
    %c256_i32 = arith.constant 256 : i32 loc(#loc)
    %c16_i32 = arith.constant 16 : i32 loc(#loc)
    %cst_15 = arith.constant dense<16> : tensor<16x1xi32, #blocked1> loc(#loc)
    %cst_16 = arith.constant dense<7> : tensor<16x1xi16, #blocked> loc(#loc)
    %cst_17 = arith.constant dense<255> : tensor<16x1xi32, #blocked> loc(#loc)
    %0 = tt.get_program_id x : i32 loc(#loc)
    %1 = arith.muli %0, %c256_i32 : i32 loc(#loc)
    %2 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc)
    %3 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc)
    %4 = tt.expand_dims %2 {axis = 1 : i32} : tensor<16xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> -> tensor<16x1xi32, #blocked1> loc(#loc)
    %5 = tt.expand_dims %3 {axis = 1 : i32} : tensor<16xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<16x1xi32, #blocked> loc(#loc)
    %6 = arith.muli %4, %cst_15 : tensor<16x1xi32, #blocked1> loc(#loc)
    %7 = tt.splat %1 : i32 -> tensor<16x1xi32, #blocked1> loc(#loc)
    %8 = arith.addi %7, %6 : tensor<16x1xi32, #blocked1> loc(#loc)
    %9 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc)
    %10 = tt.expand_dims %9 {axis = 0 : i32} : tensor<16xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x16xi32, #blocked1> loc(#loc)
    %11 = tt.broadcast %8 : tensor<16x1xi32, #blocked1> -> tensor<16x16xi32, #blocked1> loc(#loc)
    %12 = tt.broadcast %10 : tensor<1x16xi32, #blocked1> -> tensor<16x16xi32, #blocked1> loc(#loc)
    %13 = arith.addi %11, %12 : tensor<16x16xi32, #blocked1> loc(#loc)
    %14 = arith.muli %N, %c16_i32 : i32 loc(#loc)
    %15 = tt.splat %14 : i32 -> tensor<16x16xi32, #blocked1> loc(#loc)
    %16 = arith.cmpi slt, %13, %15 : tensor<16x16xi32, #blocked1> loc(#loc)
    %17 = tt.splat %x_ptr : !tt.ptr<i8> -> tensor<16x16x!tt.ptr<i8>, #blocked1> loc(#loc)
    %18 = tt.addptr %17, %13 : tensor<16x16x!tt.ptr<i8>, #blocked1>, tensor<16x16xi32, #blocked1> loc(#loc)
    %19 = tt.load %18, %16 : tensor<16x16x!tt.ptr<i8>, #blocked1> loc(#loc)
    %20 = arith.muli %0, %c16_i32 : i32 loc(#loc)
    %21 = tt.splat %20 : i32 -> tensor<16x1xi32, #blocked> loc(#loc)
    %22 = arith.addi %21, %5 : tensor<16x1xi32, #blocked> loc(#loc)
    %23 = tt.splat %N : i32 -> tensor<16x1xi32, #blocked> loc(#loc)
    %24 = arith.cmpi slt, %22, %23 : tensor<16x1xi32, #blocked> loc(#loc)
    %25 = tt.splat %scale_ptr : !tt.ptr<i8> -> tensor<16x1x!tt.ptr<i8>, #blocked> loc(#loc)
    %26 = tt.addptr %25, %22 : tensor<16x1x!tt.ptr<i8>, #blocked>, tensor<16x1xi32, #blocked> loc(#loc)
    %27 = tt.load %26, %24 : tensor<16x1x!tt.ptr<i8>, #blocked> loc(#loc)
    %28 = arith.extui %27 : tensor<16x1xi8, #blocked> to tensor<16x1xi16, #blocked> loc(#loc)
    %29 = arith.shli %28, %cst_16 : tensor<16x1xi16, #blocked> loc(#loc)
    %30 = tt.bitcast %29 : tensor<16x1xi16, #blocked> -> tensor<16x1xbf16, #blocked> loc(#loc)
    %31 = arith.andi %19, %cst_14 : tensor<16x16xi8, #blocked1> loc(#loc)
    %32 = arith.andi %19, %cst_13 : tensor<16x16xi8, #blocked1> loc(#loc)
    %33 = arith.extui %31 : tensor<16x16xi8, #blocked1> to tensor<16x16xi16, #blocked1> loc(#loc)
    %34 = arith.shli %33, %cst_12 : tensor<16x16xi16, #blocked1> loc(#loc)
    %35 = arith.andi %19, %cst_11 : tensor<16x16xi8, #blocked1> loc(#loc)
    %36 = arith.extui %35 : tensor<16x16xi8, #blocked1> to tensor<16x16xi16, #blocked1> loc(#loc)
    %37 = arith.shli %36, %cst_10 : tensor<16x16xi16, #blocked1> loc(#loc)
    %38 = arith.ori %34, %37 : tensor<16x16xi16, #blocked1> loc(#loc)
    %39 = arith.extui %32 : tensor<16x16xi8, #blocked1> to tensor<16x16xi16, #blocked1> loc(#loc)
    %40 = arith.shli %39, %cst_9 : tensor<16x16xi16, #blocked1> loc(#loc)
    %41 = arith.andi %19, %cst_8 : tensor<16x16xi8, #blocked1> loc(#loc)
    %42 = arith.extui %41 : tensor<16x16xi8, #blocked1> to tensor<16x16xi16, #blocked1> loc(#loc)
    %43 = arith.shli %42, %cst_7 : tensor<16x16xi16, #blocked1> loc(#loc)
    %44 = arith.ori %40, %43 : tensor<16x16xi16, #blocked1> loc(#loc)
    %45 = arith.andi %31, %cst_6 : tensor<16x16xi8, #blocked1> loc(#loc)
    %46 = arith.extui %45 : tensor<16x16xi8, #blocked1> to tensor<16x16xi32, #blocked1> loc(#loc)
    %47 = arith.cmpi ne, %46, %cst_5 : tensor<16x16xi32, #blocked1> loc(#loc)
    %48 = arith.addi %38, %cst_4 : tensor<16x16xi16, #blocked1> loc(#loc)
    %49 = arith.select %47, %48, %38 : tensor<16x16xi1, #blocked1>, tensor<16x16xi16, #blocked1> loc(#loc)
    %50 = arith.andi %32, %cst_3 : tensor<16x16xi8, #blocked1> loc(#loc)
    %51 = arith.extui %50 : tensor<16x16xi8, #blocked1> to tensor<16x16xi32, #blocked1> loc(#loc)
    %52 = arith.cmpi ne, %51, %cst_5 : tensor<16x16xi32, #blocked1> loc(#loc)
    %53 = arith.addi %44, %cst_4 : tensor<16x16xi16, #blocked1> loc(#loc)
    %54 = arith.select %52, %53, %44 : tensor<16x16xi1, #blocked1>, tensor<16x16xi16, #blocked1> loc(#loc)
    %55 = arith.extui %31 : tensor<16x16xi8, #blocked1> to tensor<16x16xi32, #blocked1> loc(#loc)
    %56 = arith.cmpi eq, %55, %cst_2 : tensor<16x16xi32, #blocked1> loc(#loc)
    %57 = arith.andi %49, %cst_1 : tensor<16x16xi16, #blocked1> loc(#loc)
    %58 = arith.ori %57, %cst_4 : tensor<16x16xi16, #blocked1> loc(#loc)
    %59 = arith.select %56, %58, %49 : tensor<16x16xi1, #blocked1>, tensor<16x16xi16, #blocked1> loc(#loc)
    %60 = arith.extui %32 : tensor<16x16xi8, #blocked1> to tensor<16x16xi32, #blocked1> loc(#loc)
    %61 = arith.cmpi eq, %60, %cst_0 : tensor<16x16xi32, #blocked1> loc(#loc)
    %62 = arith.andi %54, %cst_1 : tensor<16x16xi16, #blocked1> loc(#loc)
    %63 = arith.ori %62, %cst_4 : tensor<16x16xi16, #blocked1> loc(#loc)
    %64 = arith.select %61, %63, %54 : tensor<16x16xi1, #blocked1>, tensor<16x16xi16, #blocked1> loc(#loc)
    %65 = tt.join %59, %64 : tensor<16x16xi16, #blocked1> -> tensor<16x16x2xi16, #blocked2> loc(#loc)
    %66 = tt.reshape %65 : tensor<16x16x2xi16, #blocked2> -> tensor<16x32xi16, #blocked> loc(#loc)
    %67 = tt.bitcast %66 : tensor<16x32xi16, #blocked> -> tensor<16x32xbf16, #blocked> loc(#loc)
    %68 = tt.broadcast %30 : tensor<16x1xbf16, #blocked> -> tensor<16x32xbf16, #blocked> loc(#loc)
    %69 = arith.mulf %67, %68 : tensor<16x32xbf16, #blocked> loc(#loc)
    %70 = arith.extui %27 : tensor<16x1xi8, #blocked> to tensor<16x1xi32, #blocked> loc(#loc)
    %71 = arith.cmpi eq, %70, %cst_17 : tensor<16x1xi32, #blocked> loc(#loc)
    %72 = tt.broadcast %71 : tensor<16x1xi1, #blocked> -> tensor<16x32xi1, #blocked> loc(#loc)
    %73 = arith.select %72, %cst, %69 : tensor<16x32xi1, #blocked>, tensor<16x32xbf16, #blocked> loc(#loc)
    %74 = arith.muli %0, %c512_i32 : i32 loc(#loc)
    %75 = tt.make_range {end = 512 : i32, start = 0 : i32} : tensor<512xi32, #blocked3> loc(#loc)
    %76 = tt.splat %74 : i32 -> tensor<512xi32, #blocked3> loc(#loc)
    %77 = arith.addi %76, %75 : tensor<512xi32, #blocked3> loc(#loc)
    %78 = arith.muli %N, %c32_i32 : i32 loc(#loc)
    %79 = tt.splat %78 : i32 -> tensor<512xi32, #blocked3> loc(#loc)
    %80 = arith.cmpi slt, %77, %79 : tensor<512xi32, #blocked3> loc(#loc)
    %81 = tt.splat %mxfp_ptr : !tt.ptr<bf16> -> tensor<512x!tt.ptr<bf16>, #blocked3> loc(#loc)
    %82 = tt.addptr %81, %77 : tensor<512x!tt.ptr<bf16>, #blocked3>, tensor<512xi32, #blocked3> loc(#loc)
    %83 = tt.reshape %73 : tensor<16x32xbf16, #blocked> -> tensor<512xbf16, #blocked3> loc(#loc)
    tt.store %82, %83, %80 : tensor<512x!tt.ptr<bf16>, #blocked3> loc(#loc)
    tt.return loc(#loc)
  } loc(#loc)
} loc(#loc)
#loc = loc(unknown)


// -----// IR Dump Before TritonAMDGPUOptimizeEpilogue (tritonamdgpu-optimize-epilogue) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 2], threadsPerWarp = [4, 16], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [4, 16], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked2 = #ttg.blocked<{sizePerThread = [1, 1, 2], threadsPerWarp = [4, 16, 1], warpsPerCTA = [4, 1, 1], order = [2, 1, 0]}>
#blocked3 = #ttg.blocked<{sizePerThread = [2], threadsPerWarp = [64], warpsPerCTA = [4], order = [0]}>
#loc1 = loc("x_ptr")
#loc2 = loc("scale_ptr")
#loc3 = loc("mxfp_ptr")
#loc4 = loc("N")
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "hip:gfx950", "ttg.threads-per-warp" = 64 : i32} {
  tt.func public @mxfp_upcast_kernel(%x_ptr: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("x_ptr"), %scale_ptr: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("scale_ptr"), %mxfp_ptr: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("mxfp_ptr"), %N: i32 {tt.divisibility = 16 : i32} loc("N")) attributes {noinline = false} {
    %cst = arith.constant dense<0x7FC0> : tensor<16x32xbf16, #blocked> loc(#loc)
    %c512_i32 = arith.constant 512 : i32 loc(#loc)
    %c32_i32 = arith.constant 32 : i32 loc(#loc)
    %cst_0 = arith.constant dense<16> : tensor<16x16xi32, #blocked1> loc(#loc)
    %cst_1 = arith.constant dense<-32768> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_2 = arith.constant dense<1> : tensor<16x16xi32, #blocked1> loc(#loc)
    %cst_3 = arith.constant dense<96> : tensor<16x16xi8, #blocked1> loc(#loc)
    %cst_4 = arith.constant dense<16128> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_5 = arith.constant dense<0> : tensor<16x16xi32, #blocked1> loc(#loc)
    %cst_6 = arith.constant dense<6> : tensor<16x16xi8, #blocked1> loc(#loc)
    %cst_7 = arith.constant dense<8> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_8 = arith.constant dense<-128> : tensor<16x16xi8, #blocked1> loc(#loc)
    %cst_9 = arith.constant dense<2> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_10 = arith.constant dense<12> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_11 = arith.constant dense<8> : tensor<16x16xi8, #blocked1> loc(#loc)
    %cst_12 = arith.constant dense<6> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_13 = arith.constant dense<112> : tensor<16x16xi8, #blocked1> loc(#loc)
    %cst_14 = arith.constant dense<7> : tensor<16x16xi8, #blocked1> loc(#loc)
    %c256_i32 = arith.constant 256 : i32 loc(#loc)
    %c16_i32 = arith.constant 16 : i32 loc(#loc)
    %cst_15 = arith.constant dense<16> : tensor<16x1xi32, #blocked1> loc(#loc)
    %cst_16 = arith.constant dense<7> : tensor<16x1xi16, #blocked> loc(#loc)
    %cst_17 = arith.constant dense<255> : tensor<16x1xi32, #blocked> loc(#loc)
    %0 = tt.get_program_id x : i32 loc(#loc)
    %1 = arith.muli %0, %c256_i32 : i32 loc(#loc)
    %2 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc)
    %3 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc)
    %4 = tt.expand_dims %2 {axis = 1 : i32} : tensor<16xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> -> tensor<16x1xi32, #blocked1> loc(#loc)
    %5 = tt.expand_dims %3 {axis = 1 : i32} : tensor<16xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<16x1xi32, #blocked> loc(#loc)
    %6 = arith.muli %4, %cst_15 : tensor<16x1xi32, #blocked1> loc(#loc)
    %7 = tt.splat %1 : i32 -> tensor<16x1xi32, #blocked1> loc(#loc)
    %8 = arith.addi %7, %6 : tensor<16x1xi32, #blocked1> loc(#loc)
    %9 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc)
    %10 = tt.expand_dims %9 {axis = 0 : i32} : tensor<16xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x16xi32, #blocked1> loc(#loc)
    %11 = tt.broadcast %8 : tensor<16x1xi32, #blocked1> -> tensor<16x16xi32, #blocked1> loc(#loc)
    %12 = tt.broadcast %10 : tensor<1x16xi32, #blocked1> -> tensor<16x16xi32, #blocked1> loc(#loc)
    %13 = arith.addi %11, %12 : tensor<16x16xi32, #blocked1> loc(#loc)
    %14 = arith.muli %N, %c16_i32 : i32 loc(#loc)
    %15 = tt.splat %14 : i32 -> tensor<16x16xi32, #blocked1> loc(#loc)
    %16 = arith.cmpi slt, %13, %15 : tensor<16x16xi32, #blocked1> loc(#loc)
    %17 = tt.splat %x_ptr : !tt.ptr<i8> -> tensor<16x16x!tt.ptr<i8>, #blocked1> loc(#loc)
    %18 = tt.addptr %17, %13 : tensor<16x16x!tt.ptr<i8>, #blocked1>, tensor<16x16xi32, #blocked1> loc(#loc)
    %19 = tt.load %18, %16 : tensor<16x16x!tt.ptr<i8>, #blocked1> loc(#loc)
    %20 = arith.muli %0, %c16_i32 : i32 loc(#loc)
    %21 = tt.splat %20 : i32 -> tensor<16x1xi32, #blocked> loc(#loc)
    %22 = arith.addi %21, %5 : tensor<16x1xi32, #blocked> loc(#loc)
    %23 = tt.splat %N : i32 -> tensor<16x1xi32, #blocked> loc(#loc)
    %24 = arith.cmpi slt, %22, %23 : tensor<16x1xi32, #blocked> loc(#loc)
    %25 = tt.splat %scale_ptr : !tt.ptr<i8> -> tensor<16x1x!tt.ptr<i8>, #blocked> loc(#loc)
    %26 = tt.addptr %25, %22 : tensor<16x1x!tt.ptr<i8>, #blocked>, tensor<16x1xi32, #blocked> loc(#loc)
    %27 = tt.load %26, %24 : tensor<16x1x!tt.ptr<i8>, #blocked> loc(#loc)
    %28 = arith.extui %27 : tensor<16x1xi8, #blocked> to tensor<16x1xi16, #blocked> loc(#loc)
    %29 = arith.shli %28, %cst_16 : tensor<16x1xi16, #blocked> loc(#loc)
    %30 = tt.bitcast %29 : tensor<16x1xi16, #blocked> -> tensor<16x1xbf16, #blocked> loc(#loc)
    %31 = arith.andi %19, %cst_14 : tensor<16x16xi8, #blocked1> loc(#loc)
    %32 = arith.andi %19, %cst_13 : tensor<16x16xi8, #blocked1> loc(#loc)
    %33 = arith.extui %31 : tensor<16x16xi8, #blocked1> to tensor<16x16xi16, #blocked1> loc(#loc)
    %34 = arith.shli %33, %cst_12 : tensor<16x16xi16, #blocked1> loc(#loc)
    %35 = arith.andi %19, %cst_11 : tensor<16x16xi8, #blocked1> loc(#loc)
    %36 = arith.extui %35 : tensor<16x16xi8, #blocked1> to tensor<16x16xi16, #blocked1> loc(#loc)
    %37 = arith.shli %36, %cst_10 : tensor<16x16xi16, #blocked1> loc(#loc)
    %38 = arith.ori %34, %37 : tensor<16x16xi16, #blocked1> loc(#loc)
    %39 = arith.extui %32 : tensor<16x16xi8, #blocked1> to tensor<16x16xi16, #blocked1> loc(#loc)
    %40 = arith.shli %39, %cst_9 : tensor<16x16xi16, #blocked1> loc(#loc)
    %41 = arith.andi %19, %cst_8 : tensor<16x16xi8, #blocked1> loc(#loc)
    %42 = arith.extui %41 : tensor<16x16xi8, #blocked1> to tensor<16x16xi16, #blocked1> loc(#loc)
    %43 = arith.shli %42, %cst_7 : tensor<16x16xi16, #blocked1> loc(#loc)
    %44 = arith.ori %40, %43 : tensor<16x16xi16, #blocked1> loc(#loc)
    %45 = arith.andi %31, %cst_6 : tensor<16x16xi8, #blocked1> loc(#loc)
    %46 = arith.extui %45 : tensor<16x16xi8, #blocked1> to tensor<16x16xi32, #blocked1> loc(#loc)
    %47 = arith.cmpi ne, %46, %cst_5 : tensor<16x16xi32, #blocked1> loc(#loc)
    %48 = arith.addi %38, %cst_4 : tensor<16x16xi16, #blocked1> loc(#loc)
    %49 = arith.select %47, %48, %38 : tensor<16x16xi1, #blocked1>, tensor<16x16xi16, #blocked1> loc(#loc)
    %50 = arith.andi %32, %cst_3 : tensor<16x16xi8, #blocked1> loc(#loc)
    %51 = arith.extui %50 : tensor<16x16xi8, #blocked1> to tensor<16x16xi32, #blocked1> loc(#loc)
    %52 = arith.cmpi ne, %51, %cst_5 : tensor<16x16xi32, #blocked1> loc(#loc)
    %53 = arith.addi %44, %cst_4 : tensor<16x16xi16, #blocked1> loc(#loc)
    %54 = arith.select %52, %53, %44 : tensor<16x16xi1, #blocked1>, tensor<16x16xi16, #blocked1> loc(#loc)
    %55 = arith.extui %31 : tensor<16x16xi8, #blocked1> to tensor<16x16xi32, #blocked1> loc(#loc)
    %56 = arith.cmpi eq, %55, %cst_2 : tensor<16x16xi32, #blocked1> loc(#loc)
    %57 = arith.andi %49, %cst_1 : tensor<16x16xi16, #blocked1> loc(#loc)
    %58 = arith.ori %57, %cst_4 : tensor<16x16xi16, #blocked1> loc(#loc)
    %59 = arith.select %56, %58, %49 : tensor<16x16xi1, #blocked1>, tensor<16x16xi16, #blocked1> loc(#loc)
    %60 = arith.extui %32 : tensor<16x16xi8, #blocked1> to tensor<16x16xi32, #blocked1> loc(#loc)
    %61 = arith.cmpi eq, %60, %cst_0 : tensor<16x16xi32, #blocked1> loc(#loc)
    %62 = arith.andi %54, %cst_1 : tensor<16x16xi16, #blocked1> loc(#loc)
    %63 = arith.ori %62, %cst_4 : tensor<16x16xi16, #blocked1> loc(#loc)
    %64 = arith.select %61, %63, %54 : tensor<16x16xi1, #blocked1>, tensor<16x16xi16, #blocked1> loc(#loc)
    %65 = tt.join %59, %64 : tensor<16x16xi16, #blocked1> -> tensor<16x16x2xi16, #blocked2> loc(#loc)
    %66 = tt.reshape %65 : tensor<16x16x2xi16, #blocked2> -> tensor<16x32xi16, #blocked> loc(#loc)
    %67 = tt.bitcast %66 : tensor<16x32xi16, #blocked> -> tensor<16x32xbf16, #blocked> loc(#loc)
    %68 = tt.broadcast %30 : tensor<16x1xbf16, #blocked> -> tensor<16x32xbf16, #blocked> loc(#loc)
    %69 = arith.mulf %67, %68 : tensor<16x32xbf16, #blocked> loc(#loc)
    %70 = arith.extui %27 : tensor<16x1xi8, #blocked> to tensor<16x1xi32, #blocked> loc(#loc)
    %71 = arith.cmpi eq, %70, %cst_17 : tensor<16x1xi32, #blocked> loc(#loc)
    %72 = tt.broadcast %71 : tensor<16x1xi1, #blocked> -> tensor<16x32xi1, #blocked> loc(#loc)
    %73 = arith.select %72, %cst, %69 : tensor<16x32xi1, #blocked>, tensor<16x32xbf16, #blocked> loc(#loc)
    %74 = arith.muli %0, %c512_i32 : i32 loc(#loc)
    %75 = tt.make_range {end = 512 : i32, start = 0 : i32} : tensor<512xi32, #blocked3> loc(#loc)
    %76 = tt.splat %74 : i32 -> tensor<512xi32, #blocked3> loc(#loc)
    %77 = arith.addi %76, %75 : tensor<512xi32, #blocked3> loc(#loc)
    %78 = arith.muli %N, %c32_i32 : i32 loc(#loc)
    %79 = tt.splat %78 : i32 -> tensor<512xi32, #blocked3> loc(#loc)
    %80 = arith.cmpi slt, %77, %79 : tensor<512xi32, #blocked3> loc(#loc)
    %81 = tt.splat %mxfp_ptr : !tt.ptr<bf16> -> tensor<512x!tt.ptr<bf16>, #blocked3> loc(#loc)
    %82 = tt.addptr %81, %77 : tensor<512x!tt.ptr<bf16>, #blocked3>, tensor<512xi32, #blocked3> loc(#loc)
    %83 = tt.reshape %73 : tensor<16x32xbf16, #blocked> -> tensor<512xbf16, #blocked3> loc(#loc)
    tt.store %82, %83, %80 : tensor<512x!tt.ptr<bf16>, #blocked3> loc(#loc)
    tt.return loc(#loc)
  } loc(#loc)
} loc(#loc)
#loc = loc(unknown)


// -----// IR Dump Before TritonGPUOptimizeDotOperands (tritongpu-optimize-dot-operands) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 2], threadsPerWarp = [4, 16], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [4, 16], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked2 = #ttg.blocked<{sizePerThread = [1, 1, 2], threadsPerWarp = [4, 16, 1], warpsPerCTA = [4, 1, 1], order = [2, 1, 0]}>
#blocked3 = #ttg.blocked<{sizePerThread = [2], threadsPerWarp = [64], warpsPerCTA = [4], order = [0]}>
#loc1 = loc("x_ptr")
#loc2 = loc("scale_ptr")
#loc3 = loc("mxfp_ptr")
#loc4 = loc("N")
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "hip:gfx950", "ttg.threads-per-warp" = 64 : i32} {
  tt.func public @mxfp_upcast_kernel(%x_ptr: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("x_ptr"), %scale_ptr: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("scale_ptr"), %mxfp_ptr: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("mxfp_ptr"), %N: i32 {tt.divisibility = 16 : i32} loc("N")) attributes {noinline = false} {
    %cst = arith.constant dense<0x7FC0> : tensor<16x32xbf16, #blocked> loc(#loc)
    %c512_i32 = arith.constant 512 : i32 loc(#loc)
    %c32_i32 = arith.constant 32 : i32 loc(#loc)
    %cst_0 = arith.constant dense<16> : tensor<16x16xi32, #blocked1> loc(#loc)
    %cst_1 = arith.constant dense<-32768> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_2 = arith.constant dense<1> : tensor<16x16xi32, #blocked1> loc(#loc)
    %cst_3 = arith.constant dense<96> : tensor<16x16xi8, #blocked1> loc(#loc)
    %cst_4 = arith.constant dense<16128> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_5 = arith.constant dense<0> : tensor<16x16xi32, #blocked1> loc(#loc)
    %cst_6 = arith.constant dense<6> : tensor<16x16xi8, #blocked1> loc(#loc)
    %cst_7 = arith.constant dense<8> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_8 = arith.constant dense<-128> : tensor<16x16xi8, #blocked1> loc(#loc)
    %cst_9 = arith.constant dense<2> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_10 = arith.constant dense<12> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_11 = arith.constant dense<8> : tensor<16x16xi8, #blocked1> loc(#loc)
    %cst_12 = arith.constant dense<6> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_13 = arith.constant dense<112> : tensor<16x16xi8, #blocked1> loc(#loc)
    %cst_14 = arith.constant dense<7> : tensor<16x16xi8, #blocked1> loc(#loc)
    %c256_i32 = arith.constant 256 : i32 loc(#loc)
    %c16_i32 = arith.constant 16 : i32 loc(#loc)
    %cst_15 = arith.constant dense<16> : tensor<16x1xi32, #blocked1> loc(#loc)
    %cst_16 = arith.constant dense<7> : tensor<16x1xi16, #blocked> loc(#loc)
    %cst_17 = arith.constant dense<255> : tensor<16x1xi32, #blocked> loc(#loc)
    %0 = tt.get_program_id x : i32 loc(#loc)
    %1 = arith.muli %0, %c256_i32 : i32 loc(#loc)
    %2 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc)
    %3 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc)
    %4 = tt.expand_dims %2 {axis = 1 : i32} : tensor<16xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> -> tensor<16x1xi32, #blocked1> loc(#loc)
    %5 = tt.expand_dims %3 {axis = 1 : i32} : tensor<16xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<16x1xi32, #blocked> loc(#loc)
    %6 = arith.muli %4, %cst_15 : tensor<16x1xi32, #blocked1> loc(#loc)
    %7 = tt.splat %1 : i32 -> tensor<16x1xi32, #blocked1> loc(#loc)
    %8 = arith.addi %7, %6 : tensor<16x1xi32, #blocked1> loc(#loc)
    %9 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc)
    %10 = tt.expand_dims %9 {axis = 0 : i32} : tensor<16xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x16xi32, #blocked1> loc(#loc)
    %11 = tt.broadcast %8 : tensor<16x1xi32, #blocked1> -> tensor<16x16xi32, #blocked1> loc(#loc)
    %12 = tt.broadcast %10 : tensor<1x16xi32, #blocked1> -> tensor<16x16xi32, #blocked1> loc(#loc)
    %13 = arith.addi %11, %12 : tensor<16x16xi32, #blocked1> loc(#loc)
    %14 = arith.muli %N, %c16_i32 : i32 loc(#loc)
    %15 = tt.splat %14 : i32 -> tensor<16x16xi32, #blocked1> loc(#loc)
    %16 = arith.cmpi slt, %13, %15 : tensor<16x16xi32, #blocked1> loc(#loc)
    %17 = tt.splat %x_ptr : !tt.ptr<i8> -> tensor<16x16x!tt.ptr<i8>, #blocked1> loc(#loc)
    %18 = tt.addptr %17, %13 : tensor<16x16x!tt.ptr<i8>, #blocked1>, tensor<16x16xi32, #blocked1> loc(#loc)
    %19 = tt.load %18, %16 : tensor<16x16x!tt.ptr<i8>, #blocked1> loc(#loc)
    %20 = arith.muli %0, %c16_i32 : i32 loc(#loc)
    %21 = tt.splat %20 : i32 -> tensor<16x1xi32, #blocked> loc(#loc)
    %22 = arith.addi %21, %5 : tensor<16x1xi32, #blocked> loc(#loc)
    %23 = tt.splat %N : i32 -> tensor<16x1xi32, #blocked> loc(#loc)
    %24 = arith.cmpi slt, %22, %23 : tensor<16x1xi32, #blocked> loc(#loc)
    %25 = tt.splat %scale_ptr : !tt.ptr<i8> -> tensor<16x1x!tt.ptr<i8>, #blocked> loc(#loc)
    %26 = tt.addptr %25, %22 : tensor<16x1x!tt.ptr<i8>, #blocked>, tensor<16x1xi32, #blocked> loc(#loc)
    %27 = tt.load %26, %24 : tensor<16x1x!tt.ptr<i8>, #blocked> loc(#loc)
    %28 = arith.extui %27 : tensor<16x1xi8, #blocked> to tensor<16x1xi16, #blocked> loc(#loc)
    %29 = arith.shli %28, %cst_16 : tensor<16x1xi16, #blocked> loc(#loc)
    %30 = tt.bitcast %29 : tensor<16x1xi16, #blocked> -> tensor<16x1xbf16, #blocked> loc(#loc)
    %31 = arith.andi %19, %cst_14 : tensor<16x16xi8, #blocked1> loc(#loc)
    %32 = arith.andi %19, %cst_13 : tensor<16x16xi8, #blocked1> loc(#loc)
    %33 = arith.extui %31 : tensor<16x16xi8, #blocked1> to tensor<16x16xi16, #blocked1> loc(#loc)
    %34 = arith.shli %33, %cst_12 : tensor<16x16xi16, #blocked1> loc(#loc)
    %35 = arith.andi %19, %cst_11 : tensor<16x16xi8, #blocked1> loc(#loc)
    %36 = arith.extui %35 : tensor<16x16xi8, #blocked1> to tensor<16x16xi16, #blocked1> loc(#loc)
    %37 = arith.shli %36, %cst_10 : tensor<16x16xi16, #blocked1> loc(#loc)
    %38 = arith.ori %34, %37 : tensor<16x16xi16, #blocked1> loc(#loc)
    %39 = arith.extui %32 : tensor<16x16xi8, #blocked1> to tensor<16x16xi16, #blocked1> loc(#loc)
    %40 = arith.shli %39, %cst_9 : tensor<16x16xi16, #blocked1> loc(#loc)
    %41 = arith.andi %19, %cst_8 : tensor<16x16xi8, #blocked1> loc(#loc)
    %42 = arith.extui %41 : tensor<16x16xi8, #blocked1> to tensor<16x16xi16, #blocked1> loc(#loc)
    %43 = arith.shli %42, %cst_7 : tensor<16x16xi16, #blocked1> loc(#loc)
    %44 = arith.ori %40, %43 : tensor<16x16xi16, #blocked1> loc(#loc)
    %45 = arith.andi %31, %cst_6 : tensor<16x16xi8, #blocked1> loc(#loc)
    %46 = arith.extui %45 : tensor<16x16xi8, #blocked1> to tensor<16x16xi32, #blocked1> loc(#loc)
    %47 = arith.cmpi ne, %46, %cst_5 : tensor<16x16xi32, #blocked1> loc(#loc)
    %48 = arith.addi %38, %cst_4 : tensor<16x16xi16, #blocked1> loc(#loc)
    %49 = arith.select %47, %48, %38 : tensor<16x16xi1, #blocked1>, tensor<16x16xi16, #blocked1> loc(#loc)
    %50 = arith.andi %32, %cst_3 : tensor<16x16xi8, #blocked1> loc(#loc)
    %51 = arith.extui %50 : tensor<16x16xi8, #blocked1> to tensor<16x16xi32, #blocked1> loc(#loc)
    %52 = arith.cmpi ne, %51, %cst_5 : tensor<16x16xi32, #blocked1> loc(#loc)
    %53 = arith.addi %44, %cst_4 : tensor<16x16xi16, #blocked1> loc(#loc)
    %54 = arith.select %52, %53, %44 : tensor<16x16xi1, #blocked1>, tensor<16x16xi16, #blocked1> loc(#loc)
    %55 = arith.extui %31 : tensor<16x16xi8, #blocked1> to tensor<16x16xi32, #blocked1> loc(#loc)
    %56 = arith.cmpi eq, %55, %cst_2 : tensor<16x16xi32, #blocked1> loc(#loc)
    %57 = arith.andi %49, %cst_1 : tensor<16x16xi16, #blocked1> loc(#loc)
    %58 = arith.ori %57, %cst_4 : tensor<16x16xi16, #blocked1> loc(#loc)
    %59 = arith.select %56, %58, %49 : tensor<16x16xi1, #blocked1>, tensor<16x16xi16, #blocked1> loc(#loc)
    %60 = arith.extui %32 : tensor<16x16xi8, #blocked1> to tensor<16x16xi32, #blocked1> loc(#loc)
    %61 = arith.cmpi eq, %60, %cst_0 : tensor<16x16xi32, #blocked1> loc(#loc)
    %62 = arith.andi %54, %cst_1 : tensor<16x16xi16, #blocked1> loc(#loc)
    %63 = arith.ori %62, %cst_4 : tensor<16x16xi16, #blocked1> loc(#loc)
    %64 = arith.select %61, %63, %54 : tensor<16x16xi1, #blocked1>, tensor<16x16xi16, #blocked1> loc(#loc)
    %65 = tt.join %59, %64 : tensor<16x16xi16, #blocked1> -> tensor<16x16x2xi16, #blocked2> loc(#loc)
    %66 = tt.reshape %65 : tensor<16x16x2xi16, #blocked2> -> tensor<16x32xi16, #blocked> loc(#loc)
    %67 = tt.bitcast %66 : tensor<16x32xi16, #blocked> -> tensor<16x32xbf16, #blocked> loc(#loc)
    %68 = tt.broadcast %30 : tensor<16x1xbf16, #blocked> -> tensor<16x32xbf16, #blocked> loc(#loc)
    %69 = arith.mulf %67, %68 : tensor<16x32xbf16, #blocked> loc(#loc)
    %70 = arith.extui %27 : tensor<16x1xi8, #blocked> to tensor<16x1xi32, #blocked> loc(#loc)
    %71 = arith.cmpi eq, %70, %cst_17 : tensor<16x1xi32, #blocked> loc(#loc)
    %72 = tt.broadcast %71 : tensor<16x1xi1, #blocked> -> tensor<16x32xi1, #blocked> loc(#loc)
    %73 = arith.select %72, %cst, %69 : tensor<16x32xi1, #blocked>, tensor<16x32xbf16, #blocked> loc(#loc)
    %74 = arith.muli %0, %c512_i32 : i32 loc(#loc)
    %75 = tt.make_range {end = 512 : i32, start = 0 : i32} : tensor<512xi32, #blocked3> loc(#loc)
    %76 = tt.splat %74 : i32 -> tensor<512xi32, #blocked3> loc(#loc)
    %77 = arith.addi %76, %75 : tensor<512xi32, #blocked3> loc(#loc)
    %78 = arith.muli %N, %c32_i32 : i32 loc(#loc)
    %79 = tt.splat %78 : i32 -> tensor<512xi32, #blocked3> loc(#loc)
    %80 = arith.cmpi slt, %77, %79 : tensor<512xi32, #blocked3> loc(#loc)
    %81 = tt.splat %mxfp_ptr : !tt.ptr<bf16> -> tensor<512x!tt.ptr<bf16>, #blocked3> loc(#loc)
    %82 = tt.addptr %81, %77 : tensor<512x!tt.ptr<bf16>, #blocked3>, tensor<512xi32, #blocked3> loc(#loc)
    %83 = tt.reshape %73 : tensor<16x32xbf16, #blocked> -> tensor<512xbf16, #blocked3> loc(#loc)
    tt.store %82, %83, %80 : tensor<512x!tt.ptr<bf16>, #blocked3> loc(#loc)
    tt.return loc(#loc)
  } loc(#loc)
} loc(#loc)
#loc = loc(unknown)


// -----// IR Dump Before Canonicalizer (canonicalize) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 2], threadsPerWarp = [4, 16], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [4, 16], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked2 = #ttg.blocked<{sizePerThread = [1, 1, 2], threadsPerWarp = [4, 16, 1], warpsPerCTA = [4, 1, 1], order = [2, 1, 0]}>
#blocked3 = #ttg.blocked<{sizePerThread = [2], threadsPerWarp = [64], warpsPerCTA = [4], order = [0]}>
#loc1 = loc("x_ptr")
#loc2 = loc("scale_ptr")
#loc3 = loc("mxfp_ptr")
#loc4 = loc("N")
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "hip:gfx950", "ttg.threads-per-warp" = 64 : i32} {
  tt.func public @mxfp_upcast_kernel(%x_ptr: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("x_ptr"), %scale_ptr: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("scale_ptr"), %mxfp_ptr: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("mxfp_ptr"), %N: i32 {tt.divisibility = 16 : i32} loc("N")) attributes {noinline = false} {
    %cst = arith.constant dense<0x7FC0> : tensor<16x32xbf16, #blocked> loc(#loc)
    %c512_i32 = arith.constant 512 : i32 loc(#loc)
    %c32_i32 = arith.constant 32 : i32 loc(#loc)
    %cst_0 = arith.constant dense<16> : tensor<16x16xi32, #blocked1> loc(#loc)
    %cst_1 = arith.constant dense<-32768> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_2 = arith.constant dense<1> : tensor<16x16xi32, #blocked1> loc(#loc)
    %cst_3 = arith.constant dense<96> : tensor<16x16xi8, #blocked1> loc(#loc)
    %cst_4 = arith.constant dense<16128> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_5 = arith.constant dense<0> : tensor<16x16xi32, #blocked1> loc(#loc)
    %cst_6 = arith.constant dense<6> : tensor<16x16xi8, #blocked1> loc(#loc)
    %cst_7 = arith.constant dense<8> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_8 = arith.constant dense<-128> : tensor<16x16xi8, #blocked1> loc(#loc)
    %cst_9 = arith.constant dense<2> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_10 = arith.constant dense<12> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_11 = arith.constant dense<8> : tensor<16x16xi8, #blocked1> loc(#loc)
    %cst_12 = arith.constant dense<6> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_13 = arith.constant dense<112> : tensor<16x16xi8, #blocked1> loc(#loc)
    %cst_14 = arith.constant dense<7> : tensor<16x16xi8, #blocked1> loc(#loc)
    %c256_i32 = arith.constant 256 : i32 loc(#loc)
    %c16_i32 = arith.constant 16 : i32 loc(#loc)
    %cst_15 = arith.constant dense<16> : tensor<16x1xi32, #blocked1> loc(#loc)
    %cst_16 = arith.constant dense<7> : tensor<16x1xi16, #blocked> loc(#loc)
    %cst_17 = arith.constant dense<255> : tensor<16x1xi32, #blocked> loc(#loc)
    %0 = tt.get_program_id x : i32 loc(#loc)
    %1 = arith.muli %0, %c256_i32 : i32 loc(#loc)
    %2 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc)
    %3 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc)
    %4 = tt.expand_dims %2 {axis = 1 : i32} : tensor<16xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> -> tensor<16x1xi32, #blocked1> loc(#loc)
    %5 = tt.expand_dims %3 {axis = 1 : i32} : tensor<16xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<16x1xi32, #blocked> loc(#loc)
    %6 = arith.muli %4, %cst_15 : tensor<16x1xi32, #blocked1> loc(#loc)
    %7 = tt.splat %1 : i32 -> tensor<16x1xi32, #blocked1> loc(#loc)
    %8 = arith.addi %7, %6 : tensor<16x1xi32, #blocked1> loc(#loc)
    %9 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc)
    %10 = tt.expand_dims %9 {axis = 0 : i32} : tensor<16xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x16xi32, #blocked1> loc(#loc)
    %11 = tt.broadcast %8 : tensor<16x1xi32, #blocked1> -> tensor<16x16xi32, #blocked1> loc(#loc)
    %12 = tt.broadcast %10 : tensor<1x16xi32, #blocked1> -> tensor<16x16xi32, #blocked1> loc(#loc)
    %13 = arith.addi %11, %12 : tensor<16x16xi32, #blocked1> loc(#loc)
    %14 = arith.muli %N, %c16_i32 : i32 loc(#loc)
    %15 = tt.splat %14 : i32 -> tensor<16x16xi32, #blocked1> loc(#loc)
    %16 = arith.cmpi slt, %13, %15 : tensor<16x16xi32, #blocked1> loc(#loc)
    %17 = tt.splat %x_ptr : !tt.ptr<i8> -> tensor<16x16x!tt.ptr<i8>, #blocked1> loc(#loc)
    %18 = tt.addptr %17, %13 : tensor<16x16x!tt.ptr<i8>, #blocked1>, tensor<16x16xi32, #blocked1> loc(#loc)
    %19 = tt.load %18, %16 : tensor<16x16x!tt.ptr<i8>, #blocked1> loc(#loc)
    %20 = arith.muli %0, %c16_i32 : i32 loc(#loc)
    %21 = tt.splat %20 : i32 -> tensor<16x1xi32, #blocked> loc(#loc)
    %22 = arith.addi %21, %5 : tensor<16x1xi32, #blocked> loc(#loc)
    %23 = tt.splat %N : i32 -> tensor<16x1xi32, #blocked> loc(#loc)
    %24 = arith.cmpi slt, %22, %23 : tensor<16x1xi32, #blocked> loc(#loc)
    %25 = tt.splat %scale_ptr : !tt.ptr<i8> -> tensor<16x1x!tt.ptr<i8>, #blocked> loc(#loc)
    %26 = tt.addptr %25, %22 : tensor<16x1x!tt.ptr<i8>, #blocked>, tensor<16x1xi32, #blocked> loc(#loc)
    %27 = tt.load %26, %24 : tensor<16x1x!tt.ptr<i8>, #blocked> loc(#loc)
    %28 = arith.extui %27 : tensor<16x1xi8, #blocked> to tensor<16x1xi16, #blocked> loc(#loc)
    %29 = arith.shli %28, %cst_16 : tensor<16x1xi16, #blocked> loc(#loc)
    %30 = tt.bitcast %29 : tensor<16x1xi16, #blocked> -> tensor<16x1xbf16, #blocked> loc(#loc)
    %31 = arith.andi %19, %cst_14 : tensor<16x16xi8, #blocked1> loc(#loc)
    %32 = arith.andi %19, %cst_13 : tensor<16x16xi8, #blocked1> loc(#loc)
    %33 = arith.extui %31 : tensor<16x16xi8, #blocked1> to tensor<16x16xi16, #blocked1> loc(#loc)
    %34 = arith.shli %33, %cst_12 : tensor<16x16xi16, #blocked1> loc(#loc)
    %35 = arith.andi %19, %cst_11 : tensor<16x16xi8, #blocked1> loc(#loc)
    %36 = arith.extui %35 : tensor<16x16xi8, #blocked1> to tensor<16x16xi16, #blocked1> loc(#loc)
    %37 = arith.shli %36, %cst_10 : tensor<16x16xi16, #blocked1> loc(#loc)
    %38 = arith.ori %34, %37 : tensor<16x16xi16, #blocked1> loc(#loc)
    %39 = arith.extui %32 : tensor<16x16xi8, #blocked1> to tensor<16x16xi16, #blocked1> loc(#loc)
    %40 = arith.shli %39, %cst_9 : tensor<16x16xi16, #blocked1> loc(#loc)
    %41 = arith.andi %19, %cst_8 : tensor<16x16xi8, #blocked1> loc(#loc)
    %42 = arith.extui %41 : tensor<16x16xi8, #blocked1> to tensor<16x16xi16, #blocked1> loc(#loc)
    %43 = arith.shli %42, %cst_7 : tensor<16x16xi16, #blocked1> loc(#loc)
    %44 = arith.ori %40, %43 : tensor<16x16xi16, #blocked1> loc(#loc)
    %45 = arith.andi %31, %cst_6 : tensor<16x16xi8, #blocked1> loc(#loc)
    %46 = arith.extui %45 : tensor<16x16xi8, #blocked1> to tensor<16x16xi32, #blocked1> loc(#loc)
    %47 = arith.cmpi ne, %46, %cst_5 : tensor<16x16xi32, #blocked1> loc(#loc)
    %48 = arith.addi %38, %cst_4 : tensor<16x16xi16, #blocked1> loc(#loc)
    %49 = arith.select %47, %48, %38 : tensor<16x16xi1, #blocked1>, tensor<16x16xi16, #blocked1> loc(#loc)
    %50 = arith.andi %32, %cst_3 : tensor<16x16xi8, #blocked1> loc(#loc)
    %51 = arith.extui %50 : tensor<16x16xi8, #blocked1> to tensor<16x16xi32, #blocked1> loc(#loc)
    %52 = arith.cmpi ne, %51, %cst_5 : tensor<16x16xi32, #blocked1> loc(#loc)
    %53 = arith.addi %44, %cst_4 : tensor<16x16xi16, #blocked1> loc(#loc)
    %54 = arith.select %52, %53, %44 : tensor<16x16xi1, #blocked1>, tensor<16x16xi16, #blocked1> loc(#loc)
    %55 = arith.extui %31 : tensor<16x16xi8, #blocked1> to tensor<16x16xi32, #blocked1> loc(#loc)
    %56 = arith.cmpi eq, %55, %cst_2 : tensor<16x16xi32, #blocked1> loc(#loc)
    %57 = arith.andi %49, %cst_1 : tensor<16x16xi16, #blocked1> loc(#loc)
    %58 = arith.ori %57, %cst_4 : tensor<16x16xi16, #blocked1> loc(#loc)
    %59 = arith.select %56, %58, %49 : tensor<16x16xi1, #blocked1>, tensor<16x16xi16, #blocked1> loc(#loc)
    %60 = arith.extui %32 : tensor<16x16xi8, #blocked1> to tensor<16x16xi32, #blocked1> loc(#loc)
    %61 = arith.cmpi eq, %60, %cst_0 : tensor<16x16xi32, #blocked1> loc(#loc)
    %62 = arith.andi %54, %cst_1 : tensor<16x16xi16, #blocked1> loc(#loc)
    %63 = arith.ori %62, %cst_4 : tensor<16x16xi16, #blocked1> loc(#loc)
    %64 = arith.select %61, %63, %54 : tensor<16x16xi1, #blocked1>, tensor<16x16xi16, #blocked1> loc(#loc)
    %65 = tt.join %59, %64 : tensor<16x16xi16, #blocked1> -> tensor<16x16x2xi16, #blocked2> loc(#loc)
    %66 = tt.reshape %65 : tensor<16x16x2xi16, #blocked2> -> tensor<16x32xi16, #blocked> loc(#loc)
    %67 = tt.bitcast %66 : tensor<16x32xi16, #blocked> -> tensor<16x32xbf16, #blocked> loc(#loc)
    %68 = tt.broadcast %30 : tensor<16x1xbf16, #blocked> -> tensor<16x32xbf16, #blocked> loc(#loc)
    %69 = arith.mulf %67, %68 : tensor<16x32xbf16, #blocked> loc(#loc)
    %70 = arith.extui %27 : tensor<16x1xi8, #blocked> to tensor<16x1xi32, #blocked> loc(#loc)
    %71 = arith.cmpi eq, %70, %cst_17 : tensor<16x1xi32, #blocked> loc(#loc)
    %72 = tt.broadcast %71 : tensor<16x1xi1, #blocked> -> tensor<16x32xi1, #blocked> loc(#loc)
    %73 = arith.select %72, %cst, %69 : tensor<16x32xi1, #blocked>, tensor<16x32xbf16, #blocked> loc(#loc)
    %74 = arith.muli %0, %c512_i32 : i32 loc(#loc)
    %75 = tt.make_range {end = 512 : i32, start = 0 : i32} : tensor<512xi32, #blocked3> loc(#loc)
    %76 = tt.splat %74 : i32 -> tensor<512xi32, #blocked3> loc(#loc)
    %77 = arith.addi %76, %75 : tensor<512xi32, #blocked3> loc(#loc)
    %78 = arith.muli %N, %c32_i32 : i32 loc(#loc)
    %79 = tt.splat %78 : i32 -> tensor<512xi32, #blocked3> loc(#loc)
    %80 = arith.cmpi slt, %77, %79 : tensor<512xi32, #blocked3> loc(#loc)
    %81 = tt.splat %mxfp_ptr : !tt.ptr<bf16> -> tensor<512x!tt.ptr<bf16>, #blocked3> loc(#loc)
    %82 = tt.addptr %81, %77 : tensor<512x!tt.ptr<bf16>, #blocked3>, tensor<512xi32, #blocked3> loc(#loc)
    %83 = tt.reshape %73 : tensor<16x32xbf16, #blocked> -> tensor<512xbf16, #blocked3> loc(#loc)
    tt.store %82, %83, %80 : tensor<512x!tt.ptr<bf16>, #blocked3> loc(#loc)
    tt.return loc(#loc)
  } loc(#loc)
} loc(#loc)
#loc = loc(unknown)


// -----// IR Dump Before TritonAMDGPUHoistLayoutConversions (tritonamdgpu-hoist-layout-conversions) ('tt.func' operation: @mxfp_upcast_kernel) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 2], threadsPerWarp = [4, 16], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [4, 16], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked2 = #ttg.blocked<{sizePerThread = [1, 1, 2], threadsPerWarp = [4, 16, 1], warpsPerCTA = [4, 1, 1], order = [2, 1, 0]}>
#blocked3 = #ttg.blocked<{sizePerThread = [2], threadsPerWarp = [64], warpsPerCTA = [4], order = [0]}>
#loc1 = loc("x_ptr")
#loc2 = loc("scale_ptr")
#loc3 = loc("mxfp_ptr")
#loc4 = loc("N")
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "hip:gfx950", "ttg.threads-per-warp" = 64 : i32} {
  tt.func public @mxfp_upcast_kernel(%x_ptr: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("x_ptr"), %scale_ptr: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("scale_ptr"), %mxfp_ptr: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("mxfp_ptr"), %N: i32 {tt.divisibility = 16 : i32} loc("N")) attributes {noinline = false} {
    %cst = arith.constant dense<0x7FC0> : tensor<16x32xbf16, #blocked> loc(#loc)
    %c512_i32 = arith.constant 512 : i32 loc(#loc)
    %c32_i32 = arith.constant 32 : i32 loc(#loc)
    %cst_0 = arith.constant dense<16> : tensor<16x16xi32, #blocked1> loc(#loc)
    %cst_1 = arith.constant dense<-32768> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_2 = arith.constant dense<1> : tensor<16x16xi32, #blocked1> loc(#loc)
    %cst_3 = arith.constant dense<96> : tensor<16x16xi8, #blocked1> loc(#loc)
    %cst_4 = arith.constant dense<16128> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_5 = arith.constant dense<0> : tensor<16x16xi32, #blocked1> loc(#loc)
    %cst_6 = arith.constant dense<6> : tensor<16x16xi8, #blocked1> loc(#loc)
    %cst_7 = arith.constant dense<8> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_8 = arith.constant dense<-128> : tensor<16x16xi8, #blocked1> loc(#loc)
    %cst_9 = arith.constant dense<2> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_10 = arith.constant dense<12> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_11 = arith.constant dense<8> : tensor<16x16xi8, #blocked1> loc(#loc)
    %cst_12 = arith.constant dense<6> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_13 = arith.constant dense<112> : tensor<16x16xi8, #blocked1> loc(#loc)
    %cst_14 = arith.constant dense<7> : tensor<16x16xi8, #blocked1> loc(#loc)
    %c256_i32 = arith.constant 256 : i32 loc(#loc)
    %c16_i32 = arith.constant 16 : i32 loc(#loc)
    %cst_15 = arith.constant dense<16> : tensor<16x1xi32, #blocked1> loc(#loc)
    %cst_16 = arith.constant dense<7> : tensor<16x1xi16, #blocked> loc(#loc)
    %cst_17 = arith.constant dense<255> : tensor<16x1xi32, #blocked> loc(#loc)
    %0 = tt.get_program_id x : i32 loc(#loc)
    %1 = arith.muli %0, %c256_i32 : i32 loc(#loc)
    %2 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc)
    %3 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc)
    %4 = tt.expand_dims %2 {axis = 1 : i32} : tensor<16xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> -> tensor<16x1xi32, #blocked1> loc(#loc)
    %5 = tt.expand_dims %3 {axis = 1 : i32} : tensor<16xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<16x1xi32, #blocked> loc(#loc)
    %6 = arith.muli %4, %cst_15 : tensor<16x1xi32, #blocked1> loc(#loc)
    %7 = tt.splat %1 : i32 -> tensor<16x1xi32, #blocked1> loc(#loc)
    %8 = arith.addi %7, %6 : tensor<16x1xi32, #blocked1> loc(#loc)
    %9 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc)
    %10 = tt.expand_dims %9 {axis = 0 : i32} : tensor<16xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x16xi32, #blocked1> loc(#loc)
    %11 = tt.broadcast %8 : tensor<16x1xi32, #blocked1> -> tensor<16x16xi32, #blocked1> loc(#loc)
    %12 = tt.broadcast %10 : tensor<1x16xi32, #blocked1> -> tensor<16x16xi32, #blocked1> loc(#loc)
    %13 = arith.addi %11, %12 : tensor<16x16xi32, #blocked1> loc(#loc)
    %14 = arith.muli %N, %c16_i32 : i32 loc(#loc)
    %15 = tt.splat %14 : i32 -> tensor<16x16xi32, #blocked1> loc(#loc)
    %16 = arith.cmpi slt, %13, %15 : tensor<16x16xi32, #blocked1> loc(#loc)
    %17 = tt.splat %x_ptr : !tt.ptr<i8> -> tensor<16x16x!tt.ptr<i8>, #blocked1> loc(#loc)
    %18 = tt.addptr %17, %13 : tensor<16x16x!tt.ptr<i8>, #blocked1>, tensor<16x16xi32, #blocked1> loc(#loc)
    %19 = tt.load %18, %16 : tensor<16x16x!tt.ptr<i8>, #blocked1> loc(#loc)
    %20 = arith.muli %0, %c16_i32 : i32 loc(#loc)
    %21 = tt.splat %20 : i32 -> tensor<16x1xi32, #blocked> loc(#loc)
    %22 = arith.addi %21, %5 : tensor<16x1xi32, #blocked> loc(#loc)
    %23 = tt.splat %N : i32 -> tensor<16x1xi32, #blocked> loc(#loc)
    %24 = arith.cmpi slt, %22, %23 : tensor<16x1xi32, #blocked> loc(#loc)
    %25 = tt.splat %scale_ptr : !tt.ptr<i8> -> tensor<16x1x!tt.ptr<i8>, #blocked> loc(#loc)
    %26 = tt.addptr %25, %22 : tensor<16x1x!tt.ptr<i8>, #blocked>, tensor<16x1xi32, #blocked> loc(#loc)
    %27 = tt.load %26, %24 : tensor<16x1x!tt.ptr<i8>, #blocked> loc(#loc)
    %28 = arith.extui %27 : tensor<16x1xi8, #blocked> to tensor<16x1xi16, #blocked> loc(#loc)
    %29 = arith.shli %28, %cst_16 : tensor<16x1xi16, #blocked> loc(#loc)
    %30 = tt.bitcast %29 : tensor<16x1xi16, #blocked> -> tensor<16x1xbf16, #blocked> loc(#loc)
    %31 = arith.andi %19, %cst_14 : tensor<16x16xi8, #blocked1> loc(#loc)
    %32 = arith.andi %19, %cst_13 : tensor<16x16xi8, #blocked1> loc(#loc)
    %33 = arith.extui %31 : tensor<16x16xi8, #blocked1> to tensor<16x16xi16, #blocked1> loc(#loc)
    %34 = arith.shli %33, %cst_12 : tensor<16x16xi16, #blocked1> loc(#loc)
    %35 = arith.andi %19, %cst_11 : tensor<16x16xi8, #blocked1> loc(#loc)
    %36 = arith.extui %35 : tensor<16x16xi8, #blocked1> to tensor<16x16xi16, #blocked1> loc(#loc)
    %37 = arith.shli %36, %cst_10 : tensor<16x16xi16, #blocked1> loc(#loc)
    %38 = arith.ori %34, %37 : tensor<16x16xi16, #blocked1> loc(#loc)
    %39 = arith.extui %32 : tensor<16x16xi8, #blocked1> to tensor<16x16xi16, #blocked1> loc(#loc)
    %40 = arith.shli %39, %cst_9 : tensor<16x16xi16, #blocked1> loc(#loc)
    %41 = arith.andi %19, %cst_8 : tensor<16x16xi8, #blocked1> loc(#loc)
    %42 = arith.extui %41 : tensor<16x16xi8, #blocked1> to tensor<16x16xi16, #blocked1> loc(#loc)
    %43 = arith.shli %42, %cst_7 : tensor<16x16xi16, #blocked1> loc(#loc)
    %44 = arith.ori %40, %43 : tensor<16x16xi16, #blocked1> loc(#loc)
    %45 = arith.andi %31, %cst_6 : tensor<16x16xi8, #blocked1> loc(#loc)
    %46 = arith.extui %45 : tensor<16x16xi8, #blocked1> to tensor<16x16xi32, #blocked1> loc(#loc)
    %47 = arith.cmpi ne, %46, %cst_5 : tensor<16x16xi32, #blocked1> loc(#loc)
    %48 = arith.addi %38, %cst_4 : tensor<16x16xi16, #blocked1> loc(#loc)
    %49 = arith.select %47, %48, %38 : tensor<16x16xi1, #blocked1>, tensor<16x16xi16, #blocked1> loc(#loc)
    %50 = arith.andi %32, %cst_3 : tensor<16x16xi8, #blocked1> loc(#loc)
    %51 = arith.extui %50 : tensor<16x16xi8, #blocked1> to tensor<16x16xi32, #blocked1> loc(#loc)
    %52 = arith.cmpi ne, %51, %cst_5 : tensor<16x16xi32, #blocked1> loc(#loc)
    %53 = arith.addi %44, %cst_4 : tensor<16x16xi16, #blocked1> loc(#loc)
    %54 = arith.select %52, %53, %44 : tensor<16x16xi1, #blocked1>, tensor<16x16xi16, #blocked1> loc(#loc)
    %55 = arith.extui %31 : tensor<16x16xi8, #blocked1> to tensor<16x16xi32, #blocked1> loc(#loc)
    %56 = arith.cmpi eq, %55, %cst_2 : tensor<16x16xi32, #blocked1> loc(#loc)
    %57 = arith.andi %49, %cst_1 : tensor<16x16xi16, #blocked1> loc(#loc)
    %58 = arith.ori %57, %cst_4 : tensor<16x16xi16, #blocked1> loc(#loc)
    %59 = arith.select %56, %58, %49 : tensor<16x16xi1, #blocked1>, tensor<16x16xi16, #blocked1> loc(#loc)
    %60 = arith.extui %32 : tensor<16x16xi8, #blocked1> to tensor<16x16xi32, #blocked1> loc(#loc)
    %61 = arith.cmpi eq, %60, %cst_0 : tensor<16x16xi32, #blocked1> loc(#loc)
    %62 = arith.andi %54, %cst_1 : tensor<16x16xi16, #blocked1> loc(#loc)
    %63 = arith.ori %62, %cst_4 : tensor<16x16xi16, #blocked1> loc(#loc)
    %64 = arith.select %61, %63, %54 : tensor<16x16xi1, #blocked1>, tensor<16x16xi16, #blocked1> loc(#loc)
    %65 = tt.join %59, %64 : tensor<16x16xi16, #blocked1> -> tensor<16x16x2xi16, #blocked2> loc(#loc)
    %66 = tt.reshape %65 : tensor<16x16x2xi16, #blocked2> -> tensor<16x32xi16, #blocked> loc(#loc)
    %67 = tt.bitcast %66 : tensor<16x32xi16, #blocked> -> tensor<16x32xbf16, #blocked> loc(#loc)
    %68 = tt.broadcast %30 : tensor<16x1xbf16, #blocked> -> tensor<16x32xbf16, #blocked> loc(#loc)
    %69 = arith.mulf %67, %68 : tensor<16x32xbf16, #blocked> loc(#loc)
    %70 = arith.extui %27 : tensor<16x1xi8, #blocked> to tensor<16x1xi32, #blocked> loc(#loc)
    %71 = arith.cmpi eq, %70, %cst_17 : tensor<16x1xi32, #blocked> loc(#loc)
    %72 = tt.broadcast %71 : tensor<16x1xi1, #blocked> -> tensor<16x32xi1, #blocked> loc(#loc)
    %73 = arith.select %72, %cst, %69 : tensor<16x32xi1, #blocked>, tensor<16x32xbf16, #blocked> loc(#loc)
    %74 = arith.muli %0, %c512_i32 : i32 loc(#loc)
    %75 = tt.make_range {end = 512 : i32, start = 0 : i32} : tensor<512xi32, #blocked3> loc(#loc)
    %76 = tt.splat %74 : i32 -> tensor<512xi32, #blocked3> loc(#loc)
    %77 = arith.addi %76, %75 : tensor<512xi32, #blocked3> loc(#loc)
    %78 = arith.muli %N, %c32_i32 : i32 loc(#loc)
    %79 = tt.splat %78 : i32 -> tensor<512xi32, #blocked3> loc(#loc)
    %80 = arith.cmpi slt, %77, %79 : tensor<512xi32, #blocked3> loc(#loc)
    %81 = tt.splat %mxfp_ptr : !tt.ptr<bf16> -> tensor<512x!tt.ptr<bf16>, #blocked3> loc(#loc)
    %82 = tt.addptr %81, %77 : tensor<512x!tt.ptr<bf16>, #blocked3>, tensor<512xi32, #blocked3> loc(#loc)
    %83 = tt.reshape %73 : tensor<16x32xbf16, #blocked> -> tensor<512xbf16, #blocked3> loc(#loc)
    tt.store %82, %83, %80 : tensor<512x!tt.ptr<bf16>, #blocked3> loc(#loc)
    tt.return loc(#loc)
  } loc(#loc)
} loc(#loc)
#loc = loc(unknown)


// -----// IR Dump Before TritonGPUFuseNestedLoops (tritongpu-fuse-nested-loops) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 2], threadsPerWarp = [4, 16], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [4, 16], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked2 = #ttg.blocked<{sizePerThread = [1, 1, 2], threadsPerWarp = [4, 16, 1], warpsPerCTA = [4, 1, 1], order = [2, 1, 0]}>
#blocked3 = #ttg.blocked<{sizePerThread = [2], threadsPerWarp = [64], warpsPerCTA = [4], order = [0]}>
#loc1 = loc("x_ptr")
#loc2 = loc("scale_ptr")
#loc3 = loc("mxfp_ptr")
#loc4 = loc("N")
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "hip:gfx950", "ttg.threads-per-warp" = 64 : i32} {
  tt.func public @mxfp_upcast_kernel(%x_ptr: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("x_ptr"), %scale_ptr: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("scale_ptr"), %mxfp_ptr: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("mxfp_ptr"), %N: i32 {tt.divisibility = 16 : i32} loc("N")) attributes {noinline = false} {
    %cst = arith.constant dense<0x7FC0> : tensor<16x32xbf16, #blocked> loc(#loc)
    %c512_i32 = arith.constant 512 : i32 loc(#loc)
    %c32_i32 = arith.constant 32 : i32 loc(#loc)
    %cst_0 = arith.constant dense<16> : tensor<16x16xi32, #blocked1> loc(#loc)
    %cst_1 = arith.constant dense<-32768> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_2 = arith.constant dense<1> : tensor<16x16xi32, #blocked1> loc(#loc)
    %cst_3 = arith.constant dense<96> : tensor<16x16xi8, #blocked1> loc(#loc)
    %cst_4 = arith.constant dense<16128> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_5 = arith.constant dense<0> : tensor<16x16xi32, #blocked1> loc(#loc)
    %cst_6 = arith.constant dense<6> : tensor<16x16xi8, #blocked1> loc(#loc)
    %cst_7 = arith.constant dense<8> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_8 = arith.constant dense<-128> : tensor<16x16xi8, #blocked1> loc(#loc)
    %cst_9 = arith.constant dense<2> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_10 = arith.constant dense<12> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_11 = arith.constant dense<8> : tensor<16x16xi8, #blocked1> loc(#loc)
    %cst_12 = arith.constant dense<6> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_13 = arith.constant dense<112> : tensor<16x16xi8, #blocked1> loc(#loc)
    %cst_14 = arith.constant dense<7> : tensor<16x16xi8, #blocked1> loc(#loc)
    %c256_i32 = arith.constant 256 : i32 loc(#loc)
    %c16_i32 = arith.constant 16 : i32 loc(#loc)
    %cst_15 = arith.constant dense<16> : tensor<16x1xi32, #blocked1> loc(#loc)
    %cst_16 = arith.constant dense<7> : tensor<16x1xi16, #blocked> loc(#loc)
    %cst_17 = arith.constant dense<255> : tensor<16x1xi32, #blocked> loc(#loc)
    %0 = tt.get_program_id x : i32 loc(#loc)
    %1 = arith.muli %0, %c256_i32 : i32 loc(#loc)
    %2 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc)
    %3 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc)
    %4 = tt.expand_dims %2 {axis = 1 : i32} : tensor<16xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> -> tensor<16x1xi32, #blocked1> loc(#loc)
    %5 = tt.expand_dims %3 {axis = 1 : i32} : tensor<16xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<16x1xi32, #blocked> loc(#loc)
    %6 = arith.muli %4, %cst_15 : tensor<16x1xi32, #blocked1> loc(#loc)
    %7 = tt.splat %1 : i32 -> tensor<16x1xi32, #blocked1> loc(#loc)
    %8 = arith.addi %7, %6 : tensor<16x1xi32, #blocked1> loc(#loc)
    %9 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc)
    %10 = tt.expand_dims %9 {axis = 0 : i32} : tensor<16xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x16xi32, #blocked1> loc(#loc)
    %11 = tt.broadcast %8 : tensor<16x1xi32, #blocked1> -> tensor<16x16xi32, #blocked1> loc(#loc)
    %12 = tt.broadcast %10 : tensor<1x16xi32, #blocked1> -> tensor<16x16xi32, #blocked1> loc(#loc)
    %13 = arith.addi %11, %12 : tensor<16x16xi32, #blocked1> loc(#loc)
    %14 = arith.muli %N, %c16_i32 : i32 loc(#loc)
    %15 = tt.splat %14 : i32 -> tensor<16x16xi32, #blocked1> loc(#loc)
    %16 = arith.cmpi slt, %13, %15 : tensor<16x16xi32, #blocked1> loc(#loc)
    %17 = tt.splat %x_ptr : !tt.ptr<i8> -> tensor<16x16x!tt.ptr<i8>, #blocked1> loc(#loc)
    %18 = tt.addptr %17, %13 : tensor<16x16x!tt.ptr<i8>, #blocked1>, tensor<16x16xi32, #blocked1> loc(#loc)
    %19 = tt.load %18, %16 : tensor<16x16x!tt.ptr<i8>, #blocked1> loc(#loc)
    %20 = arith.muli %0, %c16_i32 : i32 loc(#loc)
    %21 = tt.splat %20 : i32 -> tensor<16x1xi32, #blocked> loc(#loc)
    %22 = arith.addi %21, %5 : tensor<16x1xi32, #blocked> loc(#loc)
    %23 = tt.splat %N : i32 -> tensor<16x1xi32, #blocked> loc(#loc)
    %24 = arith.cmpi slt, %22, %23 : tensor<16x1xi32, #blocked> loc(#loc)
    %25 = tt.splat %scale_ptr : !tt.ptr<i8> -> tensor<16x1x!tt.ptr<i8>, #blocked> loc(#loc)
    %26 = tt.addptr %25, %22 : tensor<16x1x!tt.ptr<i8>, #blocked>, tensor<16x1xi32, #blocked> loc(#loc)
    %27 = tt.load %26, %24 : tensor<16x1x!tt.ptr<i8>, #blocked> loc(#loc)
    %28 = arith.extui %27 : tensor<16x1xi8, #blocked> to tensor<16x1xi16, #blocked> loc(#loc)
    %29 = arith.shli %28, %cst_16 : tensor<16x1xi16, #blocked> loc(#loc)
    %30 = tt.bitcast %29 : tensor<16x1xi16, #blocked> -> tensor<16x1xbf16, #blocked> loc(#loc)
    %31 = arith.andi %19, %cst_14 : tensor<16x16xi8, #blocked1> loc(#loc)
    %32 = arith.andi %19, %cst_13 : tensor<16x16xi8, #blocked1> loc(#loc)
    %33 = arith.extui %31 : tensor<16x16xi8, #blocked1> to tensor<16x16xi16, #blocked1> loc(#loc)
    %34 = arith.shli %33, %cst_12 : tensor<16x16xi16, #blocked1> loc(#loc)
    %35 = arith.andi %19, %cst_11 : tensor<16x16xi8, #blocked1> loc(#loc)
    %36 = arith.extui %35 : tensor<16x16xi8, #blocked1> to tensor<16x16xi16, #blocked1> loc(#loc)
    %37 = arith.shli %36, %cst_10 : tensor<16x16xi16, #blocked1> loc(#loc)
    %38 = arith.ori %34, %37 : tensor<16x16xi16, #blocked1> loc(#loc)
    %39 = arith.extui %32 : tensor<16x16xi8, #blocked1> to tensor<16x16xi16, #blocked1> loc(#loc)
    %40 = arith.shli %39, %cst_9 : tensor<16x16xi16, #blocked1> loc(#loc)
    %41 = arith.andi %19, %cst_8 : tensor<16x16xi8, #blocked1> loc(#loc)
    %42 = arith.extui %41 : tensor<16x16xi8, #blocked1> to tensor<16x16xi16, #blocked1> loc(#loc)
    %43 = arith.shli %42, %cst_7 : tensor<16x16xi16, #blocked1> loc(#loc)
    %44 = arith.ori %40, %43 : tensor<16x16xi16, #blocked1> loc(#loc)
    %45 = arith.andi %31, %cst_6 : tensor<16x16xi8, #blocked1> loc(#loc)
    %46 = arith.extui %45 : tensor<16x16xi8, #blocked1> to tensor<16x16xi32, #blocked1> loc(#loc)
    %47 = arith.cmpi ne, %46, %cst_5 : tensor<16x16xi32, #blocked1> loc(#loc)
    %48 = arith.addi %38, %cst_4 : tensor<16x16xi16, #blocked1> loc(#loc)
    %49 = arith.select %47, %48, %38 : tensor<16x16xi1, #blocked1>, tensor<16x16xi16, #blocked1> loc(#loc)
    %50 = arith.andi %32, %cst_3 : tensor<16x16xi8, #blocked1> loc(#loc)
    %51 = arith.extui %50 : tensor<16x16xi8, #blocked1> to tensor<16x16xi32, #blocked1> loc(#loc)
    %52 = arith.cmpi ne, %51, %cst_5 : tensor<16x16xi32, #blocked1> loc(#loc)
    %53 = arith.addi %44, %cst_4 : tensor<16x16xi16, #blocked1> loc(#loc)
    %54 = arith.select %52, %53, %44 : tensor<16x16xi1, #blocked1>, tensor<16x16xi16, #blocked1> loc(#loc)
    %55 = arith.extui %31 : tensor<16x16xi8, #blocked1> to tensor<16x16xi32, #blocked1> loc(#loc)
    %56 = arith.cmpi eq, %55, %cst_2 : tensor<16x16xi32, #blocked1> loc(#loc)
    %57 = arith.andi %49, %cst_1 : tensor<16x16xi16, #blocked1> loc(#loc)
    %58 = arith.ori %57, %cst_4 : tensor<16x16xi16, #blocked1> loc(#loc)
    %59 = arith.select %56, %58, %49 : tensor<16x16xi1, #blocked1>, tensor<16x16xi16, #blocked1> loc(#loc)
    %60 = arith.extui %32 : tensor<16x16xi8, #blocked1> to tensor<16x16xi32, #blocked1> loc(#loc)
    %61 = arith.cmpi eq, %60, %cst_0 : tensor<16x16xi32, #blocked1> loc(#loc)
    %62 = arith.andi %54, %cst_1 : tensor<16x16xi16, #blocked1> loc(#loc)
    %63 = arith.ori %62, %cst_4 : tensor<16x16xi16, #blocked1> loc(#loc)
    %64 = arith.select %61, %63, %54 : tensor<16x16xi1, #blocked1>, tensor<16x16xi16, #blocked1> loc(#loc)
    %65 = tt.join %59, %64 : tensor<16x16xi16, #blocked1> -> tensor<16x16x2xi16, #blocked2> loc(#loc)
    %66 = tt.reshape %65 : tensor<16x16x2xi16, #blocked2> -> tensor<16x32xi16, #blocked> loc(#loc)
    %67 = tt.bitcast %66 : tensor<16x32xi16, #blocked> -> tensor<16x32xbf16, #blocked> loc(#loc)
    %68 = tt.broadcast %30 : tensor<16x1xbf16, #blocked> -> tensor<16x32xbf16, #blocked> loc(#loc)
    %69 = arith.mulf %67, %68 : tensor<16x32xbf16, #blocked> loc(#loc)
    %70 = arith.extui %27 : tensor<16x1xi8, #blocked> to tensor<16x1xi32, #blocked> loc(#loc)
    %71 = arith.cmpi eq, %70, %cst_17 : tensor<16x1xi32, #blocked> loc(#loc)
    %72 = tt.broadcast %71 : tensor<16x1xi1, #blocked> -> tensor<16x32xi1, #blocked> loc(#loc)
    %73 = arith.select %72, %cst, %69 : tensor<16x32xi1, #blocked>, tensor<16x32xbf16, #blocked> loc(#loc)
    %74 = arith.muli %0, %c512_i32 : i32 loc(#loc)
    %75 = tt.make_range {end = 512 : i32, start = 0 : i32} : tensor<512xi32, #blocked3> loc(#loc)
    %76 = tt.splat %74 : i32 -> tensor<512xi32, #blocked3> loc(#loc)
    %77 = arith.addi %76, %75 : tensor<512xi32, #blocked3> loc(#loc)
    %78 = arith.muli %N, %c32_i32 : i32 loc(#loc)
    %79 = tt.splat %78 : i32 -> tensor<512xi32, #blocked3> loc(#loc)
    %80 = arith.cmpi slt, %77, %79 : tensor<512xi32, #blocked3> loc(#loc)
    %81 = tt.splat %mxfp_ptr : !tt.ptr<bf16> -> tensor<512x!tt.ptr<bf16>, #blocked3> loc(#loc)
    %82 = tt.addptr %81, %77 : tensor<512x!tt.ptr<bf16>, #blocked3>, tensor<512xi32, #blocked3> loc(#loc)
    %83 = tt.reshape %73 : tensor<16x32xbf16, #blocked> -> tensor<512xbf16, #blocked3> loc(#loc)
    tt.store %82, %83, %80 : tensor<512x!tt.ptr<bf16>, #blocked3> loc(#loc)
    tt.return loc(#loc)
  } loc(#loc)
} loc(#loc)
#loc = loc(unknown)


// -----// IR Dump Before Canonicalizer (canonicalize) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 2], threadsPerWarp = [4, 16], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [4, 16], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked2 = #ttg.blocked<{sizePerThread = [1, 1, 2], threadsPerWarp = [4, 16, 1], warpsPerCTA = [4, 1, 1], order = [2, 1, 0]}>
#blocked3 = #ttg.blocked<{sizePerThread = [2], threadsPerWarp = [64], warpsPerCTA = [4], order = [0]}>
#loc1 = loc("x_ptr")
#loc2 = loc("scale_ptr")
#loc3 = loc("mxfp_ptr")
#loc4 = loc("N")
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "hip:gfx950", "ttg.threads-per-warp" = 64 : i32} {
  tt.func public @mxfp_upcast_kernel(%x_ptr: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("x_ptr"), %scale_ptr: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("scale_ptr"), %mxfp_ptr: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("mxfp_ptr"), %N: i32 {tt.divisibility = 16 : i32} loc("N")) attributes {noinline = false} {
    %cst = arith.constant dense<0x7FC0> : tensor<16x32xbf16, #blocked> loc(#loc)
    %c512_i32 = arith.constant 512 : i32 loc(#loc)
    %c32_i32 = arith.constant 32 : i32 loc(#loc)
    %cst_0 = arith.constant dense<16> : tensor<16x16xi32, #blocked1> loc(#loc)
    %cst_1 = arith.constant dense<-32768> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_2 = arith.constant dense<1> : tensor<16x16xi32, #blocked1> loc(#loc)
    %cst_3 = arith.constant dense<96> : tensor<16x16xi8, #blocked1> loc(#loc)
    %cst_4 = arith.constant dense<16128> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_5 = arith.constant dense<0> : tensor<16x16xi32, #blocked1> loc(#loc)
    %cst_6 = arith.constant dense<6> : tensor<16x16xi8, #blocked1> loc(#loc)
    %cst_7 = arith.constant dense<8> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_8 = arith.constant dense<-128> : tensor<16x16xi8, #blocked1> loc(#loc)
    %cst_9 = arith.constant dense<2> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_10 = arith.constant dense<12> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_11 = arith.constant dense<8> : tensor<16x16xi8, #blocked1> loc(#loc)
    %cst_12 = arith.constant dense<6> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_13 = arith.constant dense<112> : tensor<16x16xi8, #blocked1> loc(#loc)
    %cst_14 = arith.constant dense<7> : tensor<16x16xi8, #blocked1> loc(#loc)
    %c256_i32 = arith.constant 256 : i32 loc(#loc)
    %c16_i32 = arith.constant 16 : i32 loc(#loc)
    %cst_15 = arith.constant dense<16> : tensor<16x1xi32, #blocked1> loc(#loc)
    %cst_16 = arith.constant dense<7> : tensor<16x1xi16, #blocked> loc(#loc)
    %cst_17 = arith.constant dense<255> : tensor<16x1xi32, #blocked> loc(#loc)
    %0 = tt.get_program_id x : i32 loc(#loc)
    %1 = arith.muli %0, %c256_i32 : i32 loc(#loc)
    %2 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc)
    %3 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc)
    %4 = tt.expand_dims %2 {axis = 1 : i32} : tensor<16xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> -> tensor<16x1xi32, #blocked1> loc(#loc)
    %5 = tt.expand_dims %3 {axis = 1 : i32} : tensor<16xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<16x1xi32, #blocked> loc(#loc)
    %6 = arith.muli %4, %cst_15 : tensor<16x1xi32, #blocked1> loc(#loc)
    %7 = tt.splat %1 : i32 -> tensor<16x1xi32, #blocked1> loc(#loc)
    %8 = arith.addi %7, %6 : tensor<16x1xi32, #blocked1> loc(#loc)
    %9 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc)
    %10 = tt.expand_dims %9 {axis = 0 : i32} : tensor<16xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x16xi32, #blocked1> loc(#loc)
    %11 = tt.broadcast %8 : tensor<16x1xi32, #blocked1> -> tensor<16x16xi32, #blocked1> loc(#loc)
    %12 = tt.broadcast %10 : tensor<1x16xi32, #blocked1> -> tensor<16x16xi32, #blocked1> loc(#loc)
    %13 = arith.addi %11, %12 : tensor<16x16xi32, #blocked1> loc(#loc)
    %14 = arith.muli %N, %c16_i32 : i32 loc(#loc)
    %15 = tt.splat %14 : i32 -> tensor<16x16xi32, #blocked1> loc(#loc)
    %16 = arith.cmpi slt, %13, %15 : tensor<16x16xi32, #blocked1> loc(#loc)
    %17 = tt.splat %x_ptr : !tt.ptr<i8> -> tensor<16x16x!tt.ptr<i8>, #blocked1> loc(#loc)
    %18 = tt.addptr %17, %13 : tensor<16x16x!tt.ptr<i8>, #blocked1>, tensor<16x16xi32, #blocked1> loc(#loc)
    %19 = tt.load %18, %16 : tensor<16x16x!tt.ptr<i8>, #blocked1> loc(#loc)
    %20 = arith.muli %0, %c16_i32 : i32 loc(#loc)
    %21 = tt.splat %20 : i32 -> tensor<16x1xi32, #blocked> loc(#loc)
    %22 = arith.addi %21, %5 : tensor<16x1xi32, #blocked> loc(#loc)
    %23 = tt.splat %N : i32 -> tensor<16x1xi32, #blocked> loc(#loc)
    %24 = arith.cmpi slt, %22, %23 : tensor<16x1xi32, #blocked> loc(#loc)
    %25 = tt.splat %scale_ptr : !tt.ptr<i8> -> tensor<16x1x!tt.ptr<i8>, #blocked> loc(#loc)
    %26 = tt.addptr %25, %22 : tensor<16x1x!tt.ptr<i8>, #blocked>, tensor<16x1xi32, #blocked> loc(#loc)
    %27 = tt.load %26, %24 : tensor<16x1x!tt.ptr<i8>, #blocked> loc(#loc)
    %28 = arith.extui %27 : tensor<16x1xi8, #blocked> to tensor<16x1xi16, #blocked> loc(#loc)
    %29 = arith.shli %28, %cst_16 : tensor<16x1xi16, #blocked> loc(#loc)
    %30 = tt.bitcast %29 : tensor<16x1xi16, #blocked> -> tensor<16x1xbf16, #blocked> loc(#loc)
    %31 = arith.andi %19, %cst_14 : tensor<16x16xi8, #blocked1> loc(#loc)
    %32 = arith.andi %19, %cst_13 : tensor<16x16xi8, #blocked1> loc(#loc)
    %33 = arith.extui %31 : tensor<16x16xi8, #blocked1> to tensor<16x16xi16, #blocked1> loc(#loc)
    %34 = arith.shli %33, %cst_12 : tensor<16x16xi16, #blocked1> loc(#loc)
    %35 = arith.andi %19, %cst_11 : tensor<16x16xi8, #blocked1> loc(#loc)
    %36 = arith.extui %35 : tensor<16x16xi8, #blocked1> to tensor<16x16xi16, #blocked1> loc(#loc)
    %37 = arith.shli %36, %cst_10 : tensor<16x16xi16, #blocked1> loc(#loc)
    %38 = arith.ori %34, %37 : tensor<16x16xi16, #blocked1> loc(#loc)
    %39 = arith.extui %32 : tensor<16x16xi8, #blocked1> to tensor<16x16xi16, #blocked1> loc(#loc)
    %40 = arith.shli %39, %cst_9 : tensor<16x16xi16, #blocked1> loc(#loc)
    %41 = arith.andi %19, %cst_8 : tensor<16x16xi8, #blocked1> loc(#loc)
    %42 = arith.extui %41 : tensor<16x16xi8, #blocked1> to tensor<16x16xi16, #blocked1> loc(#loc)
    %43 = arith.shli %42, %cst_7 : tensor<16x16xi16, #blocked1> loc(#loc)
    %44 = arith.ori %40, %43 : tensor<16x16xi16, #blocked1> loc(#loc)
    %45 = arith.andi %31, %cst_6 : tensor<16x16xi8, #blocked1> loc(#loc)
    %46 = arith.extui %45 : tensor<16x16xi8, #blocked1> to tensor<16x16xi32, #blocked1> loc(#loc)
    %47 = arith.cmpi ne, %46, %cst_5 : tensor<16x16xi32, #blocked1> loc(#loc)
    %48 = arith.addi %38, %cst_4 : tensor<16x16xi16, #blocked1> loc(#loc)
    %49 = arith.select %47, %48, %38 : tensor<16x16xi1, #blocked1>, tensor<16x16xi16, #blocked1> loc(#loc)
    %50 = arith.andi %32, %cst_3 : tensor<16x16xi8, #blocked1> loc(#loc)
    %51 = arith.extui %50 : tensor<16x16xi8, #blocked1> to tensor<16x16xi32, #blocked1> loc(#loc)
    %52 = arith.cmpi ne, %51, %cst_5 : tensor<16x16xi32, #blocked1> loc(#loc)
    %53 = arith.addi %44, %cst_4 : tensor<16x16xi16, #blocked1> loc(#loc)
    %54 = arith.select %52, %53, %44 : tensor<16x16xi1, #blocked1>, tensor<16x16xi16, #blocked1> loc(#loc)
    %55 = arith.extui %31 : tensor<16x16xi8, #blocked1> to tensor<16x16xi32, #blocked1> loc(#loc)
    %56 = arith.cmpi eq, %55, %cst_2 : tensor<16x16xi32, #blocked1> loc(#loc)
    %57 = arith.andi %49, %cst_1 : tensor<16x16xi16, #blocked1> loc(#loc)
    %58 = arith.ori %57, %cst_4 : tensor<16x16xi16, #blocked1> loc(#loc)
    %59 = arith.select %56, %58, %49 : tensor<16x16xi1, #blocked1>, tensor<16x16xi16, #blocked1> loc(#loc)
    %60 = arith.extui %32 : tensor<16x16xi8, #blocked1> to tensor<16x16xi32, #blocked1> loc(#loc)
    %61 = arith.cmpi eq, %60, %cst_0 : tensor<16x16xi32, #blocked1> loc(#loc)
    %62 = arith.andi %54, %cst_1 : tensor<16x16xi16, #blocked1> loc(#loc)
    %63 = arith.ori %62, %cst_4 : tensor<16x16xi16, #blocked1> loc(#loc)
    %64 = arith.select %61, %63, %54 : tensor<16x16xi1, #blocked1>, tensor<16x16xi16, #blocked1> loc(#loc)
    %65 = tt.join %59, %64 : tensor<16x16xi16, #blocked1> -> tensor<16x16x2xi16, #blocked2> loc(#loc)
    %66 = tt.reshape %65 : tensor<16x16x2xi16, #blocked2> -> tensor<16x32xi16, #blocked> loc(#loc)
    %67 = tt.bitcast %66 : tensor<16x32xi16, #blocked> -> tensor<16x32xbf16, #blocked> loc(#loc)
    %68 = tt.broadcast %30 : tensor<16x1xbf16, #blocked> -> tensor<16x32xbf16, #blocked> loc(#loc)
    %69 = arith.mulf %67, %68 : tensor<16x32xbf16, #blocked> loc(#loc)
    %70 = arith.extui %27 : tensor<16x1xi8, #blocked> to tensor<16x1xi32, #blocked> loc(#loc)
    %71 = arith.cmpi eq, %70, %cst_17 : tensor<16x1xi32, #blocked> loc(#loc)
    %72 = tt.broadcast %71 : tensor<16x1xi1, #blocked> -> tensor<16x32xi1, #blocked> loc(#loc)
    %73 = arith.select %72, %cst, %69 : tensor<16x32xi1, #blocked>, tensor<16x32xbf16, #blocked> loc(#loc)
    %74 = arith.muli %0, %c512_i32 : i32 loc(#loc)
    %75 = tt.make_range {end = 512 : i32, start = 0 : i32} : tensor<512xi32, #blocked3> loc(#loc)
    %76 = tt.splat %74 : i32 -> tensor<512xi32, #blocked3> loc(#loc)
    %77 = arith.addi %76, %75 : tensor<512xi32, #blocked3> loc(#loc)
    %78 = arith.muli %N, %c32_i32 : i32 loc(#loc)
    %79 = tt.splat %78 : i32 -> tensor<512xi32, #blocked3> loc(#loc)
    %80 = arith.cmpi slt, %77, %79 : tensor<512xi32, #blocked3> loc(#loc)
    %81 = tt.splat %mxfp_ptr : !tt.ptr<bf16> -> tensor<512x!tt.ptr<bf16>, #blocked3> loc(#loc)
    %82 = tt.addptr %81, %77 : tensor<512x!tt.ptr<bf16>, #blocked3>, tensor<512xi32, #blocked3> loc(#loc)
    %83 = tt.reshape %73 : tensor<16x32xbf16, #blocked> -> tensor<512xbf16, #blocked3> loc(#loc)
    tt.store %82, %83, %80 : tensor<512x!tt.ptr<bf16>, #blocked3> loc(#loc)
    tt.return loc(#loc)
  } loc(#loc)
} loc(#loc)
#loc = loc(unknown)


// -----// IR Dump Before TritonLoopInvariantCodeMotion (triton-licm) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 2], threadsPerWarp = [4, 16], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [4, 16], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked2 = #ttg.blocked<{sizePerThread = [1, 1, 2], threadsPerWarp = [4, 16, 1], warpsPerCTA = [4, 1, 1], order = [2, 1, 0]}>
#blocked3 = #ttg.blocked<{sizePerThread = [2], threadsPerWarp = [64], warpsPerCTA = [4], order = [0]}>
#loc1 = loc("x_ptr")
#loc2 = loc("scale_ptr")
#loc3 = loc("mxfp_ptr")
#loc4 = loc("N")
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "hip:gfx950", "ttg.threads-per-warp" = 64 : i32} {
  tt.func public @mxfp_upcast_kernel(%x_ptr: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("x_ptr"), %scale_ptr: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("scale_ptr"), %mxfp_ptr: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("mxfp_ptr"), %N: i32 {tt.divisibility = 16 : i32} loc("N")) attributes {noinline = false} {
    %cst = arith.constant dense<0x7FC0> : tensor<16x32xbf16, #blocked> loc(#loc)
    %c512_i32 = arith.constant 512 : i32 loc(#loc)
    %c32_i32 = arith.constant 32 : i32 loc(#loc)
    %cst_0 = arith.constant dense<16> : tensor<16x16xi32, #blocked1> loc(#loc)
    %cst_1 = arith.constant dense<-32768> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_2 = arith.constant dense<1> : tensor<16x16xi32, #blocked1> loc(#loc)
    %cst_3 = arith.constant dense<96> : tensor<16x16xi8, #blocked1> loc(#loc)
    %cst_4 = arith.constant dense<16128> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_5 = arith.constant dense<0> : tensor<16x16xi32, #blocked1> loc(#loc)
    %cst_6 = arith.constant dense<6> : tensor<16x16xi8, #blocked1> loc(#loc)
    %cst_7 = arith.constant dense<8> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_8 = arith.constant dense<-128> : tensor<16x16xi8, #blocked1> loc(#loc)
    %cst_9 = arith.constant dense<2> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_10 = arith.constant dense<12> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_11 = arith.constant dense<8> : tensor<16x16xi8, #blocked1> loc(#loc)
    %cst_12 = arith.constant dense<6> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_13 = arith.constant dense<112> : tensor<16x16xi8, #blocked1> loc(#loc)
    %cst_14 = arith.constant dense<7> : tensor<16x16xi8, #blocked1> loc(#loc)
    %c256_i32 = arith.constant 256 : i32 loc(#loc)
    %c16_i32 = arith.constant 16 : i32 loc(#loc)
    %cst_15 = arith.constant dense<16> : tensor<16x1xi32, #blocked1> loc(#loc)
    %cst_16 = arith.constant dense<7> : tensor<16x1xi16, #blocked> loc(#loc)
    %cst_17 = arith.constant dense<255> : tensor<16x1xi32, #blocked> loc(#loc)
    %0 = tt.get_program_id x : i32 loc(#loc)
    %1 = arith.muli %0, %c256_i32 : i32 loc(#loc)
    %2 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc)
    %3 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc)
    %4 = tt.expand_dims %2 {axis = 1 : i32} : tensor<16xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> -> tensor<16x1xi32, #blocked1> loc(#loc)
    %5 = tt.expand_dims %3 {axis = 1 : i32} : tensor<16xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<16x1xi32, #blocked> loc(#loc)
    %6 = arith.muli %4, %cst_15 : tensor<16x1xi32, #blocked1> loc(#loc)
    %7 = tt.splat %1 : i32 -> tensor<16x1xi32, #blocked1> loc(#loc)
    %8 = arith.addi %7, %6 : tensor<16x1xi32, #blocked1> loc(#loc)
    %9 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc)
    %10 = tt.expand_dims %9 {axis = 0 : i32} : tensor<16xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x16xi32, #blocked1> loc(#loc)
    %11 = tt.broadcast %8 : tensor<16x1xi32, #blocked1> -> tensor<16x16xi32, #blocked1> loc(#loc)
    %12 = tt.broadcast %10 : tensor<1x16xi32, #blocked1> -> tensor<16x16xi32, #blocked1> loc(#loc)
    %13 = arith.addi %11, %12 : tensor<16x16xi32, #blocked1> loc(#loc)
    %14 = arith.muli %N, %c16_i32 : i32 loc(#loc)
    %15 = tt.splat %14 : i32 -> tensor<16x16xi32, #blocked1> loc(#loc)
    %16 = arith.cmpi slt, %13, %15 : tensor<16x16xi32, #blocked1> loc(#loc)
    %17 = tt.splat %x_ptr : !tt.ptr<i8> -> tensor<16x16x!tt.ptr<i8>, #blocked1> loc(#loc)
    %18 = tt.addptr %17, %13 : tensor<16x16x!tt.ptr<i8>, #blocked1>, tensor<16x16xi32, #blocked1> loc(#loc)
    %19 = tt.load %18, %16 : tensor<16x16x!tt.ptr<i8>, #blocked1> loc(#loc)
    %20 = arith.muli %0, %c16_i32 : i32 loc(#loc)
    %21 = tt.splat %20 : i32 -> tensor<16x1xi32, #blocked> loc(#loc)
    %22 = arith.addi %21, %5 : tensor<16x1xi32, #blocked> loc(#loc)
    %23 = tt.splat %N : i32 -> tensor<16x1xi32, #blocked> loc(#loc)
    %24 = arith.cmpi slt, %22, %23 : tensor<16x1xi32, #blocked> loc(#loc)
    %25 = tt.splat %scale_ptr : !tt.ptr<i8> -> tensor<16x1x!tt.ptr<i8>, #blocked> loc(#loc)
    %26 = tt.addptr %25, %22 : tensor<16x1x!tt.ptr<i8>, #blocked>, tensor<16x1xi32, #blocked> loc(#loc)
    %27 = tt.load %26, %24 : tensor<16x1x!tt.ptr<i8>, #blocked> loc(#loc)
    %28 = arith.extui %27 : tensor<16x1xi8, #blocked> to tensor<16x1xi16, #blocked> loc(#loc)
    %29 = arith.shli %28, %cst_16 : tensor<16x1xi16, #blocked> loc(#loc)
    %30 = tt.bitcast %29 : tensor<16x1xi16, #blocked> -> tensor<16x1xbf16, #blocked> loc(#loc)
    %31 = arith.andi %19, %cst_14 : tensor<16x16xi8, #blocked1> loc(#loc)
    %32 = arith.andi %19, %cst_13 : tensor<16x16xi8, #blocked1> loc(#loc)
    %33 = arith.extui %31 : tensor<16x16xi8, #blocked1> to tensor<16x16xi16, #blocked1> loc(#loc)
    %34 = arith.shli %33, %cst_12 : tensor<16x16xi16, #blocked1> loc(#loc)
    %35 = arith.andi %19, %cst_11 : tensor<16x16xi8, #blocked1> loc(#loc)
    %36 = arith.extui %35 : tensor<16x16xi8, #blocked1> to tensor<16x16xi16, #blocked1> loc(#loc)
    %37 = arith.shli %36, %cst_10 : tensor<16x16xi16, #blocked1> loc(#loc)
    %38 = arith.ori %34, %37 : tensor<16x16xi16, #blocked1> loc(#loc)
    %39 = arith.extui %32 : tensor<16x16xi8, #blocked1> to tensor<16x16xi16, #blocked1> loc(#loc)
    %40 = arith.shli %39, %cst_9 : tensor<16x16xi16, #blocked1> loc(#loc)
    %41 = arith.andi %19, %cst_8 : tensor<16x16xi8, #blocked1> loc(#loc)
    %42 = arith.extui %41 : tensor<16x16xi8, #blocked1> to tensor<16x16xi16, #blocked1> loc(#loc)
    %43 = arith.shli %42, %cst_7 : tensor<16x16xi16, #blocked1> loc(#loc)
    %44 = arith.ori %40, %43 : tensor<16x16xi16, #blocked1> loc(#loc)
    %45 = arith.andi %31, %cst_6 : tensor<16x16xi8, #blocked1> loc(#loc)
    %46 = arith.extui %45 : tensor<16x16xi8, #blocked1> to tensor<16x16xi32, #blocked1> loc(#loc)
    %47 = arith.cmpi ne, %46, %cst_5 : tensor<16x16xi32, #blocked1> loc(#loc)
    %48 = arith.addi %38, %cst_4 : tensor<16x16xi16, #blocked1> loc(#loc)
    %49 = arith.select %47, %48, %38 : tensor<16x16xi1, #blocked1>, tensor<16x16xi16, #blocked1> loc(#loc)
    %50 = arith.andi %32, %cst_3 : tensor<16x16xi8, #blocked1> loc(#loc)
    %51 = arith.extui %50 : tensor<16x16xi8, #blocked1> to tensor<16x16xi32, #blocked1> loc(#loc)
    %52 = arith.cmpi ne, %51, %cst_5 : tensor<16x16xi32, #blocked1> loc(#loc)
    %53 = arith.addi %44, %cst_4 : tensor<16x16xi16, #blocked1> loc(#loc)
    %54 = arith.select %52, %53, %44 : tensor<16x16xi1, #blocked1>, tensor<16x16xi16, #blocked1> loc(#loc)
    %55 = arith.extui %31 : tensor<16x16xi8, #blocked1> to tensor<16x16xi32, #blocked1> loc(#loc)
    %56 = arith.cmpi eq, %55, %cst_2 : tensor<16x16xi32, #blocked1> loc(#loc)
    %57 = arith.andi %49, %cst_1 : tensor<16x16xi16, #blocked1> loc(#loc)
    %58 = arith.ori %57, %cst_4 : tensor<16x16xi16, #blocked1> loc(#loc)
    %59 = arith.select %56, %58, %49 : tensor<16x16xi1, #blocked1>, tensor<16x16xi16, #blocked1> loc(#loc)
    %60 = arith.extui %32 : tensor<16x16xi8, #blocked1> to tensor<16x16xi32, #blocked1> loc(#loc)
    %61 = arith.cmpi eq, %60, %cst_0 : tensor<16x16xi32, #blocked1> loc(#loc)
    %62 = arith.andi %54, %cst_1 : tensor<16x16xi16, #blocked1> loc(#loc)
    %63 = arith.ori %62, %cst_4 : tensor<16x16xi16, #blocked1> loc(#loc)
    %64 = arith.select %61, %63, %54 : tensor<16x16xi1, #blocked1>, tensor<16x16xi16, #blocked1> loc(#loc)
    %65 = tt.join %59, %64 : tensor<16x16xi16, #blocked1> -> tensor<16x16x2xi16, #blocked2> loc(#loc)
    %66 = tt.reshape %65 : tensor<16x16x2xi16, #blocked2> -> tensor<16x32xi16, #blocked> loc(#loc)
    %67 = tt.bitcast %66 : tensor<16x32xi16, #blocked> -> tensor<16x32xbf16, #blocked> loc(#loc)
    %68 = tt.broadcast %30 : tensor<16x1xbf16, #blocked> -> tensor<16x32xbf16, #blocked> loc(#loc)
    %69 = arith.mulf %67, %68 : tensor<16x32xbf16, #blocked> loc(#loc)
    %70 = arith.extui %27 : tensor<16x1xi8, #blocked> to tensor<16x1xi32, #blocked> loc(#loc)
    %71 = arith.cmpi eq, %70, %cst_17 : tensor<16x1xi32, #blocked> loc(#loc)
    %72 = tt.broadcast %71 : tensor<16x1xi1, #blocked> -> tensor<16x32xi1, #blocked> loc(#loc)
    %73 = arith.select %72, %cst, %69 : tensor<16x32xi1, #blocked>, tensor<16x32xbf16, #blocked> loc(#loc)
    %74 = arith.muli %0, %c512_i32 : i32 loc(#loc)
    %75 = tt.make_range {end = 512 : i32, start = 0 : i32} : tensor<512xi32, #blocked3> loc(#loc)
    %76 = tt.splat %74 : i32 -> tensor<512xi32, #blocked3> loc(#loc)
    %77 = arith.addi %76, %75 : tensor<512xi32, #blocked3> loc(#loc)
    %78 = arith.muli %N, %c32_i32 : i32 loc(#loc)
    %79 = tt.splat %78 : i32 -> tensor<512xi32, #blocked3> loc(#loc)
    %80 = arith.cmpi slt, %77, %79 : tensor<512xi32, #blocked3> loc(#loc)
    %81 = tt.splat %mxfp_ptr : !tt.ptr<bf16> -> tensor<512x!tt.ptr<bf16>, #blocked3> loc(#loc)
    %82 = tt.addptr %81, %77 : tensor<512x!tt.ptr<bf16>, #blocked3>, tensor<512xi32, #blocked3> loc(#loc)
    %83 = tt.reshape %73 : tensor<16x32xbf16, #blocked> -> tensor<512xbf16, #blocked3> loc(#loc)
    tt.store %82, %83, %80 : tensor<512x!tt.ptr<bf16>, #blocked3> loc(#loc)
    tt.return loc(#loc)
  } loc(#loc)
} loc(#loc)
#loc = loc(unknown)


// -----// IR Dump Before Canonicalizer (canonicalize) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 2], threadsPerWarp = [4, 16], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [4, 16], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked2 = #ttg.blocked<{sizePerThread = [1, 1, 2], threadsPerWarp = [4, 16, 1], warpsPerCTA = [4, 1, 1], order = [2, 1, 0]}>
#blocked3 = #ttg.blocked<{sizePerThread = [2], threadsPerWarp = [64], warpsPerCTA = [4], order = [0]}>
#loc1 = loc("x_ptr")
#loc2 = loc("scale_ptr")
#loc3 = loc("mxfp_ptr")
#loc4 = loc("N")
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "hip:gfx950", "ttg.threads-per-warp" = 64 : i32} {
  tt.func public @mxfp_upcast_kernel(%x_ptr: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("x_ptr"), %scale_ptr: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("scale_ptr"), %mxfp_ptr: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("mxfp_ptr"), %N: i32 {tt.divisibility = 16 : i32} loc("N")) attributes {noinline = false} {
    %cst = arith.constant dense<0x7FC0> : tensor<16x32xbf16, #blocked> loc(#loc)
    %c512_i32 = arith.constant 512 : i32 loc(#loc)
    %c32_i32 = arith.constant 32 : i32 loc(#loc)
    %cst_0 = arith.constant dense<16> : tensor<16x16xi32, #blocked1> loc(#loc)
    %cst_1 = arith.constant dense<-32768> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_2 = arith.constant dense<1> : tensor<16x16xi32, #blocked1> loc(#loc)
    %cst_3 = arith.constant dense<96> : tensor<16x16xi8, #blocked1> loc(#loc)
    %cst_4 = arith.constant dense<16128> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_5 = arith.constant dense<0> : tensor<16x16xi32, #blocked1> loc(#loc)
    %cst_6 = arith.constant dense<6> : tensor<16x16xi8, #blocked1> loc(#loc)
    %cst_7 = arith.constant dense<8> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_8 = arith.constant dense<-128> : tensor<16x16xi8, #blocked1> loc(#loc)
    %cst_9 = arith.constant dense<2> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_10 = arith.constant dense<12> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_11 = arith.constant dense<8> : tensor<16x16xi8, #blocked1> loc(#loc)
    %cst_12 = arith.constant dense<6> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_13 = arith.constant dense<112> : tensor<16x16xi8, #blocked1> loc(#loc)
    %cst_14 = arith.constant dense<7> : tensor<16x16xi8, #blocked1> loc(#loc)
    %c256_i32 = arith.constant 256 : i32 loc(#loc)
    %c16_i32 = arith.constant 16 : i32 loc(#loc)
    %cst_15 = arith.constant dense<16> : tensor<16x1xi32, #blocked1> loc(#loc)
    %cst_16 = arith.constant dense<7> : tensor<16x1xi16, #blocked> loc(#loc)
    %cst_17 = arith.constant dense<255> : tensor<16x1xi32, #blocked> loc(#loc)
    %0 = tt.get_program_id x : i32 loc(#loc)
    %1 = arith.muli %0, %c256_i32 : i32 loc(#loc)
    %2 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc)
    %3 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc)
    %4 = tt.expand_dims %2 {axis = 1 : i32} : tensor<16xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> -> tensor<16x1xi32, #blocked1> loc(#loc)
    %5 = tt.expand_dims %3 {axis = 1 : i32} : tensor<16xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<16x1xi32, #blocked> loc(#loc)
    %6 = arith.muli %4, %cst_15 : tensor<16x1xi32, #blocked1> loc(#loc)
    %7 = tt.splat %1 : i32 -> tensor<16x1xi32, #blocked1> loc(#loc)
    %8 = arith.addi %7, %6 : tensor<16x1xi32, #blocked1> loc(#loc)
    %9 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc)
    %10 = tt.expand_dims %9 {axis = 0 : i32} : tensor<16xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x16xi32, #blocked1> loc(#loc)
    %11 = tt.broadcast %8 : tensor<16x1xi32, #blocked1> -> tensor<16x16xi32, #blocked1> loc(#loc)
    %12 = tt.broadcast %10 : tensor<1x16xi32, #blocked1> -> tensor<16x16xi32, #blocked1> loc(#loc)
    %13 = arith.addi %11, %12 : tensor<16x16xi32, #blocked1> loc(#loc)
    %14 = arith.muli %N, %c16_i32 : i32 loc(#loc)
    %15 = tt.splat %14 : i32 -> tensor<16x16xi32, #blocked1> loc(#loc)
    %16 = arith.cmpi slt, %13, %15 : tensor<16x16xi32, #blocked1> loc(#loc)
    %17 = tt.splat %x_ptr : !tt.ptr<i8> -> tensor<16x16x!tt.ptr<i8>, #blocked1> loc(#loc)
    %18 = tt.addptr %17, %13 : tensor<16x16x!tt.ptr<i8>, #blocked1>, tensor<16x16xi32, #blocked1> loc(#loc)
    %19 = tt.load %18, %16 : tensor<16x16x!tt.ptr<i8>, #blocked1> loc(#loc)
    %20 = arith.muli %0, %c16_i32 : i32 loc(#loc)
    %21 = tt.splat %20 : i32 -> tensor<16x1xi32, #blocked> loc(#loc)
    %22 = arith.addi %21, %5 : tensor<16x1xi32, #blocked> loc(#loc)
    %23 = tt.splat %N : i32 -> tensor<16x1xi32, #blocked> loc(#loc)
    %24 = arith.cmpi slt, %22, %23 : tensor<16x1xi32, #blocked> loc(#loc)
    %25 = tt.splat %scale_ptr : !tt.ptr<i8> -> tensor<16x1x!tt.ptr<i8>, #blocked> loc(#loc)
    %26 = tt.addptr %25, %22 : tensor<16x1x!tt.ptr<i8>, #blocked>, tensor<16x1xi32, #blocked> loc(#loc)
    %27 = tt.load %26, %24 : tensor<16x1x!tt.ptr<i8>, #blocked> loc(#loc)
    %28 = arith.extui %27 : tensor<16x1xi8, #blocked> to tensor<16x1xi16, #blocked> loc(#loc)
    %29 = arith.shli %28, %cst_16 : tensor<16x1xi16, #blocked> loc(#loc)
    %30 = tt.bitcast %29 : tensor<16x1xi16, #blocked> -> tensor<16x1xbf16, #blocked> loc(#loc)
    %31 = arith.andi %19, %cst_14 : tensor<16x16xi8, #blocked1> loc(#loc)
    %32 = arith.andi %19, %cst_13 : tensor<16x16xi8, #blocked1> loc(#loc)
    %33 = arith.extui %31 : tensor<16x16xi8, #blocked1> to tensor<16x16xi16, #blocked1> loc(#loc)
    %34 = arith.shli %33, %cst_12 : tensor<16x16xi16, #blocked1> loc(#loc)
    %35 = arith.andi %19, %cst_11 : tensor<16x16xi8, #blocked1> loc(#loc)
    %36 = arith.extui %35 : tensor<16x16xi8, #blocked1> to tensor<16x16xi16, #blocked1> loc(#loc)
    %37 = arith.shli %36, %cst_10 : tensor<16x16xi16, #blocked1> loc(#loc)
    %38 = arith.ori %34, %37 : tensor<16x16xi16, #blocked1> loc(#loc)
    %39 = arith.extui %32 : tensor<16x16xi8, #blocked1> to tensor<16x16xi16, #blocked1> loc(#loc)
    %40 = arith.shli %39, %cst_9 : tensor<16x16xi16, #blocked1> loc(#loc)
    %41 = arith.andi %19, %cst_8 : tensor<16x16xi8, #blocked1> loc(#loc)
    %42 = arith.extui %41 : tensor<16x16xi8, #blocked1> to tensor<16x16xi16, #blocked1> loc(#loc)
    %43 = arith.shli %42, %cst_7 : tensor<16x16xi16, #blocked1> loc(#loc)
    %44 = arith.ori %40, %43 : tensor<16x16xi16, #blocked1> loc(#loc)
    %45 = arith.andi %31, %cst_6 : tensor<16x16xi8, #blocked1> loc(#loc)
    %46 = arith.extui %45 : tensor<16x16xi8, #blocked1> to tensor<16x16xi32, #blocked1> loc(#loc)
    %47 = arith.cmpi ne, %46, %cst_5 : tensor<16x16xi32, #blocked1> loc(#loc)
    %48 = arith.addi %38, %cst_4 : tensor<16x16xi16, #blocked1> loc(#loc)
    %49 = arith.select %47, %48, %38 : tensor<16x16xi1, #blocked1>, tensor<16x16xi16, #blocked1> loc(#loc)
    %50 = arith.andi %32, %cst_3 : tensor<16x16xi8, #blocked1> loc(#loc)
    %51 = arith.extui %50 : tensor<16x16xi8, #blocked1> to tensor<16x16xi32, #blocked1> loc(#loc)
    %52 = arith.cmpi ne, %51, %cst_5 : tensor<16x16xi32, #blocked1> loc(#loc)
    %53 = arith.addi %44, %cst_4 : tensor<16x16xi16, #blocked1> loc(#loc)
    %54 = arith.select %52, %53, %44 : tensor<16x16xi1, #blocked1>, tensor<16x16xi16, #blocked1> loc(#loc)
    %55 = arith.extui %31 : tensor<16x16xi8, #blocked1> to tensor<16x16xi32, #blocked1> loc(#loc)
    %56 = arith.cmpi eq, %55, %cst_2 : tensor<16x16xi32, #blocked1> loc(#loc)
    %57 = arith.andi %49, %cst_1 : tensor<16x16xi16, #blocked1> loc(#loc)
    %58 = arith.ori %57, %cst_4 : tensor<16x16xi16, #blocked1> loc(#loc)
    %59 = arith.select %56, %58, %49 : tensor<16x16xi1, #blocked1>, tensor<16x16xi16, #blocked1> loc(#loc)
    %60 = arith.extui %32 : tensor<16x16xi8, #blocked1> to tensor<16x16xi32, #blocked1> loc(#loc)
    %61 = arith.cmpi eq, %60, %cst_0 : tensor<16x16xi32, #blocked1> loc(#loc)
    %62 = arith.andi %54, %cst_1 : tensor<16x16xi16, #blocked1> loc(#loc)
    %63 = arith.ori %62, %cst_4 : tensor<16x16xi16, #blocked1> loc(#loc)
    %64 = arith.select %61, %63, %54 : tensor<16x16xi1, #blocked1>, tensor<16x16xi16, #blocked1> loc(#loc)
    %65 = tt.join %59, %64 : tensor<16x16xi16, #blocked1> -> tensor<16x16x2xi16, #blocked2> loc(#loc)
    %66 = tt.reshape %65 : tensor<16x16x2xi16, #blocked2> -> tensor<16x32xi16, #blocked> loc(#loc)
    %67 = tt.bitcast %66 : tensor<16x32xi16, #blocked> -> tensor<16x32xbf16, #blocked> loc(#loc)
    %68 = tt.broadcast %30 : tensor<16x1xbf16, #blocked> -> tensor<16x32xbf16, #blocked> loc(#loc)
    %69 = arith.mulf %67, %68 : tensor<16x32xbf16, #blocked> loc(#loc)
    %70 = arith.extui %27 : tensor<16x1xi8, #blocked> to tensor<16x1xi32, #blocked> loc(#loc)
    %71 = arith.cmpi eq, %70, %cst_17 : tensor<16x1xi32, #blocked> loc(#loc)
    %72 = tt.broadcast %71 : tensor<16x1xi1, #blocked> -> tensor<16x32xi1, #blocked> loc(#loc)
    %73 = arith.select %72, %cst, %69 : tensor<16x32xi1, #blocked>, tensor<16x32xbf16, #blocked> loc(#loc)
    %74 = arith.muli %0, %c512_i32 : i32 loc(#loc)
    %75 = tt.make_range {end = 512 : i32, start = 0 : i32} : tensor<512xi32, #blocked3> loc(#loc)
    %76 = tt.splat %74 : i32 -> tensor<512xi32, #blocked3> loc(#loc)
    %77 = arith.addi %76, %75 : tensor<512xi32, #blocked3> loc(#loc)
    %78 = arith.muli %N, %c32_i32 : i32 loc(#loc)
    %79 = tt.splat %78 : i32 -> tensor<512xi32, #blocked3> loc(#loc)
    %80 = arith.cmpi slt, %77, %79 : tensor<512xi32, #blocked3> loc(#loc)
    %81 = tt.splat %mxfp_ptr : !tt.ptr<bf16> -> tensor<512x!tt.ptr<bf16>, #blocked3> loc(#loc)
    %82 = tt.addptr %81, %77 : tensor<512x!tt.ptr<bf16>, #blocked3>, tensor<512xi32, #blocked3> loc(#loc)
    %83 = tt.reshape %73 : tensor<16x32xbf16, #blocked> -> tensor<512xbf16, #blocked3> loc(#loc)
    tt.store %82, %83, %80 : tensor<512x!tt.ptr<bf16>, #blocked3> loc(#loc)
    tt.return loc(#loc)
  } loc(#loc)
} loc(#loc)
#loc = loc(unknown)


// -----// IR Dump Before TritonAMDGPUStreamPipeline (tritonamdgpu-stream-pipeline) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 2], threadsPerWarp = [4, 16], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [4, 16], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked2 = #ttg.blocked<{sizePerThread = [1, 1, 2], threadsPerWarp = [4, 16, 1], warpsPerCTA = [4, 1, 1], order = [2, 1, 0]}>
#blocked3 = #ttg.blocked<{sizePerThread = [2], threadsPerWarp = [64], warpsPerCTA = [4], order = [0]}>
#loc1 = loc("x_ptr")
#loc2 = loc("scale_ptr")
#loc3 = loc("mxfp_ptr")
#loc4 = loc("N")
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "hip:gfx950", "ttg.threads-per-warp" = 64 : i32} {
  tt.func public @mxfp_upcast_kernel(%x_ptr: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("x_ptr"), %scale_ptr: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("scale_ptr"), %mxfp_ptr: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("mxfp_ptr"), %N: i32 {tt.divisibility = 16 : i32} loc("N")) attributes {noinline = false} {
    %cst = arith.constant dense<0x7FC0> : tensor<16x32xbf16, #blocked> loc(#loc)
    %c512_i32 = arith.constant 512 : i32 loc(#loc)
    %c32_i32 = arith.constant 32 : i32 loc(#loc)
    %cst_0 = arith.constant dense<16> : tensor<16x16xi32, #blocked1> loc(#loc)
    %cst_1 = arith.constant dense<-32768> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_2 = arith.constant dense<1> : tensor<16x16xi32, #blocked1> loc(#loc)
    %cst_3 = arith.constant dense<96> : tensor<16x16xi8, #blocked1> loc(#loc)
    %cst_4 = arith.constant dense<16128> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_5 = arith.constant dense<0> : tensor<16x16xi32, #blocked1> loc(#loc)
    %cst_6 = arith.constant dense<6> : tensor<16x16xi8, #blocked1> loc(#loc)
    %cst_7 = arith.constant dense<8> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_8 = arith.constant dense<-128> : tensor<16x16xi8, #blocked1> loc(#loc)
    %cst_9 = arith.constant dense<2> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_10 = arith.constant dense<12> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_11 = arith.constant dense<8> : tensor<16x16xi8, #blocked1> loc(#loc)
    %cst_12 = arith.constant dense<6> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_13 = arith.constant dense<112> : tensor<16x16xi8, #blocked1> loc(#loc)
    %cst_14 = arith.constant dense<7> : tensor<16x16xi8, #blocked1> loc(#loc)
    %c256_i32 = arith.constant 256 : i32 loc(#loc)
    %c16_i32 = arith.constant 16 : i32 loc(#loc)
    %cst_15 = arith.constant dense<16> : tensor<16x1xi32, #blocked1> loc(#loc)
    %cst_16 = arith.constant dense<7> : tensor<16x1xi16, #blocked> loc(#loc)
    %cst_17 = arith.constant dense<255> : tensor<16x1xi32, #blocked> loc(#loc)
    %0 = tt.get_program_id x : i32 loc(#loc)
    %1 = arith.muli %0, %c256_i32 : i32 loc(#loc)
    %2 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc)
    %3 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc)
    %4 = tt.expand_dims %2 {axis = 1 : i32} : tensor<16xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> -> tensor<16x1xi32, #blocked1> loc(#loc)
    %5 = tt.expand_dims %3 {axis = 1 : i32} : tensor<16xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<16x1xi32, #blocked> loc(#loc)
    %6 = arith.muli %4, %cst_15 : tensor<16x1xi32, #blocked1> loc(#loc)
    %7 = tt.splat %1 : i32 -> tensor<16x1xi32, #blocked1> loc(#loc)
    %8 = arith.addi %7, %6 : tensor<16x1xi32, #blocked1> loc(#loc)
    %9 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc)
    %10 = tt.expand_dims %9 {axis = 0 : i32} : tensor<16xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x16xi32, #blocked1> loc(#loc)
    %11 = tt.broadcast %8 : tensor<16x1xi32, #blocked1> -> tensor<16x16xi32, #blocked1> loc(#loc)
    %12 = tt.broadcast %10 : tensor<1x16xi32, #blocked1> -> tensor<16x16xi32, #blocked1> loc(#loc)
    %13 = arith.addi %11, %12 : tensor<16x16xi32, #blocked1> loc(#loc)
    %14 = arith.muli %N, %c16_i32 : i32 loc(#loc)
    %15 = tt.splat %14 : i32 -> tensor<16x16xi32, #blocked1> loc(#loc)
    %16 = arith.cmpi slt, %13, %15 : tensor<16x16xi32, #blocked1> loc(#loc)
    %17 = tt.splat %x_ptr : !tt.ptr<i8> -> tensor<16x16x!tt.ptr<i8>, #blocked1> loc(#loc)
    %18 = tt.addptr %17, %13 : tensor<16x16x!tt.ptr<i8>, #blocked1>, tensor<16x16xi32, #blocked1> loc(#loc)
    %19 = tt.load %18, %16 : tensor<16x16x!tt.ptr<i8>, #blocked1> loc(#loc)
    %20 = arith.muli %0, %c16_i32 : i32 loc(#loc)
    %21 = tt.splat %20 : i32 -> tensor<16x1xi32, #blocked> loc(#loc)
    %22 = arith.addi %21, %5 : tensor<16x1xi32, #blocked> loc(#loc)
    %23 = tt.splat %N : i32 -> tensor<16x1xi32, #blocked> loc(#loc)
    %24 = arith.cmpi slt, %22, %23 : tensor<16x1xi32, #blocked> loc(#loc)
    %25 = tt.splat %scale_ptr : !tt.ptr<i8> -> tensor<16x1x!tt.ptr<i8>, #blocked> loc(#loc)
    %26 = tt.addptr %25, %22 : tensor<16x1x!tt.ptr<i8>, #blocked>, tensor<16x1xi32, #blocked> loc(#loc)
    %27 = tt.load %26, %24 : tensor<16x1x!tt.ptr<i8>, #blocked> loc(#loc)
    %28 = arith.extui %27 : tensor<16x1xi8, #blocked> to tensor<16x1xi16, #blocked> loc(#loc)
    %29 = arith.shli %28, %cst_16 : tensor<16x1xi16, #blocked> loc(#loc)
    %30 = tt.bitcast %29 : tensor<16x1xi16, #blocked> -> tensor<16x1xbf16, #blocked> loc(#loc)
    %31 = arith.andi %19, %cst_14 : tensor<16x16xi8, #blocked1> loc(#loc)
    %32 = arith.andi %19, %cst_13 : tensor<16x16xi8, #blocked1> loc(#loc)
    %33 = arith.extui %31 : tensor<16x16xi8, #blocked1> to tensor<16x16xi16, #blocked1> loc(#loc)
    %34 = arith.shli %33, %cst_12 : tensor<16x16xi16, #blocked1> loc(#loc)
    %35 = arith.andi %19, %cst_11 : tensor<16x16xi8, #blocked1> loc(#loc)
    %36 = arith.extui %35 : tensor<16x16xi8, #blocked1> to tensor<16x16xi16, #blocked1> loc(#loc)
    %37 = arith.shli %36, %cst_10 : tensor<16x16xi16, #blocked1> loc(#loc)
    %38 = arith.ori %34, %37 : tensor<16x16xi16, #blocked1> loc(#loc)
    %39 = arith.extui %32 : tensor<16x16xi8, #blocked1> to tensor<16x16xi16, #blocked1> loc(#loc)
    %40 = arith.shli %39, %cst_9 : tensor<16x16xi16, #blocked1> loc(#loc)
    %41 = arith.andi %19, %cst_8 : tensor<16x16xi8, #blocked1> loc(#loc)
    %42 = arith.extui %41 : tensor<16x16xi8, #blocked1> to tensor<16x16xi16, #blocked1> loc(#loc)
    %43 = arith.shli %42, %cst_7 : tensor<16x16xi16, #blocked1> loc(#loc)
    %44 = arith.ori %40, %43 : tensor<16x16xi16, #blocked1> loc(#loc)
    %45 = arith.andi %31, %cst_6 : tensor<16x16xi8, #blocked1> loc(#loc)
    %46 = arith.extui %45 : tensor<16x16xi8, #blocked1> to tensor<16x16xi32, #blocked1> loc(#loc)
    %47 = arith.cmpi ne, %46, %cst_5 : tensor<16x16xi32, #blocked1> loc(#loc)
    %48 = arith.addi %38, %cst_4 : tensor<16x16xi16, #blocked1> loc(#loc)
    %49 = arith.select %47, %48, %38 : tensor<16x16xi1, #blocked1>, tensor<16x16xi16, #blocked1> loc(#loc)
    %50 = arith.andi %32, %cst_3 : tensor<16x16xi8, #blocked1> loc(#loc)
    %51 = arith.extui %50 : tensor<16x16xi8, #blocked1> to tensor<16x16xi32, #blocked1> loc(#loc)
    %52 = arith.cmpi ne, %51, %cst_5 : tensor<16x16xi32, #blocked1> loc(#loc)
    %53 = arith.addi %44, %cst_4 : tensor<16x16xi16, #blocked1> loc(#loc)
    %54 = arith.select %52, %53, %44 : tensor<16x16xi1, #blocked1>, tensor<16x16xi16, #blocked1> loc(#loc)
    %55 = arith.extui %31 : tensor<16x16xi8, #blocked1> to tensor<16x16xi32, #blocked1> loc(#loc)
    %56 = arith.cmpi eq, %55, %cst_2 : tensor<16x16xi32, #blocked1> loc(#loc)
    %57 = arith.andi %49, %cst_1 : tensor<16x16xi16, #blocked1> loc(#loc)
    %58 = arith.ori %57, %cst_4 : tensor<16x16xi16, #blocked1> loc(#loc)
    %59 = arith.select %56, %58, %49 : tensor<16x16xi1, #blocked1>, tensor<16x16xi16, #blocked1> loc(#loc)
    %60 = arith.extui %32 : tensor<16x16xi8, #blocked1> to tensor<16x16xi32, #blocked1> loc(#loc)
    %61 = arith.cmpi eq, %60, %cst_0 : tensor<16x16xi32, #blocked1> loc(#loc)
    %62 = arith.andi %54, %cst_1 : tensor<16x16xi16, #blocked1> loc(#loc)
    %63 = arith.ori %62, %cst_4 : tensor<16x16xi16, #blocked1> loc(#loc)
    %64 = arith.select %61, %63, %54 : tensor<16x16xi1, #blocked1>, tensor<16x16xi16, #blocked1> loc(#loc)
    %65 = tt.join %59, %64 : tensor<16x16xi16, #blocked1> -> tensor<16x16x2xi16, #blocked2> loc(#loc)
    %66 = tt.reshape %65 : tensor<16x16x2xi16, #blocked2> -> tensor<16x32xi16, #blocked> loc(#loc)
    %67 = tt.bitcast %66 : tensor<16x32xi16, #blocked> -> tensor<16x32xbf16, #blocked> loc(#loc)
    %68 = tt.broadcast %30 : tensor<16x1xbf16, #blocked> -> tensor<16x32xbf16, #blocked> loc(#loc)
    %69 = arith.mulf %67, %68 : tensor<16x32xbf16, #blocked> loc(#loc)
    %70 = arith.extui %27 : tensor<16x1xi8, #blocked> to tensor<16x1xi32, #blocked> loc(#loc)
    %71 = arith.cmpi eq, %70, %cst_17 : tensor<16x1xi32, #blocked> loc(#loc)
    %72 = tt.broadcast %71 : tensor<16x1xi1, #blocked> -> tensor<16x32xi1, #blocked> loc(#loc)
    %73 = arith.select %72, %cst, %69 : tensor<16x32xi1, #blocked>, tensor<16x32xbf16, #blocked> loc(#loc)
    %74 = arith.muli %0, %c512_i32 : i32 loc(#loc)
    %75 = tt.make_range {end = 512 : i32, start = 0 : i32} : tensor<512xi32, #blocked3> loc(#loc)
    %76 = tt.splat %74 : i32 -> tensor<512xi32, #blocked3> loc(#loc)
    %77 = arith.addi %76, %75 : tensor<512xi32, #blocked3> loc(#loc)
    %78 = arith.muli %N, %c32_i32 : i32 loc(#loc)
    %79 = tt.splat %78 : i32 -> tensor<512xi32, #blocked3> loc(#loc)
    %80 = arith.cmpi slt, %77, %79 : tensor<512xi32, #blocked3> loc(#loc)
    %81 = tt.splat %mxfp_ptr : !tt.ptr<bf16> -> tensor<512x!tt.ptr<bf16>, #blocked3> loc(#loc)
    %82 = tt.addptr %81, %77 : tensor<512x!tt.ptr<bf16>, #blocked3>, tensor<512xi32, #blocked3> loc(#loc)
    %83 = tt.reshape %73 : tensor<16x32xbf16, #blocked> -> tensor<512xbf16, #blocked3> loc(#loc)
    tt.store %82, %83, %80 : tensor<512x!tt.ptr<bf16>, #blocked3> loc(#loc)
    tt.return loc(#loc)
  } loc(#loc)
} loc(#loc)
#loc = loc(unknown)


// -----// IR Dump Before Canonicalizer (canonicalize) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 2], threadsPerWarp = [4, 16], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [4, 16], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked2 = #ttg.blocked<{sizePerThread = [1, 1, 2], threadsPerWarp = [4, 16, 1], warpsPerCTA = [4, 1, 1], order = [2, 1, 0]}>
#blocked3 = #ttg.blocked<{sizePerThread = [2], threadsPerWarp = [64], warpsPerCTA = [4], order = [0]}>
#loc1 = loc("x_ptr")
#loc2 = loc("scale_ptr")
#loc3 = loc("mxfp_ptr")
#loc4 = loc("N")
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "hip:gfx950", "ttg.threads-per-warp" = 64 : i32} {
  tt.func public @mxfp_upcast_kernel(%x_ptr: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("x_ptr"), %scale_ptr: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("scale_ptr"), %mxfp_ptr: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("mxfp_ptr"), %N: i32 {tt.divisibility = 16 : i32} loc("N")) attributes {noinline = false} {
    %cst = arith.constant dense<0x7FC0> : tensor<16x32xbf16, #blocked> loc(#loc)
    %c512_i32 = arith.constant 512 : i32 loc(#loc)
    %c32_i32 = arith.constant 32 : i32 loc(#loc)
    %cst_0 = arith.constant dense<16> : tensor<16x16xi32, #blocked1> loc(#loc)
    %cst_1 = arith.constant dense<-32768> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_2 = arith.constant dense<1> : tensor<16x16xi32, #blocked1> loc(#loc)
    %cst_3 = arith.constant dense<96> : tensor<16x16xi8, #blocked1> loc(#loc)
    %cst_4 = arith.constant dense<16128> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_5 = arith.constant dense<0> : tensor<16x16xi32, #blocked1> loc(#loc)
    %cst_6 = arith.constant dense<6> : tensor<16x16xi8, #blocked1> loc(#loc)
    %cst_7 = arith.constant dense<8> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_8 = arith.constant dense<-128> : tensor<16x16xi8, #blocked1> loc(#loc)
    %cst_9 = arith.constant dense<2> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_10 = arith.constant dense<12> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_11 = arith.constant dense<8> : tensor<16x16xi8, #blocked1> loc(#loc)
    %cst_12 = arith.constant dense<6> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_13 = arith.constant dense<112> : tensor<16x16xi8, #blocked1> loc(#loc)
    %cst_14 = arith.constant dense<7> : tensor<16x16xi8, #blocked1> loc(#loc)
    %c256_i32 = arith.constant 256 : i32 loc(#loc)
    %c16_i32 = arith.constant 16 : i32 loc(#loc)
    %cst_15 = arith.constant dense<16> : tensor<16x1xi32, #blocked1> loc(#loc)
    %cst_16 = arith.constant dense<7> : tensor<16x1xi16, #blocked> loc(#loc)
    %cst_17 = arith.constant dense<255> : tensor<16x1xi32, #blocked> loc(#loc)
    %0 = tt.get_program_id x : i32 loc(#loc)
    %1 = arith.muli %0, %c256_i32 : i32 loc(#loc)
    %2 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc)
    %3 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc)
    %4 = tt.expand_dims %2 {axis = 1 : i32} : tensor<16xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> -> tensor<16x1xi32, #blocked1> loc(#loc)
    %5 = tt.expand_dims %3 {axis = 1 : i32} : tensor<16xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<16x1xi32, #blocked> loc(#loc)
    %6 = arith.muli %4, %cst_15 : tensor<16x1xi32, #blocked1> loc(#loc)
    %7 = tt.splat %1 : i32 -> tensor<16x1xi32, #blocked1> loc(#loc)
    %8 = arith.addi %7, %6 : tensor<16x1xi32, #blocked1> loc(#loc)
    %9 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc)
    %10 = tt.expand_dims %9 {axis = 0 : i32} : tensor<16xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x16xi32, #blocked1> loc(#loc)
    %11 = tt.broadcast %8 : tensor<16x1xi32, #blocked1> -> tensor<16x16xi32, #blocked1> loc(#loc)
    %12 = tt.broadcast %10 : tensor<1x16xi32, #blocked1> -> tensor<16x16xi32, #blocked1> loc(#loc)
    %13 = arith.addi %11, %12 : tensor<16x16xi32, #blocked1> loc(#loc)
    %14 = arith.muli %N, %c16_i32 : i32 loc(#loc)
    %15 = tt.splat %14 : i32 -> tensor<16x16xi32, #blocked1> loc(#loc)
    %16 = arith.cmpi slt, %13, %15 : tensor<16x16xi32, #blocked1> loc(#loc)
    %17 = tt.splat %x_ptr : !tt.ptr<i8> -> tensor<16x16x!tt.ptr<i8>, #blocked1> loc(#loc)
    %18 = tt.addptr %17, %13 : tensor<16x16x!tt.ptr<i8>, #blocked1>, tensor<16x16xi32, #blocked1> loc(#loc)
    %19 = tt.load %18, %16 : tensor<16x16x!tt.ptr<i8>, #blocked1> loc(#loc)
    %20 = arith.muli %0, %c16_i32 : i32 loc(#loc)
    %21 = tt.splat %20 : i32 -> tensor<16x1xi32, #blocked> loc(#loc)
    %22 = arith.addi %21, %5 : tensor<16x1xi32, #blocked> loc(#loc)
    %23 = tt.splat %N : i32 -> tensor<16x1xi32, #blocked> loc(#loc)
    %24 = arith.cmpi slt, %22, %23 : tensor<16x1xi32, #blocked> loc(#loc)
    %25 = tt.splat %scale_ptr : !tt.ptr<i8> -> tensor<16x1x!tt.ptr<i8>, #blocked> loc(#loc)
    %26 = tt.addptr %25, %22 : tensor<16x1x!tt.ptr<i8>, #blocked>, tensor<16x1xi32, #blocked> loc(#loc)
    %27 = tt.load %26, %24 : tensor<16x1x!tt.ptr<i8>, #blocked> loc(#loc)
    %28 = arith.extui %27 : tensor<16x1xi8, #blocked> to tensor<16x1xi16, #blocked> loc(#loc)
    %29 = arith.shli %28, %cst_16 : tensor<16x1xi16, #blocked> loc(#loc)
    %30 = tt.bitcast %29 : tensor<16x1xi16, #blocked> -> tensor<16x1xbf16, #blocked> loc(#loc)
    %31 = arith.andi %19, %cst_14 : tensor<16x16xi8, #blocked1> loc(#loc)
    %32 = arith.andi %19, %cst_13 : tensor<16x16xi8, #blocked1> loc(#loc)
    %33 = arith.extui %31 : tensor<16x16xi8, #blocked1> to tensor<16x16xi16, #blocked1> loc(#loc)
    %34 = arith.shli %33, %cst_12 : tensor<16x16xi16, #blocked1> loc(#loc)
    %35 = arith.andi %19, %cst_11 : tensor<16x16xi8, #blocked1> loc(#loc)
    %36 = arith.extui %35 : tensor<16x16xi8, #blocked1> to tensor<16x16xi16, #blocked1> loc(#loc)
    %37 = arith.shli %36, %cst_10 : tensor<16x16xi16, #blocked1> loc(#loc)
    %38 = arith.ori %34, %37 : tensor<16x16xi16, #blocked1> loc(#loc)
    %39 = arith.extui %32 : tensor<16x16xi8, #blocked1> to tensor<16x16xi16, #blocked1> loc(#loc)
    %40 = arith.shli %39, %cst_9 : tensor<16x16xi16, #blocked1> loc(#loc)
    %41 = arith.andi %19, %cst_8 : tensor<16x16xi8, #blocked1> loc(#loc)
    %42 = arith.extui %41 : tensor<16x16xi8, #blocked1> to tensor<16x16xi16, #blocked1> loc(#loc)
    %43 = arith.shli %42, %cst_7 : tensor<16x16xi16, #blocked1> loc(#loc)
    %44 = arith.ori %40, %43 : tensor<16x16xi16, #blocked1> loc(#loc)
    %45 = arith.andi %31, %cst_6 : tensor<16x16xi8, #blocked1> loc(#loc)
    %46 = arith.extui %45 : tensor<16x16xi8, #blocked1> to tensor<16x16xi32, #blocked1> loc(#loc)
    %47 = arith.cmpi ne, %46, %cst_5 : tensor<16x16xi32, #blocked1> loc(#loc)
    %48 = arith.addi %38, %cst_4 : tensor<16x16xi16, #blocked1> loc(#loc)
    %49 = arith.select %47, %48, %38 : tensor<16x16xi1, #blocked1>, tensor<16x16xi16, #blocked1> loc(#loc)
    %50 = arith.andi %32, %cst_3 : tensor<16x16xi8, #blocked1> loc(#loc)
    %51 = arith.extui %50 : tensor<16x16xi8, #blocked1> to tensor<16x16xi32, #blocked1> loc(#loc)
    %52 = arith.cmpi ne, %51, %cst_5 : tensor<16x16xi32, #blocked1> loc(#loc)
    %53 = arith.addi %44, %cst_4 : tensor<16x16xi16, #blocked1> loc(#loc)
    %54 = arith.select %52, %53, %44 : tensor<16x16xi1, #blocked1>, tensor<16x16xi16, #blocked1> loc(#loc)
    %55 = arith.extui %31 : tensor<16x16xi8, #blocked1> to tensor<16x16xi32, #blocked1> loc(#loc)
    %56 = arith.cmpi eq, %55, %cst_2 : tensor<16x16xi32, #blocked1> loc(#loc)
    %57 = arith.andi %49, %cst_1 : tensor<16x16xi16, #blocked1> loc(#loc)
    %58 = arith.ori %57, %cst_4 : tensor<16x16xi16, #blocked1> loc(#loc)
    %59 = arith.select %56, %58, %49 : tensor<16x16xi1, #blocked1>, tensor<16x16xi16, #blocked1> loc(#loc)
    %60 = arith.extui %32 : tensor<16x16xi8, #blocked1> to tensor<16x16xi32, #blocked1> loc(#loc)
    %61 = arith.cmpi eq, %60, %cst_0 : tensor<16x16xi32, #blocked1> loc(#loc)
    %62 = arith.andi %54, %cst_1 : tensor<16x16xi16, #blocked1> loc(#loc)
    %63 = arith.ori %62, %cst_4 : tensor<16x16xi16, #blocked1> loc(#loc)
    %64 = arith.select %61, %63, %54 : tensor<16x16xi1, #blocked1>, tensor<16x16xi16, #blocked1> loc(#loc)
    %65 = tt.join %59, %64 : tensor<16x16xi16, #blocked1> -> tensor<16x16x2xi16, #blocked2> loc(#loc)
    %66 = tt.reshape %65 : tensor<16x16x2xi16, #blocked2> -> tensor<16x32xi16, #blocked> loc(#loc)
    %67 = tt.bitcast %66 : tensor<16x32xi16, #blocked> -> tensor<16x32xbf16, #blocked> loc(#loc)
    %68 = tt.broadcast %30 : tensor<16x1xbf16, #blocked> -> tensor<16x32xbf16, #blocked> loc(#loc)
    %69 = arith.mulf %67, %68 : tensor<16x32xbf16, #blocked> loc(#loc)
    %70 = arith.extui %27 : tensor<16x1xi8, #blocked> to tensor<16x1xi32, #blocked> loc(#loc)
    %71 = arith.cmpi eq, %70, %cst_17 : tensor<16x1xi32, #blocked> loc(#loc)
    %72 = tt.broadcast %71 : tensor<16x1xi1, #blocked> -> tensor<16x32xi1, #blocked> loc(#loc)
    %73 = arith.select %72, %cst, %69 : tensor<16x32xi1, #blocked>, tensor<16x32xbf16, #blocked> loc(#loc)
    %74 = arith.muli %0, %c512_i32 : i32 loc(#loc)
    %75 = tt.make_range {end = 512 : i32, start = 0 : i32} : tensor<512xi32, #blocked3> loc(#loc)
    %76 = tt.splat %74 : i32 -> tensor<512xi32, #blocked3> loc(#loc)
    %77 = arith.addi %76, %75 : tensor<512xi32, #blocked3> loc(#loc)
    %78 = arith.muli %N, %c32_i32 : i32 loc(#loc)
    %79 = tt.splat %78 : i32 -> tensor<512xi32, #blocked3> loc(#loc)
    %80 = arith.cmpi slt, %77, %79 : tensor<512xi32, #blocked3> loc(#loc)
    %81 = tt.splat %mxfp_ptr : !tt.ptr<bf16> -> tensor<512x!tt.ptr<bf16>, #blocked3> loc(#loc)
    %82 = tt.addptr %81, %77 : tensor<512x!tt.ptr<bf16>, #blocked3>, tensor<512xi32, #blocked3> loc(#loc)
    %83 = tt.reshape %73 : tensor<16x32xbf16, #blocked> -> tensor<512xbf16, #blocked3> loc(#loc)
    tt.store %82, %83, %80 : tensor<512x!tt.ptr<bf16>, #blocked3> loc(#loc)
    tt.return loc(#loc)
  } loc(#loc)
} loc(#loc)
#loc = loc(unknown)


// -----// IR Dump Before TritonGPUOptimizeDotOperands (tritongpu-optimize-dot-operands) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 2], threadsPerWarp = [4, 16], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [4, 16], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked2 = #ttg.blocked<{sizePerThread = [1, 1, 2], threadsPerWarp = [4, 16, 1], warpsPerCTA = [4, 1, 1], order = [2, 1, 0]}>
#blocked3 = #ttg.blocked<{sizePerThread = [2], threadsPerWarp = [64], warpsPerCTA = [4], order = [0]}>
#loc1 = loc("x_ptr")
#loc2 = loc("scale_ptr")
#loc3 = loc("mxfp_ptr")
#loc4 = loc("N")
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "hip:gfx950", "ttg.threads-per-warp" = 64 : i32} {
  tt.func public @mxfp_upcast_kernel(%x_ptr: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("x_ptr"), %scale_ptr: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("scale_ptr"), %mxfp_ptr: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("mxfp_ptr"), %N: i32 {tt.divisibility = 16 : i32} loc("N")) attributes {noinline = false} {
    %cst = arith.constant dense<0x7FC0> : tensor<16x32xbf16, #blocked> loc(#loc)
    %c512_i32 = arith.constant 512 : i32 loc(#loc)
    %c32_i32 = arith.constant 32 : i32 loc(#loc)
    %cst_0 = arith.constant dense<16> : tensor<16x16xi32, #blocked1> loc(#loc)
    %cst_1 = arith.constant dense<-32768> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_2 = arith.constant dense<1> : tensor<16x16xi32, #blocked1> loc(#loc)
    %cst_3 = arith.constant dense<96> : tensor<16x16xi8, #blocked1> loc(#loc)
    %cst_4 = arith.constant dense<16128> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_5 = arith.constant dense<0> : tensor<16x16xi32, #blocked1> loc(#loc)
    %cst_6 = arith.constant dense<6> : tensor<16x16xi8, #blocked1> loc(#loc)
    %cst_7 = arith.constant dense<8> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_8 = arith.constant dense<-128> : tensor<16x16xi8, #blocked1> loc(#loc)
    %cst_9 = arith.constant dense<2> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_10 = arith.constant dense<12> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_11 = arith.constant dense<8> : tensor<16x16xi8, #blocked1> loc(#loc)
    %cst_12 = arith.constant dense<6> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_13 = arith.constant dense<112> : tensor<16x16xi8, #blocked1> loc(#loc)
    %cst_14 = arith.constant dense<7> : tensor<16x16xi8, #blocked1> loc(#loc)
    %c256_i32 = arith.constant 256 : i32 loc(#loc)
    %c16_i32 = arith.constant 16 : i32 loc(#loc)
    %cst_15 = arith.constant dense<16> : tensor<16x1xi32, #blocked1> loc(#loc)
    %cst_16 = arith.constant dense<7> : tensor<16x1xi16, #blocked> loc(#loc)
    %cst_17 = arith.constant dense<255> : tensor<16x1xi32, #blocked> loc(#loc)
    %0 = tt.get_program_id x : i32 loc(#loc)
    %1 = arith.muli %0, %c256_i32 : i32 loc(#loc)
    %2 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc)
    %3 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc)
    %4 = tt.expand_dims %2 {axis = 1 : i32} : tensor<16xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> -> tensor<16x1xi32, #blocked1> loc(#loc)
    %5 = tt.expand_dims %3 {axis = 1 : i32} : tensor<16xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<16x1xi32, #blocked> loc(#loc)
    %6 = arith.muli %4, %cst_15 : tensor<16x1xi32, #blocked1> loc(#loc)
    %7 = tt.splat %1 : i32 -> tensor<16x1xi32, #blocked1> loc(#loc)
    %8 = arith.addi %7, %6 : tensor<16x1xi32, #blocked1> loc(#loc)
    %9 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc)
    %10 = tt.expand_dims %9 {axis = 0 : i32} : tensor<16xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x16xi32, #blocked1> loc(#loc)
    %11 = tt.broadcast %8 : tensor<16x1xi32, #blocked1> -> tensor<16x16xi32, #blocked1> loc(#loc)
    %12 = tt.broadcast %10 : tensor<1x16xi32, #blocked1> -> tensor<16x16xi32, #blocked1> loc(#loc)
    %13 = arith.addi %11, %12 : tensor<16x16xi32, #blocked1> loc(#loc)
    %14 = arith.muli %N, %c16_i32 : i32 loc(#loc)
    %15 = tt.splat %14 : i32 -> tensor<16x16xi32, #blocked1> loc(#loc)
    %16 = arith.cmpi slt, %13, %15 : tensor<16x16xi32, #blocked1> loc(#loc)
    %17 = tt.splat %x_ptr : !tt.ptr<i8> -> tensor<16x16x!tt.ptr<i8>, #blocked1> loc(#loc)
    %18 = tt.addptr %17, %13 : tensor<16x16x!tt.ptr<i8>, #blocked1>, tensor<16x16xi32, #blocked1> loc(#loc)
    %19 = tt.load %18, %16 : tensor<16x16x!tt.ptr<i8>, #blocked1> loc(#loc)
    %20 = arith.muli %0, %c16_i32 : i32 loc(#loc)
    %21 = tt.splat %20 : i32 -> tensor<16x1xi32, #blocked> loc(#loc)
    %22 = arith.addi %21, %5 : tensor<16x1xi32, #blocked> loc(#loc)
    %23 = tt.splat %N : i32 -> tensor<16x1xi32, #blocked> loc(#loc)
    %24 = arith.cmpi slt, %22, %23 : tensor<16x1xi32, #blocked> loc(#loc)
    %25 = tt.splat %scale_ptr : !tt.ptr<i8> -> tensor<16x1x!tt.ptr<i8>, #blocked> loc(#loc)
    %26 = tt.addptr %25, %22 : tensor<16x1x!tt.ptr<i8>, #blocked>, tensor<16x1xi32, #blocked> loc(#loc)
    %27 = tt.load %26, %24 : tensor<16x1x!tt.ptr<i8>, #blocked> loc(#loc)
    %28 = arith.extui %27 : tensor<16x1xi8, #blocked> to tensor<16x1xi16, #blocked> loc(#loc)
    %29 = arith.shli %28, %cst_16 : tensor<16x1xi16, #blocked> loc(#loc)
    %30 = tt.bitcast %29 : tensor<16x1xi16, #blocked> -> tensor<16x1xbf16, #blocked> loc(#loc)
    %31 = arith.andi %19, %cst_14 : tensor<16x16xi8, #blocked1> loc(#loc)
    %32 = arith.andi %19, %cst_13 : tensor<16x16xi8, #blocked1> loc(#loc)
    %33 = arith.extui %31 : tensor<16x16xi8, #blocked1> to tensor<16x16xi16, #blocked1> loc(#loc)
    %34 = arith.shli %33, %cst_12 : tensor<16x16xi16, #blocked1> loc(#loc)
    %35 = arith.andi %19, %cst_11 : tensor<16x16xi8, #blocked1> loc(#loc)
    %36 = arith.extui %35 : tensor<16x16xi8, #blocked1> to tensor<16x16xi16, #blocked1> loc(#loc)
    %37 = arith.shli %36, %cst_10 : tensor<16x16xi16, #blocked1> loc(#loc)
    %38 = arith.ori %34, %37 : tensor<16x16xi16, #blocked1> loc(#loc)
    %39 = arith.extui %32 : tensor<16x16xi8, #blocked1> to tensor<16x16xi16, #blocked1> loc(#loc)
    %40 = arith.shli %39, %cst_9 : tensor<16x16xi16, #blocked1> loc(#loc)
    %41 = arith.andi %19, %cst_8 : tensor<16x16xi8, #blocked1> loc(#loc)
    %42 = arith.extui %41 : tensor<16x16xi8, #blocked1> to tensor<16x16xi16, #blocked1> loc(#loc)
    %43 = arith.shli %42, %cst_7 : tensor<16x16xi16, #blocked1> loc(#loc)
    %44 = arith.ori %40, %43 : tensor<16x16xi16, #blocked1> loc(#loc)
    %45 = arith.andi %31, %cst_6 : tensor<16x16xi8, #blocked1> loc(#loc)
    %46 = arith.extui %45 : tensor<16x16xi8, #blocked1> to tensor<16x16xi32, #blocked1> loc(#loc)
    %47 = arith.cmpi ne, %46, %cst_5 : tensor<16x16xi32, #blocked1> loc(#loc)
    %48 = arith.addi %38, %cst_4 : tensor<16x16xi16, #blocked1> loc(#loc)
    %49 = arith.select %47, %48, %38 : tensor<16x16xi1, #blocked1>, tensor<16x16xi16, #blocked1> loc(#loc)
    %50 = arith.andi %32, %cst_3 : tensor<16x16xi8, #blocked1> loc(#loc)
    %51 = arith.extui %50 : tensor<16x16xi8, #blocked1> to tensor<16x16xi32, #blocked1> loc(#loc)
    %52 = arith.cmpi ne, %51, %cst_5 : tensor<16x16xi32, #blocked1> loc(#loc)
    %53 = arith.addi %44, %cst_4 : tensor<16x16xi16, #blocked1> loc(#loc)
    %54 = arith.select %52, %53, %44 : tensor<16x16xi1, #blocked1>, tensor<16x16xi16, #blocked1> loc(#loc)
    %55 = arith.extui %31 : tensor<16x16xi8, #blocked1> to tensor<16x16xi32, #blocked1> loc(#loc)
    %56 = arith.cmpi eq, %55, %cst_2 : tensor<16x16xi32, #blocked1> loc(#loc)
    %57 = arith.andi %49, %cst_1 : tensor<16x16xi16, #blocked1> loc(#loc)
    %58 = arith.ori %57, %cst_4 : tensor<16x16xi16, #blocked1> loc(#loc)
    %59 = arith.select %56, %58, %49 : tensor<16x16xi1, #blocked1>, tensor<16x16xi16, #blocked1> loc(#loc)
    %60 = arith.extui %32 : tensor<16x16xi8, #blocked1> to tensor<16x16xi32, #blocked1> loc(#loc)
    %61 = arith.cmpi eq, %60, %cst_0 : tensor<16x16xi32, #blocked1> loc(#loc)
    %62 = arith.andi %54, %cst_1 : tensor<16x16xi16, #blocked1> loc(#loc)
    %63 = arith.ori %62, %cst_4 : tensor<16x16xi16, #blocked1> loc(#loc)
    %64 = arith.select %61, %63, %54 : tensor<16x16xi1, #blocked1>, tensor<16x16xi16, #blocked1> loc(#loc)
    %65 = tt.join %59, %64 : tensor<16x16xi16, #blocked1> -> tensor<16x16x2xi16, #blocked2> loc(#loc)
    %66 = tt.reshape %65 : tensor<16x16x2xi16, #blocked2> -> tensor<16x32xi16, #blocked> loc(#loc)
    %67 = tt.bitcast %66 : tensor<16x32xi16, #blocked> -> tensor<16x32xbf16, #blocked> loc(#loc)
    %68 = tt.broadcast %30 : tensor<16x1xbf16, #blocked> -> tensor<16x32xbf16, #blocked> loc(#loc)
    %69 = arith.mulf %67, %68 : tensor<16x32xbf16, #blocked> loc(#loc)
    %70 = arith.extui %27 : tensor<16x1xi8, #blocked> to tensor<16x1xi32, #blocked> loc(#loc)
    %71 = arith.cmpi eq, %70, %cst_17 : tensor<16x1xi32, #blocked> loc(#loc)
    %72 = tt.broadcast %71 : tensor<16x1xi1, #blocked> -> tensor<16x32xi1, #blocked> loc(#loc)
    %73 = arith.select %72, %cst, %69 : tensor<16x32xi1, #blocked>, tensor<16x32xbf16, #blocked> loc(#loc)
    %74 = arith.muli %0, %c512_i32 : i32 loc(#loc)
    %75 = tt.make_range {end = 512 : i32, start = 0 : i32} : tensor<512xi32, #blocked3> loc(#loc)
    %76 = tt.splat %74 : i32 -> tensor<512xi32, #blocked3> loc(#loc)
    %77 = arith.addi %76, %75 : tensor<512xi32, #blocked3> loc(#loc)
    %78 = arith.muli %N, %c32_i32 : i32 loc(#loc)
    %79 = tt.splat %78 : i32 -> tensor<512xi32, #blocked3> loc(#loc)
    %80 = arith.cmpi slt, %77, %79 : tensor<512xi32, #blocked3> loc(#loc)
    %81 = tt.splat %mxfp_ptr : !tt.ptr<bf16> -> tensor<512x!tt.ptr<bf16>, #blocked3> loc(#loc)
    %82 = tt.addptr %81, %77 : tensor<512x!tt.ptr<bf16>, #blocked3>, tensor<512xi32, #blocked3> loc(#loc)
    %83 = tt.reshape %73 : tensor<16x32xbf16, #blocked> -> tensor<512xbf16, #blocked3> loc(#loc)
    tt.store %82, %83, %80 : tensor<512x!tt.ptr<bf16>, #blocked3> loc(#loc)
    tt.return loc(#loc)
  } loc(#loc)
} loc(#loc)
#loc = loc(unknown)


// -----// IR Dump Before Canonicalizer (canonicalize) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 2], threadsPerWarp = [4, 16], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [4, 16], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked2 = #ttg.blocked<{sizePerThread = [1, 1, 2], threadsPerWarp = [4, 16, 1], warpsPerCTA = [4, 1, 1], order = [2, 1, 0]}>
#blocked3 = #ttg.blocked<{sizePerThread = [2], threadsPerWarp = [64], warpsPerCTA = [4], order = [0]}>
#loc1 = loc("x_ptr")
#loc2 = loc("scale_ptr")
#loc3 = loc("mxfp_ptr")
#loc4 = loc("N")
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "hip:gfx950", "ttg.threads-per-warp" = 64 : i32} {
  tt.func public @mxfp_upcast_kernel(%x_ptr: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("x_ptr"), %scale_ptr: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("scale_ptr"), %mxfp_ptr: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("mxfp_ptr"), %N: i32 {tt.divisibility = 16 : i32} loc("N")) attributes {noinline = false} {
    %cst = arith.constant dense<0x7FC0> : tensor<16x32xbf16, #blocked> loc(#loc)
    %c512_i32 = arith.constant 512 : i32 loc(#loc)
    %c32_i32 = arith.constant 32 : i32 loc(#loc)
    %cst_0 = arith.constant dense<16> : tensor<16x16xi32, #blocked1> loc(#loc)
    %cst_1 = arith.constant dense<-32768> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_2 = arith.constant dense<1> : tensor<16x16xi32, #blocked1> loc(#loc)
    %cst_3 = arith.constant dense<96> : tensor<16x16xi8, #blocked1> loc(#loc)
    %cst_4 = arith.constant dense<16128> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_5 = arith.constant dense<0> : tensor<16x16xi32, #blocked1> loc(#loc)
    %cst_6 = arith.constant dense<6> : tensor<16x16xi8, #blocked1> loc(#loc)
    %cst_7 = arith.constant dense<8> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_8 = arith.constant dense<-128> : tensor<16x16xi8, #blocked1> loc(#loc)
    %cst_9 = arith.constant dense<2> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_10 = arith.constant dense<12> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_11 = arith.constant dense<8> : tensor<16x16xi8, #blocked1> loc(#loc)
    %cst_12 = arith.constant dense<6> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_13 = arith.constant dense<112> : tensor<16x16xi8, #blocked1> loc(#loc)
    %cst_14 = arith.constant dense<7> : tensor<16x16xi8, #blocked1> loc(#loc)
    %c256_i32 = arith.constant 256 : i32 loc(#loc)
    %c16_i32 = arith.constant 16 : i32 loc(#loc)
    %cst_15 = arith.constant dense<16> : tensor<16x1xi32, #blocked1> loc(#loc)
    %cst_16 = arith.constant dense<7> : tensor<16x1xi16, #blocked> loc(#loc)
    %cst_17 = arith.constant dense<255> : tensor<16x1xi32, #blocked> loc(#loc)
    %0 = tt.get_program_id x : i32 loc(#loc)
    %1 = arith.muli %0, %c256_i32 : i32 loc(#loc)
    %2 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc)
    %3 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc)
    %4 = tt.expand_dims %2 {axis = 1 : i32} : tensor<16xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> -> tensor<16x1xi32, #blocked1> loc(#loc)
    %5 = tt.expand_dims %3 {axis = 1 : i32} : tensor<16xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<16x1xi32, #blocked> loc(#loc)
    %6 = arith.muli %4, %cst_15 : tensor<16x1xi32, #blocked1> loc(#loc)
    %7 = tt.splat %1 : i32 -> tensor<16x1xi32, #blocked1> loc(#loc)
    %8 = arith.addi %7, %6 : tensor<16x1xi32, #blocked1> loc(#loc)
    %9 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc)
    %10 = tt.expand_dims %9 {axis = 0 : i32} : tensor<16xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x16xi32, #blocked1> loc(#loc)
    %11 = tt.broadcast %8 : tensor<16x1xi32, #blocked1> -> tensor<16x16xi32, #blocked1> loc(#loc)
    %12 = tt.broadcast %10 : tensor<1x16xi32, #blocked1> -> tensor<16x16xi32, #blocked1> loc(#loc)
    %13 = arith.addi %11, %12 : tensor<16x16xi32, #blocked1> loc(#loc)
    %14 = arith.muli %N, %c16_i32 : i32 loc(#loc)
    %15 = tt.splat %14 : i32 -> tensor<16x16xi32, #blocked1> loc(#loc)
    %16 = arith.cmpi slt, %13, %15 : tensor<16x16xi32, #blocked1> loc(#loc)
    %17 = tt.splat %x_ptr : !tt.ptr<i8> -> tensor<16x16x!tt.ptr<i8>, #blocked1> loc(#loc)
    %18 = tt.addptr %17, %13 : tensor<16x16x!tt.ptr<i8>, #blocked1>, tensor<16x16xi32, #blocked1> loc(#loc)
    %19 = tt.load %18, %16 : tensor<16x16x!tt.ptr<i8>, #blocked1> loc(#loc)
    %20 = arith.muli %0, %c16_i32 : i32 loc(#loc)
    %21 = tt.splat %20 : i32 -> tensor<16x1xi32, #blocked> loc(#loc)
    %22 = arith.addi %21, %5 : tensor<16x1xi32, #blocked> loc(#loc)
    %23 = tt.splat %N : i32 -> tensor<16x1xi32, #blocked> loc(#loc)
    %24 = arith.cmpi slt, %22, %23 : tensor<16x1xi32, #blocked> loc(#loc)
    %25 = tt.splat %scale_ptr : !tt.ptr<i8> -> tensor<16x1x!tt.ptr<i8>, #blocked> loc(#loc)
    %26 = tt.addptr %25, %22 : tensor<16x1x!tt.ptr<i8>, #blocked>, tensor<16x1xi32, #blocked> loc(#loc)
    %27 = tt.load %26, %24 : tensor<16x1x!tt.ptr<i8>, #blocked> loc(#loc)
    %28 = arith.extui %27 : tensor<16x1xi8, #blocked> to tensor<16x1xi16, #blocked> loc(#loc)
    %29 = arith.shli %28, %cst_16 : tensor<16x1xi16, #blocked> loc(#loc)
    %30 = tt.bitcast %29 : tensor<16x1xi16, #blocked> -> tensor<16x1xbf16, #blocked> loc(#loc)
    %31 = arith.andi %19, %cst_14 : tensor<16x16xi8, #blocked1> loc(#loc)
    %32 = arith.andi %19, %cst_13 : tensor<16x16xi8, #blocked1> loc(#loc)
    %33 = arith.extui %31 : tensor<16x16xi8, #blocked1> to tensor<16x16xi16, #blocked1> loc(#loc)
    %34 = arith.shli %33, %cst_12 : tensor<16x16xi16, #blocked1> loc(#loc)
    %35 = arith.andi %19, %cst_11 : tensor<16x16xi8, #blocked1> loc(#loc)
    %36 = arith.extui %35 : tensor<16x16xi8, #blocked1> to tensor<16x16xi16, #blocked1> loc(#loc)
    %37 = arith.shli %36, %cst_10 : tensor<16x16xi16, #blocked1> loc(#loc)
    %38 = arith.ori %34, %37 : tensor<16x16xi16, #blocked1> loc(#loc)
    %39 = arith.extui %32 : tensor<16x16xi8, #blocked1> to tensor<16x16xi16, #blocked1> loc(#loc)
    %40 = arith.shli %39, %cst_9 : tensor<16x16xi16, #blocked1> loc(#loc)
    %41 = arith.andi %19, %cst_8 : tensor<16x16xi8, #blocked1> loc(#loc)
    %42 = arith.extui %41 : tensor<16x16xi8, #blocked1> to tensor<16x16xi16, #blocked1> loc(#loc)
    %43 = arith.shli %42, %cst_7 : tensor<16x16xi16, #blocked1> loc(#loc)
    %44 = arith.ori %40, %43 : tensor<16x16xi16, #blocked1> loc(#loc)
    %45 = arith.andi %31, %cst_6 : tensor<16x16xi8, #blocked1> loc(#loc)
    %46 = arith.extui %45 : tensor<16x16xi8, #blocked1> to tensor<16x16xi32, #blocked1> loc(#loc)
    %47 = arith.cmpi ne, %46, %cst_5 : tensor<16x16xi32, #blocked1> loc(#loc)
    %48 = arith.addi %38, %cst_4 : tensor<16x16xi16, #blocked1> loc(#loc)
    %49 = arith.select %47, %48, %38 : tensor<16x16xi1, #blocked1>, tensor<16x16xi16, #blocked1> loc(#loc)
    %50 = arith.andi %32, %cst_3 : tensor<16x16xi8, #blocked1> loc(#loc)
    %51 = arith.extui %50 : tensor<16x16xi8, #blocked1> to tensor<16x16xi32, #blocked1> loc(#loc)
    %52 = arith.cmpi ne, %51, %cst_5 : tensor<16x16xi32, #blocked1> loc(#loc)
    %53 = arith.addi %44, %cst_4 : tensor<16x16xi16, #blocked1> loc(#loc)
    %54 = arith.select %52, %53, %44 : tensor<16x16xi1, #blocked1>, tensor<16x16xi16, #blocked1> loc(#loc)
    %55 = arith.extui %31 : tensor<16x16xi8, #blocked1> to tensor<16x16xi32, #blocked1> loc(#loc)
    %56 = arith.cmpi eq, %55, %cst_2 : tensor<16x16xi32, #blocked1> loc(#loc)
    %57 = arith.andi %49, %cst_1 : tensor<16x16xi16, #blocked1> loc(#loc)
    %58 = arith.ori %57, %cst_4 : tensor<16x16xi16, #blocked1> loc(#loc)
    %59 = arith.select %56, %58, %49 : tensor<16x16xi1, #blocked1>, tensor<16x16xi16, #blocked1> loc(#loc)
    %60 = arith.extui %32 : tensor<16x16xi8, #blocked1> to tensor<16x16xi32, #blocked1> loc(#loc)
    %61 = arith.cmpi eq, %60, %cst_0 : tensor<16x16xi32, #blocked1> loc(#loc)
    %62 = arith.andi %54, %cst_1 : tensor<16x16xi16, #blocked1> loc(#loc)
    %63 = arith.ori %62, %cst_4 : tensor<16x16xi16, #blocked1> loc(#loc)
    %64 = arith.select %61, %63, %54 : tensor<16x16xi1, #blocked1>, tensor<16x16xi16, #blocked1> loc(#loc)
    %65 = tt.join %59, %64 : tensor<16x16xi16, #blocked1> -> tensor<16x16x2xi16, #blocked2> loc(#loc)
    %66 = tt.reshape %65 : tensor<16x16x2xi16, #blocked2> -> tensor<16x32xi16, #blocked> loc(#loc)
    %67 = tt.bitcast %66 : tensor<16x32xi16, #blocked> -> tensor<16x32xbf16, #blocked> loc(#loc)
    %68 = tt.broadcast %30 : tensor<16x1xbf16, #blocked> -> tensor<16x32xbf16, #blocked> loc(#loc)
    %69 = arith.mulf %67, %68 : tensor<16x32xbf16, #blocked> loc(#loc)
    %70 = arith.extui %27 : tensor<16x1xi8, #blocked> to tensor<16x1xi32, #blocked> loc(#loc)
    %71 = arith.cmpi eq, %70, %cst_17 : tensor<16x1xi32, #blocked> loc(#loc)
    %72 = tt.broadcast %71 : tensor<16x1xi1, #blocked> -> tensor<16x32xi1, #blocked> loc(#loc)
    %73 = arith.select %72, %cst, %69 : tensor<16x32xi1, #blocked>, tensor<16x32xbf16, #blocked> loc(#loc)
    %74 = arith.muli %0, %c512_i32 : i32 loc(#loc)
    %75 = tt.make_range {end = 512 : i32, start = 0 : i32} : tensor<512xi32, #blocked3> loc(#loc)
    %76 = tt.splat %74 : i32 -> tensor<512xi32, #blocked3> loc(#loc)
    %77 = arith.addi %76, %75 : tensor<512xi32, #blocked3> loc(#loc)
    %78 = arith.muli %N, %c32_i32 : i32 loc(#loc)
    %79 = tt.splat %78 : i32 -> tensor<512xi32, #blocked3> loc(#loc)
    %80 = arith.cmpi slt, %77, %79 : tensor<512xi32, #blocked3> loc(#loc)
    %81 = tt.splat %mxfp_ptr : !tt.ptr<bf16> -> tensor<512x!tt.ptr<bf16>, #blocked3> loc(#loc)
    %82 = tt.addptr %81, %77 : tensor<512x!tt.ptr<bf16>, #blocked3>, tensor<512xi32, #blocked3> loc(#loc)
    %83 = tt.reshape %73 : tensor<16x32xbf16, #blocked> -> tensor<512xbf16, #blocked3> loc(#loc)
    tt.store %82, %83, %80 : tensor<512x!tt.ptr<bf16>, #blocked3> loc(#loc)
    tt.return loc(#loc)
  } loc(#loc)
} loc(#loc)
#loc = loc(unknown)


// -----// IR Dump Before TritonGPURemoveLayoutConversions (tritongpu-remove-layout-conversions) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 2], threadsPerWarp = [4, 16], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [4, 16], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked2 = #ttg.blocked<{sizePerThread = [1, 1, 2], threadsPerWarp = [4, 16, 1], warpsPerCTA = [4, 1, 1], order = [2, 1, 0]}>
#blocked3 = #ttg.blocked<{sizePerThread = [2], threadsPerWarp = [64], warpsPerCTA = [4], order = [0]}>
#loc1 = loc("x_ptr")
#loc2 = loc("scale_ptr")
#loc3 = loc("mxfp_ptr")
#loc4 = loc("N")
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "hip:gfx950", "ttg.threads-per-warp" = 64 : i32} {
  tt.func public @mxfp_upcast_kernel(%x_ptr: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("x_ptr"), %scale_ptr: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("scale_ptr"), %mxfp_ptr: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("mxfp_ptr"), %N: i32 {tt.divisibility = 16 : i32} loc("N")) attributes {noinline = false} {
    %cst = arith.constant dense<0x7FC0> : tensor<16x32xbf16, #blocked> loc(#loc)
    %c512_i32 = arith.constant 512 : i32 loc(#loc)
    %c32_i32 = arith.constant 32 : i32 loc(#loc)
    %cst_0 = arith.constant dense<16> : tensor<16x16xi32, #blocked1> loc(#loc)
    %cst_1 = arith.constant dense<-32768> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_2 = arith.constant dense<1> : tensor<16x16xi32, #blocked1> loc(#loc)
    %cst_3 = arith.constant dense<96> : tensor<16x16xi8, #blocked1> loc(#loc)
    %cst_4 = arith.constant dense<16128> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_5 = arith.constant dense<0> : tensor<16x16xi32, #blocked1> loc(#loc)
    %cst_6 = arith.constant dense<6> : tensor<16x16xi8, #blocked1> loc(#loc)
    %cst_7 = arith.constant dense<8> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_8 = arith.constant dense<-128> : tensor<16x16xi8, #blocked1> loc(#loc)
    %cst_9 = arith.constant dense<2> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_10 = arith.constant dense<12> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_11 = arith.constant dense<8> : tensor<16x16xi8, #blocked1> loc(#loc)
    %cst_12 = arith.constant dense<6> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_13 = arith.constant dense<112> : tensor<16x16xi8, #blocked1> loc(#loc)
    %cst_14 = arith.constant dense<7> : tensor<16x16xi8, #blocked1> loc(#loc)
    %c256_i32 = arith.constant 256 : i32 loc(#loc)
    %c16_i32 = arith.constant 16 : i32 loc(#loc)
    %cst_15 = arith.constant dense<16> : tensor<16x1xi32, #blocked1> loc(#loc)
    %cst_16 = arith.constant dense<7> : tensor<16x1xi16, #blocked> loc(#loc)
    %cst_17 = arith.constant dense<255> : tensor<16x1xi32, #blocked> loc(#loc)
    %0 = tt.get_program_id x : i32 loc(#loc)
    %1 = arith.muli %0, %c256_i32 : i32 loc(#loc)
    %2 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc)
    %3 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc)
    %4 = tt.expand_dims %2 {axis = 1 : i32} : tensor<16xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> -> tensor<16x1xi32, #blocked1> loc(#loc)
    %5 = tt.expand_dims %3 {axis = 1 : i32} : tensor<16xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<16x1xi32, #blocked> loc(#loc)
    %6 = arith.muli %4, %cst_15 : tensor<16x1xi32, #blocked1> loc(#loc)
    %7 = tt.splat %1 : i32 -> tensor<16x1xi32, #blocked1> loc(#loc)
    %8 = arith.addi %7, %6 : tensor<16x1xi32, #blocked1> loc(#loc)
    %9 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc)
    %10 = tt.expand_dims %9 {axis = 0 : i32} : tensor<16xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x16xi32, #blocked1> loc(#loc)
    %11 = tt.broadcast %8 : tensor<16x1xi32, #blocked1> -> tensor<16x16xi32, #blocked1> loc(#loc)
    %12 = tt.broadcast %10 : tensor<1x16xi32, #blocked1> -> tensor<16x16xi32, #blocked1> loc(#loc)
    %13 = arith.addi %11, %12 : tensor<16x16xi32, #blocked1> loc(#loc)
    %14 = arith.muli %N, %c16_i32 : i32 loc(#loc)
    %15 = tt.splat %14 : i32 -> tensor<16x16xi32, #blocked1> loc(#loc)
    %16 = arith.cmpi slt, %13, %15 : tensor<16x16xi32, #blocked1> loc(#loc)
    %17 = tt.splat %x_ptr : !tt.ptr<i8> -> tensor<16x16x!tt.ptr<i8>, #blocked1> loc(#loc)
    %18 = tt.addptr %17, %13 : tensor<16x16x!tt.ptr<i8>, #blocked1>, tensor<16x16xi32, #blocked1> loc(#loc)
    %19 = tt.load %18, %16 : tensor<16x16x!tt.ptr<i8>, #blocked1> loc(#loc)
    %20 = arith.muli %0, %c16_i32 : i32 loc(#loc)
    %21 = tt.splat %20 : i32 -> tensor<16x1xi32, #blocked> loc(#loc)
    %22 = arith.addi %21, %5 : tensor<16x1xi32, #blocked> loc(#loc)
    %23 = tt.splat %N : i32 -> tensor<16x1xi32, #blocked> loc(#loc)
    %24 = arith.cmpi slt, %22, %23 : tensor<16x1xi32, #blocked> loc(#loc)
    %25 = tt.splat %scale_ptr : !tt.ptr<i8> -> tensor<16x1x!tt.ptr<i8>, #blocked> loc(#loc)
    %26 = tt.addptr %25, %22 : tensor<16x1x!tt.ptr<i8>, #blocked>, tensor<16x1xi32, #blocked> loc(#loc)
    %27 = tt.load %26, %24 : tensor<16x1x!tt.ptr<i8>, #blocked> loc(#loc)
    %28 = arith.extui %27 : tensor<16x1xi8, #blocked> to tensor<16x1xi16, #blocked> loc(#loc)
    %29 = arith.shli %28, %cst_16 : tensor<16x1xi16, #blocked> loc(#loc)
    %30 = tt.bitcast %29 : tensor<16x1xi16, #blocked> -> tensor<16x1xbf16, #blocked> loc(#loc)
    %31 = arith.andi %19, %cst_14 : tensor<16x16xi8, #blocked1> loc(#loc)
    %32 = arith.andi %19, %cst_13 : tensor<16x16xi8, #blocked1> loc(#loc)
    %33 = arith.extui %31 : tensor<16x16xi8, #blocked1> to tensor<16x16xi16, #blocked1> loc(#loc)
    %34 = arith.shli %33, %cst_12 : tensor<16x16xi16, #blocked1> loc(#loc)
    %35 = arith.andi %19, %cst_11 : tensor<16x16xi8, #blocked1> loc(#loc)
    %36 = arith.extui %35 : tensor<16x16xi8, #blocked1> to tensor<16x16xi16, #blocked1> loc(#loc)
    %37 = arith.shli %36, %cst_10 : tensor<16x16xi16, #blocked1> loc(#loc)
    %38 = arith.ori %34, %37 : tensor<16x16xi16, #blocked1> loc(#loc)
    %39 = arith.extui %32 : tensor<16x16xi8, #blocked1> to tensor<16x16xi16, #blocked1> loc(#loc)
    %40 = arith.shli %39, %cst_9 : tensor<16x16xi16, #blocked1> loc(#loc)
    %41 = arith.andi %19, %cst_8 : tensor<16x16xi8, #blocked1> loc(#loc)
    %42 = arith.extui %41 : tensor<16x16xi8, #blocked1> to tensor<16x16xi16, #blocked1> loc(#loc)
    %43 = arith.shli %42, %cst_7 : tensor<16x16xi16, #blocked1> loc(#loc)
    %44 = arith.ori %40, %43 : tensor<16x16xi16, #blocked1> loc(#loc)
    %45 = arith.andi %31, %cst_6 : tensor<16x16xi8, #blocked1> loc(#loc)
    %46 = arith.extui %45 : tensor<16x16xi8, #blocked1> to tensor<16x16xi32, #blocked1> loc(#loc)
    %47 = arith.cmpi ne, %46, %cst_5 : tensor<16x16xi32, #blocked1> loc(#loc)
    %48 = arith.addi %38, %cst_4 : tensor<16x16xi16, #blocked1> loc(#loc)
    %49 = arith.select %47, %48, %38 : tensor<16x16xi1, #blocked1>, tensor<16x16xi16, #blocked1> loc(#loc)
    %50 = arith.andi %32, %cst_3 : tensor<16x16xi8, #blocked1> loc(#loc)
    %51 = arith.extui %50 : tensor<16x16xi8, #blocked1> to tensor<16x16xi32, #blocked1> loc(#loc)
    %52 = arith.cmpi ne, %51, %cst_5 : tensor<16x16xi32, #blocked1> loc(#loc)
    %53 = arith.addi %44, %cst_4 : tensor<16x16xi16, #blocked1> loc(#loc)
    %54 = arith.select %52, %53, %44 : tensor<16x16xi1, #blocked1>, tensor<16x16xi16, #blocked1> loc(#loc)
    %55 = arith.extui %31 : tensor<16x16xi8, #blocked1> to tensor<16x16xi32, #blocked1> loc(#loc)
    %56 = arith.cmpi eq, %55, %cst_2 : tensor<16x16xi32, #blocked1> loc(#loc)
    %57 = arith.andi %49, %cst_1 : tensor<16x16xi16, #blocked1> loc(#loc)
    %58 = arith.ori %57, %cst_4 : tensor<16x16xi16, #blocked1> loc(#loc)
    %59 = arith.select %56, %58, %49 : tensor<16x16xi1, #blocked1>, tensor<16x16xi16, #blocked1> loc(#loc)
    %60 = arith.extui %32 : tensor<16x16xi8, #blocked1> to tensor<16x16xi32, #blocked1> loc(#loc)
    %61 = arith.cmpi eq, %60, %cst_0 : tensor<16x16xi32, #blocked1> loc(#loc)
    %62 = arith.andi %54, %cst_1 : tensor<16x16xi16, #blocked1> loc(#loc)
    %63 = arith.ori %62, %cst_4 : tensor<16x16xi16, #blocked1> loc(#loc)
    %64 = arith.select %61, %63, %54 : tensor<16x16xi1, #blocked1>, tensor<16x16xi16, #blocked1> loc(#loc)
    %65 = tt.join %59, %64 : tensor<16x16xi16, #blocked1> -> tensor<16x16x2xi16, #blocked2> loc(#loc)
    %66 = tt.reshape %65 : tensor<16x16x2xi16, #blocked2> -> tensor<16x32xi16, #blocked> loc(#loc)
    %67 = tt.bitcast %66 : tensor<16x32xi16, #blocked> -> tensor<16x32xbf16, #blocked> loc(#loc)
    %68 = tt.broadcast %30 : tensor<16x1xbf16, #blocked> -> tensor<16x32xbf16, #blocked> loc(#loc)
    %69 = arith.mulf %67, %68 : tensor<16x32xbf16, #blocked> loc(#loc)
    %70 = arith.extui %27 : tensor<16x1xi8, #blocked> to tensor<16x1xi32, #blocked> loc(#loc)
    %71 = arith.cmpi eq, %70, %cst_17 : tensor<16x1xi32, #blocked> loc(#loc)
    %72 = tt.broadcast %71 : tensor<16x1xi1, #blocked> -> tensor<16x32xi1, #blocked> loc(#loc)
    %73 = arith.select %72, %cst, %69 : tensor<16x32xi1, #blocked>, tensor<16x32xbf16, #blocked> loc(#loc)
    %74 = arith.muli %0, %c512_i32 : i32 loc(#loc)
    %75 = tt.make_range {end = 512 : i32, start = 0 : i32} : tensor<512xi32, #blocked3> loc(#loc)
    %76 = tt.splat %74 : i32 -> tensor<512xi32, #blocked3> loc(#loc)
    %77 = arith.addi %76, %75 : tensor<512xi32, #blocked3> loc(#loc)
    %78 = arith.muli %N, %c32_i32 : i32 loc(#loc)
    %79 = tt.splat %78 : i32 -> tensor<512xi32, #blocked3> loc(#loc)
    %80 = arith.cmpi slt, %77, %79 : tensor<512xi32, #blocked3> loc(#loc)
    %81 = tt.splat %mxfp_ptr : !tt.ptr<bf16> -> tensor<512x!tt.ptr<bf16>, #blocked3> loc(#loc)
    %82 = tt.addptr %81, %77 : tensor<512x!tt.ptr<bf16>, #blocked3>, tensor<512xi32, #blocked3> loc(#loc)
    %83 = tt.reshape %73 : tensor<16x32xbf16, #blocked> -> tensor<512xbf16, #blocked3> loc(#loc)
    tt.store %82, %83, %80 : tensor<512x!tt.ptr<bf16>, #blocked3> loc(#loc)
    tt.return loc(#loc)
  } loc(#loc)
} loc(#loc)
#loc = loc(unknown)


// -----// IR Dump Before TritonGPUReduceDataDuplication (tritongpu-reduce-data-duplication) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 2], threadsPerWarp = [4, 16], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [4, 16], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked2 = #ttg.blocked<{sizePerThread = [1, 1, 2], threadsPerWarp = [4, 16, 1], warpsPerCTA = [4, 1, 1], order = [2, 1, 0]}>
#blocked3 = #ttg.blocked<{sizePerThread = [2], threadsPerWarp = [64], warpsPerCTA = [4], order = [0]}>
#loc1 = loc("x_ptr")
#loc2 = loc("scale_ptr")
#loc3 = loc("mxfp_ptr")
#loc4 = loc("N")
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "hip:gfx950", "ttg.threads-per-warp" = 64 : i32} {
  tt.func public @mxfp_upcast_kernel(%x_ptr: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("x_ptr"), %scale_ptr: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("scale_ptr"), %mxfp_ptr: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("mxfp_ptr"), %N: i32 {tt.divisibility = 16 : i32} loc("N")) attributes {noinline = false} {
    %cst = arith.constant dense<0x7FC0> : tensor<16x32xbf16, #blocked> loc(#loc)
    %c512_i32 = arith.constant 512 : i32 loc(#loc)
    %c32_i32 = arith.constant 32 : i32 loc(#loc)
    %cst_0 = arith.constant dense<16> : tensor<16x16xi32, #blocked1> loc(#loc)
    %cst_1 = arith.constant dense<-32768> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_2 = arith.constant dense<1> : tensor<16x16xi32, #blocked1> loc(#loc)
    %cst_3 = arith.constant dense<96> : tensor<16x16xi8, #blocked1> loc(#loc)
    %cst_4 = arith.constant dense<16128> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_5 = arith.constant dense<0> : tensor<16x16xi32, #blocked1> loc(#loc)
    %cst_6 = arith.constant dense<6> : tensor<16x16xi8, #blocked1> loc(#loc)
    %cst_7 = arith.constant dense<8> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_8 = arith.constant dense<-128> : tensor<16x16xi8, #blocked1> loc(#loc)
    %cst_9 = arith.constant dense<2> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_10 = arith.constant dense<12> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_11 = arith.constant dense<8> : tensor<16x16xi8, #blocked1> loc(#loc)
    %cst_12 = arith.constant dense<6> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_13 = arith.constant dense<112> : tensor<16x16xi8, #blocked1> loc(#loc)
    %cst_14 = arith.constant dense<7> : tensor<16x16xi8, #blocked1> loc(#loc)
    %c256_i32 = arith.constant 256 : i32 loc(#loc)
    %c16_i32 = arith.constant 16 : i32 loc(#loc)
    %cst_15 = arith.constant dense<16> : tensor<16x1xi32, #blocked1> loc(#loc)
    %cst_16 = arith.constant dense<7> : tensor<16x1xi16, #blocked> loc(#loc)
    %cst_17 = arith.constant dense<255> : tensor<16x1xi32, #blocked> loc(#loc)
    %0 = tt.get_program_id x : i32 loc(#loc)
    %1 = arith.muli %0, %c256_i32 : i32 loc(#loc)
    %2 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc)
    %3 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc)
    %4 = tt.expand_dims %2 {axis = 1 : i32} : tensor<16xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> -> tensor<16x1xi32, #blocked1> loc(#loc)
    %5 = tt.expand_dims %3 {axis = 1 : i32} : tensor<16xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<16x1xi32, #blocked> loc(#loc)
    %6 = arith.muli %4, %cst_15 : tensor<16x1xi32, #blocked1> loc(#loc)
    %7 = tt.splat %1 : i32 -> tensor<16x1xi32, #blocked1> loc(#loc)
    %8 = arith.addi %7, %6 : tensor<16x1xi32, #blocked1> loc(#loc)
    %9 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc)
    %10 = tt.expand_dims %9 {axis = 0 : i32} : tensor<16xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x16xi32, #blocked1> loc(#loc)
    %11 = tt.broadcast %8 : tensor<16x1xi32, #blocked1> -> tensor<16x16xi32, #blocked1> loc(#loc)
    %12 = tt.broadcast %10 : tensor<1x16xi32, #blocked1> -> tensor<16x16xi32, #blocked1> loc(#loc)
    %13 = arith.addi %11, %12 : tensor<16x16xi32, #blocked1> loc(#loc)
    %14 = arith.muli %N, %c16_i32 : i32 loc(#loc)
    %15 = tt.splat %14 : i32 -> tensor<16x16xi32, #blocked1> loc(#loc)
    %16 = arith.cmpi slt, %13, %15 : tensor<16x16xi32, #blocked1> loc(#loc)
    %17 = tt.splat %x_ptr : !tt.ptr<i8> -> tensor<16x16x!tt.ptr<i8>, #blocked1> loc(#loc)
    %18 = tt.addptr %17, %13 : tensor<16x16x!tt.ptr<i8>, #blocked1>, tensor<16x16xi32, #blocked1> loc(#loc)
    %19 = tt.load %18, %16 : tensor<16x16x!tt.ptr<i8>, #blocked1> loc(#loc)
    %20 = arith.muli %0, %c16_i32 : i32 loc(#loc)
    %21 = tt.splat %20 : i32 -> tensor<16x1xi32, #blocked> loc(#loc)
    %22 = arith.addi %21, %5 : tensor<16x1xi32, #blocked> loc(#loc)
    %23 = tt.splat %N : i32 -> tensor<16x1xi32, #blocked> loc(#loc)
    %24 = arith.cmpi slt, %22, %23 : tensor<16x1xi32, #blocked> loc(#loc)
    %25 = tt.splat %scale_ptr : !tt.ptr<i8> -> tensor<16x1x!tt.ptr<i8>, #blocked> loc(#loc)
    %26 = tt.addptr %25, %22 : tensor<16x1x!tt.ptr<i8>, #blocked>, tensor<16x1xi32, #blocked> loc(#loc)
    %27 = tt.load %26, %24 : tensor<16x1x!tt.ptr<i8>, #blocked> loc(#loc)
    %28 = arith.extui %27 : tensor<16x1xi8, #blocked> to tensor<16x1xi16, #blocked> loc(#loc)
    %29 = arith.shli %28, %cst_16 : tensor<16x1xi16, #blocked> loc(#loc)
    %30 = tt.bitcast %29 : tensor<16x1xi16, #blocked> -> tensor<16x1xbf16, #blocked> loc(#loc)
    %31 = arith.andi %19, %cst_14 : tensor<16x16xi8, #blocked1> loc(#loc)
    %32 = arith.andi %19, %cst_13 : tensor<16x16xi8, #blocked1> loc(#loc)
    %33 = arith.extui %31 : tensor<16x16xi8, #blocked1> to tensor<16x16xi16, #blocked1> loc(#loc)
    %34 = arith.shli %33, %cst_12 : tensor<16x16xi16, #blocked1> loc(#loc)
    %35 = arith.andi %19, %cst_11 : tensor<16x16xi8, #blocked1> loc(#loc)
    %36 = arith.extui %35 : tensor<16x16xi8, #blocked1> to tensor<16x16xi16, #blocked1> loc(#loc)
    %37 = arith.shli %36, %cst_10 : tensor<16x16xi16, #blocked1> loc(#loc)
    %38 = arith.ori %34, %37 : tensor<16x16xi16, #blocked1> loc(#loc)
    %39 = arith.extui %32 : tensor<16x16xi8, #blocked1> to tensor<16x16xi16, #blocked1> loc(#loc)
    %40 = arith.shli %39, %cst_9 : tensor<16x16xi16, #blocked1> loc(#loc)
    %41 = arith.andi %19, %cst_8 : tensor<16x16xi8, #blocked1> loc(#loc)
    %42 = arith.extui %41 : tensor<16x16xi8, #blocked1> to tensor<16x16xi16, #blocked1> loc(#loc)
    %43 = arith.shli %42, %cst_7 : tensor<16x16xi16, #blocked1> loc(#loc)
    %44 = arith.ori %40, %43 : tensor<16x16xi16, #blocked1> loc(#loc)
    %45 = arith.andi %31, %cst_6 : tensor<16x16xi8, #blocked1> loc(#loc)
    %46 = arith.extui %45 : tensor<16x16xi8, #blocked1> to tensor<16x16xi32, #blocked1> loc(#loc)
    %47 = arith.cmpi ne, %46, %cst_5 : tensor<16x16xi32, #blocked1> loc(#loc)
    %48 = arith.addi %38, %cst_4 : tensor<16x16xi16, #blocked1> loc(#loc)
    %49 = arith.select %47, %48, %38 : tensor<16x16xi1, #blocked1>, tensor<16x16xi16, #blocked1> loc(#loc)
    %50 = arith.andi %32, %cst_3 : tensor<16x16xi8, #blocked1> loc(#loc)
    %51 = arith.extui %50 : tensor<16x16xi8, #blocked1> to tensor<16x16xi32, #blocked1> loc(#loc)
    %52 = arith.cmpi ne, %51, %cst_5 : tensor<16x16xi32, #blocked1> loc(#loc)
    %53 = arith.addi %44, %cst_4 : tensor<16x16xi16, #blocked1> loc(#loc)
    %54 = arith.select %52, %53, %44 : tensor<16x16xi1, #blocked1>, tensor<16x16xi16, #blocked1> loc(#loc)
    %55 = arith.extui %31 : tensor<16x16xi8, #blocked1> to tensor<16x16xi32, #blocked1> loc(#loc)
    %56 = arith.cmpi eq, %55, %cst_2 : tensor<16x16xi32, #blocked1> loc(#loc)
    %57 = arith.andi %49, %cst_1 : tensor<16x16xi16, #blocked1> loc(#loc)
    %58 = arith.ori %57, %cst_4 : tensor<16x16xi16, #blocked1> loc(#loc)
    %59 = arith.select %56, %58, %49 : tensor<16x16xi1, #blocked1>, tensor<16x16xi16, #blocked1> loc(#loc)
    %60 = arith.extui %32 : tensor<16x16xi8, #blocked1> to tensor<16x16xi32, #blocked1> loc(#loc)
    %61 = arith.cmpi eq, %60, %cst_0 : tensor<16x16xi32, #blocked1> loc(#loc)
    %62 = arith.andi %54, %cst_1 : tensor<16x16xi16, #blocked1> loc(#loc)
    %63 = arith.ori %62, %cst_4 : tensor<16x16xi16, #blocked1> loc(#loc)
    %64 = arith.select %61, %63, %54 : tensor<16x16xi1, #blocked1>, tensor<16x16xi16, #blocked1> loc(#loc)
    %65 = tt.join %59, %64 : tensor<16x16xi16, #blocked1> -> tensor<16x16x2xi16, #blocked2> loc(#loc)
    %66 = tt.reshape %65 : tensor<16x16x2xi16, #blocked2> -> tensor<16x32xi16, #blocked> loc(#loc)
    %67 = tt.bitcast %66 : tensor<16x32xi16, #blocked> -> tensor<16x32xbf16, #blocked> loc(#loc)
    %68 = tt.broadcast %30 : tensor<16x1xbf16, #blocked> -> tensor<16x32xbf16, #blocked> loc(#loc)
    %69 = arith.mulf %67, %68 : tensor<16x32xbf16, #blocked> loc(#loc)
    %70 = arith.extui %27 : tensor<16x1xi8, #blocked> to tensor<16x1xi32, #blocked> loc(#loc)
    %71 = arith.cmpi eq, %70, %cst_17 : tensor<16x1xi32, #blocked> loc(#loc)
    %72 = tt.broadcast %71 : tensor<16x1xi1, #blocked> -> tensor<16x32xi1, #blocked> loc(#loc)
    %73 = arith.select %72, %cst, %69 : tensor<16x32xi1, #blocked>, tensor<16x32xbf16, #blocked> loc(#loc)
    %74 = arith.muli %0, %c512_i32 : i32 loc(#loc)
    %75 = tt.make_range {end = 512 : i32, start = 0 : i32} : tensor<512xi32, #blocked3> loc(#loc)
    %76 = tt.splat %74 : i32 -> tensor<512xi32, #blocked3> loc(#loc)
    %77 = arith.addi %76, %75 : tensor<512xi32, #blocked3> loc(#loc)
    %78 = arith.muli %N, %c32_i32 : i32 loc(#loc)
    %79 = tt.splat %78 : i32 -> tensor<512xi32, #blocked3> loc(#loc)
    %80 = arith.cmpi slt, %77, %79 : tensor<512xi32, #blocked3> loc(#loc)
    %81 = tt.splat %mxfp_ptr : !tt.ptr<bf16> -> tensor<512x!tt.ptr<bf16>, #blocked3> loc(#loc)
    %82 = tt.addptr %81, %77 : tensor<512x!tt.ptr<bf16>, #blocked3>, tensor<512xi32, #blocked3> loc(#loc)
    %83 = tt.reshape %73 : tensor<16x32xbf16, #blocked> -> tensor<512xbf16, #blocked3> loc(#loc)
    tt.store %82, %83, %80 : tensor<512x!tt.ptr<bf16>, #blocked3> loc(#loc)
    tt.return loc(#loc)
  } loc(#loc)
} loc(#loc)
#loc = loc(unknown)


// -----// IR Dump Before TritonAMDGPUReorderInstructions (tritonamdgpu-reorder-instructions) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 2], threadsPerWarp = [4, 16], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [4, 16], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked2 = #ttg.blocked<{sizePerThread = [1, 1, 2], threadsPerWarp = [4, 16, 1], warpsPerCTA = [4, 1, 1], order = [2, 1, 0]}>
#blocked3 = #ttg.blocked<{sizePerThread = [2], threadsPerWarp = [64], warpsPerCTA = [4], order = [0]}>
#loc1 = loc("x_ptr")
#loc2 = loc("scale_ptr")
#loc3 = loc("mxfp_ptr")
#loc4 = loc("N")
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "hip:gfx950", "ttg.threads-per-warp" = 64 : i32} {
  tt.func public @mxfp_upcast_kernel(%x_ptr: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("x_ptr"), %scale_ptr: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("scale_ptr"), %mxfp_ptr: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("mxfp_ptr"), %N: i32 {tt.divisibility = 16 : i32} loc("N")) attributes {noinline = false} {
    %cst = arith.constant dense<0x7FC0> : tensor<16x32xbf16, #blocked> loc(#loc)
    %c512_i32 = arith.constant 512 : i32 loc(#loc)
    %c32_i32 = arith.constant 32 : i32 loc(#loc)
    %cst_0 = arith.constant dense<16> : tensor<16x16xi32, #blocked1> loc(#loc)
    %cst_1 = arith.constant dense<-32768> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_2 = arith.constant dense<1> : tensor<16x16xi32, #blocked1> loc(#loc)
    %cst_3 = arith.constant dense<96> : tensor<16x16xi8, #blocked1> loc(#loc)
    %cst_4 = arith.constant dense<16128> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_5 = arith.constant dense<0> : tensor<16x16xi32, #blocked1> loc(#loc)
    %cst_6 = arith.constant dense<6> : tensor<16x16xi8, #blocked1> loc(#loc)
    %cst_7 = arith.constant dense<8> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_8 = arith.constant dense<-128> : tensor<16x16xi8, #blocked1> loc(#loc)
    %cst_9 = arith.constant dense<2> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_10 = arith.constant dense<12> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_11 = arith.constant dense<8> : tensor<16x16xi8, #blocked1> loc(#loc)
    %cst_12 = arith.constant dense<6> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_13 = arith.constant dense<112> : tensor<16x16xi8, #blocked1> loc(#loc)
    %cst_14 = arith.constant dense<7> : tensor<16x16xi8, #blocked1> loc(#loc)
    %c256_i32 = arith.constant 256 : i32 loc(#loc)
    %c16_i32 = arith.constant 16 : i32 loc(#loc)
    %cst_15 = arith.constant dense<16> : tensor<16x1xi32, #blocked1> loc(#loc)
    %cst_16 = arith.constant dense<7> : tensor<16x1xi16, #blocked> loc(#loc)
    %cst_17 = arith.constant dense<255> : tensor<16x1xi32, #blocked> loc(#loc)
    %0 = tt.get_program_id x : i32 loc(#loc)
    %1 = arith.muli %0, %c256_i32 : i32 loc(#loc)
    %2 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc)
    %3 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc)
    %4 = tt.expand_dims %2 {axis = 1 : i32} : tensor<16xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> -> tensor<16x1xi32, #blocked1> loc(#loc)
    %5 = tt.expand_dims %3 {axis = 1 : i32} : tensor<16xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<16x1xi32, #blocked> loc(#loc)
    %6 = arith.muli %4, %cst_15 : tensor<16x1xi32, #blocked1> loc(#loc)
    %7 = tt.splat %1 : i32 -> tensor<16x1xi32, #blocked1> loc(#loc)
    %8 = arith.addi %7, %6 : tensor<16x1xi32, #blocked1> loc(#loc)
    %9 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc)
    %10 = tt.expand_dims %9 {axis = 0 : i32} : tensor<16xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x16xi32, #blocked1> loc(#loc)
    %11 = tt.broadcast %8 : tensor<16x1xi32, #blocked1> -> tensor<16x16xi32, #blocked1> loc(#loc)
    %12 = tt.broadcast %10 : tensor<1x16xi32, #blocked1> -> tensor<16x16xi32, #blocked1> loc(#loc)
    %13 = arith.addi %11, %12 : tensor<16x16xi32, #blocked1> loc(#loc)
    %14 = arith.muli %N, %c16_i32 : i32 loc(#loc)
    %15 = tt.splat %14 : i32 -> tensor<16x16xi32, #blocked1> loc(#loc)
    %16 = arith.cmpi slt, %13, %15 : tensor<16x16xi32, #blocked1> loc(#loc)
    %17 = tt.splat %x_ptr : !tt.ptr<i8> -> tensor<16x16x!tt.ptr<i8>, #blocked1> loc(#loc)
    %18 = tt.addptr %17, %13 : tensor<16x16x!tt.ptr<i8>, #blocked1>, tensor<16x16xi32, #blocked1> loc(#loc)
    %19 = tt.load %18, %16 : tensor<16x16x!tt.ptr<i8>, #blocked1> loc(#loc)
    %20 = arith.muli %0, %c16_i32 : i32 loc(#loc)
    %21 = tt.splat %20 : i32 -> tensor<16x1xi32, #blocked> loc(#loc)
    %22 = arith.addi %21, %5 : tensor<16x1xi32, #blocked> loc(#loc)
    %23 = tt.splat %N : i32 -> tensor<16x1xi32, #blocked> loc(#loc)
    %24 = arith.cmpi slt, %22, %23 : tensor<16x1xi32, #blocked> loc(#loc)
    %25 = tt.splat %scale_ptr : !tt.ptr<i8> -> tensor<16x1x!tt.ptr<i8>, #blocked> loc(#loc)
    %26 = tt.addptr %25, %22 : tensor<16x1x!tt.ptr<i8>, #blocked>, tensor<16x1xi32, #blocked> loc(#loc)
    %27 = tt.load %26, %24 : tensor<16x1x!tt.ptr<i8>, #blocked> loc(#loc)
    %28 = arith.extui %27 : tensor<16x1xi8, #blocked> to tensor<16x1xi16, #blocked> loc(#loc)
    %29 = arith.shli %28, %cst_16 : tensor<16x1xi16, #blocked> loc(#loc)
    %30 = tt.bitcast %29 : tensor<16x1xi16, #blocked> -> tensor<16x1xbf16, #blocked> loc(#loc)
    %31 = arith.andi %19, %cst_14 : tensor<16x16xi8, #blocked1> loc(#loc)
    %32 = arith.andi %19, %cst_13 : tensor<16x16xi8, #blocked1> loc(#loc)
    %33 = arith.extui %31 : tensor<16x16xi8, #blocked1> to tensor<16x16xi16, #blocked1> loc(#loc)
    %34 = arith.shli %33, %cst_12 : tensor<16x16xi16, #blocked1> loc(#loc)
    %35 = arith.andi %19, %cst_11 : tensor<16x16xi8, #blocked1> loc(#loc)
    %36 = arith.extui %35 : tensor<16x16xi8, #blocked1> to tensor<16x16xi16, #blocked1> loc(#loc)
    %37 = arith.shli %36, %cst_10 : tensor<16x16xi16, #blocked1> loc(#loc)
    %38 = arith.ori %34, %37 : tensor<16x16xi16, #blocked1> loc(#loc)
    %39 = arith.extui %32 : tensor<16x16xi8, #blocked1> to tensor<16x16xi16, #blocked1> loc(#loc)
    %40 = arith.shli %39, %cst_9 : tensor<16x16xi16, #blocked1> loc(#loc)
    %41 = arith.andi %19, %cst_8 : tensor<16x16xi8, #blocked1> loc(#loc)
    %42 = arith.extui %41 : tensor<16x16xi8, #blocked1> to tensor<16x16xi16, #blocked1> loc(#loc)
    %43 = arith.shli %42, %cst_7 : tensor<16x16xi16, #blocked1> loc(#loc)
    %44 = arith.ori %40, %43 : tensor<16x16xi16, #blocked1> loc(#loc)
    %45 = arith.andi %31, %cst_6 : tensor<16x16xi8, #blocked1> loc(#loc)
    %46 = arith.extui %45 : tensor<16x16xi8, #blocked1> to tensor<16x16xi32, #blocked1> loc(#loc)
    %47 = arith.cmpi ne, %46, %cst_5 : tensor<16x16xi32, #blocked1> loc(#loc)
    %48 = arith.addi %38, %cst_4 : tensor<16x16xi16, #blocked1> loc(#loc)
    %49 = arith.select %47, %48, %38 : tensor<16x16xi1, #blocked1>, tensor<16x16xi16, #blocked1> loc(#loc)
    %50 = arith.andi %32, %cst_3 : tensor<16x16xi8, #blocked1> loc(#loc)
    %51 = arith.extui %50 : tensor<16x16xi8, #blocked1> to tensor<16x16xi32, #blocked1> loc(#loc)
    %52 = arith.cmpi ne, %51, %cst_5 : tensor<16x16xi32, #blocked1> loc(#loc)
    %53 = arith.addi %44, %cst_4 : tensor<16x16xi16, #blocked1> loc(#loc)
    %54 = arith.select %52, %53, %44 : tensor<16x16xi1, #blocked1>, tensor<16x16xi16, #blocked1> loc(#loc)
    %55 = arith.extui %31 : tensor<16x16xi8, #blocked1> to tensor<16x16xi32, #blocked1> loc(#loc)
    %56 = arith.cmpi eq, %55, %cst_2 : tensor<16x16xi32, #blocked1> loc(#loc)
    %57 = arith.andi %49, %cst_1 : tensor<16x16xi16, #blocked1> loc(#loc)
    %58 = arith.ori %57, %cst_4 : tensor<16x16xi16, #blocked1> loc(#loc)
    %59 = arith.select %56, %58, %49 : tensor<16x16xi1, #blocked1>, tensor<16x16xi16, #blocked1> loc(#loc)
    %60 = arith.extui %32 : tensor<16x16xi8, #blocked1> to tensor<16x16xi32, #blocked1> loc(#loc)
    %61 = arith.cmpi eq, %60, %cst_0 : tensor<16x16xi32, #blocked1> loc(#loc)
    %62 = arith.andi %54, %cst_1 : tensor<16x16xi16, #blocked1> loc(#loc)
    %63 = arith.ori %62, %cst_4 : tensor<16x16xi16, #blocked1> loc(#loc)
    %64 = arith.select %61, %63, %54 : tensor<16x16xi1, #blocked1>, tensor<16x16xi16, #blocked1> loc(#loc)
    %65 = tt.join %59, %64 : tensor<16x16xi16, #blocked1> -> tensor<16x16x2xi16, #blocked2> loc(#loc)
    %66 = tt.reshape %65 : tensor<16x16x2xi16, #blocked2> -> tensor<16x32xi16, #blocked> loc(#loc)
    %67 = tt.bitcast %66 : tensor<16x32xi16, #blocked> -> tensor<16x32xbf16, #blocked> loc(#loc)
    %68 = tt.broadcast %30 : tensor<16x1xbf16, #blocked> -> tensor<16x32xbf16, #blocked> loc(#loc)
    %69 = arith.mulf %67, %68 : tensor<16x32xbf16, #blocked> loc(#loc)
    %70 = arith.extui %27 : tensor<16x1xi8, #blocked> to tensor<16x1xi32, #blocked> loc(#loc)
    %71 = arith.cmpi eq, %70, %cst_17 : tensor<16x1xi32, #blocked> loc(#loc)
    %72 = tt.broadcast %71 : tensor<16x1xi1, #blocked> -> tensor<16x32xi1, #blocked> loc(#loc)
    %73 = arith.select %72, %cst, %69 : tensor<16x32xi1, #blocked>, tensor<16x32xbf16, #blocked> loc(#loc)
    %74 = arith.muli %0, %c512_i32 : i32 loc(#loc)
    %75 = tt.make_range {end = 512 : i32, start = 0 : i32} : tensor<512xi32, #blocked3> loc(#loc)
    %76 = tt.splat %74 : i32 -> tensor<512xi32, #blocked3> loc(#loc)
    %77 = arith.addi %76, %75 : tensor<512xi32, #blocked3> loc(#loc)
    %78 = arith.muli %N, %c32_i32 : i32 loc(#loc)
    %79 = tt.splat %78 : i32 -> tensor<512xi32, #blocked3> loc(#loc)
    %80 = arith.cmpi slt, %77, %79 : tensor<512xi32, #blocked3> loc(#loc)
    %81 = tt.splat %mxfp_ptr : !tt.ptr<bf16> -> tensor<512x!tt.ptr<bf16>, #blocked3> loc(#loc)
    %82 = tt.addptr %81, %77 : tensor<512x!tt.ptr<bf16>, #blocked3>, tensor<512xi32, #blocked3> loc(#loc)
    %83 = tt.reshape %73 : tensor<16x32xbf16, #blocked> -> tensor<512xbf16, #blocked3> loc(#loc)
    tt.store %82, %83, %80 : tensor<512x!tt.ptr<bf16>, #blocked3> loc(#loc)
    tt.return loc(#loc)
  } loc(#loc)
} loc(#loc)
#loc = loc(unknown)


// -----// IR Dump Before TritonAMDGPUCanonicalizePointers (tritonamdgpu-canonicalize-pointers) ('tt.func' operation: @mxfp_upcast_kernel) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 2], threadsPerWarp = [4, 16], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [4, 16], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked2 = #ttg.blocked<{sizePerThread = [1, 1, 2], threadsPerWarp = [4, 16, 1], warpsPerCTA = [4, 1, 1], order = [2, 1, 0]}>
#blocked3 = #ttg.blocked<{sizePerThread = [2], threadsPerWarp = [64], warpsPerCTA = [4], order = [0]}>
#loc1 = loc("x_ptr")
#loc2 = loc("scale_ptr")
#loc3 = loc("mxfp_ptr")
#loc4 = loc("N")
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "hip:gfx950", "ttg.threads-per-warp" = 64 : i32} {
  tt.func public @mxfp_upcast_kernel(%x_ptr: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("x_ptr"), %scale_ptr: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("scale_ptr"), %mxfp_ptr: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("mxfp_ptr"), %N: i32 {tt.divisibility = 16 : i32} loc("N")) attributes {noinline = false} {
    %cst = arith.constant dense<0x7FC0> : tensor<16x32xbf16, #blocked> loc(#loc)
    %c512_i32 = arith.constant 512 : i32 loc(#loc)
    %c32_i32 = arith.constant 32 : i32 loc(#loc)
    %cst_0 = arith.constant dense<16> : tensor<16x16xi32, #blocked1> loc(#loc)
    %cst_1 = arith.constant dense<-32768> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_2 = arith.constant dense<1> : tensor<16x16xi32, #blocked1> loc(#loc)
    %cst_3 = arith.constant dense<96> : tensor<16x16xi8, #blocked1> loc(#loc)
    %cst_4 = arith.constant dense<16128> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_5 = arith.constant dense<0> : tensor<16x16xi32, #blocked1> loc(#loc)
    %cst_6 = arith.constant dense<6> : tensor<16x16xi8, #blocked1> loc(#loc)
    %cst_7 = arith.constant dense<8> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_8 = arith.constant dense<-128> : tensor<16x16xi8, #blocked1> loc(#loc)
    %cst_9 = arith.constant dense<2> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_10 = arith.constant dense<12> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_11 = arith.constant dense<8> : tensor<16x16xi8, #blocked1> loc(#loc)
    %cst_12 = arith.constant dense<6> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_13 = arith.constant dense<112> : tensor<16x16xi8, #blocked1> loc(#loc)
    %cst_14 = arith.constant dense<7> : tensor<16x16xi8, #blocked1> loc(#loc)
    %c256_i32 = arith.constant 256 : i32 loc(#loc)
    %c16_i32 = arith.constant 16 : i32 loc(#loc)
    %cst_15 = arith.constant dense<16> : tensor<16x1xi32, #blocked1> loc(#loc)
    %cst_16 = arith.constant dense<7> : tensor<16x1xi16, #blocked> loc(#loc)
    %cst_17 = arith.constant dense<255> : tensor<16x1xi32, #blocked> loc(#loc)
    %0 = tt.get_program_id x : i32 loc(#loc)
    %1 = arith.muli %0, %c256_i32 : i32 loc(#loc)
    %2 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc)
    %3 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc)
    %4 = tt.expand_dims %2 {axis = 1 : i32} : tensor<16xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> -> tensor<16x1xi32, #blocked1> loc(#loc)
    %5 = tt.expand_dims %3 {axis = 1 : i32} : tensor<16xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<16x1xi32, #blocked> loc(#loc)
    %6 = arith.muli %4, %cst_15 : tensor<16x1xi32, #blocked1> loc(#loc)
    %7 = tt.splat %1 : i32 -> tensor<16x1xi32, #blocked1> loc(#loc)
    %8 = arith.addi %7, %6 : tensor<16x1xi32, #blocked1> loc(#loc)
    %9 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc)
    %10 = tt.expand_dims %9 {axis = 0 : i32} : tensor<16xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x16xi32, #blocked1> loc(#loc)
    %11 = tt.broadcast %8 : tensor<16x1xi32, #blocked1> -> tensor<16x16xi32, #blocked1> loc(#loc)
    %12 = tt.broadcast %10 : tensor<1x16xi32, #blocked1> -> tensor<16x16xi32, #blocked1> loc(#loc)
    %13 = arith.addi %11, %12 : tensor<16x16xi32, #blocked1> loc(#loc)
    %14 = arith.muli %N, %c16_i32 : i32 loc(#loc)
    %15 = tt.splat %14 : i32 -> tensor<16x16xi32, #blocked1> loc(#loc)
    %16 = arith.cmpi slt, %13, %15 : tensor<16x16xi32, #blocked1> loc(#loc)
    %17 = tt.splat %x_ptr : !tt.ptr<i8> -> tensor<16x16x!tt.ptr<i8>, #blocked1> loc(#loc)
    %18 = tt.addptr %17, %13 : tensor<16x16x!tt.ptr<i8>, #blocked1>, tensor<16x16xi32, #blocked1> loc(#loc)
    %19 = tt.load %18, %16 : tensor<16x16x!tt.ptr<i8>, #blocked1> loc(#loc)
    %20 = arith.muli %0, %c16_i32 : i32 loc(#loc)
    %21 = tt.splat %20 : i32 -> tensor<16x1xi32, #blocked> loc(#loc)
    %22 = arith.addi %21, %5 : tensor<16x1xi32, #blocked> loc(#loc)
    %23 = tt.splat %N : i32 -> tensor<16x1xi32, #blocked> loc(#loc)
    %24 = arith.cmpi slt, %22, %23 : tensor<16x1xi32, #blocked> loc(#loc)
    %25 = tt.splat %scale_ptr : !tt.ptr<i8> -> tensor<16x1x!tt.ptr<i8>, #blocked> loc(#loc)
    %26 = tt.addptr %25, %22 : tensor<16x1x!tt.ptr<i8>, #blocked>, tensor<16x1xi32, #blocked> loc(#loc)
    %27 = tt.load %26, %24 : tensor<16x1x!tt.ptr<i8>, #blocked> loc(#loc)
    %28 = arith.extui %27 : tensor<16x1xi8, #blocked> to tensor<16x1xi16, #blocked> loc(#loc)
    %29 = arith.shli %28, %cst_16 : tensor<16x1xi16, #blocked> loc(#loc)
    %30 = tt.bitcast %29 : tensor<16x1xi16, #blocked> -> tensor<16x1xbf16, #blocked> loc(#loc)
    %31 = arith.andi %19, %cst_14 : tensor<16x16xi8, #blocked1> loc(#loc)
    %32 = arith.andi %19, %cst_13 : tensor<16x16xi8, #blocked1> loc(#loc)
    %33 = arith.extui %31 : tensor<16x16xi8, #blocked1> to tensor<16x16xi16, #blocked1> loc(#loc)
    %34 = arith.shli %33, %cst_12 : tensor<16x16xi16, #blocked1> loc(#loc)
    %35 = arith.andi %19, %cst_11 : tensor<16x16xi8, #blocked1> loc(#loc)
    %36 = arith.extui %35 : tensor<16x16xi8, #blocked1> to tensor<16x16xi16, #blocked1> loc(#loc)
    %37 = arith.shli %36, %cst_10 : tensor<16x16xi16, #blocked1> loc(#loc)
    %38 = arith.ori %34, %37 : tensor<16x16xi16, #blocked1> loc(#loc)
    %39 = arith.extui %32 : tensor<16x16xi8, #blocked1> to tensor<16x16xi16, #blocked1> loc(#loc)
    %40 = arith.shli %39, %cst_9 : tensor<16x16xi16, #blocked1> loc(#loc)
    %41 = arith.andi %19, %cst_8 : tensor<16x16xi8, #blocked1> loc(#loc)
    %42 = arith.extui %41 : tensor<16x16xi8, #blocked1> to tensor<16x16xi16, #blocked1> loc(#loc)
    %43 = arith.shli %42, %cst_7 : tensor<16x16xi16, #blocked1> loc(#loc)
    %44 = arith.ori %40, %43 : tensor<16x16xi16, #blocked1> loc(#loc)
    %45 = arith.andi %31, %cst_6 : tensor<16x16xi8, #blocked1> loc(#loc)
    %46 = arith.extui %45 : tensor<16x16xi8, #blocked1> to tensor<16x16xi32, #blocked1> loc(#loc)
    %47 = arith.cmpi ne, %46, %cst_5 : tensor<16x16xi32, #blocked1> loc(#loc)
    %48 = arith.addi %38, %cst_4 : tensor<16x16xi16, #blocked1> loc(#loc)
    %49 = arith.select %47, %48, %38 : tensor<16x16xi1, #blocked1>, tensor<16x16xi16, #blocked1> loc(#loc)
    %50 = arith.andi %32, %cst_3 : tensor<16x16xi8, #blocked1> loc(#loc)
    %51 = arith.extui %50 : tensor<16x16xi8, #blocked1> to tensor<16x16xi32, #blocked1> loc(#loc)
    %52 = arith.cmpi ne, %51, %cst_5 : tensor<16x16xi32, #blocked1> loc(#loc)
    %53 = arith.addi %44, %cst_4 : tensor<16x16xi16, #blocked1> loc(#loc)
    %54 = arith.select %52, %53, %44 : tensor<16x16xi1, #blocked1>, tensor<16x16xi16, #blocked1> loc(#loc)
    %55 = arith.extui %31 : tensor<16x16xi8, #blocked1> to tensor<16x16xi32, #blocked1> loc(#loc)
    %56 = arith.cmpi eq, %55, %cst_2 : tensor<16x16xi32, #blocked1> loc(#loc)
    %57 = arith.andi %49, %cst_1 : tensor<16x16xi16, #blocked1> loc(#loc)
    %58 = arith.ori %57, %cst_4 : tensor<16x16xi16, #blocked1> loc(#loc)
    %59 = arith.select %56, %58, %49 : tensor<16x16xi1, #blocked1>, tensor<16x16xi16, #blocked1> loc(#loc)
    %60 = arith.extui %32 : tensor<16x16xi8, #blocked1> to tensor<16x16xi32, #blocked1> loc(#loc)
    %61 = arith.cmpi eq, %60, %cst_0 : tensor<16x16xi32, #blocked1> loc(#loc)
    %62 = arith.andi %54, %cst_1 : tensor<16x16xi16, #blocked1> loc(#loc)
    %63 = arith.ori %62, %cst_4 : tensor<16x16xi16, #blocked1> loc(#loc)
    %64 = arith.select %61, %63, %54 : tensor<16x16xi1, #blocked1>, tensor<16x16xi16, #blocked1> loc(#loc)
    %65 = tt.join %59, %64 : tensor<16x16xi16, #blocked1> -> tensor<16x16x2xi16, #blocked2> loc(#loc)
    %66 = tt.reshape %65 : tensor<16x16x2xi16, #blocked2> -> tensor<16x32xi16, #blocked> loc(#loc)
    %67 = tt.bitcast %66 : tensor<16x32xi16, #blocked> -> tensor<16x32xbf16, #blocked> loc(#loc)
    %68 = tt.broadcast %30 : tensor<16x1xbf16, #blocked> -> tensor<16x32xbf16, #blocked> loc(#loc)
    %69 = arith.mulf %67, %68 : tensor<16x32xbf16, #blocked> loc(#loc)
    %70 = arith.extui %27 : tensor<16x1xi8, #blocked> to tensor<16x1xi32, #blocked> loc(#loc)
    %71 = arith.cmpi eq, %70, %cst_17 : tensor<16x1xi32, #blocked> loc(#loc)
    %72 = tt.broadcast %71 : tensor<16x1xi1, #blocked> -> tensor<16x32xi1, #blocked> loc(#loc)
    %73 = arith.select %72, %cst, %69 : tensor<16x32xi1, #blocked>, tensor<16x32xbf16, #blocked> loc(#loc)
    %74 = arith.muli %0, %c512_i32 : i32 loc(#loc)
    %75 = tt.make_range {end = 512 : i32, start = 0 : i32} : tensor<512xi32, #blocked3> loc(#loc)
    %76 = tt.splat %74 : i32 -> tensor<512xi32, #blocked3> loc(#loc)
    %77 = arith.addi %76, %75 : tensor<512xi32, #blocked3> loc(#loc)
    %78 = arith.muli %N, %c32_i32 : i32 loc(#loc)
    %79 = tt.splat %78 : i32 -> tensor<512xi32, #blocked3> loc(#loc)
    %80 = arith.cmpi slt, %77, %79 : tensor<512xi32, #blocked3> loc(#loc)
    %81 = tt.splat %mxfp_ptr : !tt.ptr<bf16> -> tensor<512x!tt.ptr<bf16>, #blocked3> loc(#loc)
    %82 = tt.addptr %81, %77 : tensor<512x!tt.ptr<bf16>, #blocked3>, tensor<512xi32, #blocked3> loc(#loc)
    %83 = tt.reshape %73 : tensor<16x32xbf16, #blocked> -> tensor<512xbf16, #blocked3> loc(#loc)
    tt.store %82, %83, %80 : tensor<512x!tt.ptr<bf16>, #blocked3> loc(#loc)
    tt.return loc(#loc)
  } loc(#loc)
} loc(#loc)
#loc = loc(unknown)


// -----// IR Dump Before Canonicalizer (canonicalize) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 2], threadsPerWarp = [4, 16], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [4, 16], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked2 = #ttg.blocked<{sizePerThread = [1, 1, 2], threadsPerWarp = [4, 16, 1], warpsPerCTA = [4, 1, 1], order = [2, 1, 0]}>
#blocked3 = #ttg.blocked<{sizePerThread = [2], threadsPerWarp = [64], warpsPerCTA = [4], order = [0]}>
#loc1 = loc("x_ptr")
#loc2 = loc("scale_ptr")
#loc3 = loc("mxfp_ptr")
#loc4 = loc("N")
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "hip:gfx950", "ttg.threads-per-warp" = 64 : i32} {
  tt.func public @mxfp_upcast_kernel(%x_ptr: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("x_ptr"), %scale_ptr: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("scale_ptr"), %mxfp_ptr: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("mxfp_ptr"), %N: i32 {tt.divisibility = 16 : i32} loc("N")) attributes {noinline = false} {
    %c0_i32 = arith.constant 0 : i32 loc(#loc)
    %c0_i32_0 = arith.constant 0 : i32 loc(#loc)
    %c0_i32_1 = arith.constant 0 : i32 loc(#loc)
    %cst = arith.constant dense<0x7FC0> : tensor<16x32xbf16, #blocked> loc(#loc)
    %c512_i32 = arith.constant 512 : i32 loc(#loc)
    %c32_i32 = arith.constant 32 : i32 loc(#loc)
    %cst_2 = arith.constant dense<16> : tensor<16x16xi32, #blocked1> loc(#loc)
    %cst_3 = arith.constant dense<-32768> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_4 = arith.constant dense<1> : tensor<16x16xi32, #blocked1> loc(#loc)
    %cst_5 = arith.constant dense<96> : tensor<16x16xi8, #blocked1> loc(#loc)
    %cst_6 = arith.constant dense<16128> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_7 = arith.constant dense<0> : tensor<16x16xi32, #blocked1> loc(#loc)
    %cst_8 = arith.constant dense<6> : tensor<16x16xi8, #blocked1> loc(#loc)
    %cst_9 = arith.constant dense<8> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_10 = arith.constant dense<-128> : tensor<16x16xi8, #blocked1> loc(#loc)
    %cst_11 = arith.constant dense<2> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_12 = arith.constant dense<12> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_13 = arith.constant dense<8> : tensor<16x16xi8, #blocked1> loc(#loc)
    %cst_14 = arith.constant dense<6> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_15 = arith.constant dense<112> : tensor<16x16xi8, #blocked1> loc(#loc)
    %cst_16 = arith.constant dense<7> : tensor<16x16xi8, #blocked1> loc(#loc)
    %c256_i32 = arith.constant 256 : i32 loc(#loc)
    %c16_i32 = arith.constant 16 : i32 loc(#loc)
    %cst_17 = arith.constant dense<16> : tensor<16x1xi32, #blocked1> loc(#loc)
    %cst_18 = arith.constant dense<7> : tensor<16x1xi16, #blocked> loc(#loc)
    %cst_19 = arith.constant dense<255> : tensor<16x1xi32, #blocked> loc(#loc)
    %0 = tt.get_program_id x : i32 loc(#loc)
    %1 = arith.muli %0, %c256_i32 : i32 loc(#loc)
    %2 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc)
    %3 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc)
    %4 = tt.expand_dims %2 {axis = 1 : i32} : tensor<16xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> -> tensor<16x1xi32, #blocked1> loc(#loc)
    %5 = tt.expand_dims %3 {axis = 1 : i32} : tensor<16xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<16x1xi32, #blocked> loc(#loc)
    %6 = arith.muli %4, %cst_17 : tensor<16x1xi32, #blocked1> loc(#loc)
    %7 = tt.splat %1 : i32 -> tensor<16x1xi32, #blocked1> loc(#loc)
    %8 = arith.addi %7, %6 : tensor<16x1xi32, #blocked1> loc(#loc)
    %9 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc)
    %10 = tt.expand_dims %9 {axis = 0 : i32} : tensor<16xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x16xi32, #blocked1> loc(#loc)
    %11 = tt.broadcast %8 : tensor<16x1xi32, #blocked1> -> tensor<16x16xi32, #blocked1> loc(#loc)
    %12 = tt.broadcast %10 : tensor<1x16xi32, #blocked1> -> tensor<16x16xi32, #blocked1> loc(#loc)
    %13 = arith.addi %11, %12 : tensor<16x16xi32, #blocked1> loc(#loc)
    %14 = arith.muli %N, %c16_i32 : i32 loc(#loc)
    %15 = tt.splat %14 : i32 -> tensor<16x16xi32, #blocked1> loc(#loc)
    %16 = arith.cmpi slt, %13, %15 : tensor<16x16xi32, #blocked1> loc(#loc)
    %17 = tt.splat %c0_i32 : i32 -> tensor<16x16xi32, #blocked1> loc(#loc)
    %cst_20 = arith.constant dense<0> : tensor<16x1xi32, #blocked1> loc(#loc)
    %c0_i32_21 = arith.constant 0 : i32 loc(#loc)
    %18 = tt.expand_dims %2 {axis = 1 : i32} : tensor<16xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> -> tensor<16x1xi32, #blocked1> loc(#loc)
    %c16_i32_22 = arith.constant 16 : i32 loc(#loc)
    %cst_23 = arith.constant dense<0> : tensor<16x1xi32, #blocked1> loc(#loc)
    %19 = arith.muli %c0_i32_21, %c16_i32_22 : i32 loc(#loc)
    %20 = tt.splat %c0_i32_21 : i32 -> tensor<16x1xi32, #blocked1> loc(#loc)
    %21 = tt.splat %c16_i32_22 : i32 -> tensor<16x1xi32, #blocked1> loc(#loc)
    %22 = arith.muli %18, %cst_23 : tensor<16x1xi32, #blocked1> loc(#loc)
    %23 = arith.muli %20, %cst_23 : tensor<16x1xi32, #blocked1> loc(#loc)
    %24 = arith.muli %18, %21 : tensor<16x1xi32, #blocked1> loc(#loc)
    %25 = arith.addi %22, %23 : tensor<16x1xi32, #blocked1> loc(#loc)
    %26 = arith.addi %25, %24 : tensor<16x1xi32, #blocked1> loc(#loc)
    %27 = arith.addi %1, %19 : i32 loc(#loc)
    %28 = arith.addi %cst_20, %26 : tensor<16x1xi32, #blocked1> loc(#loc)
    %29 = tt.broadcast %28 : tensor<16x1xi32, #blocked1> -> tensor<16x16xi32, #blocked1> loc(#loc)
    %c0_i32_24 = arith.constant 0 : i32 loc(#loc)
    %30 = tt.expand_dims %9 {axis = 0 : i32} : tensor<16xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x16xi32, #blocked1> loc(#loc)
    %31 = tt.broadcast %30 : tensor<1x16xi32, #blocked1> -> tensor<16x16xi32, #blocked1> loc(#loc)
    %32 = arith.addi %27, %c0_i32_24 : i32 loc(#loc)
    %33 = arith.addi %29, %31 : tensor<16x16xi32, #blocked1> loc(#loc)
    %34 = tt.addptr %x_ptr, %32 : !tt.ptr<i8>, i32 loc(#loc)
    %35 = arith.addi %33, %17 : tensor<16x16xi32, #blocked1> loc(#loc)
    %36 = tt.splat %34 : !tt.ptr<i8> -> tensor<16x16x!tt.ptr<i8>, #blocked1> loc(#loc)
    %37 = tt.addptr %36, %35 : tensor<16x16x!tt.ptr<i8>, #blocked1>, tensor<16x16xi32, #blocked1> loc(#loc)
    %38 = tt.load %37, %16 : tensor<16x16x!tt.ptr<i8>, #blocked1> loc(#loc)
    %39 = arith.muli %0, %c16_i32 : i32 loc(#loc)
    %40 = tt.splat %39 : i32 -> tensor<16x1xi32, #blocked> loc(#loc)
    %41 = arith.addi %40, %5 : tensor<16x1xi32, #blocked> loc(#loc)
    %42 = tt.splat %N : i32 -> tensor<16x1xi32, #blocked> loc(#loc)
    %43 = arith.cmpi slt, %41, %42 : tensor<16x1xi32, #blocked> loc(#loc)
    %44 = tt.splat %c0_i32_0 : i32 -> tensor<16x1xi32, #blocked> loc(#loc)
    %cst_25 = arith.constant dense<0> : tensor<16x1xi32, #blocked> loc(#loc)
    %c0_i32_26 = arith.constant 0 : i32 loc(#loc)
    %45 = tt.expand_dims %3 {axis = 1 : i32} : tensor<16xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<16x1xi32, #blocked> loc(#loc)
    %46 = arith.addi %39, %c0_i32_26 : i32 loc(#loc)
    %47 = arith.addi %cst_25, %45 : tensor<16x1xi32, #blocked> loc(#loc)
    %48 = tt.addptr %scale_ptr, %46 : !tt.ptr<i8>, i32 loc(#loc)
    %49 = arith.addi %47, %44 : tensor<16x1xi32, #blocked> loc(#loc)
    %50 = tt.splat %48 : !tt.ptr<i8> -> tensor<16x1x!tt.ptr<i8>, #blocked> loc(#loc)
    %51 = tt.addptr %50, %49 : tensor<16x1x!tt.ptr<i8>, #blocked>, tensor<16x1xi32, #blocked> loc(#loc)
    %52 = tt.load %51, %43 : tensor<16x1x!tt.ptr<i8>, #blocked> loc(#loc)
    %53 = arith.extui %52 : tensor<16x1xi8, #blocked> to tensor<16x1xi16, #blocked> loc(#loc)
    %54 = arith.shli %53, %cst_18 : tensor<16x1xi16, #blocked> loc(#loc)
    %55 = tt.bitcast %54 : tensor<16x1xi16, #blocked> -> tensor<16x1xbf16, #blocked> loc(#loc)
    %56 = arith.andi %38, %cst_16 : tensor<16x16xi8, #blocked1> loc(#loc)
    %57 = arith.andi %38, %cst_15 : tensor<16x16xi8, #blocked1> loc(#loc)
    %58 = arith.extui %56 : tensor<16x16xi8, #blocked1> to tensor<16x16xi16, #blocked1> loc(#loc)
    %59 = arith.shli %58, %cst_14 : tensor<16x16xi16, #blocked1> loc(#loc)
    %60 = arith.andi %38, %cst_13 : tensor<16x16xi8, #blocked1> loc(#loc)
    %61 = arith.extui %60 : tensor<16x16xi8, #blocked1> to tensor<16x16xi16, #blocked1> loc(#loc)
    %62 = arith.shli %61, %cst_12 : tensor<16x16xi16, #blocked1> loc(#loc)
    %63 = arith.ori %59, %62 : tensor<16x16xi16, #blocked1> loc(#loc)
    %64 = arith.extui %57 : tensor<16x16xi8, #blocked1> to tensor<16x16xi16, #blocked1> loc(#loc)
    %65 = arith.shli %64, %cst_11 : tensor<16x16xi16, #blocked1> loc(#loc)
    %66 = arith.andi %38, %cst_10 : tensor<16x16xi8, #blocked1> loc(#loc)
    %67 = arith.extui %66 : tensor<16x16xi8, #blocked1> to tensor<16x16xi16, #blocked1> loc(#loc)
    %68 = arith.shli %67, %cst_9 : tensor<16x16xi16, #blocked1> loc(#loc)
    %69 = arith.ori %65, %68 : tensor<16x16xi16, #blocked1> loc(#loc)
    %70 = arith.andi %56, %cst_8 : tensor<16x16xi8, #blocked1> loc(#loc)
    %71 = arith.extui %70 : tensor<16x16xi8, #blocked1> to tensor<16x16xi32, #blocked1> loc(#loc)
    %72 = arith.cmpi ne, %71, %cst_7 : tensor<16x16xi32, #blocked1> loc(#loc)
    %73 = arith.addi %63, %cst_6 : tensor<16x16xi16, #blocked1> loc(#loc)
    %74 = arith.select %72, %73, %63 : tensor<16x16xi1, #blocked1>, tensor<16x16xi16, #blocked1> loc(#loc)
    %75 = arith.andi %57, %cst_5 : tensor<16x16xi8, #blocked1> loc(#loc)
    %76 = arith.extui %75 : tensor<16x16xi8, #blocked1> to tensor<16x16xi32, #blocked1> loc(#loc)
    %77 = arith.cmpi ne, %76, %cst_7 : tensor<16x16xi32, #blocked1> loc(#loc)
    %78 = arith.addi %69, %cst_6 : tensor<16x16xi16, #blocked1> loc(#loc)
    %79 = arith.select %77, %78, %69 : tensor<16x16xi1, #blocked1>, tensor<16x16xi16, #blocked1> loc(#loc)
    %80 = arith.extui %56 : tensor<16x16xi8, #blocked1> to tensor<16x16xi32, #blocked1> loc(#loc)
    %81 = arith.cmpi eq, %80, %cst_4 : tensor<16x16xi32, #blocked1> loc(#loc)
    %82 = arith.andi %74, %cst_3 : tensor<16x16xi16, #blocked1> loc(#loc)
    %83 = arith.ori %82, %cst_6 : tensor<16x16xi16, #blocked1> loc(#loc)
    %84 = arith.select %81, %83, %74 : tensor<16x16xi1, #blocked1>, tensor<16x16xi16, #blocked1> loc(#loc)
    %85 = arith.extui %57 : tensor<16x16xi8, #blocked1> to tensor<16x16xi32, #blocked1> loc(#loc)
    %86 = arith.cmpi eq, %85, %cst_2 : tensor<16x16xi32, #blocked1> loc(#loc)
    %87 = arith.andi %79, %cst_3 : tensor<16x16xi16, #blocked1> loc(#loc)
    %88 = arith.ori %87, %cst_6 : tensor<16x16xi16, #blocked1> loc(#loc)
    %89 = arith.select %86, %88, %79 : tensor<16x16xi1, #blocked1>, tensor<16x16xi16, #blocked1> loc(#loc)
    %90 = tt.join %84, %89 : tensor<16x16xi16, #blocked1> -> tensor<16x16x2xi16, #blocked2> loc(#loc)
    %91 = tt.reshape %90 : tensor<16x16x2xi16, #blocked2> -> tensor<16x32xi16, #blocked> loc(#loc)
    %92 = tt.bitcast %91 : tensor<16x32xi16, #blocked> -> tensor<16x32xbf16, #blocked> loc(#loc)
    %93 = tt.broadcast %55 : tensor<16x1xbf16, #blocked> -> tensor<16x32xbf16, #blocked> loc(#loc)
    %94 = arith.mulf %92, %93 : tensor<16x32xbf16, #blocked> loc(#loc)
    %95 = arith.extui %52 : tensor<16x1xi8, #blocked> to tensor<16x1xi32, #blocked> loc(#loc)
    %96 = arith.cmpi eq, %95, %cst_19 : tensor<16x1xi32, #blocked> loc(#loc)
    %97 = tt.broadcast %96 : tensor<16x1xi1, #blocked> -> tensor<16x32xi1, #blocked> loc(#loc)
    %98 = arith.select %97, %cst, %94 : tensor<16x32xi1, #blocked>, tensor<16x32xbf16, #blocked> loc(#loc)
    %99 = arith.muli %0, %c512_i32 : i32 loc(#loc)
    %100 = tt.make_range {end = 512 : i32, start = 0 : i32} : tensor<512xi32, #blocked3> loc(#loc)
    %101 = tt.splat %99 : i32 -> tensor<512xi32, #blocked3> loc(#loc)
    %102 = arith.addi %101, %100 : tensor<512xi32, #blocked3> loc(#loc)
    %103 = arith.muli %N, %c32_i32 : i32 loc(#loc)
    %104 = tt.splat %103 : i32 -> tensor<512xi32, #blocked3> loc(#loc)
    %105 = arith.cmpi slt, %102, %104 : tensor<512xi32, #blocked3> loc(#loc)
    %106 = tt.splat %c0_i32_1 : i32 -> tensor<512xi32, #blocked3> loc(#loc)
    %cst_27 = arith.constant dense<0> : tensor<512xi32, #blocked3> loc(#loc)
    %c0_i32_28 = arith.constant 0 : i32 loc(#loc)
    %107 = arith.addi %99, %c0_i32_28 : i32 loc(#loc)
    %108 = arith.addi %cst_27, %100 : tensor<512xi32, #blocked3> loc(#loc)
    %109 = tt.addptr %mxfp_ptr, %107 : !tt.ptr<bf16>, i32 loc(#loc)
    %110 = arith.addi %108, %106 : tensor<512xi32, #blocked3> loc(#loc)
    %111 = tt.reshape %98 : tensor<16x32xbf16, #blocked> -> tensor<512xbf16, #blocked3> loc(#loc)
    %112 = tt.splat %109 : !tt.ptr<bf16> -> tensor<512x!tt.ptr<bf16>, #blocked3> loc(#loc)
    %113 = tt.addptr %112, %110 : tensor<512x!tt.ptr<bf16>, #blocked3>, tensor<512xi32, #blocked3> loc(#loc)
    tt.store %113, %111, %105 : tensor<512x!tt.ptr<bf16>, #blocked3> loc(#loc)
    tt.return loc(#loc)
  } loc(#loc)
} loc(#loc)
#loc = loc(unknown)


// -----// IR Dump Before TritonAMDGPUConvertToBufferOps (tritonamdgpu-convert-buffer-ops) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 2], threadsPerWarp = [4, 16], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [4, 16], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked2 = #ttg.blocked<{sizePerThread = [1, 1, 2], threadsPerWarp = [4, 16, 1], warpsPerCTA = [4, 1, 1], order = [2, 1, 0]}>
#blocked3 = #ttg.blocked<{sizePerThread = [2], threadsPerWarp = [64], warpsPerCTA = [4], order = [0]}>
#loc1 = loc("x_ptr")
#loc2 = loc("scale_ptr")
#loc3 = loc("mxfp_ptr")
#loc4 = loc("N")
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "hip:gfx950", "ttg.threads-per-warp" = 64 : i32} {
  tt.func public @mxfp_upcast_kernel(%x_ptr: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("x_ptr"), %scale_ptr: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("scale_ptr"), %mxfp_ptr: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("mxfp_ptr"), %N: i32 {tt.divisibility = 16 : i32} loc("N")) attributes {noinline = false} {
    %cst = arith.constant dense<0x7FC0> : tensor<16x32xbf16, #blocked> loc(#loc)
    %c512_i32 = arith.constant 512 : i32 loc(#loc)
    %c32_i32 = arith.constant 32 : i32 loc(#loc)
    %cst_0 = arith.constant dense<16> : tensor<16x16xi32, #blocked1> loc(#loc)
    %cst_1 = arith.constant dense<-32768> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_2 = arith.constant dense<1> : tensor<16x16xi32, #blocked1> loc(#loc)
    %cst_3 = arith.constant dense<96> : tensor<16x16xi8, #blocked1> loc(#loc)
    %cst_4 = arith.constant dense<16128> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_5 = arith.constant dense<0> : tensor<16x16xi32, #blocked1> loc(#loc)
    %cst_6 = arith.constant dense<6> : tensor<16x16xi8, #blocked1> loc(#loc)
    %cst_7 = arith.constant dense<8> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_8 = arith.constant dense<-128> : tensor<16x16xi8, #blocked1> loc(#loc)
    %cst_9 = arith.constant dense<2> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_10 = arith.constant dense<12> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_11 = arith.constant dense<8> : tensor<16x16xi8, #blocked1> loc(#loc)
    %cst_12 = arith.constant dense<6> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_13 = arith.constant dense<112> : tensor<16x16xi8, #blocked1> loc(#loc)
    %cst_14 = arith.constant dense<7> : tensor<16x16xi8, #blocked1> loc(#loc)
    %c256_i32 = arith.constant 256 : i32 loc(#loc)
    %c16_i32 = arith.constant 16 : i32 loc(#loc)
    %cst_15 = arith.constant dense<16> : tensor<16x1xi32, #blocked1> loc(#loc)
    %cst_16 = arith.constant dense<7> : tensor<16x1xi16, #blocked> loc(#loc)
    %cst_17 = arith.constant dense<255> : tensor<16x1xi32, #blocked> loc(#loc)
    %0 = tt.get_program_id x : i32 loc(#loc)
    %1 = arith.muli %0, %c256_i32 : i32 loc(#loc)
    %2 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc)
    %3 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc)
    %4 = tt.expand_dims %2 {axis = 1 : i32} : tensor<16xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> -> tensor<16x1xi32, #blocked1> loc(#loc)
    %5 = tt.expand_dims %3 {axis = 1 : i32} : tensor<16xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<16x1xi32, #blocked> loc(#loc)
    %6 = arith.muli %4, %cst_15 : tensor<16x1xi32, #blocked1> loc(#loc)
    %7 = tt.splat %1 : i32 -> tensor<16x1xi32, #blocked1> loc(#loc)
    %8 = arith.addi %7, %6 : tensor<16x1xi32, #blocked1> loc(#loc)
    %9 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc)
    %10 = tt.expand_dims %9 {axis = 0 : i32} : tensor<16xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x16xi32, #blocked1> loc(#loc)
    %11 = tt.broadcast %8 : tensor<16x1xi32, #blocked1> -> tensor<16x16xi32, #blocked1> loc(#loc)
    %12 = tt.broadcast %10 : tensor<1x16xi32, #blocked1> -> tensor<16x16xi32, #blocked1> loc(#loc)
    %13 = arith.addi %11, %12 : tensor<16x16xi32, #blocked1> loc(#loc)
    %14 = arith.muli %N, %c16_i32 : i32 loc(#loc)
    %15 = tt.splat %14 : i32 -> tensor<16x16xi32, #blocked1> loc(#loc)
    %16 = arith.cmpi slt, %13, %15 : tensor<16x16xi32, #blocked1> loc(#loc)
    %17 = tt.expand_dims %2 {axis = 1 : i32} : tensor<16xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> -> tensor<16x1xi32, #blocked1> loc(#loc)
    %18 = arith.muli %17, %cst_15 : tensor<16x1xi32, #blocked1> loc(#loc)
    %19 = tt.broadcast %18 : tensor<16x1xi32, #blocked1> -> tensor<16x16xi32, #blocked1> loc(#loc)
    %20 = tt.expand_dims %9 {axis = 0 : i32} : tensor<16xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x16xi32, #blocked1> loc(#loc)
    %21 = tt.broadcast %20 : tensor<1x16xi32, #blocked1> -> tensor<16x16xi32, #blocked1> loc(#loc)
    %22 = arith.addi %19, %21 : tensor<16x16xi32, #blocked1> loc(#loc)
    %23 = tt.addptr %x_ptr, %1 : !tt.ptr<i8>, i32 loc(#loc)
    %24 = tt.splat %23 : !tt.ptr<i8> -> tensor<16x16x!tt.ptr<i8>, #blocked1> loc(#loc)
    %25 = tt.addptr %24, %22 : tensor<16x16x!tt.ptr<i8>, #blocked1>, tensor<16x16xi32, #blocked1> loc(#loc)
    %26 = tt.load %25, %16 : tensor<16x16x!tt.ptr<i8>, #blocked1> loc(#loc)
    %27 = arith.muli %0, %c16_i32 : i32 loc(#loc)
    %28 = tt.splat %27 : i32 -> tensor<16x1xi32, #blocked> loc(#loc)
    %29 = arith.addi %28, %5 : tensor<16x1xi32, #blocked> loc(#loc)
    %30 = tt.splat %N : i32 -> tensor<16x1xi32, #blocked> loc(#loc)
    %31 = arith.cmpi slt, %29, %30 : tensor<16x1xi32, #blocked> loc(#loc)
    %32 = tt.expand_dims %3 {axis = 1 : i32} : tensor<16xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<16x1xi32, #blocked> loc(#loc)
    %33 = tt.addptr %scale_ptr, %27 : !tt.ptr<i8>, i32 loc(#loc)
    %34 = tt.splat %33 : !tt.ptr<i8> -> tensor<16x1x!tt.ptr<i8>, #blocked> loc(#loc)
    %35 = tt.addptr %34, %32 : tensor<16x1x!tt.ptr<i8>, #blocked>, tensor<16x1xi32, #blocked> loc(#loc)
    %36 = tt.load %35, %31 : tensor<16x1x!tt.ptr<i8>, #blocked> loc(#loc)
    %37 = arith.extui %36 : tensor<16x1xi8, #blocked> to tensor<16x1xi16, #blocked> loc(#loc)
    %38 = arith.shli %37, %cst_16 : tensor<16x1xi16, #blocked> loc(#loc)
    %39 = tt.bitcast %38 : tensor<16x1xi16, #blocked> -> tensor<16x1xbf16, #blocked> loc(#loc)
    %40 = arith.andi %26, %cst_14 : tensor<16x16xi8, #blocked1> loc(#loc)
    %41 = arith.andi %26, %cst_13 : tensor<16x16xi8, #blocked1> loc(#loc)
    %42 = arith.extui %40 : tensor<16x16xi8, #blocked1> to tensor<16x16xi16, #blocked1> loc(#loc)
    %43 = arith.shli %42, %cst_12 : tensor<16x16xi16, #blocked1> loc(#loc)
    %44 = arith.andi %26, %cst_11 : tensor<16x16xi8, #blocked1> loc(#loc)
    %45 = arith.extui %44 : tensor<16x16xi8, #blocked1> to tensor<16x16xi16, #blocked1> loc(#loc)
    %46 = arith.shli %45, %cst_10 : tensor<16x16xi16, #blocked1> loc(#loc)
    %47 = arith.ori %43, %46 : tensor<16x16xi16, #blocked1> loc(#loc)
    %48 = arith.extui %41 : tensor<16x16xi8, #blocked1> to tensor<16x16xi16, #blocked1> loc(#loc)
    %49 = arith.shli %48, %cst_9 : tensor<16x16xi16, #blocked1> loc(#loc)
    %50 = arith.andi %26, %cst_8 : tensor<16x16xi8, #blocked1> loc(#loc)
    %51 = arith.extui %50 : tensor<16x16xi8, #blocked1> to tensor<16x16xi16, #blocked1> loc(#loc)
    %52 = arith.shli %51, %cst_7 : tensor<16x16xi16, #blocked1> loc(#loc)
    %53 = arith.ori %49, %52 : tensor<16x16xi16, #blocked1> loc(#loc)
    %54 = arith.andi %40, %cst_6 : tensor<16x16xi8, #blocked1> loc(#loc)
    %55 = arith.extui %54 : tensor<16x16xi8, #blocked1> to tensor<16x16xi32, #blocked1> loc(#loc)
    %56 = arith.cmpi ne, %55, %cst_5 : tensor<16x16xi32, #blocked1> loc(#loc)
    %57 = arith.addi %47, %cst_4 : tensor<16x16xi16, #blocked1> loc(#loc)
    %58 = arith.select %56, %57, %47 : tensor<16x16xi1, #blocked1>, tensor<16x16xi16, #blocked1> loc(#loc)
    %59 = arith.andi %41, %cst_3 : tensor<16x16xi8, #blocked1> loc(#loc)
    %60 = arith.extui %59 : tensor<16x16xi8, #blocked1> to tensor<16x16xi32, #blocked1> loc(#loc)
    %61 = arith.cmpi ne, %60, %cst_5 : tensor<16x16xi32, #blocked1> loc(#loc)
    %62 = arith.addi %53, %cst_4 : tensor<16x16xi16, #blocked1> loc(#loc)
    %63 = arith.select %61, %62, %53 : tensor<16x16xi1, #blocked1>, tensor<16x16xi16, #blocked1> loc(#loc)
    %64 = arith.extui %40 : tensor<16x16xi8, #blocked1> to tensor<16x16xi32, #blocked1> loc(#loc)
    %65 = arith.cmpi eq, %64, %cst_2 : tensor<16x16xi32, #blocked1> loc(#loc)
    %66 = arith.andi %58, %cst_1 : tensor<16x16xi16, #blocked1> loc(#loc)
    %67 = arith.ori %66, %cst_4 : tensor<16x16xi16, #blocked1> loc(#loc)
    %68 = arith.select %65, %67, %58 : tensor<16x16xi1, #blocked1>, tensor<16x16xi16, #blocked1> loc(#loc)
    %69 = arith.extui %41 : tensor<16x16xi8, #blocked1> to tensor<16x16xi32, #blocked1> loc(#loc)
    %70 = arith.cmpi eq, %69, %cst_0 : tensor<16x16xi32, #blocked1> loc(#loc)
    %71 = arith.andi %63, %cst_1 : tensor<16x16xi16, #blocked1> loc(#loc)
    %72 = arith.ori %71, %cst_4 : tensor<16x16xi16, #blocked1> loc(#loc)
    %73 = arith.select %70, %72, %63 : tensor<16x16xi1, #blocked1>, tensor<16x16xi16, #blocked1> loc(#loc)
    %74 = tt.join %68, %73 : tensor<16x16xi16, #blocked1> -> tensor<16x16x2xi16, #blocked2> loc(#loc)
    %75 = tt.reshape %74 : tensor<16x16x2xi16, #blocked2> -> tensor<16x32xi16, #blocked> loc(#loc)
    %76 = tt.bitcast %75 : tensor<16x32xi16, #blocked> -> tensor<16x32xbf16, #blocked> loc(#loc)
    %77 = tt.broadcast %39 : tensor<16x1xbf16, #blocked> -> tensor<16x32xbf16, #blocked> loc(#loc)
    %78 = arith.mulf %76, %77 : tensor<16x32xbf16, #blocked> loc(#loc)
    %79 = arith.extui %36 : tensor<16x1xi8, #blocked> to tensor<16x1xi32, #blocked> loc(#loc)
    %80 = arith.cmpi eq, %79, %cst_17 : tensor<16x1xi32, #blocked> loc(#loc)
    %81 = tt.broadcast %80 : tensor<16x1xi1, #blocked> -> tensor<16x32xi1, #blocked> loc(#loc)
    %82 = arith.select %81, %cst, %78 : tensor<16x32xi1, #blocked>, tensor<16x32xbf16, #blocked> loc(#loc)
    %83 = arith.muli %0, %c512_i32 : i32 loc(#loc)
    %84 = tt.make_range {end = 512 : i32, start = 0 : i32} : tensor<512xi32, #blocked3> loc(#loc)
    %85 = tt.splat %83 : i32 -> tensor<512xi32, #blocked3> loc(#loc)
    %86 = arith.addi %85, %84 : tensor<512xi32, #blocked3> loc(#loc)
    %87 = arith.muli %N, %c32_i32 : i32 loc(#loc)
    %88 = tt.splat %87 : i32 -> tensor<512xi32, #blocked3> loc(#loc)
    %89 = arith.cmpi slt, %86, %88 : tensor<512xi32, #blocked3> loc(#loc)
    %90 = tt.addptr %mxfp_ptr, %83 : !tt.ptr<bf16>, i32 loc(#loc)
    %91 = tt.reshape %82 : tensor<16x32xbf16, #blocked> -> tensor<512xbf16, #blocked3> loc(#loc)
    %92 = tt.splat %90 : !tt.ptr<bf16> -> tensor<512x!tt.ptr<bf16>, #blocked3> loc(#loc)
    %93 = tt.addptr %92, %84 : tensor<512x!tt.ptr<bf16>, #blocked3>, tensor<512xi32, #blocked3> loc(#loc)
    tt.store %93, %91, %89 : tensor<512x!tt.ptr<bf16>, #blocked3> loc(#loc)
    tt.return loc(#loc)
  } loc(#loc)
} loc(#loc)
#loc = loc(unknown)


// -----// IR Dump Before TritonAMDFoldTrueCmpI (tritonamdgpu-fold-true-cmpi) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 2], threadsPerWarp = [4, 16], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [4, 16], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked2 = #ttg.blocked<{sizePerThread = [1, 1, 2], threadsPerWarp = [4, 16, 1], warpsPerCTA = [4, 1, 1], order = [2, 1, 0]}>
#blocked3 = #ttg.blocked<{sizePerThread = [2], threadsPerWarp = [64], warpsPerCTA = [4], order = [0]}>
#loc1 = loc("x_ptr")
#loc2 = loc("scale_ptr")
#loc3 = loc("mxfp_ptr")
#loc4 = loc("N")
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "hip:gfx950", "ttg.threads-per-warp" = 64 : i32} {
  tt.func public @mxfp_upcast_kernel(%x_ptr: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("x_ptr"), %scale_ptr: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("scale_ptr"), %mxfp_ptr: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("mxfp_ptr"), %N: i32 {tt.divisibility = 16 : i32} loc("N")) attributes {noinline = false} {
    %cst = arith.constant dense<0x7FC0> : tensor<16x32xbf16, #blocked> loc(#loc)
    %c512_i32 = arith.constant 512 : i32 loc(#loc)
    %c32_i32 = arith.constant 32 : i32 loc(#loc)
    %cst_0 = arith.constant dense<16> : tensor<16x16xi32, #blocked1> loc(#loc)
    %cst_1 = arith.constant dense<-32768> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_2 = arith.constant dense<1> : tensor<16x16xi32, #blocked1> loc(#loc)
    %cst_3 = arith.constant dense<96> : tensor<16x16xi8, #blocked1> loc(#loc)
    %cst_4 = arith.constant dense<16128> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_5 = arith.constant dense<0> : tensor<16x16xi32, #blocked1> loc(#loc)
    %cst_6 = arith.constant dense<6> : tensor<16x16xi8, #blocked1> loc(#loc)
    %cst_7 = arith.constant dense<8> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_8 = arith.constant dense<-128> : tensor<16x16xi8, #blocked1> loc(#loc)
    %cst_9 = arith.constant dense<2> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_10 = arith.constant dense<12> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_11 = arith.constant dense<8> : tensor<16x16xi8, #blocked1> loc(#loc)
    %cst_12 = arith.constant dense<6> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_13 = arith.constant dense<112> : tensor<16x16xi8, #blocked1> loc(#loc)
    %cst_14 = arith.constant dense<7> : tensor<16x16xi8, #blocked1> loc(#loc)
    %c256_i32 = arith.constant 256 : i32 loc(#loc)
    %c16_i32 = arith.constant 16 : i32 loc(#loc)
    %cst_15 = arith.constant dense<16> : tensor<16x1xi32, #blocked1> loc(#loc)
    %cst_16 = arith.constant dense<7> : tensor<16x1xi16, #blocked> loc(#loc)
    %cst_17 = arith.constant dense<255> : tensor<16x1xi32, #blocked> loc(#loc)
    %0 = tt.get_program_id x : i32 loc(#loc)
    %1 = arith.muli %0, %c256_i32 : i32 loc(#loc)
    %2 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc)
    %3 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc)
    %4 = tt.expand_dims %2 {axis = 1 : i32} : tensor<16xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> -> tensor<16x1xi32, #blocked1> loc(#loc)
    %5 = tt.expand_dims %3 {axis = 1 : i32} : tensor<16xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<16x1xi32, #blocked> loc(#loc)
    %6 = arith.muli %4, %cst_15 : tensor<16x1xi32, #blocked1> loc(#loc)
    %7 = tt.splat %1 : i32 -> tensor<16x1xi32, #blocked1> loc(#loc)
    %8 = arith.addi %7, %6 : tensor<16x1xi32, #blocked1> loc(#loc)
    %9 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc)
    %10 = tt.expand_dims %9 {axis = 0 : i32} : tensor<16xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x16xi32, #blocked1> loc(#loc)
    %11 = tt.broadcast %8 : tensor<16x1xi32, #blocked1> -> tensor<16x16xi32, #blocked1> loc(#loc)
    %12 = tt.broadcast %10 : tensor<1x16xi32, #blocked1> -> tensor<16x16xi32, #blocked1> loc(#loc)
    %13 = arith.addi %11, %12 : tensor<16x16xi32, #blocked1> loc(#loc)
    %14 = arith.muli %N, %c16_i32 : i32 loc(#loc)
    %15 = tt.splat %14 : i32 -> tensor<16x16xi32, #blocked1> loc(#loc)
    %16 = arith.cmpi slt, %13, %15 : tensor<16x16xi32, #blocked1> loc(#loc)
    %17 = tt.expand_dims %2 {axis = 1 : i32} : tensor<16xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> -> tensor<16x1xi32, #blocked1> loc(#loc)
    %18 = arith.muli %17, %cst_15 : tensor<16x1xi32, #blocked1> loc(#loc)
    %19 = tt.broadcast %18 : tensor<16x1xi32, #blocked1> -> tensor<16x16xi32, #blocked1> loc(#loc)
    %20 = tt.expand_dims %9 {axis = 0 : i32} : tensor<16xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x16xi32, #blocked1> loc(#loc)
    %21 = tt.broadcast %20 : tensor<1x16xi32, #blocked1> -> tensor<16x16xi32, #blocked1> loc(#loc)
    %22 = arith.addi %19, %21 : tensor<16x16xi32, #blocked1> loc(#loc)
    %23 = tt.addptr %x_ptr, %1 : !tt.ptr<i8>, i32 loc(#loc)
    %24 = amdgpu.buffer_load %23[%22], %16 : tensor<16x16xi8, #blocked1> loc(#loc)
    %25 = arith.muli %0, %c16_i32 : i32 loc(#loc)
    %26 = tt.splat %25 : i32 -> tensor<16x1xi32, #blocked> loc(#loc)
    %27 = arith.addi %26, %5 : tensor<16x1xi32, #blocked> loc(#loc)
    %28 = tt.splat %N : i32 -> tensor<16x1xi32, #blocked> loc(#loc)
    %29 = arith.cmpi slt, %27, %28 : tensor<16x1xi32, #blocked> loc(#loc)
    %30 = tt.expand_dims %3 {axis = 1 : i32} : tensor<16xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<16x1xi32, #blocked> loc(#loc)
    %31 = tt.addptr %scale_ptr, %25 : !tt.ptr<i8>, i32 loc(#loc)
    %32 = amdgpu.buffer_load %31[%30], %29 : tensor<16x1xi8, #blocked> loc(#loc)
    %33 = arith.extui %32 : tensor<16x1xi8, #blocked> to tensor<16x1xi16, #blocked> loc(#loc)
    %34 = arith.shli %33, %cst_16 : tensor<16x1xi16, #blocked> loc(#loc)
    %35 = tt.bitcast %34 : tensor<16x1xi16, #blocked> -> tensor<16x1xbf16, #blocked> loc(#loc)
    %36 = arith.andi %24, %cst_14 : tensor<16x16xi8, #blocked1> loc(#loc)
    %37 = arith.andi %24, %cst_13 : tensor<16x16xi8, #blocked1> loc(#loc)
    %38 = arith.extui %36 : tensor<16x16xi8, #blocked1> to tensor<16x16xi16, #blocked1> loc(#loc)
    %39 = arith.shli %38, %cst_12 : tensor<16x16xi16, #blocked1> loc(#loc)
    %40 = arith.andi %24, %cst_11 : tensor<16x16xi8, #blocked1> loc(#loc)
    %41 = arith.extui %40 : tensor<16x16xi8, #blocked1> to tensor<16x16xi16, #blocked1> loc(#loc)
    %42 = arith.shli %41, %cst_10 : tensor<16x16xi16, #blocked1> loc(#loc)
    %43 = arith.ori %39, %42 : tensor<16x16xi16, #blocked1> loc(#loc)
    %44 = arith.extui %37 : tensor<16x16xi8, #blocked1> to tensor<16x16xi16, #blocked1> loc(#loc)
    %45 = arith.shli %44, %cst_9 : tensor<16x16xi16, #blocked1> loc(#loc)
    %46 = arith.andi %24, %cst_8 : tensor<16x16xi8, #blocked1> loc(#loc)
    %47 = arith.extui %46 : tensor<16x16xi8, #blocked1> to tensor<16x16xi16, #blocked1> loc(#loc)
    %48 = arith.shli %47, %cst_7 : tensor<16x16xi16, #blocked1> loc(#loc)
    %49 = arith.ori %45, %48 : tensor<16x16xi16, #blocked1> loc(#loc)
    %50 = arith.andi %36, %cst_6 : tensor<16x16xi8, #blocked1> loc(#loc)
    %51 = arith.extui %50 : tensor<16x16xi8, #blocked1> to tensor<16x16xi32, #blocked1> loc(#loc)
    %52 = arith.cmpi ne, %51, %cst_5 : tensor<16x16xi32, #blocked1> loc(#loc)
    %53 = arith.addi %43, %cst_4 : tensor<16x16xi16, #blocked1> loc(#loc)
    %54 = arith.select %52, %53, %43 : tensor<16x16xi1, #blocked1>, tensor<16x16xi16, #blocked1> loc(#loc)
    %55 = arith.andi %37, %cst_3 : tensor<16x16xi8, #blocked1> loc(#loc)
    %56 = arith.extui %55 : tensor<16x16xi8, #blocked1> to tensor<16x16xi32, #blocked1> loc(#loc)
    %57 = arith.cmpi ne, %56, %cst_5 : tensor<16x16xi32, #blocked1> loc(#loc)
    %58 = arith.addi %49, %cst_4 : tensor<16x16xi16, #blocked1> loc(#loc)
    %59 = arith.select %57, %58, %49 : tensor<16x16xi1, #blocked1>, tensor<16x16xi16, #blocked1> loc(#loc)
    %60 = arith.extui %36 : tensor<16x16xi8, #blocked1> to tensor<16x16xi32, #blocked1> loc(#loc)
    %61 = arith.cmpi eq, %60, %cst_2 : tensor<16x16xi32, #blocked1> loc(#loc)
    %62 = arith.andi %54, %cst_1 : tensor<16x16xi16, #blocked1> loc(#loc)
    %63 = arith.ori %62, %cst_4 : tensor<16x16xi16, #blocked1> loc(#loc)
    %64 = arith.select %61, %63, %54 : tensor<16x16xi1, #blocked1>, tensor<16x16xi16, #blocked1> loc(#loc)
    %65 = arith.extui %37 : tensor<16x16xi8, #blocked1> to tensor<16x16xi32, #blocked1> loc(#loc)
    %66 = arith.cmpi eq, %65, %cst_0 : tensor<16x16xi32, #blocked1> loc(#loc)
    %67 = arith.andi %59, %cst_1 : tensor<16x16xi16, #blocked1> loc(#loc)
    %68 = arith.ori %67, %cst_4 : tensor<16x16xi16, #blocked1> loc(#loc)
    %69 = arith.select %66, %68, %59 : tensor<16x16xi1, #blocked1>, tensor<16x16xi16, #blocked1> loc(#loc)
    %70 = tt.join %64, %69 : tensor<16x16xi16, #blocked1> -> tensor<16x16x2xi16, #blocked2> loc(#loc)
    %71 = tt.reshape %70 : tensor<16x16x2xi16, #blocked2> -> tensor<16x32xi16, #blocked> loc(#loc)
    %72 = tt.bitcast %71 : tensor<16x32xi16, #blocked> -> tensor<16x32xbf16, #blocked> loc(#loc)
    %73 = tt.broadcast %35 : tensor<16x1xbf16, #blocked> -> tensor<16x32xbf16, #blocked> loc(#loc)
    %74 = arith.mulf %72, %73 : tensor<16x32xbf16, #blocked> loc(#loc)
    %75 = arith.extui %32 : tensor<16x1xi8, #blocked> to tensor<16x1xi32, #blocked> loc(#loc)
    %76 = arith.cmpi eq, %75, %cst_17 : tensor<16x1xi32, #blocked> loc(#loc)
    %77 = tt.broadcast %76 : tensor<16x1xi1, #blocked> -> tensor<16x32xi1, #blocked> loc(#loc)
    %78 = arith.select %77, %cst, %74 : tensor<16x32xi1, #blocked>, tensor<16x32xbf16, #blocked> loc(#loc)
    %79 = arith.muli %0, %c512_i32 : i32 loc(#loc)
    %80 = tt.make_range {end = 512 : i32, start = 0 : i32} : tensor<512xi32, #blocked3> loc(#loc)
    %81 = tt.splat %79 : i32 -> tensor<512xi32, #blocked3> loc(#loc)
    %82 = arith.addi %81, %80 : tensor<512xi32, #blocked3> loc(#loc)
    %83 = arith.muli %N, %c32_i32 : i32 loc(#loc)
    %84 = tt.splat %83 : i32 -> tensor<512xi32, #blocked3> loc(#loc)
    %85 = arith.cmpi slt, %82, %84 : tensor<512xi32, #blocked3> loc(#loc)
    %86 = tt.addptr %mxfp_ptr, %79 : !tt.ptr<bf16>, i32 loc(#loc)
    %87 = tt.reshape %78 : tensor<16x32xbf16, #blocked> -> tensor<512xbf16, #blocked3> loc(#loc)
    amdgpu.buffer_store %87, %86[%80], %85 : tensor<512xbf16, #blocked3> loc(#loc)
    tt.return loc(#loc)
  } loc(#loc)
} loc(#loc)
#loc = loc(unknown)


// -----// IR Dump Before Canonicalizer (canonicalize) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 2], threadsPerWarp = [4, 16], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [4, 16], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked2 = #ttg.blocked<{sizePerThread = [1, 1, 2], threadsPerWarp = [4, 16, 1], warpsPerCTA = [4, 1, 1], order = [2, 1, 0]}>
#blocked3 = #ttg.blocked<{sizePerThread = [2], threadsPerWarp = [64], warpsPerCTA = [4], order = [0]}>
#loc1 = loc("x_ptr")
#loc2 = loc("scale_ptr")
#loc3 = loc("mxfp_ptr")
#loc4 = loc("N")
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "hip:gfx950", "ttg.threads-per-warp" = 64 : i32} {
  tt.func public @mxfp_upcast_kernel(%x_ptr: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("x_ptr"), %scale_ptr: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("scale_ptr"), %mxfp_ptr: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("mxfp_ptr"), %N: i32 {tt.divisibility = 16 : i32} loc("N")) attributes {noinline = false} {
    %cst = arith.constant dense<0x7FC0> : tensor<16x32xbf16, #blocked> loc(#loc)
    %c512_i32 = arith.constant 512 : i32 loc(#loc)
    %c32_i32 = arith.constant 32 : i32 loc(#loc)
    %cst_0 = arith.constant dense<16> : tensor<16x16xi32, #blocked1> loc(#loc)
    %cst_1 = arith.constant dense<-32768> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_2 = arith.constant dense<1> : tensor<16x16xi32, #blocked1> loc(#loc)
    %cst_3 = arith.constant dense<96> : tensor<16x16xi8, #blocked1> loc(#loc)
    %cst_4 = arith.constant dense<16128> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_5 = arith.constant dense<0> : tensor<16x16xi32, #blocked1> loc(#loc)
    %cst_6 = arith.constant dense<6> : tensor<16x16xi8, #blocked1> loc(#loc)
    %cst_7 = arith.constant dense<8> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_8 = arith.constant dense<-128> : tensor<16x16xi8, #blocked1> loc(#loc)
    %cst_9 = arith.constant dense<2> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_10 = arith.constant dense<12> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_11 = arith.constant dense<8> : tensor<16x16xi8, #blocked1> loc(#loc)
    %cst_12 = arith.constant dense<6> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_13 = arith.constant dense<112> : tensor<16x16xi8, #blocked1> loc(#loc)
    %cst_14 = arith.constant dense<7> : tensor<16x16xi8, #blocked1> loc(#loc)
    %c256_i32 = arith.constant 256 : i32 loc(#loc)
    %c16_i32 = arith.constant 16 : i32 loc(#loc)
    %cst_15 = arith.constant dense<16> : tensor<16x1xi32, #blocked1> loc(#loc)
    %cst_16 = arith.constant dense<7> : tensor<16x1xi16, #blocked> loc(#loc)
    %cst_17 = arith.constant dense<255> : tensor<16x1xi32, #blocked> loc(#loc)
    %0 = tt.get_program_id x : i32 loc(#loc)
    %1 = arith.muli %0, %c256_i32 : i32 loc(#loc)
    %2 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc)
    %3 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc)
    %4 = tt.expand_dims %2 {axis = 1 : i32} : tensor<16xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> -> tensor<16x1xi32, #blocked1> loc(#loc)
    %5 = tt.expand_dims %3 {axis = 1 : i32} : tensor<16xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<16x1xi32, #blocked> loc(#loc)
    %6 = arith.muli %4, %cst_15 : tensor<16x1xi32, #blocked1> loc(#loc)
    %7 = tt.splat %1 : i32 -> tensor<16x1xi32, #blocked1> loc(#loc)
    %8 = arith.addi %7, %6 : tensor<16x1xi32, #blocked1> loc(#loc)
    %9 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc)
    %10 = tt.expand_dims %9 {axis = 0 : i32} : tensor<16xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x16xi32, #blocked1> loc(#loc)
    %11 = tt.broadcast %8 : tensor<16x1xi32, #blocked1> -> tensor<16x16xi32, #blocked1> loc(#loc)
    %12 = tt.broadcast %10 : tensor<1x16xi32, #blocked1> -> tensor<16x16xi32, #blocked1> loc(#loc)
    %13 = arith.addi %11, %12 : tensor<16x16xi32, #blocked1> loc(#loc)
    %14 = arith.muli %N, %c16_i32 : i32 loc(#loc)
    %15 = tt.splat %14 : i32 -> tensor<16x16xi32, #blocked1> loc(#loc)
    %16 = arith.cmpi slt, %13, %15 : tensor<16x16xi32, #blocked1> loc(#loc)
    %17 = tt.expand_dims %2 {axis = 1 : i32} : tensor<16xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> -> tensor<16x1xi32, #blocked1> loc(#loc)
    %18 = arith.muli %17, %cst_15 : tensor<16x1xi32, #blocked1> loc(#loc)
    %19 = tt.broadcast %18 : tensor<16x1xi32, #blocked1> -> tensor<16x16xi32, #blocked1> loc(#loc)
    %20 = tt.expand_dims %9 {axis = 0 : i32} : tensor<16xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x16xi32, #blocked1> loc(#loc)
    %21 = tt.broadcast %20 : tensor<1x16xi32, #blocked1> -> tensor<16x16xi32, #blocked1> loc(#loc)
    %22 = arith.addi %19, %21 : tensor<16x16xi32, #blocked1> loc(#loc)
    %23 = tt.addptr %x_ptr, %1 : !tt.ptr<i8>, i32 loc(#loc)
    %24 = amdgpu.buffer_load %23[%22], %16 : tensor<16x16xi8, #blocked1> loc(#loc)
    %25 = arith.muli %0, %c16_i32 : i32 loc(#loc)
    %26 = tt.splat %25 : i32 -> tensor<16x1xi32, #blocked> loc(#loc)
    %27 = arith.addi %26, %5 : tensor<16x1xi32, #blocked> loc(#loc)
    %28 = tt.splat %N : i32 -> tensor<16x1xi32, #blocked> loc(#loc)
    %29 = arith.cmpi slt, %27, %28 : tensor<16x1xi32, #blocked> loc(#loc)
    %30 = tt.expand_dims %3 {axis = 1 : i32} : tensor<16xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<16x1xi32, #blocked> loc(#loc)
    %31 = tt.addptr %scale_ptr, %25 : !tt.ptr<i8>, i32 loc(#loc)
    %32 = amdgpu.buffer_load %31[%30], %29 : tensor<16x1xi8, #blocked> loc(#loc)
    %33 = arith.extui %32 : tensor<16x1xi8, #blocked> to tensor<16x1xi16, #blocked> loc(#loc)
    %34 = arith.shli %33, %cst_16 : tensor<16x1xi16, #blocked> loc(#loc)
    %35 = tt.bitcast %34 : tensor<16x1xi16, #blocked> -> tensor<16x1xbf16, #blocked> loc(#loc)
    %36 = arith.andi %24, %cst_14 : tensor<16x16xi8, #blocked1> loc(#loc)
    %37 = arith.andi %24, %cst_13 : tensor<16x16xi8, #blocked1> loc(#loc)
    %38 = arith.extui %36 : tensor<16x16xi8, #blocked1> to tensor<16x16xi16, #blocked1> loc(#loc)
    %39 = arith.shli %38, %cst_12 : tensor<16x16xi16, #blocked1> loc(#loc)
    %40 = arith.andi %24, %cst_11 : tensor<16x16xi8, #blocked1> loc(#loc)
    %41 = arith.extui %40 : tensor<16x16xi8, #blocked1> to tensor<16x16xi16, #blocked1> loc(#loc)
    %42 = arith.shli %41, %cst_10 : tensor<16x16xi16, #blocked1> loc(#loc)
    %43 = arith.ori %39, %42 : tensor<16x16xi16, #blocked1> loc(#loc)
    %44 = arith.extui %37 : tensor<16x16xi8, #blocked1> to tensor<16x16xi16, #blocked1> loc(#loc)
    %45 = arith.shli %44, %cst_9 : tensor<16x16xi16, #blocked1> loc(#loc)
    %46 = arith.andi %24, %cst_8 : tensor<16x16xi8, #blocked1> loc(#loc)
    %47 = arith.extui %46 : tensor<16x16xi8, #blocked1> to tensor<16x16xi16, #blocked1> loc(#loc)
    %48 = arith.shli %47, %cst_7 : tensor<16x16xi16, #blocked1> loc(#loc)
    %49 = arith.ori %45, %48 : tensor<16x16xi16, #blocked1> loc(#loc)
    %50 = arith.andi %36, %cst_6 : tensor<16x16xi8, #blocked1> loc(#loc)
    %51 = arith.extui %50 : tensor<16x16xi8, #blocked1> to tensor<16x16xi32, #blocked1> loc(#loc)
    %52 = arith.cmpi ne, %51, %cst_5 : tensor<16x16xi32, #blocked1> loc(#loc)
    %53 = arith.addi %43, %cst_4 : tensor<16x16xi16, #blocked1> loc(#loc)
    %54 = arith.select %52, %53, %43 : tensor<16x16xi1, #blocked1>, tensor<16x16xi16, #blocked1> loc(#loc)
    %55 = arith.andi %37, %cst_3 : tensor<16x16xi8, #blocked1> loc(#loc)
    %56 = arith.extui %55 : tensor<16x16xi8, #blocked1> to tensor<16x16xi32, #blocked1> loc(#loc)
    %57 = arith.cmpi ne, %56, %cst_5 : tensor<16x16xi32, #blocked1> loc(#loc)
    %58 = arith.addi %49, %cst_4 : tensor<16x16xi16, #blocked1> loc(#loc)
    %59 = arith.select %57, %58, %49 : tensor<16x16xi1, #blocked1>, tensor<16x16xi16, #blocked1> loc(#loc)
    %60 = arith.extui %36 : tensor<16x16xi8, #blocked1> to tensor<16x16xi32, #blocked1> loc(#loc)
    %61 = arith.cmpi eq, %60, %cst_2 : tensor<16x16xi32, #blocked1> loc(#loc)
    %62 = arith.andi %54, %cst_1 : tensor<16x16xi16, #blocked1> loc(#loc)
    %63 = arith.ori %62, %cst_4 : tensor<16x16xi16, #blocked1> loc(#loc)
    %64 = arith.select %61, %63, %54 : tensor<16x16xi1, #blocked1>, tensor<16x16xi16, #blocked1> loc(#loc)
    %65 = arith.extui %37 : tensor<16x16xi8, #blocked1> to tensor<16x16xi32, #blocked1> loc(#loc)
    %66 = arith.cmpi eq, %65, %cst_0 : tensor<16x16xi32, #blocked1> loc(#loc)
    %67 = arith.andi %59, %cst_1 : tensor<16x16xi16, #blocked1> loc(#loc)
    %68 = arith.ori %67, %cst_4 : tensor<16x16xi16, #blocked1> loc(#loc)
    %69 = arith.select %66, %68, %59 : tensor<16x16xi1, #blocked1>, tensor<16x16xi16, #blocked1> loc(#loc)
    %70 = tt.join %64, %69 : tensor<16x16xi16, #blocked1> -> tensor<16x16x2xi16, #blocked2> loc(#loc)
    %71 = tt.reshape %70 : tensor<16x16x2xi16, #blocked2> -> tensor<16x32xi16, #blocked> loc(#loc)
    %72 = tt.bitcast %71 : tensor<16x32xi16, #blocked> -> tensor<16x32xbf16, #blocked> loc(#loc)
    %73 = tt.broadcast %35 : tensor<16x1xbf16, #blocked> -> tensor<16x32xbf16, #blocked> loc(#loc)
    %74 = arith.mulf %72, %73 : tensor<16x32xbf16, #blocked> loc(#loc)
    %75 = arith.extui %32 : tensor<16x1xi8, #blocked> to tensor<16x1xi32, #blocked> loc(#loc)
    %76 = arith.cmpi eq, %75, %cst_17 : tensor<16x1xi32, #blocked> loc(#loc)
    %77 = tt.broadcast %76 : tensor<16x1xi1, #blocked> -> tensor<16x32xi1, #blocked> loc(#loc)
    %78 = arith.select %77, %cst, %74 : tensor<16x32xi1, #blocked>, tensor<16x32xbf16, #blocked> loc(#loc)
    %79 = arith.muli %0, %c512_i32 : i32 loc(#loc)
    %80 = tt.make_range {end = 512 : i32, start = 0 : i32} : tensor<512xi32, #blocked3> loc(#loc)
    %81 = tt.splat %79 : i32 -> tensor<512xi32, #blocked3> loc(#loc)
    %82 = arith.addi %81, %80 : tensor<512xi32, #blocked3> loc(#loc)
    %83 = arith.muli %N, %c32_i32 : i32 loc(#loc)
    %84 = tt.splat %83 : i32 -> tensor<512xi32, #blocked3> loc(#loc)
    %85 = arith.cmpi slt, %82, %84 : tensor<512xi32, #blocked3> loc(#loc)
    %86 = tt.addptr %mxfp_ptr, %79 : !tt.ptr<bf16>, i32 loc(#loc)
    %87 = tt.reshape %78 : tensor<16x32xbf16, #blocked> -> tensor<512xbf16, #blocked3> loc(#loc)
    amdgpu.buffer_store %87, %86[%80], %85 : tensor<512xbf16, #blocked3> loc(#loc)
    tt.return loc(#loc)
  } loc(#loc)
} loc(#loc)
#loc = loc(unknown)


// -----// IR Dump Before CSE (cse) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 2], threadsPerWarp = [4, 16], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [4, 16], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked2 = #ttg.blocked<{sizePerThread = [1, 1, 2], threadsPerWarp = [4, 16, 1], warpsPerCTA = [4, 1, 1], order = [2, 1, 0]}>
#blocked3 = #ttg.blocked<{sizePerThread = [2], threadsPerWarp = [64], warpsPerCTA = [4], order = [0]}>
#loc1 = loc("x_ptr")
#loc2 = loc("scale_ptr")
#loc3 = loc("mxfp_ptr")
#loc4 = loc("N")
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "hip:gfx950", "ttg.threads-per-warp" = 64 : i32} {
  tt.func public @mxfp_upcast_kernel(%x_ptr: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("x_ptr"), %scale_ptr: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("scale_ptr"), %mxfp_ptr: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("mxfp_ptr"), %N: i32 {tt.divisibility = 16 : i32} loc("N")) attributes {noinline = false} {
    %cst = arith.constant dense<0x7FC0> : tensor<16x32xbf16, #blocked> loc(#loc)
    %c512_i32 = arith.constant 512 : i32 loc(#loc)
    %c32_i32 = arith.constant 32 : i32 loc(#loc)
    %cst_0 = arith.constant dense<16> : tensor<16x16xi32, #blocked1> loc(#loc)
    %cst_1 = arith.constant dense<-32768> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_2 = arith.constant dense<1> : tensor<16x16xi32, #blocked1> loc(#loc)
    %cst_3 = arith.constant dense<96> : tensor<16x16xi8, #blocked1> loc(#loc)
    %cst_4 = arith.constant dense<16128> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_5 = arith.constant dense<0> : tensor<16x16xi32, #blocked1> loc(#loc)
    %cst_6 = arith.constant dense<6> : tensor<16x16xi8, #blocked1> loc(#loc)
    %cst_7 = arith.constant dense<8> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_8 = arith.constant dense<-128> : tensor<16x16xi8, #blocked1> loc(#loc)
    %cst_9 = arith.constant dense<2> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_10 = arith.constant dense<12> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_11 = arith.constant dense<8> : tensor<16x16xi8, #blocked1> loc(#loc)
    %cst_12 = arith.constant dense<6> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_13 = arith.constant dense<112> : tensor<16x16xi8, #blocked1> loc(#loc)
    %cst_14 = arith.constant dense<7> : tensor<16x16xi8, #blocked1> loc(#loc)
    %c256_i32 = arith.constant 256 : i32 loc(#loc)
    %c16_i32 = arith.constant 16 : i32 loc(#loc)
    %cst_15 = arith.constant dense<16> : tensor<16x1xi32, #blocked1> loc(#loc)
    %cst_16 = arith.constant dense<7> : tensor<16x1xi16, #blocked> loc(#loc)
    %cst_17 = arith.constant dense<255> : tensor<16x1xi32, #blocked> loc(#loc)
    %0 = tt.get_program_id x : i32 loc(#loc)
    %1 = arith.muli %0, %c256_i32 : i32 loc(#loc)
    %2 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc)
    %3 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc)
    %4 = tt.expand_dims %2 {axis = 1 : i32} : tensor<16xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> -> tensor<16x1xi32, #blocked1> loc(#loc)
    %5 = tt.expand_dims %3 {axis = 1 : i32} : tensor<16xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<16x1xi32, #blocked> loc(#loc)
    %6 = arith.muli %4, %cst_15 : tensor<16x1xi32, #blocked1> loc(#loc)
    %7 = tt.splat %1 : i32 -> tensor<16x1xi32, #blocked1> loc(#loc)
    %8 = arith.addi %7, %6 : tensor<16x1xi32, #blocked1> loc(#loc)
    %9 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc)
    %10 = tt.expand_dims %9 {axis = 0 : i32} : tensor<16xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x16xi32, #blocked1> loc(#loc)
    %11 = tt.broadcast %8 : tensor<16x1xi32, #blocked1> -> tensor<16x16xi32, #blocked1> loc(#loc)
    %12 = tt.broadcast %10 : tensor<1x16xi32, #blocked1> -> tensor<16x16xi32, #blocked1> loc(#loc)
    %13 = arith.addi %11, %12 : tensor<16x16xi32, #blocked1> loc(#loc)
    %14 = arith.muli %N, %c16_i32 : i32 loc(#loc)
    %15 = tt.splat %14 : i32 -> tensor<16x16xi32, #blocked1> loc(#loc)
    %16 = arith.cmpi slt, %13, %15 : tensor<16x16xi32, #blocked1> loc(#loc)
    %17 = tt.expand_dims %2 {axis = 1 : i32} : tensor<16xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> -> tensor<16x1xi32, #blocked1> loc(#loc)
    %18 = arith.muli %17, %cst_15 : tensor<16x1xi32, #blocked1> loc(#loc)
    %19 = tt.broadcast %18 : tensor<16x1xi32, #blocked1> -> tensor<16x16xi32, #blocked1> loc(#loc)
    %20 = tt.expand_dims %9 {axis = 0 : i32} : tensor<16xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x16xi32, #blocked1> loc(#loc)
    %21 = tt.broadcast %20 : tensor<1x16xi32, #blocked1> -> tensor<16x16xi32, #blocked1> loc(#loc)
    %22 = arith.addi %19, %21 : tensor<16x16xi32, #blocked1> loc(#loc)
    %23 = tt.addptr %x_ptr, %1 : !tt.ptr<i8>, i32 loc(#loc)
    %24 = amdgpu.buffer_load %23[%22], %16 : tensor<16x16xi8, #blocked1> loc(#loc)
    %25 = arith.muli %0, %c16_i32 : i32 loc(#loc)
    %26 = tt.splat %25 : i32 -> tensor<16x1xi32, #blocked> loc(#loc)
    %27 = arith.addi %26, %5 : tensor<16x1xi32, #blocked> loc(#loc)
    %28 = tt.splat %N : i32 -> tensor<16x1xi32, #blocked> loc(#loc)
    %29 = arith.cmpi slt, %27, %28 : tensor<16x1xi32, #blocked> loc(#loc)
    %30 = tt.expand_dims %3 {axis = 1 : i32} : tensor<16xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<16x1xi32, #blocked> loc(#loc)
    %31 = tt.addptr %scale_ptr, %25 : !tt.ptr<i8>, i32 loc(#loc)
    %32 = amdgpu.buffer_load %31[%30], %29 : tensor<16x1xi8, #blocked> loc(#loc)
    %33 = arith.extui %32 : tensor<16x1xi8, #blocked> to tensor<16x1xi16, #blocked> loc(#loc)
    %34 = arith.shli %33, %cst_16 : tensor<16x1xi16, #blocked> loc(#loc)
    %35 = tt.bitcast %34 : tensor<16x1xi16, #blocked> -> tensor<16x1xbf16, #blocked> loc(#loc)
    %36 = arith.andi %24, %cst_14 : tensor<16x16xi8, #blocked1> loc(#loc)
    %37 = arith.andi %24, %cst_13 : tensor<16x16xi8, #blocked1> loc(#loc)
    %38 = arith.extui %36 : tensor<16x16xi8, #blocked1> to tensor<16x16xi16, #blocked1> loc(#loc)
    %39 = arith.shli %38, %cst_12 : tensor<16x16xi16, #blocked1> loc(#loc)
    %40 = arith.andi %24, %cst_11 : tensor<16x16xi8, #blocked1> loc(#loc)
    %41 = arith.extui %40 : tensor<16x16xi8, #blocked1> to tensor<16x16xi16, #blocked1> loc(#loc)
    %42 = arith.shli %41, %cst_10 : tensor<16x16xi16, #blocked1> loc(#loc)
    %43 = arith.ori %39, %42 : tensor<16x16xi16, #blocked1> loc(#loc)
    %44 = arith.extui %37 : tensor<16x16xi8, #blocked1> to tensor<16x16xi16, #blocked1> loc(#loc)
    %45 = arith.shli %44, %cst_9 : tensor<16x16xi16, #blocked1> loc(#loc)
    %46 = arith.andi %24, %cst_8 : tensor<16x16xi8, #blocked1> loc(#loc)
    %47 = arith.extui %46 : tensor<16x16xi8, #blocked1> to tensor<16x16xi16, #blocked1> loc(#loc)
    %48 = arith.shli %47, %cst_7 : tensor<16x16xi16, #blocked1> loc(#loc)
    %49 = arith.ori %45, %48 : tensor<16x16xi16, #blocked1> loc(#loc)
    %50 = arith.andi %36, %cst_6 : tensor<16x16xi8, #blocked1> loc(#loc)
    %51 = arith.extui %50 : tensor<16x16xi8, #blocked1> to tensor<16x16xi32, #blocked1> loc(#loc)
    %52 = arith.cmpi ne, %51, %cst_5 : tensor<16x16xi32, #blocked1> loc(#loc)
    %53 = arith.addi %43, %cst_4 : tensor<16x16xi16, #blocked1> loc(#loc)
    %54 = arith.select %52, %53, %43 : tensor<16x16xi1, #blocked1>, tensor<16x16xi16, #blocked1> loc(#loc)
    %55 = arith.andi %37, %cst_3 : tensor<16x16xi8, #blocked1> loc(#loc)
    %56 = arith.extui %55 : tensor<16x16xi8, #blocked1> to tensor<16x16xi32, #blocked1> loc(#loc)
    %57 = arith.cmpi ne, %56, %cst_5 : tensor<16x16xi32, #blocked1> loc(#loc)
    %58 = arith.addi %49, %cst_4 : tensor<16x16xi16, #blocked1> loc(#loc)
    %59 = arith.select %57, %58, %49 : tensor<16x16xi1, #blocked1>, tensor<16x16xi16, #blocked1> loc(#loc)
    %60 = arith.extui %36 : tensor<16x16xi8, #blocked1> to tensor<16x16xi32, #blocked1> loc(#loc)
    %61 = arith.cmpi eq, %60, %cst_2 : tensor<16x16xi32, #blocked1> loc(#loc)
    %62 = arith.andi %54, %cst_1 : tensor<16x16xi16, #blocked1> loc(#loc)
    %63 = arith.ori %62, %cst_4 : tensor<16x16xi16, #blocked1> loc(#loc)
    %64 = arith.select %61, %63, %54 : tensor<16x16xi1, #blocked1>, tensor<16x16xi16, #blocked1> loc(#loc)
    %65 = arith.extui %37 : tensor<16x16xi8, #blocked1> to tensor<16x16xi32, #blocked1> loc(#loc)
    %66 = arith.cmpi eq, %65, %cst_0 : tensor<16x16xi32, #blocked1> loc(#loc)
    %67 = arith.andi %59, %cst_1 : tensor<16x16xi16, #blocked1> loc(#loc)
    %68 = arith.ori %67, %cst_4 : tensor<16x16xi16, #blocked1> loc(#loc)
    %69 = arith.select %66, %68, %59 : tensor<16x16xi1, #blocked1>, tensor<16x16xi16, #blocked1> loc(#loc)
    %70 = tt.join %64, %69 : tensor<16x16xi16, #blocked1> -> tensor<16x16x2xi16, #blocked2> loc(#loc)
    %71 = tt.reshape %70 : tensor<16x16x2xi16, #blocked2> -> tensor<16x32xi16, #blocked> loc(#loc)
    %72 = tt.bitcast %71 : tensor<16x32xi16, #blocked> -> tensor<16x32xbf16, #blocked> loc(#loc)
    %73 = tt.broadcast %35 : tensor<16x1xbf16, #blocked> -> tensor<16x32xbf16, #blocked> loc(#loc)
    %74 = arith.mulf %72, %73 : tensor<16x32xbf16, #blocked> loc(#loc)
    %75 = arith.extui %32 : tensor<16x1xi8, #blocked> to tensor<16x1xi32, #blocked> loc(#loc)
    %76 = arith.cmpi eq, %75, %cst_17 : tensor<16x1xi32, #blocked> loc(#loc)
    %77 = tt.broadcast %76 : tensor<16x1xi1, #blocked> -> tensor<16x32xi1, #blocked> loc(#loc)
    %78 = arith.select %77, %cst, %74 : tensor<16x32xi1, #blocked>, tensor<16x32xbf16, #blocked> loc(#loc)
    %79 = arith.muli %0, %c512_i32 : i32 loc(#loc)
    %80 = tt.make_range {end = 512 : i32, start = 0 : i32} : tensor<512xi32, #blocked3> loc(#loc)
    %81 = tt.splat %79 : i32 -> tensor<512xi32, #blocked3> loc(#loc)
    %82 = arith.addi %81, %80 : tensor<512xi32, #blocked3> loc(#loc)
    %83 = arith.muli %N, %c32_i32 : i32 loc(#loc)
    %84 = tt.splat %83 : i32 -> tensor<512xi32, #blocked3> loc(#loc)
    %85 = arith.cmpi slt, %82, %84 : tensor<512xi32, #blocked3> loc(#loc)
    %86 = tt.addptr %mxfp_ptr, %79 : !tt.ptr<bf16>, i32 loc(#loc)
    %87 = tt.reshape %78 : tensor<16x32xbf16, #blocked> -> tensor<512xbf16, #blocked3> loc(#loc)
    amdgpu.buffer_store %87, %86[%80], %85 : tensor<512xbf16, #blocked3> loc(#loc)
    tt.return loc(#loc)
  } loc(#loc)
} loc(#loc)
#loc = loc(unknown)


// -----// IR Dump Before SymbolDCE (symbol-dce) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 2], threadsPerWarp = [4, 16], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [4, 16], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked2 = #ttg.blocked<{sizePerThread = [1, 1, 2], threadsPerWarp = [4, 16, 1], warpsPerCTA = [4, 1, 1], order = [2, 1, 0]}>
#blocked3 = #ttg.blocked<{sizePerThread = [2], threadsPerWarp = [64], warpsPerCTA = [4], order = [0]}>
#loc1 = loc("x_ptr")
#loc2 = loc("scale_ptr")
#loc3 = loc("mxfp_ptr")
#loc4 = loc("N")
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "hip:gfx950", "ttg.threads-per-warp" = 64 : i32} {
  tt.func public @mxfp_upcast_kernel(%x_ptr: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("x_ptr"), %scale_ptr: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("scale_ptr"), %mxfp_ptr: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("mxfp_ptr"), %N: i32 {tt.divisibility = 16 : i32} loc("N")) attributes {noinline = false} {
    %cst = arith.constant dense<0x7FC0> : tensor<16x32xbf16, #blocked> loc(#loc)
    %c512_i32 = arith.constant 512 : i32 loc(#loc)
    %c32_i32 = arith.constant 32 : i32 loc(#loc)
    %cst_0 = arith.constant dense<16> : tensor<16x16xi32, #blocked1> loc(#loc)
    %cst_1 = arith.constant dense<-32768> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_2 = arith.constant dense<1> : tensor<16x16xi32, #blocked1> loc(#loc)
    %cst_3 = arith.constant dense<96> : tensor<16x16xi8, #blocked1> loc(#loc)
    %cst_4 = arith.constant dense<16128> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_5 = arith.constant dense<0> : tensor<16x16xi32, #blocked1> loc(#loc)
    %cst_6 = arith.constant dense<6> : tensor<16x16xi8, #blocked1> loc(#loc)
    %cst_7 = arith.constant dense<8> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_8 = arith.constant dense<-128> : tensor<16x16xi8, #blocked1> loc(#loc)
    %cst_9 = arith.constant dense<2> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_10 = arith.constant dense<12> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_11 = arith.constant dense<8> : tensor<16x16xi8, #blocked1> loc(#loc)
    %cst_12 = arith.constant dense<6> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_13 = arith.constant dense<112> : tensor<16x16xi8, #blocked1> loc(#loc)
    %cst_14 = arith.constant dense<7> : tensor<16x16xi8, #blocked1> loc(#loc)
    %c256_i32 = arith.constant 256 : i32 loc(#loc)
    %c16_i32 = arith.constant 16 : i32 loc(#loc)
    %cst_15 = arith.constant dense<16> : tensor<16x1xi32, #blocked1> loc(#loc)
    %cst_16 = arith.constant dense<7> : tensor<16x1xi16, #blocked> loc(#loc)
    %cst_17 = arith.constant dense<255> : tensor<16x1xi32, #blocked> loc(#loc)
    %0 = tt.get_program_id x : i32 loc(#loc)
    %1 = arith.muli %0, %c256_i32 : i32 loc(#loc)
    %2 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc)
    %3 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc)
    %4 = tt.expand_dims %2 {axis = 1 : i32} : tensor<16xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> -> tensor<16x1xi32, #blocked1> loc(#loc)
    %5 = tt.expand_dims %3 {axis = 1 : i32} : tensor<16xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<16x1xi32, #blocked> loc(#loc)
    %6 = arith.muli %4, %cst_15 : tensor<16x1xi32, #blocked1> loc(#loc)
    %7 = tt.splat %1 : i32 -> tensor<16x1xi32, #blocked1> loc(#loc)
    %8 = arith.addi %7, %6 : tensor<16x1xi32, #blocked1> loc(#loc)
    %9 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc)
    %10 = tt.expand_dims %9 {axis = 0 : i32} : tensor<16xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x16xi32, #blocked1> loc(#loc)
    %11 = tt.broadcast %8 : tensor<16x1xi32, #blocked1> -> tensor<16x16xi32, #blocked1> loc(#loc)
    %12 = tt.broadcast %10 : tensor<1x16xi32, #blocked1> -> tensor<16x16xi32, #blocked1> loc(#loc)
    %13 = arith.addi %11, %12 : tensor<16x16xi32, #blocked1> loc(#loc)
    %14 = arith.muli %N, %c16_i32 : i32 loc(#loc)
    %15 = tt.splat %14 : i32 -> tensor<16x16xi32, #blocked1> loc(#loc)
    %16 = arith.cmpi slt, %13, %15 : tensor<16x16xi32, #blocked1> loc(#loc)
    %17 = tt.broadcast %6 : tensor<16x1xi32, #blocked1> -> tensor<16x16xi32, #blocked1> loc(#loc)
    %18 = arith.addi %17, %12 : tensor<16x16xi32, #blocked1> loc(#loc)
    %19 = tt.addptr %x_ptr, %1 : !tt.ptr<i8>, i32 loc(#loc)
    %20 = amdgpu.buffer_load %19[%18], %16 : tensor<16x16xi8, #blocked1> loc(#loc)
    %21 = arith.muli %0, %c16_i32 : i32 loc(#loc)
    %22 = tt.splat %21 : i32 -> tensor<16x1xi32, #blocked> loc(#loc)
    %23 = arith.addi %22, %5 : tensor<16x1xi32, #blocked> loc(#loc)
    %24 = tt.splat %N : i32 -> tensor<16x1xi32, #blocked> loc(#loc)
    %25 = arith.cmpi slt, %23, %24 : tensor<16x1xi32, #blocked> loc(#loc)
    %26 = tt.addptr %scale_ptr, %21 : !tt.ptr<i8>, i32 loc(#loc)
    %27 = amdgpu.buffer_load %26[%5], %25 : tensor<16x1xi8, #blocked> loc(#loc)
    %28 = arith.extui %27 : tensor<16x1xi8, #blocked> to tensor<16x1xi16, #blocked> loc(#loc)
    %29 = arith.shli %28, %cst_16 : tensor<16x1xi16, #blocked> loc(#loc)
    %30 = tt.bitcast %29 : tensor<16x1xi16, #blocked> -> tensor<16x1xbf16, #blocked> loc(#loc)
    %31 = arith.andi %20, %cst_14 : tensor<16x16xi8, #blocked1> loc(#loc)
    %32 = arith.andi %20, %cst_13 : tensor<16x16xi8, #blocked1> loc(#loc)
    %33 = arith.extui %31 : tensor<16x16xi8, #blocked1> to tensor<16x16xi16, #blocked1> loc(#loc)
    %34 = arith.shli %33, %cst_12 : tensor<16x16xi16, #blocked1> loc(#loc)
    %35 = arith.andi %20, %cst_11 : tensor<16x16xi8, #blocked1> loc(#loc)
    %36 = arith.extui %35 : tensor<16x16xi8, #blocked1> to tensor<16x16xi16, #blocked1> loc(#loc)
    %37 = arith.shli %36, %cst_10 : tensor<16x16xi16, #blocked1> loc(#loc)
    %38 = arith.ori %34, %37 : tensor<16x16xi16, #blocked1> loc(#loc)
    %39 = arith.extui %32 : tensor<16x16xi8, #blocked1> to tensor<16x16xi16, #blocked1> loc(#loc)
    %40 = arith.shli %39, %cst_9 : tensor<16x16xi16, #blocked1> loc(#loc)
    %41 = arith.andi %20, %cst_8 : tensor<16x16xi8, #blocked1> loc(#loc)
    %42 = arith.extui %41 : tensor<16x16xi8, #blocked1> to tensor<16x16xi16, #blocked1> loc(#loc)
    %43 = arith.shli %42, %cst_7 : tensor<16x16xi16, #blocked1> loc(#loc)
    %44 = arith.ori %40, %43 : tensor<16x16xi16, #blocked1> loc(#loc)
    %45 = arith.andi %31, %cst_6 : tensor<16x16xi8, #blocked1> loc(#loc)
    %46 = arith.extui %45 : tensor<16x16xi8, #blocked1> to tensor<16x16xi32, #blocked1> loc(#loc)
    %47 = arith.cmpi ne, %46, %cst_5 : tensor<16x16xi32, #blocked1> loc(#loc)
    %48 = arith.addi %38, %cst_4 : tensor<16x16xi16, #blocked1> loc(#loc)
    %49 = arith.select %47, %48, %38 : tensor<16x16xi1, #blocked1>, tensor<16x16xi16, #blocked1> loc(#loc)
    %50 = arith.andi %32, %cst_3 : tensor<16x16xi8, #blocked1> loc(#loc)
    %51 = arith.extui %50 : tensor<16x16xi8, #blocked1> to tensor<16x16xi32, #blocked1> loc(#loc)
    %52 = arith.cmpi ne, %51, %cst_5 : tensor<16x16xi32, #blocked1> loc(#loc)
    %53 = arith.addi %44, %cst_4 : tensor<16x16xi16, #blocked1> loc(#loc)
    %54 = arith.select %52, %53, %44 : tensor<16x16xi1, #blocked1>, tensor<16x16xi16, #blocked1> loc(#loc)
    %55 = arith.extui %31 : tensor<16x16xi8, #blocked1> to tensor<16x16xi32, #blocked1> loc(#loc)
    %56 = arith.cmpi eq, %55, %cst_2 : tensor<16x16xi32, #blocked1> loc(#loc)
    %57 = arith.andi %49, %cst_1 : tensor<16x16xi16, #blocked1> loc(#loc)
    %58 = arith.ori %57, %cst_4 : tensor<16x16xi16, #blocked1> loc(#loc)
    %59 = arith.select %56, %58, %49 : tensor<16x16xi1, #blocked1>, tensor<16x16xi16, #blocked1> loc(#loc)
    %60 = arith.extui %32 : tensor<16x16xi8, #blocked1> to tensor<16x16xi32, #blocked1> loc(#loc)
    %61 = arith.cmpi eq, %60, %cst_0 : tensor<16x16xi32, #blocked1> loc(#loc)
    %62 = arith.andi %54, %cst_1 : tensor<16x16xi16, #blocked1> loc(#loc)
    %63 = arith.ori %62, %cst_4 : tensor<16x16xi16, #blocked1> loc(#loc)
    %64 = arith.select %61, %63, %54 : tensor<16x16xi1, #blocked1>, tensor<16x16xi16, #blocked1> loc(#loc)
    %65 = tt.join %59, %64 : tensor<16x16xi16, #blocked1> -> tensor<16x16x2xi16, #blocked2> loc(#loc)
    %66 = tt.reshape %65 : tensor<16x16x2xi16, #blocked2> -> tensor<16x32xi16, #blocked> loc(#loc)
    %67 = tt.bitcast %66 : tensor<16x32xi16, #blocked> -> tensor<16x32xbf16, #blocked> loc(#loc)
    %68 = tt.broadcast %30 : tensor<16x1xbf16, #blocked> -> tensor<16x32xbf16, #blocked> loc(#loc)
    %69 = arith.mulf %67, %68 : tensor<16x32xbf16, #blocked> loc(#loc)
    %70 = arith.extui %27 : tensor<16x1xi8, #blocked> to tensor<16x1xi32, #blocked> loc(#loc)
    %71 = arith.cmpi eq, %70, %cst_17 : tensor<16x1xi32, #blocked> loc(#loc)
    %72 = tt.broadcast %71 : tensor<16x1xi1, #blocked> -> tensor<16x32xi1, #blocked> loc(#loc)
    %73 = arith.select %72, %cst, %69 : tensor<16x32xi1, #blocked>, tensor<16x32xbf16, #blocked> loc(#loc)
    %74 = arith.muli %0, %c512_i32 : i32 loc(#loc)
    %75 = tt.make_range {end = 512 : i32, start = 0 : i32} : tensor<512xi32, #blocked3> loc(#loc)
    %76 = tt.splat %74 : i32 -> tensor<512xi32, #blocked3> loc(#loc)
    %77 = arith.addi %76, %75 : tensor<512xi32, #blocked3> loc(#loc)
    %78 = arith.muli %N, %c32_i32 : i32 loc(#loc)
    %79 = tt.splat %78 : i32 -> tensor<512xi32, #blocked3> loc(#loc)
    %80 = arith.cmpi slt, %77, %79 : tensor<512xi32, #blocked3> loc(#loc)
    %81 = tt.addptr %mxfp_ptr, %74 : !tt.ptr<bf16>, i32 loc(#loc)
    %82 = tt.reshape %73 : tensor<16x32xbf16, #blocked> -> tensor<512xbf16, #blocked3> loc(#loc)
    amdgpu.buffer_store %82, %81[%75], %80 : tensor<512xbf16, #blocked3> loc(#loc)
    tt.return loc(#loc)
  } loc(#loc)
} loc(#loc)
#loc = loc(unknown)


// -----// IR Dump Before TritonAMDPeepholeOptimize (tritonamdgpu-peephole-optimize) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 2], threadsPerWarp = [4, 16], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [4, 16], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked2 = #ttg.blocked<{sizePerThread = [1, 1, 2], threadsPerWarp = [4, 16, 1], warpsPerCTA = [4, 1, 1], order = [2, 1, 0]}>
#blocked3 = #ttg.blocked<{sizePerThread = [2], threadsPerWarp = [64], warpsPerCTA = [4], order = [0]}>
#loc1 = loc("x_ptr")
#loc2 = loc("scale_ptr")
#loc3 = loc("mxfp_ptr")
#loc4 = loc("N")
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "hip:gfx950", "ttg.threads-per-warp" = 64 : i32} {
  tt.func public @mxfp_upcast_kernel(%x_ptr: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("x_ptr"), %scale_ptr: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("scale_ptr"), %mxfp_ptr: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("mxfp_ptr"), %N: i32 {tt.divisibility = 16 : i32} loc("N")) attributes {noinline = false} {
    %cst = arith.constant dense<0x7FC0> : tensor<16x32xbf16, #blocked> loc(#loc)
    %c512_i32 = arith.constant 512 : i32 loc(#loc)
    %c32_i32 = arith.constant 32 : i32 loc(#loc)
    %cst_0 = arith.constant dense<16> : tensor<16x16xi32, #blocked1> loc(#loc)
    %cst_1 = arith.constant dense<-32768> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_2 = arith.constant dense<1> : tensor<16x16xi32, #blocked1> loc(#loc)
    %cst_3 = arith.constant dense<96> : tensor<16x16xi8, #blocked1> loc(#loc)
    %cst_4 = arith.constant dense<16128> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_5 = arith.constant dense<0> : tensor<16x16xi32, #blocked1> loc(#loc)
    %cst_6 = arith.constant dense<6> : tensor<16x16xi8, #blocked1> loc(#loc)
    %cst_7 = arith.constant dense<8> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_8 = arith.constant dense<-128> : tensor<16x16xi8, #blocked1> loc(#loc)
    %cst_9 = arith.constant dense<2> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_10 = arith.constant dense<12> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_11 = arith.constant dense<8> : tensor<16x16xi8, #blocked1> loc(#loc)
    %cst_12 = arith.constant dense<6> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_13 = arith.constant dense<112> : tensor<16x16xi8, #blocked1> loc(#loc)
    %cst_14 = arith.constant dense<7> : tensor<16x16xi8, #blocked1> loc(#loc)
    %c256_i32 = arith.constant 256 : i32 loc(#loc)
    %c16_i32 = arith.constant 16 : i32 loc(#loc)
    %cst_15 = arith.constant dense<16> : tensor<16x1xi32, #blocked1> loc(#loc)
    %cst_16 = arith.constant dense<7> : tensor<16x1xi16, #blocked> loc(#loc)
    %cst_17 = arith.constant dense<255> : tensor<16x1xi32, #blocked> loc(#loc)
    %0 = tt.get_program_id x : i32 loc(#loc)
    %1 = arith.muli %0, %c256_i32 : i32 loc(#loc)
    %2 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc)
    %3 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc)
    %4 = tt.expand_dims %2 {axis = 1 : i32} : tensor<16xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> -> tensor<16x1xi32, #blocked1> loc(#loc)
    %5 = tt.expand_dims %3 {axis = 1 : i32} : tensor<16xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<16x1xi32, #blocked> loc(#loc)
    %6 = arith.muli %4, %cst_15 : tensor<16x1xi32, #blocked1> loc(#loc)
    %7 = tt.splat %1 : i32 -> tensor<16x1xi32, #blocked1> loc(#loc)
    %8 = arith.addi %7, %6 : tensor<16x1xi32, #blocked1> loc(#loc)
    %9 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc)
    %10 = tt.expand_dims %9 {axis = 0 : i32} : tensor<16xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x16xi32, #blocked1> loc(#loc)
    %11 = tt.broadcast %8 : tensor<16x1xi32, #blocked1> -> tensor<16x16xi32, #blocked1> loc(#loc)
    %12 = tt.broadcast %10 : tensor<1x16xi32, #blocked1> -> tensor<16x16xi32, #blocked1> loc(#loc)
    %13 = arith.addi %11, %12 : tensor<16x16xi32, #blocked1> loc(#loc)
    %14 = arith.muli %N, %c16_i32 : i32 loc(#loc)
    %15 = tt.splat %14 : i32 -> tensor<16x16xi32, #blocked1> loc(#loc)
    %16 = arith.cmpi slt, %13, %15 : tensor<16x16xi32, #blocked1> loc(#loc)
    %17 = tt.broadcast %6 : tensor<16x1xi32, #blocked1> -> tensor<16x16xi32, #blocked1> loc(#loc)
    %18 = arith.addi %17, %12 : tensor<16x16xi32, #blocked1> loc(#loc)
    %19 = tt.addptr %x_ptr, %1 : !tt.ptr<i8>, i32 loc(#loc)
    %20 = amdgpu.buffer_load %19[%18], %16 : tensor<16x16xi8, #blocked1> loc(#loc)
    %21 = arith.muli %0, %c16_i32 : i32 loc(#loc)
    %22 = tt.splat %21 : i32 -> tensor<16x1xi32, #blocked> loc(#loc)
    %23 = arith.addi %22, %5 : tensor<16x1xi32, #blocked> loc(#loc)
    %24 = tt.splat %N : i32 -> tensor<16x1xi32, #blocked> loc(#loc)
    %25 = arith.cmpi slt, %23, %24 : tensor<16x1xi32, #blocked> loc(#loc)
    %26 = tt.addptr %scale_ptr, %21 : !tt.ptr<i8>, i32 loc(#loc)
    %27 = amdgpu.buffer_load %26[%5], %25 : tensor<16x1xi8, #blocked> loc(#loc)
    %28 = arith.extui %27 : tensor<16x1xi8, #blocked> to tensor<16x1xi16, #blocked> loc(#loc)
    %29 = arith.shli %28, %cst_16 : tensor<16x1xi16, #blocked> loc(#loc)
    %30 = tt.bitcast %29 : tensor<16x1xi16, #blocked> -> tensor<16x1xbf16, #blocked> loc(#loc)
    %31 = arith.andi %20, %cst_14 : tensor<16x16xi8, #blocked1> loc(#loc)
    %32 = arith.andi %20, %cst_13 : tensor<16x16xi8, #blocked1> loc(#loc)
    %33 = arith.extui %31 : tensor<16x16xi8, #blocked1> to tensor<16x16xi16, #blocked1> loc(#loc)
    %34 = arith.shli %33, %cst_12 : tensor<16x16xi16, #blocked1> loc(#loc)
    %35 = arith.andi %20, %cst_11 : tensor<16x16xi8, #blocked1> loc(#loc)
    %36 = arith.extui %35 : tensor<16x16xi8, #blocked1> to tensor<16x16xi16, #blocked1> loc(#loc)
    %37 = arith.shli %36, %cst_10 : tensor<16x16xi16, #blocked1> loc(#loc)
    %38 = arith.ori %34, %37 : tensor<16x16xi16, #blocked1> loc(#loc)
    %39 = arith.extui %32 : tensor<16x16xi8, #blocked1> to tensor<16x16xi16, #blocked1> loc(#loc)
    %40 = arith.shli %39, %cst_9 : tensor<16x16xi16, #blocked1> loc(#loc)
    %41 = arith.andi %20, %cst_8 : tensor<16x16xi8, #blocked1> loc(#loc)
    %42 = arith.extui %41 : tensor<16x16xi8, #blocked1> to tensor<16x16xi16, #blocked1> loc(#loc)
    %43 = arith.shli %42, %cst_7 : tensor<16x16xi16, #blocked1> loc(#loc)
    %44 = arith.ori %40, %43 : tensor<16x16xi16, #blocked1> loc(#loc)
    %45 = arith.andi %31, %cst_6 : tensor<16x16xi8, #blocked1> loc(#loc)
    %46 = arith.extui %45 : tensor<16x16xi8, #blocked1> to tensor<16x16xi32, #blocked1> loc(#loc)
    %47 = arith.cmpi ne, %46, %cst_5 : tensor<16x16xi32, #blocked1> loc(#loc)
    %48 = arith.addi %38, %cst_4 : tensor<16x16xi16, #blocked1> loc(#loc)
    %49 = arith.select %47, %48, %38 : tensor<16x16xi1, #blocked1>, tensor<16x16xi16, #blocked1> loc(#loc)
    %50 = arith.andi %32, %cst_3 : tensor<16x16xi8, #blocked1> loc(#loc)
    %51 = arith.extui %50 : tensor<16x16xi8, #blocked1> to tensor<16x16xi32, #blocked1> loc(#loc)
    %52 = arith.cmpi ne, %51, %cst_5 : tensor<16x16xi32, #blocked1> loc(#loc)
    %53 = arith.addi %44, %cst_4 : tensor<16x16xi16, #blocked1> loc(#loc)
    %54 = arith.select %52, %53, %44 : tensor<16x16xi1, #blocked1>, tensor<16x16xi16, #blocked1> loc(#loc)
    %55 = arith.extui %31 : tensor<16x16xi8, #blocked1> to tensor<16x16xi32, #blocked1> loc(#loc)
    %56 = arith.cmpi eq, %55, %cst_2 : tensor<16x16xi32, #blocked1> loc(#loc)
    %57 = arith.andi %49, %cst_1 : tensor<16x16xi16, #blocked1> loc(#loc)
    %58 = arith.ori %57, %cst_4 : tensor<16x16xi16, #blocked1> loc(#loc)
    %59 = arith.select %56, %58, %49 : tensor<16x16xi1, #blocked1>, tensor<16x16xi16, #blocked1> loc(#loc)
    %60 = arith.extui %32 : tensor<16x16xi8, #blocked1> to tensor<16x16xi32, #blocked1> loc(#loc)
    %61 = arith.cmpi eq, %60, %cst_0 : tensor<16x16xi32, #blocked1> loc(#loc)
    %62 = arith.andi %54, %cst_1 : tensor<16x16xi16, #blocked1> loc(#loc)
    %63 = arith.ori %62, %cst_4 : tensor<16x16xi16, #blocked1> loc(#loc)
    %64 = arith.select %61, %63, %54 : tensor<16x16xi1, #blocked1>, tensor<16x16xi16, #blocked1> loc(#loc)
    %65 = tt.join %59, %64 : tensor<16x16xi16, #blocked1> -> tensor<16x16x2xi16, #blocked2> loc(#loc)
    %66 = tt.reshape %65 : tensor<16x16x2xi16, #blocked2> -> tensor<16x32xi16, #blocked> loc(#loc)
    %67 = tt.bitcast %66 : tensor<16x32xi16, #blocked> -> tensor<16x32xbf16, #blocked> loc(#loc)
    %68 = tt.broadcast %30 : tensor<16x1xbf16, #blocked> -> tensor<16x32xbf16, #blocked> loc(#loc)
    %69 = arith.mulf %67, %68 : tensor<16x32xbf16, #blocked> loc(#loc)
    %70 = arith.extui %27 : tensor<16x1xi8, #blocked> to tensor<16x1xi32, #blocked> loc(#loc)
    %71 = arith.cmpi eq, %70, %cst_17 : tensor<16x1xi32, #blocked> loc(#loc)
    %72 = tt.broadcast %71 : tensor<16x1xi1, #blocked> -> tensor<16x32xi1, #blocked> loc(#loc)
    %73 = arith.select %72, %cst, %69 : tensor<16x32xi1, #blocked>, tensor<16x32xbf16, #blocked> loc(#loc)
    %74 = arith.muli %0, %c512_i32 : i32 loc(#loc)
    %75 = tt.make_range {end = 512 : i32, start = 0 : i32} : tensor<512xi32, #blocked3> loc(#loc)
    %76 = tt.splat %74 : i32 -> tensor<512xi32, #blocked3> loc(#loc)
    %77 = arith.addi %76, %75 : tensor<512xi32, #blocked3> loc(#loc)
    %78 = arith.muli %N, %c32_i32 : i32 loc(#loc)
    %79 = tt.splat %78 : i32 -> tensor<512xi32, #blocked3> loc(#loc)
    %80 = arith.cmpi slt, %77, %79 : tensor<512xi32, #blocked3> loc(#loc)
    %81 = tt.addptr %mxfp_ptr, %74 : !tt.ptr<bf16>, i32 loc(#loc)
    %82 = tt.reshape %73 : tensor<16x32xbf16, #blocked> -> tensor<512xbf16, #blocked3> loc(#loc)
    amdgpu.buffer_store %82, %81[%75], %80 : tensor<512xbf16, #blocked3> loc(#loc)
    tt.return loc(#loc)
  } loc(#loc)
} loc(#loc)
#loc = loc(unknown)


// -----// IR Dump Before OptimizeAMDLDSUsage (optimize-amd-lds-usage) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 2], threadsPerWarp = [4, 16], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [4, 16], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked2 = #ttg.blocked<{sizePerThread = [1, 1, 2], threadsPerWarp = [4, 16, 1], warpsPerCTA = [4, 1, 1], order = [2, 1, 0]}>
#blocked3 = #ttg.blocked<{sizePerThread = [2], threadsPerWarp = [64], warpsPerCTA = [4], order = [0]}>
#loc1 = loc("x_ptr")
#loc2 = loc("scale_ptr")
#loc3 = loc("mxfp_ptr")
#loc4 = loc("N")
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "hip:gfx950", "ttg.threads-per-warp" = 64 : i32} {
  tt.func public @mxfp_upcast_kernel(%x_ptr: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("x_ptr"), %scale_ptr: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("scale_ptr"), %mxfp_ptr: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("mxfp_ptr"), %N: i32 {tt.divisibility = 16 : i32} loc("N")) attributes {noinline = false} {
    %cst = arith.constant dense<0x7FC0> : tensor<16x32xbf16, #blocked> loc(#loc)
    %c512_i32 = arith.constant 512 : i32 loc(#loc)
    %c32_i32 = arith.constant 32 : i32 loc(#loc)
    %cst_0 = arith.constant dense<16> : tensor<16x16xi32, #blocked1> loc(#loc)
    %cst_1 = arith.constant dense<-32768> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_2 = arith.constant dense<1> : tensor<16x16xi32, #blocked1> loc(#loc)
    %cst_3 = arith.constant dense<96> : tensor<16x16xi8, #blocked1> loc(#loc)
    %cst_4 = arith.constant dense<16128> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_5 = arith.constant dense<0> : tensor<16x16xi32, #blocked1> loc(#loc)
    %cst_6 = arith.constant dense<6> : tensor<16x16xi8, #blocked1> loc(#loc)
    %cst_7 = arith.constant dense<8> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_8 = arith.constant dense<-128> : tensor<16x16xi8, #blocked1> loc(#loc)
    %cst_9 = arith.constant dense<2> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_10 = arith.constant dense<12> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_11 = arith.constant dense<8> : tensor<16x16xi8, #blocked1> loc(#loc)
    %cst_12 = arith.constant dense<6> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_13 = arith.constant dense<112> : tensor<16x16xi8, #blocked1> loc(#loc)
    %cst_14 = arith.constant dense<7> : tensor<16x16xi8, #blocked1> loc(#loc)
    %c256_i32 = arith.constant 256 : i32 loc(#loc)
    %c16_i32 = arith.constant 16 : i32 loc(#loc)
    %cst_15 = arith.constant dense<16> : tensor<16x1xi32, #blocked1> loc(#loc)
    %cst_16 = arith.constant dense<7> : tensor<16x1xi16, #blocked> loc(#loc)
    %cst_17 = arith.constant dense<255> : tensor<16x1xi32, #blocked> loc(#loc)
    %0 = tt.get_program_id x : i32 loc(#loc)
    %1 = arith.muli %0, %c256_i32 : i32 loc(#loc)
    %2 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc)
    %3 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc)
    %4 = tt.expand_dims %2 {axis = 1 : i32} : tensor<16xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> -> tensor<16x1xi32, #blocked1> loc(#loc)
    %5 = tt.expand_dims %3 {axis = 1 : i32} : tensor<16xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<16x1xi32, #blocked> loc(#loc)
    %6 = arith.muli %4, %cst_15 : tensor<16x1xi32, #blocked1> loc(#loc)
    %7 = tt.splat %1 : i32 -> tensor<16x1xi32, #blocked1> loc(#loc)
    %8 = arith.addi %7, %6 : tensor<16x1xi32, #blocked1> loc(#loc)
    %9 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc)
    %10 = tt.expand_dims %9 {axis = 0 : i32} : tensor<16xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x16xi32, #blocked1> loc(#loc)
    %11 = tt.broadcast %8 : tensor<16x1xi32, #blocked1> -> tensor<16x16xi32, #blocked1> loc(#loc)
    %12 = tt.broadcast %10 : tensor<1x16xi32, #blocked1> -> tensor<16x16xi32, #blocked1> loc(#loc)
    %13 = arith.addi %11, %12 : tensor<16x16xi32, #blocked1> loc(#loc)
    %14 = arith.muli %N, %c16_i32 : i32 loc(#loc)
    %15 = tt.splat %14 : i32 -> tensor<16x16xi32, #blocked1> loc(#loc)
    %16 = arith.cmpi slt, %13, %15 : tensor<16x16xi32, #blocked1> loc(#loc)
    %17 = tt.broadcast %6 : tensor<16x1xi32, #blocked1> -> tensor<16x16xi32, #blocked1> loc(#loc)
    %18 = arith.addi %17, %12 : tensor<16x16xi32, #blocked1> loc(#loc)
    %19 = tt.addptr %x_ptr, %1 : !tt.ptr<i8>, i32 loc(#loc)
    %20 = amdgpu.buffer_load %19[%18], %16 : tensor<16x16xi8, #blocked1> loc(#loc)
    %21 = arith.muli %0, %c16_i32 : i32 loc(#loc)
    %22 = tt.splat %21 : i32 -> tensor<16x1xi32, #blocked> loc(#loc)
    %23 = arith.addi %22, %5 : tensor<16x1xi32, #blocked> loc(#loc)
    %24 = tt.splat %N : i32 -> tensor<16x1xi32, #blocked> loc(#loc)
    %25 = arith.cmpi slt, %23, %24 : tensor<16x1xi32, #blocked> loc(#loc)
    %26 = tt.addptr %scale_ptr, %21 : !tt.ptr<i8>, i32 loc(#loc)
    %27 = amdgpu.buffer_load %26[%5], %25 : tensor<16x1xi8, #blocked> loc(#loc)
    %28 = arith.extui %27 : tensor<16x1xi8, #blocked> to tensor<16x1xi16, #blocked> loc(#loc)
    %29 = arith.shli %28, %cst_16 : tensor<16x1xi16, #blocked> loc(#loc)
    %30 = tt.bitcast %29 : tensor<16x1xi16, #blocked> -> tensor<16x1xbf16, #blocked> loc(#loc)
    %31 = arith.andi %20, %cst_14 : tensor<16x16xi8, #blocked1> loc(#loc)
    %32 = arith.andi %20, %cst_13 : tensor<16x16xi8, #blocked1> loc(#loc)
    %33 = arith.extui %31 : tensor<16x16xi8, #blocked1> to tensor<16x16xi16, #blocked1> loc(#loc)
    %34 = arith.shli %33, %cst_12 : tensor<16x16xi16, #blocked1> loc(#loc)
    %35 = arith.andi %20, %cst_11 : tensor<16x16xi8, #blocked1> loc(#loc)
    %36 = arith.extui %35 : tensor<16x16xi8, #blocked1> to tensor<16x16xi16, #blocked1> loc(#loc)
    %37 = arith.shli %36, %cst_10 : tensor<16x16xi16, #blocked1> loc(#loc)
    %38 = arith.ori %34, %37 : tensor<16x16xi16, #blocked1> loc(#loc)
    %39 = arith.extui %32 : tensor<16x16xi8, #blocked1> to tensor<16x16xi16, #blocked1> loc(#loc)
    %40 = arith.shli %39, %cst_9 : tensor<16x16xi16, #blocked1> loc(#loc)
    %41 = arith.andi %20, %cst_8 : tensor<16x16xi8, #blocked1> loc(#loc)
    %42 = arith.extui %41 : tensor<16x16xi8, #blocked1> to tensor<16x16xi16, #blocked1> loc(#loc)
    %43 = arith.shli %42, %cst_7 : tensor<16x16xi16, #blocked1> loc(#loc)
    %44 = arith.ori %40, %43 : tensor<16x16xi16, #blocked1> loc(#loc)
    %45 = arith.andi %31, %cst_6 : tensor<16x16xi8, #blocked1> loc(#loc)
    %46 = arith.extui %45 : tensor<16x16xi8, #blocked1> to tensor<16x16xi32, #blocked1> loc(#loc)
    %47 = arith.cmpi ne, %46, %cst_5 : tensor<16x16xi32, #blocked1> loc(#loc)
    %48 = arith.addi %38, %cst_4 : tensor<16x16xi16, #blocked1> loc(#loc)
    %49 = arith.select %47, %48, %38 : tensor<16x16xi1, #blocked1>, tensor<16x16xi16, #blocked1> loc(#loc)
    %50 = arith.andi %32, %cst_3 : tensor<16x16xi8, #blocked1> loc(#loc)
    %51 = arith.extui %50 : tensor<16x16xi8, #blocked1> to tensor<16x16xi32, #blocked1> loc(#loc)
    %52 = arith.cmpi ne, %51, %cst_5 : tensor<16x16xi32, #blocked1> loc(#loc)
    %53 = arith.addi %44, %cst_4 : tensor<16x16xi16, #blocked1> loc(#loc)
    %54 = arith.select %52, %53, %44 : tensor<16x16xi1, #blocked1>, tensor<16x16xi16, #blocked1> loc(#loc)
    %55 = arith.extui %31 : tensor<16x16xi8, #blocked1> to tensor<16x16xi32, #blocked1> loc(#loc)
    %56 = arith.cmpi eq, %55, %cst_2 : tensor<16x16xi32, #blocked1> loc(#loc)
    %57 = arith.andi %49, %cst_1 : tensor<16x16xi16, #blocked1> loc(#loc)
    %58 = arith.ori %57, %cst_4 : tensor<16x16xi16, #blocked1> loc(#loc)
    %59 = arith.select %56, %58, %49 : tensor<16x16xi1, #blocked1>, tensor<16x16xi16, #blocked1> loc(#loc)
    %60 = arith.extui %32 : tensor<16x16xi8, #blocked1> to tensor<16x16xi32, #blocked1> loc(#loc)
    %61 = arith.cmpi eq, %60, %cst_0 : tensor<16x16xi32, #blocked1> loc(#loc)
    %62 = arith.andi %54, %cst_1 : tensor<16x16xi16, #blocked1> loc(#loc)
    %63 = arith.ori %62, %cst_4 : tensor<16x16xi16, #blocked1> loc(#loc)
    %64 = arith.select %61, %63, %54 : tensor<16x16xi1, #blocked1>, tensor<16x16xi16, #blocked1> loc(#loc)
    %65 = tt.join %59, %64 : tensor<16x16xi16, #blocked1> -> tensor<16x16x2xi16, #blocked2> loc(#loc)
    %66 = tt.reshape %65 : tensor<16x16x2xi16, #blocked2> -> tensor<16x32xi16, #blocked> loc(#loc)
    %67 = tt.bitcast %66 : tensor<16x32xi16, #blocked> -> tensor<16x32xbf16, #blocked> loc(#loc)
    %68 = tt.broadcast %30 : tensor<16x1xbf16, #blocked> -> tensor<16x32xbf16, #blocked> loc(#loc)
    %69 = arith.mulf %67, %68 : tensor<16x32xbf16, #blocked> loc(#loc)
    %70 = arith.extui %27 : tensor<16x1xi8, #blocked> to tensor<16x1xi32, #blocked> loc(#loc)
    %71 = arith.cmpi eq, %70, %cst_17 : tensor<16x1xi32, #blocked> loc(#loc)
    %72 = tt.broadcast %71 : tensor<16x1xi1, #blocked> -> tensor<16x32xi1, #blocked> loc(#loc)
    %73 = arith.select %72, %cst, %69 : tensor<16x32xi1, #blocked>, tensor<16x32xbf16, #blocked> loc(#loc)
    %74 = arith.muli %0, %c512_i32 : i32 loc(#loc)
    %75 = tt.make_range {end = 512 : i32, start = 0 : i32} : tensor<512xi32, #blocked3> loc(#loc)
    %76 = tt.splat %74 : i32 -> tensor<512xi32, #blocked3> loc(#loc)
    %77 = arith.addi %76, %75 : tensor<512xi32, #blocked3> loc(#loc)
    %78 = arith.muli %N, %c32_i32 : i32 loc(#loc)
    %79 = tt.splat %78 : i32 -> tensor<512xi32, #blocked3> loc(#loc)
    %80 = arith.cmpi slt, %77, %79 : tensor<512xi32, #blocked3> loc(#loc)
    %81 = tt.addptr %mxfp_ptr, %74 : !tt.ptr<bf16>, i32 loc(#loc)
    %82 = tt.reshape %73 : tensor<16x32xbf16, #blocked> -> tensor<512xbf16, #blocked3> loc(#loc)
    amdgpu.buffer_store %82, %81[%75], %80 : tensor<512xbf16, #blocked3> loc(#loc)
    tt.return loc(#loc)
  } loc(#loc)
} loc(#loc)
#loc = loc(unknown)


// -----// IR Dump Before TritonSCFToCF (triton-scf-to-cf) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 2], threadsPerWarp = [4, 16], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [4, 16], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked2 = #ttg.blocked<{sizePerThread = [1, 1, 2], threadsPerWarp = [4, 16, 1], warpsPerCTA = [4, 1, 1], order = [2, 1, 0]}>
#blocked3 = #ttg.blocked<{sizePerThread = [2], threadsPerWarp = [64], warpsPerCTA = [4], order = [0]}>
#loc1 = loc("x_ptr")
#loc2 = loc("scale_ptr")
#loc3 = loc("mxfp_ptr")
#loc4 = loc("N")
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "hip:gfx950", "ttg.threads-per-warp" = 64 : i32} {
  tt.func public @mxfp_upcast_kernel(%x_ptr: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("x_ptr"), %scale_ptr: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("scale_ptr"), %mxfp_ptr: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("mxfp_ptr"), %N: i32 {tt.divisibility = 16 : i32} loc("N")) attributes {noinline = false} {
    %cst = arith.constant dense<0x7FC0> : tensor<16x32xbf16, #blocked> loc(#loc)
    %c512_i32 = arith.constant 512 : i32 loc(#loc)
    %c32_i32 = arith.constant 32 : i32 loc(#loc)
    %cst_0 = arith.constant dense<16> : tensor<16x16xi32, #blocked1> loc(#loc)
    %cst_1 = arith.constant dense<-32768> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_2 = arith.constant dense<1> : tensor<16x16xi32, #blocked1> loc(#loc)
    %cst_3 = arith.constant dense<96> : tensor<16x16xi8, #blocked1> loc(#loc)
    %cst_4 = arith.constant dense<16128> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_5 = arith.constant dense<0> : tensor<16x16xi32, #blocked1> loc(#loc)
    %cst_6 = arith.constant dense<6> : tensor<16x16xi8, #blocked1> loc(#loc)
    %cst_7 = arith.constant dense<8> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_8 = arith.constant dense<-128> : tensor<16x16xi8, #blocked1> loc(#loc)
    %cst_9 = arith.constant dense<2> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_10 = arith.constant dense<12> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_11 = arith.constant dense<8> : tensor<16x16xi8, #blocked1> loc(#loc)
    %cst_12 = arith.constant dense<6> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_13 = arith.constant dense<112> : tensor<16x16xi8, #blocked1> loc(#loc)
    %cst_14 = arith.constant dense<7> : tensor<16x16xi8, #blocked1> loc(#loc)
    %c256_i32 = arith.constant 256 : i32 loc(#loc)
    %c16_i32 = arith.constant 16 : i32 loc(#loc)
    %cst_15 = arith.constant dense<16> : tensor<16x1xi32, #blocked1> loc(#loc)
    %cst_16 = arith.constant dense<7> : tensor<16x1xi16, #blocked> loc(#loc)
    %cst_17 = arith.constant dense<255> : tensor<16x1xi32, #blocked> loc(#loc)
    %0 = tt.get_program_id x : i32 loc(#loc)
    %1 = arith.muli %0, %c256_i32 : i32 loc(#loc)
    %2 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc)
    %3 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc)
    %4 = tt.expand_dims %2 {axis = 1 : i32} : tensor<16xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> -> tensor<16x1xi32, #blocked1> loc(#loc)
    %5 = tt.expand_dims %3 {axis = 1 : i32} : tensor<16xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<16x1xi32, #blocked> loc(#loc)
    %6 = arith.muli %4, %cst_15 : tensor<16x1xi32, #blocked1> loc(#loc)
    %7 = tt.splat %1 : i32 -> tensor<16x1xi32, #blocked1> loc(#loc)
    %8 = arith.addi %7, %6 : tensor<16x1xi32, #blocked1> loc(#loc)
    %9 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc)
    %10 = tt.expand_dims %9 {axis = 0 : i32} : tensor<16xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x16xi32, #blocked1> loc(#loc)
    %11 = tt.broadcast %8 : tensor<16x1xi32, #blocked1> -> tensor<16x16xi32, #blocked1> loc(#loc)
    %12 = tt.broadcast %10 : tensor<1x16xi32, #blocked1> -> tensor<16x16xi32, #blocked1> loc(#loc)
    %13 = arith.addi %11, %12 : tensor<16x16xi32, #blocked1> loc(#loc)
    %14 = arith.muli %N, %c16_i32 : i32 loc(#loc)
    %15 = tt.splat %14 : i32 -> tensor<16x16xi32, #blocked1> loc(#loc)
    %16 = arith.cmpi slt, %13, %15 : tensor<16x16xi32, #blocked1> loc(#loc)
    %17 = tt.broadcast %6 : tensor<16x1xi32, #blocked1> -> tensor<16x16xi32, #blocked1> loc(#loc)
    %18 = arith.addi %17, %12 : tensor<16x16xi32, #blocked1> loc(#loc)
    %19 = tt.addptr %x_ptr, %1 : !tt.ptr<i8>, i32 loc(#loc)
    %20 = amdgpu.buffer_load %19[%18], %16 : tensor<16x16xi8, #blocked1> loc(#loc)
    %21 = arith.muli %0, %c16_i32 : i32 loc(#loc)
    %22 = tt.splat %21 : i32 -> tensor<16x1xi32, #blocked> loc(#loc)
    %23 = arith.addi %22, %5 : tensor<16x1xi32, #blocked> loc(#loc)
    %24 = tt.splat %N : i32 -> tensor<16x1xi32, #blocked> loc(#loc)
    %25 = arith.cmpi slt, %23, %24 : tensor<16x1xi32, #blocked> loc(#loc)
    %26 = tt.addptr %scale_ptr, %21 : !tt.ptr<i8>, i32 loc(#loc)
    %27 = amdgpu.buffer_load %26[%5], %25 : tensor<16x1xi8, #blocked> loc(#loc)
    %28 = arith.extui %27 : tensor<16x1xi8, #blocked> to tensor<16x1xi16, #blocked> loc(#loc)
    %29 = arith.shli %28, %cst_16 : tensor<16x1xi16, #blocked> loc(#loc)
    %30 = tt.bitcast %29 : tensor<16x1xi16, #blocked> -> tensor<16x1xbf16, #blocked> loc(#loc)
    %31 = arith.andi %20, %cst_14 : tensor<16x16xi8, #blocked1> loc(#loc)
    %32 = arith.andi %20, %cst_13 : tensor<16x16xi8, #blocked1> loc(#loc)
    %33 = arith.extui %31 : tensor<16x16xi8, #blocked1> to tensor<16x16xi16, #blocked1> loc(#loc)
    %34 = arith.shli %33, %cst_12 : tensor<16x16xi16, #blocked1> loc(#loc)
    %35 = arith.andi %20, %cst_11 : tensor<16x16xi8, #blocked1> loc(#loc)
    %36 = arith.extui %35 : tensor<16x16xi8, #blocked1> to tensor<16x16xi16, #blocked1> loc(#loc)
    %37 = arith.shli %36, %cst_10 : tensor<16x16xi16, #blocked1> loc(#loc)
    %38 = arith.ori %34, %37 : tensor<16x16xi16, #blocked1> loc(#loc)
    %39 = arith.extui %32 : tensor<16x16xi8, #blocked1> to tensor<16x16xi16, #blocked1> loc(#loc)
    %40 = arith.shli %39, %cst_9 : tensor<16x16xi16, #blocked1> loc(#loc)
    %41 = arith.andi %20, %cst_8 : tensor<16x16xi8, #blocked1> loc(#loc)
    %42 = arith.extui %41 : tensor<16x16xi8, #blocked1> to tensor<16x16xi16, #blocked1> loc(#loc)
    %43 = arith.shli %42, %cst_7 : tensor<16x16xi16, #blocked1> loc(#loc)
    %44 = arith.ori %40, %43 : tensor<16x16xi16, #blocked1> loc(#loc)
    %45 = arith.andi %31, %cst_6 : tensor<16x16xi8, #blocked1> loc(#loc)
    %46 = arith.extui %45 : tensor<16x16xi8, #blocked1> to tensor<16x16xi32, #blocked1> loc(#loc)
    %47 = arith.cmpi ne, %46, %cst_5 : tensor<16x16xi32, #blocked1> loc(#loc)
    %48 = arith.addi %38, %cst_4 : tensor<16x16xi16, #blocked1> loc(#loc)
    %49 = arith.select %47, %48, %38 : tensor<16x16xi1, #blocked1>, tensor<16x16xi16, #blocked1> loc(#loc)
    %50 = arith.andi %32, %cst_3 : tensor<16x16xi8, #blocked1> loc(#loc)
    %51 = arith.extui %50 : tensor<16x16xi8, #blocked1> to tensor<16x16xi32, #blocked1> loc(#loc)
    %52 = arith.cmpi ne, %51, %cst_5 : tensor<16x16xi32, #blocked1> loc(#loc)
    %53 = arith.addi %44, %cst_4 : tensor<16x16xi16, #blocked1> loc(#loc)
    %54 = arith.select %52, %53, %44 : tensor<16x16xi1, #blocked1>, tensor<16x16xi16, #blocked1> loc(#loc)
    %55 = arith.extui %31 : tensor<16x16xi8, #blocked1> to tensor<16x16xi32, #blocked1> loc(#loc)
    %56 = arith.cmpi eq, %55, %cst_2 : tensor<16x16xi32, #blocked1> loc(#loc)
    %57 = arith.andi %49, %cst_1 : tensor<16x16xi16, #blocked1> loc(#loc)
    %58 = arith.ori %57, %cst_4 : tensor<16x16xi16, #blocked1> loc(#loc)
    %59 = arith.select %56, %58, %49 : tensor<16x16xi1, #blocked1>, tensor<16x16xi16, #blocked1> loc(#loc)
    %60 = arith.extui %32 : tensor<16x16xi8, #blocked1> to tensor<16x16xi32, #blocked1> loc(#loc)
    %61 = arith.cmpi eq, %60, %cst_0 : tensor<16x16xi32, #blocked1> loc(#loc)
    %62 = arith.andi %54, %cst_1 : tensor<16x16xi16, #blocked1> loc(#loc)
    %63 = arith.ori %62, %cst_4 : tensor<16x16xi16, #blocked1> loc(#loc)
    %64 = arith.select %61, %63, %54 : tensor<16x16xi1, #blocked1>, tensor<16x16xi16, #blocked1> loc(#loc)
    %65 = tt.join %59, %64 : tensor<16x16xi16, #blocked1> -> tensor<16x16x2xi16, #blocked2> loc(#loc)
    %66 = tt.reshape %65 : tensor<16x16x2xi16, #blocked2> -> tensor<16x32xi16, #blocked> loc(#loc)
    %67 = tt.bitcast %66 : tensor<16x32xi16, #blocked> -> tensor<16x32xbf16, #blocked> loc(#loc)
    %68 = tt.broadcast %30 : tensor<16x1xbf16, #blocked> -> tensor<16x32xbf16, #blocked> loc(#loc)
    %69 = arith.mulf %67, %68 : tensor<16x32xbf16, #blocked> loc(#loc)
    %70 = arith.extui %27 : tensor<16x1xi8, #blocked> to tensor<16x1xi32, #blocked> loc(#loc)
    %71 = arith.cmpi eq, %70, %cst_17 : tensor<16x1xi32, #blocked> loc(#loc)
    %72 = tt.broadcast %71 : tensor<16x1xi1, #blocked> -> tensor<16x32xi1, #blocked> loc(#loc)
    %73 = arith.select %72, %cst, %69 : tensor<16x32xi1, #blocked>, tensor<16x32xbf16, #blocked> loc(#loc)
    %74 = arith.muli %0, %c512_i32 : i32 loc(#loc)
    %75 = tt.make_range {end = 512 : i32, start = 0 : i32} : tensor<512xi32, #blocked3> loc(#loc)
    %76 = tt.splat %74 : i32 -> tensor<512xi32, #blocked3> loc(#loc)
    %77 = arith.addi %76, %75 : tensor<512xi32, #blocked3> loc(#loc)
    %78 = arith.muli %N, %c32_i32 : i32 loc(#loc)
    %79 = tt.splat %78 : i32 -> tensor<512xi32, #blocked3> loc(#loc)
    %80 = arith.cmpi slt, %77, %79 : tensor<512xi32, #blocked3> loc(#loc)
    %81 = tt.addptr %mxfp_ptr, %74 : !tt.ptr<bf16>, i32 loc(#loc)
    %82 = tt.reshape %73 : tensor<16x32xbf16, #blocked> -> tensor<512xbf16, #blocked3> loc(#loc)
    amdgpu.buffer_store %82, %81[%75], %80 : tensor<512xbf16, #blocked3> loc(#loc)
    tt.return loc(#loc)
  } loc(#loc)
} loc(#loc)
#loc = loc(unknown)


// -----// IR Dump Before ConvertIndexToLLVMPass (convert-index-to-llvm) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 2], threadsPerWarp = [4, 16], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [4, 16], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked2 = #ttg.blocked<{sizePerThread = [1, 1, 2], threadsPerWarp = [4, 16, 1], warpsPerCTA = [4, 1, 1], order = [2, 1, 0]}>
#blocked3 = #ttg.blocked<{sizePerThread = [2], threadsPerWarp = [64], warpsPerCTA = [4], order = [0]}>
#loc1 = loc("x_ptr")
#loc2 = loc("scale_ptr")
#loc3 = loc("mxfp_ptr")
#loc4 = loc("N")
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "hip:gfx950", "ttg.threads-per-warp" = 64 : i32} {
  tt.func public @mxfp_upcast_kernel(%x_ptr: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("x_ptr"), %scale_ptr: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("scale_ptr"), %mxfp_ptr: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("mxfp_ptr"), %N: i32 {tt.divisibility = 16 : i32} loc("N")) attributes {noinline = false} {
    %cst = arith.constant dense<0x7FC0> : tensor<16x32xbf16, #blocked> loc(#loc)
    %c512_i32 = arith.constant 512 : i32 loc(#loc)
    %c32_i32 = arith.constant 32 : i32 loc(#loc)
    %cst_0 = arith.constant dense<16> : tensor<16x16xi32, #blocked1> loc(#loc)
    %cst_1 = arith.constant dense<-32768> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_2 = arith.constant dense<1> : tensor<16x16xi32, #blocked1> loc(#loc)
    %cst_3 = arith.constant dense<96> : tensor<16x16xi8, #blocked1> loc(#loc)
    %cst_4 = arith.constant dense<16128> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_5 = arith.constant dense<0> : tensor<16x16xi32, #blocked1> loc(#loc)
    %cst_6 = arith.constant dense<6> : tensor<16x16xi8, #blocked1> loc(#loc)
    %cst_7 = arith.constant dense<8> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_8 = arith.constant dense<-128> : tensor<16x16xi8, #blocked1> loc(#loc)
    %cst_9 = arith.constant dense<2> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_10 = arith.constant dense<12> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_11 = arith.constant dense<8> : tensor<16x16xi8, #blocked1> loc(#loc)
    %cst_12 = arith.constant dense<6> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_13 = arith.constant dense<112> : tensor<16x16xi8, #blocked1> loc(#loc)
    %cst_14 = arith.constant dense<7> : tensor<16x16xi8, #blocked1> loc(#loc)
    %c256_i32 = arith.constant 256 : i32 loc(#loc)
    %c16_i32 = arith.constant 16 : i32 loc(#loc)
    %cst_15 = arith.constant dense<16> : tensor<16x1xi32, #blocked1> loc(#loc)
    %cst_16 = arith.constant dense<7> : tensor<16x1xi16, #blocked> loc(#loc)
    %cst_17 = arith.constant dense<255> : tensor<16x1xi32, #blocked> loc(#loc)
    %0 = tt.get_program_id x : i32 loc(#loc)
    %1 = arith.muli %0, %c256_i32 : i32 loc(#loc)
    %2 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc)
    %3 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc)
    %4 = tt.expand_dims %2 {axis = 1 : i32} : tensor<16xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> -> tensor<16x1xi32, #blocked1> loc(#loc)
    %5 = tt.expand_dims %3 {axis = 1 : i32} : tensor<16xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<16x1xi32, #blocked> loc(#loc)
    %6 = arith.muli %4, %cst_15 : tensor<16x1xi32, #blocked1> loc(#loc)
    %7 = tt.splat %1 : i32 -> tensor<16x1xi32, #blocked1> loc(#loc)
    %8 = arith.addi %7, %6 : tensor<16x1xi32, #blocked1> loc(#loc)
    %9 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc)
    %10 = tt.expand_dims %9 {axis = 0 : i32} : tensor<16xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x16xi32, #blocked1> loc(#loc)
    %11 = tt.broadcast %8 : tensor<16x1xi32, #blocked1> -> tensor<16x16xi32, #blocked1> loc(#loc)
    %12 = tt.broadcast %10 : tensor<1x16xi32, #blocked1> -> tensor<16x16xi32, #blocked1> loc(#loc)
    %13 = arith.addi %11, %12 : tensor<16x16xi32, #blocked1> loc(#loc)
    %14 = arith.muli %N, %c16_i32 : i32 loc(#loc)
    %15 = tt.splat %14 : i32 -> tensor<16x16xi32, #blocked1> loc(#loc)
    %16 = arith.cmpi slt, %13, %15 : tensor<16x16xi32, #blocked1> loc(#loc)
    %17 = tt.broadcast %6 : tensor<16x1xi32, #blocked1> -> tensor<16x16xi32, #blocked1> loc(#loc)
    %18 = arith.addi %17, %12 : tensor<16x16xi32, #blocked1> loc(#loc)
    %19 = tt.addptr %x_ptr, %1 : !tt.ptr<i8>, i32 loc(#loc)
    %20 = amdgpu.buffer_load %19[%18], %16 : tensor<16x16xi8, #blocked1> loc(#loc)
    %21 = arith.muli %0, %c16_i32 : i32 loc(#loc)
    %22 = tt.splat %21 : i32 -> tensor<16x1xi32, #blocked> loc(#loc)
    %23 = arith.addi %22, %5 : tensor<16x1xi32, #blocked> loc(#loc)
    %24 = tt.splat %N : i32 -> tensor<16x1xi32, #blocked> loc(#loc)
    %25 = arith.cmpi slt, %23, %24 : tensor<16x1xi32, #blocked> loc(#loc)
    %26 = tt.addptr %scale_ptr, %21 : !tt.ptr<i8>, i32 loc(#loc)
    %27 = amdgpu.buffer_load %26[%5], %25 : tensor<16x1xi8, #blocked> loc(#loc)
    %28 = arith.extui %27 : tensor<16x1xi8, #blocked> to tensor<16x1xi16, #blocked> loc(#loc)
    %29 = arith.shli %28, %cst_16 : tensor<16x1xi16, #blocked> loc(#loc)
    %30 = tt.bitcast %29 : tensor<16x1xi16, #blocked> -> tensor<16x1xbf16, #blocked> loc(#loc)
    %31 = arith.andi %20, %cst_14 : tensor<16x16xi8, #blocked1> loc(#loc)
    %32 = arith.andi %20, %cst_13 : tensor<16x16xi8, #blocked1> loc(#loc)
    %33 = arith.extui %31 : tensor<16x16xi8, #blocked1> to tensor<16x16xi16, #blocked1> loc(#loc)
    %34 = arith.shli %33, %cst_12 : tensor<16x16xi16, #blocked1> loc(#loc)
    %35 = arith.andi %20, %cst_11 : tensor<16x16xi8, #blocked1> loc(#loc)
    %36 = arith.extui %35 : tensor<16x16xi8, #blocked1> to tensor<16x16xi16, #blocked1> loc(#loc)
    %37 = arith.shli %36, %cst_10 : tensor<16x16xi16, #blocked1> loc(#loc)
    %38 = arith.ori %34, %37 : tensor<16x16xi16, #blocked1> loc(#loc)
    %39 = arith.extui %32 : tensor<16x16xi8, #blocked1> to tensor<16x16xi16, #blocked1> loc(#loc)
    %40 = arith.shli %39, %cst_9 : tensor<16x16xi16, #blocked1> loc(#loc)
    %41 = arith.andi %20, %cst_8 : tensor<16x16xi8, #blocked1> loc(#loc)
    %42 = arith.extui %41 : tensor<16x16xi8, #blocked1> to tensor<16x16xi16, #blocked1> loc(#loc)
    %43 = arith.shli %42, %cst_7 : tensor<16x16xi16, #blocked1> loc(#loc)
    %44 = arith.ori %40, %43 : tensor<16x16xi16, #blocked1> loc(#loc)
    %45 = arith.andi %31, %cst_6 : tensor<16x16xi8, #blocked1> loc(#loc)
    %46 = arith.extui %45 : tensor<16x16xi8, #blocked1> to tensor<16x16xi32, #blocked1> loc(#loc)
    %47 = arith.cmpi ne, %46, %cst_5 : tensor<16x16xi32, #blocked1> loc(#loc)
    %48 = arith.addi %38, %cst_4 : tensor<16x16xi16, #blocked1> loc(#loc)
    %49 = arith.select %47, %48, %38 : tensor<16x16xi1, #blocked1>, tensor<16x16xi16, #blocked1> loc(#loc)
    %50 = arith.andi %32, %cst_3 : tensor<16x16xi8, #blocked1> loc(#loc)
    %51 = arith.extui %50 : tensor<16x16xi8, #blocked1> to tensor<16x16xi32, #blocked1> loc(#loc)
    %52 = arith.cmpi ne, %51, %cst_5 : tensor<16x16xi32, #blocked1> loc(#loc)
    %53 = arith.addi %44, %cst_4 : tensor<16x16xi16, #blocked1> loc(#loc)
    %54 = arith.select %52, %53, %44 : tensor<16x16xi1, #blocked1>, tensor<16x16xi16, #blocked1> loc(#loc)
    %55 = arith.extui %31 : tensor<16x16xi8, #blocked1> to tensor<16x16xi32, #blocked1> loc(#loc)
    %56 = arith.cmpi eq, %55, %cst_2 : tensor<16x16xi32, #blocked1> loc(#loc)
    %57 = arith.andi %49, %cst_1 : tensor<16x16xi16, #blocked1> loc(#loc)
    %58 = arith.ori %57, %cst_4 : tensor<16x16xi16, #blocked1> loc(#loc)
    %59 = arith.select %56, %58, %49 : tensor<16x16xi1, #blocked1>, tensor<16x16xi16, #blocked1> loc(#loc)
    %60 = arith.extui %32 : tensor<16x16xi8, #blocked1> to tensor<16x16xi32, #blocked1> loc(#loc)
    %61 = arith.cmpi eq, %60, %cst_0 : tensor<16x16xi32, #blocked1> loc(#loc)
    %62 = arith.andi %54, %cst_1 : tensor<16x16xi16, #blocked1> loc(#loc)
    %63 = arith.ori %62, %cst_4 : tensor<16x16xi16, #blocked1> loc(#loc)
    %64 = arith.select %61, %63, %54 : tensor<16x16xi1, #blocked1>, tensor<16x16xi16, #blocked1> loc(#loc)
    %65 = tt.join %59, %64 : tensor<16x16xi16, #blocked1> -> tensor<16x16x2xi16, #blocked2> loc(#loc)
    %66 = tt.reshape %65 : tensor<16x16x2xi16, #blocked2> -> tensor<16x32xi16, #blocked> loc(#loc)
    %67 = tt.bitcast %66 : tensor<16x32xi16, #blocked> -> tensor<16x32xbf16, #blocked> loc(#loc)
    %68 = tt.broadcast %30 : tensor<16x1xbf16, #blocked> -> tensor<16x32xbf16, #blocked> loc(#loc)
    %69 = arith.mulf %67, %68 : tensor<16x32xbf16, #blocked> loc(#loc)
    %70 = arith.extui %27 : tensor<16x1xi8, #blocked> to tensor<16x1xi32, #blocked> loc(#loc)
    %71 = arith.cmpi eq, %70, %cst_17 : tensor<16x1xi32, #blocked> loc(#loc)
    %72 = tt.broadcast %71 : tensor<16x1xi1, #blocked> -> tensor<16x32xi1, #blocked> loc(#loc)
    %73 = arith.select %72, %cst, %69 : tensor<16x32xi1, #blocked>, tensor<16x32xbf16, #blocked> loc(#loc)
    %74 = arith.muli %0, %c512_i32 : i32 loc(#loc)
    %75 = tt.make_range {end = 512 : i32, start = 0 : i32} : tensor<512xi32, #blocked3> loc(#loc)
    %76 = tt.splat %74 : i32 -> tensor<512xi32, #blocked3> loc(#loc)
    %77 = arith.addi %76, %75 : tensor<512xi32, #blocked3> loc(#loc)
    %78 = arith.muli %N, %c32_i32 : i32 loc(#loc)
    %79 = tt.splat %78 : i32 -> tensor<512xi32, #blocked3> loc(#loc)
    %80 = arith.cmpi slt, %77, %79 : tensor<512xi32, #blocked3> loc(#loc)
    %81 = tt.addptr %mxfp_ptr, %74 : !tt.ptr<bf16>, i32 loc(#loc)
    %82 = tt.reshape %73 : tensor<16x32xbf16, #blocked> -> tensor<512xbf16, #blocked3> loc(#loc)
    amdgpu.buffer_store %82, %81[%75], %80 : tensor<512xbf16, #blocked3> loc(#loc)
    tt.return loc(#loc)
  } loc(#loc)
} loc(#loc)
#loc = loc(unknown)


// -----// IR Dump Before AllocateAMDGPUSharedMemory (allocate-amdgpu-shared-memory) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 2], threadsPerWarp = [4, 16], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [4, 16], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked2 = #ttg.blocked<{sizePerThread = [1, 1, 2], threadsPerWarp = [4, 16, 1], warpsPerCTA = [4, 1, 1], order = [2, 1, 0]}>
#blocked3 = #ttg.blocked<{sizePerThread = [2], threadsPerWarp = [64], warpsPerCTA = [4], order = [0]}>
#loc1 = loc("x_ptr")
#loc2 = loc("scale_ptr")
#loc3 = loc("mxfp_ptr")
#loc4 = loc("N")
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "hip:gfx950", "ttg.threads-per-warp" = 64 : i32} {
  tt.func public @mxfp_upcast_kernel(%x_ptr: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("x_ptr"), %scale_ptr: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("scale_ptr"), %mxfp_ptr: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("mxfp_ptr"), %N: i32 {tt.divisibility = 16 : i32} loc("N")) attributes {noinline = false} {
    %cst = arith.constant dense<0x7FC0> : tensor<16x32xbf16, #blocked> loc(#loc)
    %c512_i32 = arith.constant 512 : i32 loc(#loc)
    %c32_i32 = arith.constant 32 : i32 loc(#loc)
    %cst_0 = arith.constant dense<16> : tensor<16x16xi32, #blocked1> loc(#loc)
    %cst_1 = arith.constant dense<-32768> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_2 = arith.constant dense<1> : tensor<16x16xi32, #blocked1> loc(#loc)
    %cst_3 = arith.constant dense<96> : tensor<16x16xi8, #blocked1> loc(#loc)
    %cst_4 = arith.constant dense<16128> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_5 = arith.constant dense<0> : tensor<16x16xi32, #blocked1> loc(#loc)
    %cst_6 = arith.constant dense<6> : tensor<16x16xi8, #blocked1> loc(#loc)
    %cst_7 = arith.constant dense<8> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_8 = arith.constant dense<-128> : tensor<16x16xi8, #blocked1> loc(#loc)
    %cst_9 = arith.constant dense<2> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_10 = arith.constant dense<12> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_11 = arith.constant dense<8> : tensor<16x16xi8, #blocked1> loc(#loc)
    %cst_12 = arith.constant dense<6> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_13 = arith.constant dense<112> : tensor<16x16xi8, #blocked1> loc(#loc)
    %cst_14 = arith.constant dense<7> : tensor<16x16xi8, #blocked1> loc(#loc)
    %c256_i32 = arith.constant 256 : i32 loc(#loc)
    %c16_i32 = arith.constant 16 : i32 loc(#loc)
    %cst_15 = arith.constant dense<16> : tensor<16x1xi32, #blocked1> loc(#loc)
    %cst_16 = arith.constant dense<7> : tensor<16x1xi16, #blocked> loc(#loc)
    %cst_17 = arith.constant dense<255> : tensor<16x1xi32, #blocked> loc(#loc)
    %0 = tt.get_program_id x : i32 loc(#loc)
    %1 = arith.muli %0, %c256_i32 : i32 loc(#loc)
    %2 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc)
    %3 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc)
    %4 = tt.expand_dims %2 {axis = 1 : i32} : tensor<16xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> -> tensor<16x1xi32, #blocked1> loc(#loc)
    %5 = tt.expand_dims %3 {axis = 1 : i32} : tensor<16xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<16x1xi32, #blocked> loc(#loc)
    %6 = arith.muli %4, %cst_15 : tensor<16x1xi32, #blocked1> loc(#loc)
    %7 = tt.splat %1 : i32 -> tensor<16x1xi32, #blocked1> loc(#loc)
    %8 = arith.addi %7, %6 : tensor<16x1xi32, #blocked1> loc(#loc)
    %9 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc)
    %10 = tt.expand_dims %9 {axis = 0 : i32} : tensor<16xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x16xi32, #blocked1> loc(#loc)
    %11 = tt.broadcast %8 : tensor<16x1xi32, #blocked1> -> tensor<16x16xi32, #blocked1> loc(#loc)
    %12 = tt.broadcast %10 : tensor<1x16xi32, #blocked1> -> tensor<16x16xi32, #blocked1> loc(#loc)
    %13 = arith.addi %11, %12 : tensor<16x16xi32, #blocked1> loc(#loc)
    %14 = arith.muli %N, %c16_i32 : i32 loc(#loc)
    %15 = tt.splat %14 : i32 -> tensor<16x16xi32, #blocked1> loc(#loc)
    %16 = arith.cmpi slt, %13, %15 : tensor<16x16xi32, #blocked1> loc(#loc)
    %17 = tt.broadcast %6 : tensor<16x1xi32, #blocked1> -> tensor<16x16xi32, #blocked1> loc(#loc)
    %18 = arith.addi %17, %12 : tensor<16x16xi32, #blocked1> loc(#loc)
    %19 = tt.addptr %x_ptr, %1 : !tt.ptr<i8>, i32 loc(#loc)
    %20 = amdgpu.buffer_load %19[%18], %16 : tensor<16x16xi8, #blocked1> loc(#loc)
    %21 = arith.muli %0, %c16_i32 : i32 loc(#loc)
    %22 = tt.splat %21 : i32 -> tensor<16x1xi32, #blocked> loc(#loc)
    %23 = arith.addi %22, %5 : tensor<16x1xi32, #blocked> loc(#loc)
    %24 = tt.splat %N : i32 -> tensor<16x1xi32, #blocked> loc(#loc)
    %25 = arith.cmpi slt, %23, %24 : tensor<16x1xi32, #blocked> loc(#loc)
    %26 = tt.addptr %scale_ptr, %21 : !tt.ptr<i8>, i32 loc(#loc)
    %27 = amdgpu.buffer_load %26[%5], %25 : tensor<16x1xi8, #blocked> loc(#loc)
    %28 = arith.extui %27 : tensor<16x1xi8, #blocked> to tensor<16x1xi16, #blocked> loc(#loc)
    %29 = arith.shli %28, %cst_16 : tensor<16x1xi16, #blocked> loc(#loc)
    %30 = tt.bitcast %29 : tensor<16x1xi16, #blocked> -> tensor<16x1xbf16, #blocked> loc(#loc)
    %31 = arith.andi %20, %cst_14 : tensor<16x16xi8, #blocked1> loc(#loc)
    %32 = arith.andi %20, %cst_13 : tensor<16x16xi8, #blocked1> loc(#loc)
    %33 = arith.extui %31 : tensor<16x16xi8, #blocked1> to tensor<16x16xi16, #blocked1> loc(#loc)
    %34 = arith.shli %33, %cst_12 : tensor<16x16xi16, #blocked1> loc(#loc)
    %35 = arith.andi %20, %cst_11 : tensor<16x16xi8, #blocked1> loc(#loc)
    %36 = arith.extui %35 : tensor<16x16xi8, #blocked1> to tensor<16x16xi16, #blocked1> loc(#loc)
    %37 = arith.shli %36, %cst_10 : tensor<16x16xi16, #blocked1> loc(#loc)
    %38 = arith.ori %34, %37 : tensor<16x16xi16, #blocked1> loc(#loc)
    %39 = arith.extui %32 : tensor<16x16xi8, #blocked1> to tensor<16x16xi16, #blocked1> loc(#loc)
    %40 = arith.shli %39, %cst_9 : tensor<16x16xi16, #blocked1> loc(#loc)
    %41 = arith.andi %20, %cst_8 : tensor<16x16xi8, #blocked1> loc(#loc)
    %42 = arith.extui %41 : tensor<16x16xi8, #blocked1> to tensor<16x16xi16, #blocked1> loc(#loc)
    %43 = arith.shli %42, %cst_7 : tensor<16x16xi16, #blocked1> loc(#loc)
    %44 = arith.ori %40, %43 : tensor<16x16xi16, #blocked1> loc(#loc)
    %45 = arith.andi %31, %cst_6 : tensor<16x16xi8, #blocked1> loc(#loc)
    %46 = arith.extui %45 : tensor<16x16xi8, #blocked1> to tensor<16x16xi32, #blocked1> loc(#loc)
    %47 = arith.cmpi ne, %46, %cst_5 : tensor<16x16xi32, #blocked1> loc(#loc)
    %48 = arith.addi %38, %cst_4 : tensor<16x16xi16, #blocked1> loc(#loc)
    %49 = arith.select %47, %48, %38 : tensor<16x16xi1, #blocked1>, tensor<16x16xi16, #blocked1> loc(#loc)
    %50 = arith.andi %32, %cst_3 : tensor<16x16xi8, #blocked1> loc(#loc)
    %51 = arith.extui %50 : tensor<16x16xi8, #blocked1> to tensor<16x16xi32, #blocked1> loc(#loc)
    %52 = arith.cmpi ne, %51, %cst_5 : tensor<16x16xi32, #blocked1> loc(#loc)
    %53 = arith.addi %44, %cst_4 : tensor<16x16xi16, #blocked1> loc(#loc)
    %54 = arith.select %52, %53, %44 : tensor<16x16xi1, #blocked1>, tensor<16x16xi16, #blocked1> loc(#loc)
    %55 = arith.extui %31 : tensor<16x16xi8, #blocked1> to tensor<16x16xi32, #blocked1> loc(#loc)
    %56 = arith.cmpi eq, %55, %cst_2 : tensor<16x16xi32, #blocked1> loc(#loc)
    %57 = arith.andi %49, %cst_1 : tensor<16x16xi16, #blocked1> loc(#loc)
    %58 = arith.ori %57, %cst_4 : tensor<16x16xi16, #blocked1> loc(#loc)
    %59 = arith.select %56, %58, %49 : tensor<16x16xi1, #blocked1>, tensor<16x16xi16, #blocked1> loc(#loc)
    %60 = arith.extui %32 : tensor<16x16xi8, #blocked1> to tensor<16x16xi32, #blocked1> loc(#loc)
    %61 = arith.cmpi eq, %60, %cst_0 : tensor<16x16xi32, #blocked1> loc(#loc)
    %62 = arith.andi %54, %cst_1 : tensor<16x16xi16, #blocked1> loc(#loc)
    %63 = arith.ori %62, %cst_4 : tensor<16x16xi16, #blocked1> loc(#loc)
    %64 = arith.select %61, %63, %54 : tensor<16x16xi1, #blocked1>, tensor<16x16xi16, #blocked1> loc(#loc)
    %65 = tt.join %59, %64 : tensor<16x16xi16, #blocked1> -> tensor<16x16x2xi16, #blocked2> loc(#loc)
    %66 = tt.reshape %65 : tensor<16x16x2xi16, #blocked2> -> tensor<16x32xi16, #blocked> loc(#loc)
    %67 = tt.bitcast %66 : tensor<16x32xi16, #blocked> -> tensor<16x32xbf16, #blocked> loc(#loc)
    %68 = tt.broadcast %30 : tensor<16x1xbf16, #blocked> -> tensor<16x32xbf16, #blocked> loc(#loc)
    %69 = arith.mulf %67, %68 : tensor<16x32xbf16, #blocked> loc(#loc)
    %70 = arith.extui %27 : tensor<16x1xi8, #blocked> to tensor<16x1xi32, #blocked> loc(#loc)
    %71 = arith.cmpi eq, %70, %cst_17 : tensor<16x1xi32, #blocked> loc(#loc)
    %72 = tt.broadcast %71 : tensor<16x1xi1, #blocked> -> tensor<16x32xi1, #blocked> loc(#loc)
    %73 = arith.select %72, %cst, %69 : tensor<16x32xi1, #blocked>, tensor<16x32xbf16, #blocked> loc(#loc)
    %74 = arith.muli %0, %c512_i32 : i32 loc(#loc)
    %75 = tt.make_range {end = 512 : i32, start = 0 : i32} : tensor<512xi32, #blocked3> loc(#loc)
    %76 = tt.splat %74 : i32 -> tensor<512xi32, #blocked3> loc(#loc)
    %77 = arith.addi %76, %75 : tensor<512xi32, #blocked3> loc(#loc)
    %78 = arith.muli %N, %c32_i32 : i32 loc(#loc)
    %79 = tt.splat %78 : i32 -> tensor<512xi32, #blocked3> loc(#loc)
    %80 = arith.cmpi slt, %77, %79 : tensor<512xi32, #blocked3> loc(#loc)
    %81 = tt.addptr %mxfp_ptr, %74 : !tt.ptr<bf16>, i32 loc(#loc)
    %82 = tt.reshape %73 : tensor<16x32xbf16, #blocked> -> tensor<512xbf16, #blocked3> loc(#loc)
    amdgpu.buffer_store %82, %81[%75], %80 : tensor<512xbf16, #blocked3> loc(#loc)
    tt.return loc(#loc)
  } loc(#loc)
} loc(#loc)
#loc = loc(unknown)


// -----// IR Dump Before ConvertTritonAMDGPUToLLVM (convert-triton-amdgpu-to-llvm) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 2], threadsPerWarp = [4, 16], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [4, 16], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked2 = #ttg.blocked<{sizePerThread = [1, 1, 2], threadsPerWarp = [4, 16, 1], warpsPerCTA = [4, 1, 1], order = [2, 1, 0]}>
#blocked3 = #ttg.blocked<{sizePerThread = [2], threadsPerWarp = [64], warpsPerCTA = [4], order = [0]}>
#loc1 = loc("x_ptr")
#loc2 = loc("scale_ptr")
#loc3 = loc("mxfp_ptr")
#loc4 = loc("N")
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.shared = 0 : i32, ttg.target = "hip:gfx950", "ttg.threads-per-warp" = 64 : i32} {
  tt.func public @mxfp_upcast_kernel(%x_ptr: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("x_ptr"), %scale_ptr: !tt.ptr<i8> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("scale_ptr"), %mxfp_ptr: !tt.ptr<bf16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("mxfp_ptr"), %N: i32 {tt.divisibility = 16 : i32} loc("N")) attributes {noinline = false} {
    %cst = arith.constant dense<0x7FC0> : tensor<16x32xbf16, #blocked> loc(#loc)
    %c512_i32 = arith.constant 512 : i32 loc(#loc)
    %c32_i32 = arith.constant 32 : i32 loc(#loc)
    %cst_0 = arith.constant dense<16> : tensor<16x16xi32, #blocked1> loc(#loc)
    %cst_1 = arith.constant dense<-32768> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_2 = arith.constant dense<1> : tensor<16x16xi32, #blocked1> loc(#loc)
    %cst_3 = arith.constant dense<96> : tensor<16x16xi8, #blocked1> loc(#loc)
    %cst_4 = arith.constant dense<16128> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_5 = arith.constant dense<0> : tensor<16x16xi32, #blocked1> loc(#loc)
    %cst_6 = arith.constant dense<6> : tensor<16x16xi8, #blocked1> loc(#loc)
    %cst_7 = arith.constant dense<8> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_8 = arith.constant dense<-128> : tensor<16x16xi8, #blocked1> loc(#loc)
    %cst_9 = arith.constant dense<2> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_10 = arith.constant dense<12> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_11 = arith.constant dense<8> : tensor<16x16xi8, #blocked1> loc(#loc)
    %cst_12 = arith.constant dense<6> : tensor<16x16xi16, #blocked1> loc(#loc)
    %cst_13 = arith.constant dense<112> : tensor<16x16xi8, #blocked1> loc(#loc)
    %cst_14 = arith.constant dense<7> : tensor<16x16xi8, #blocked1> loc(#loc)
    %c256_i32 = arith.constant 256 : i32 loc(#loc)
    %c16_i32 = arith.constant 16 : i32 loc(#loc)
    %cst_15 = arith.constant dense<16> : tensor<16x1xi32, #blocked1> loc(#loc)
    %cst_16 = arith.constant dense<7> : tensor<16x1xi16, #blocked> loc(#loc)
    %cst_17 = arith.constant dense<255> : tensor<16x1xi32, #blocked> loc(#loc)
    %0 = tt.get_program_id x : i32 loc(#loc)
    %1 = arith.muli %0, %c256_i32 : i32 loc(#loc)
    %2 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc)
    %3 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc)
    %4 = tt.expand_dims %2 {axis = 1 : i32} : tensor<16xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> -> tensor<16x1xi32, #blocked1> loc(#loc)
    %5 = tt.expand_dims %3 {axis = 1 : i32} : tensor<16xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<16x1xi32, #blocked> loc(#loc)
    %6 = arith.muli %4, %cst_15 : tensor<16x1xi32, #blocked1> loc(#loc)
    %7 = tt.splat %1 : i32 -> tensor<16x1xi32, #blocked1> loc(#loc)
    %8 = arith.addi %7, %6 : tensor<16x1xi32, #blocked1> loc(#loc)
    %9 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc)
    %10 = tt.expand_dims %9 {axis = 0 : i32} : tensor<16xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x16xi32, #blocked1> loc(#loc)
    %11 = tt.broadcast %8 : tensor<16x1xi32, #blocked1> -> tensor<16x16xi32, #blocked1> loc(#loc)
    %12 = tt.broadcast %10 : tensor<1x16xi32, #blocked1> -> tensor<16x16xi32, #blocked1> loc(#loc)
    %13 = arith.addi %11, %12 : tensor<16x16xi32, #blocked1> loc(#loc)
    %14 = arith.muli %N, %c16_i32 : i32 loc(#loc)
    %15 = tt.splat %14 : i32 -> tensor<16x16xi32, #blocked1> loc(#loc)
    %16 = arith.cmpi slt, %13, %15 : tensor<16x16xi32, #blocked1> loc(#loc)
    %17 = tt.broadcast %6 : tensor<16x1xi32, #blocked1> -> tensor<16x16xi32, #blocked1> loc(#loc)
    %18 = arith.addi %17, %12 : tensor<16x16xi32, #blocked1> loc(#loc)
    %19 = tt.addptr %x_ptr, %1 : !tt.ptr<i8>, i32 loc(#loc)
    %20 = amdgpu.buffer_load %19[%18], %16 : tensor<16x16xi8, #blocked1> loc(#loc)
    %21 = arith.muli %0, %c16_i32 : i32 loc(#loc)
    %22 = tt.splat %21 : i32 -> tensor<16x1xi32, #blocked> loc(#loc)
    %23 = arith.addi %22, %5 : tensor<16x1xi32, #blocked> loc(#loc)
    %24 = tt.splat %N : i32 -> tensor<16x1xi32, #blocked> loc(#loc)
    %25 = arith.cmpi slt, %23, %24 : tensor<16x1xi32, #blocked> loc(#loc)
    %26 = tt.addptr %scale_ptr, %21 : !tt.ptr<i8>, i32 loc(#loc)
    %27 = amdgpu.buffer_load %26[%5], %25 : tensor<16x1xi8, #blocked> loc(#loc)
    %28 = arith.extui %27 : tensor<16x1xi8, #blocked> to tensor<16x1xi16, #blocked> loc(#loc)
    %29 = arith.shli %28, %cst_16 : tensor<16x1xi16, #blocked> loc(#loc)
    %30 = tt.bitcast %29 : tensor<16x1xi16, #blocked> -> tensor<16x1xbf16, #blocked> loc(#loc)
    %31 = arith.andi %20, %cst_14 : tensor<16x16xi8, #blocked1> loc(#loc)
    %32 = arith.andi %20, %cst_13 : tensor<16x16xi8, #blocked1> loc(#loc)
    %33 = arith.extui %31 : tensor<16x16xi8, #blocked1> to tensor<16x16xi16, #blocked1> loc(#loc)
    %34 = arith.shli %33, %cst_12 : tensor<16x16xi16, #blocked1> loc(#loc)
    %35 = arith.andi %20, %cst_11 : tensor<16x16xi8, #blocked1> loc(#loc)
    %36 = arith.extui %35 : tensor<16x16xi8, #blocked1> to tensor<16x16xi16, #blocked1> loc(#loc)
    %37 = arith.shli %36, %cst_10 : tensor<16x16xi16, #blocked1> loc(#loc)
    %38 = arith.ori %34, %37 : tensor<16x16xi16, #blocked1> loc(#loc)
    %39 = arith.extui %32 : tensor<16x16xi8, #blocked1> to tensor<16x16xi16, #blocked1> loc(#loc)
    %40 = arith.shli %39, %cst_9 : tensor<16x16xi16, #blocked1> loc(#loc)
    %41 = arith.andi %20, %cst_8 : tensor<16x16xi8, #blocked1> loc(#loc)
    %42 = arith.extui %41 : tensor<16x16xi8, #blocked1> to tensor<16x16xi16, #blocked1> loc(#loc)
    %43 = arith.shli %42, %cst_7 : tensor<16x16xi16, #blocked1> loc(#loc)
    %44 = arith.ori %40, %43 : tensor<16x16xi16, #blocked1> loc(#loc)
    %45 = arith.andi %31, %cst_6 : tensor<16x16xi8, #blocked1> loc(#loc)
    %46 = arith.extui %45 : tensor<16x16xi8, #blocked1> to tensor<16x16xi32, #blocked1> loc(#loc)
    %47 = arith.cmpi ne, %46, %cst_5 : tensor<16x16xi32, #blocked1> loc(#loc)
    %48 = arith.addi %38, %cst_4 : tensor<16x16xi16, #blocked1> loc(#loc)
    %49 = arith.select %47, %48, %38 : tensor<16x16xi1, #blocked1>, tensor<16x16xi16, #blocked1> loc(#loc)
    %50 = arith.andi %32, %cst_3 : tensor<16x16xi8, #blocked1> loc(#loc)
    %51 = arith.extui %50 : tensor<16x16xi8, #blocked1> to tensor<16x16xi32, #blocked1> loc(#loc)
    %52 = arith.cmpi ne, %51, %cst_5 : tensor<16x16xi32, #blocked1> loc(#loc)
    %53 = arith.addi %44, %cst_4 : tensor<16x16xi16, #blocked1> loc(#loc)
    %54 = arith.select %52, %53, %44 : tensor<16x16xi1, #blocked1>, tensor<16x16xi16, #blocked1> loc(#loc)
    %55 = arith.extui %31 : tensor<16x16xi8, #blocked1> to tensor<16x16xi32, #blocked1> loc(#loc)
    %56 = arith.cmpi eq, %55, %cst_2 : tensor<16x16xi32, #blocked1> loc(#loc)
    %57 = arith.andi %49, %cst_1 : tensor<16x16xi16, #blocked1> loc(#loc)
    %58 = arith.ori %57, %cst_4 : tensor<16x16xi16, #blocked1> loc(#loc)
    %59 = arith.select %56, %58, %49 : tensor<16x16xi1, #blocked1>, tensor<16x16xi16, #blocked1> loc(#loc)
    %60 = arith.extui %32 : tensor<16x16xi8, #blocked1> to tensor<16x16xi32, #blocked1> loc(#loc)
    %61 = arith.cmpi eq, %60, %cst_0 : tensor<16x16xi32, #blocked1> loc(#loc)
    %62 = arith.andi %54, %cst_1 : tensor<16x16xi16, #blocked1> loc(#loc)
    %63 = arith.ori %62, %cst_4 : tensor<16x16xi16, #blocked1> loc(#loc)
    %64 = arith.select %61, %63, %54 : tensor<16x16xi1, #blocked1>, tensor<16x16xi16, #blocked1> loc(#loc)
    %65 = tt.join %59, %64 : tensor<16x16xi16, #blocked1> -> tensor<16x16x2xi16, #blocked2> loc(#loc)
    %66 = tt.reshape %65 : tensor<16x16x2xi16, #blocked2> -> tensor<16x32xi16, #blocked> loc(#loc)
    %67 = tt.bitcast %66 : tensor<16x32xi16, #blocked> -> tensor<16x32xbf16, #blocked> loc(#loc)
    %68 = tt.broadcast %30 : tensor<16x1xbf16, #blocked> -> tensor<16x32xbf16, #blocked> loc(#loc)
    %69 = arith.mulf %67, %68 : tensor<16x32xbf16, #blocked> loc(#loc)
    %70 = arith.extui %27 : tensor<16x1xi8, #blocked> to tensor<16x1xi32, #blocked> loc(#loc)
    %71 = arith.cmpi eq, %70, %cst_17 : tensor<16x1xi32, #blocked> loc(#loc)
    %72 = tt.broadcast %71 : tensor<16x1xi1, #blocked> -> tensor<16x32xi1, #blocked> loc(#loc)
    %73 = arith.select %72, %cst, %69 : tensor<16x32xi1, #blocked>, tensor<16x32xbf16, #blocked> loc(#loc)
    %74 = arith.muli %0, %c512_i32 : i32 loc(#loc)
    %75 = tt.make_range {end = 512 : i32, start = 0 : i32} : tensor<512xi32, #blocked3> loc(#loc)
    %76 = tt.splat %74 : i32 -> tensor<512xi32, #blocked3> loc(#loc)
    %77 = arith.addi %76, %75 : tensor<512xi32, #blocked3> loc(#loc)
    %78 = arith.muli %N, %c32_i32 : i32 loc(#loc)
    %79 = tt.splat %78 : i32 -> tensor<512xi32, #blocked3> loc(#loc)
    %80 = arith.cmpi slt, %77, %79 : tensor<512xi32, #blocked3> loc(#loc)
    %81 = tt.addptr %mxfp_ptr, %74 : !tt.ptr<bf16>, i32 loc(#loc)
    %82 = tt.reshape %73 : tensor<16x32xbf16, #blocked> -> tensor<512xbf16, #blocked3> loc(#loc)
    amdgpu.buffer_store %82, %81[%75], %80 : tensor<512xbf16, #blocked3> loc(#loc)
    tt.return loc(#loc)
  } loc(#loc)
} loc(#loc)
#loc = loc(unknown)


// -----// IR Dump Before Canonicalizer (canonicalize) ('builtin.module' operation) //----- //
#loc = loc(unknown)
#loc1 = loc("x_ptr")
#loc2 = loc("scale_ptr")
#loc3 = loc("mxfp_ptr")
#loc4 = loc("N")
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.shared = 0 : i32, ttg.target = "hip:gfx950", "ttg.threads-per-warp" = 64 : i32} {
  llvm.mlir.global external @global_smem() {addr_space = 3 : i32, alignment = 16 : i64} : !llvm.array<0 x i8> loc(#loc)
  llvm.func @mxfp_upcast_kernel(%x_ptr: !llvm.ptr<1> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("x_ptr"), %scale_ptr: !llvm.ptr<1> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("scale_ptr"), %mxfp_ptr: !llvm.ptr<1> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("mxfp_ptr"), %N: i32 {tt.divisibility = 16 : i32} loc("N"), %arg4: !llvm.ptr<1> loc(unknown), %arg5: !llvm.ptr<1> loc(unknown)) attributes {noinline = false, nvvm.kernel = 1 : ui1, nvvm.reqntid = array<i32: 128>} {
    %0 = llvm.mlir.constant(0x7FC0 : bf16) : bf16 loc(#loc)
    %1 = llvm.bitcast %0 : bf16 to bf16 loc(#loc)
    %2 = llvm.mlir.undef : !llvm.struct<(bf16, bf16)> loc(#loc)
    %3 = llvm.insertvalue %1, %2[0] : !llvm.struct<(bf16, bf16)>  loc(#loc)
    %4 = llvm.insertvalue %1, %3[1] : !llvm.struct<(bf16, bf16)>  loc(#loc)
    %5 = llvm.mlir.constant(512 : i32) : i32 loc(#loc)
    %6 = llvm.mlir.constant(32 : i32) : i32 loc(#loc)
    %7 = llvm.mlir.constant(16 : i32) : i32 loc(#loc)
    %8 = llvm.bitcast %7 : i32 to i32 loc(#loc)
    %9 = llvm.mlir.undef : !llvm.struct<(i32)> loc(#loc)
    %10 = llvm.insertvalue %8, %9[0] : !llvm.struct<(i32)>  loc(#loc)
    %11 = llvm.mlir.constant(-32768 : i16) : i16 loc(#loc)
    %12 = llvm.bitcast %11 : i16 to i16 loc(#loc)
    %13 = llvm.mlir.undef : !llvm.struct<(i16)> loc(#loc)
    %14 = llvm.insertvalue %12, %13[0] : !llvm.struct<(i16)>  loc(#loc)
    %15 = llvm.mlir.constant(1 : i32) : i32 loc(#loc)
    %16 = llvm.bitcast %15 : i32 to i32 loc(#loc)
    %17 = llvm.mlir.undef : !llvm.struct<(i32)> loc(#loc)
    %18 = llvm.insertvalue %16, %17[0] : !llvm.struct<(i32)>  loc(#loc)
    %19 = llvm.mlir.constant(96 : i8) : i8 loc(#loc)
    %20 = llvm.bitcast %19 : i8 to i8 loc(#loc)
    %21 = llvm.mlir.undef : !llvm.struct<(i8)> loc(#loc)
    %22 = llvm.insertvalue %20, %21[0] : !llvm.struct<(i8)>  loc(#loc)
    %23 = llvm.mlir.constant(16128 : i16) : i16 loc(#loc)
    %24 = llvm.bitcast %23 : i16 to i16 loc(#loc)
    %25 = llvm.mlir.undef : !llvm.struct<(i16)> loc(#loc)
    %26 = llvm.insertvalue %24, %25[0] : !llvm.struct<(i16)>  loc(#loc)
    %27 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %28 = llvm.bitcast %27 : i32 to i32 loc(#loc)
    %29 = llvm.mlir.undef : !llvm.struct<(i32)> loc(#loc)
    %30 = llvm.insertvalue %28, %29[0] : !llvm.struct<(i32)>  loc(#loc)
    %31 = llvm.mlir.constant(6 : i8) : i8 loc(#loc)
    %32 = llvm.bitcast %31 : i8 to i8 loc(#loc)
    %33 = llvm.mlir.undef : !llvm.struct<(i8)> loc(#loc)
    %34 = llvm.insertvalue %32, %33[0] : !llvm.struct<(i8)>  loc(#loc)
    %35 = llvm.mlir.constant(8 : i16) : i16 loc(#loc)
    %36 = llvm.bitcast %35 : i16 to i16 loc(#loc)
    %37 = llvm.mlir.undef : !llvm.struct<(i16)> loc(#loc)
    %38 = llvm.insertvalue %36, %37[0] : !llvm.struct<(i16)>  loc(#loc)
    %39 = llvm.mlir.constant(-128 : i8) : i8 loc(#loc)
    %40 = llvm.bitcast %39 : i8 to i8 loc(#loc)
    %41 = llvm.mlir.undef : !llvm.struct<(i8)> loc(#loc)
    %42 = llvm.insertvalue %40, %41[0] : !llvm.struct<(i8)>  loc(#loc)
    %43 = llvm.mlir.constant(2 : i16) : i16 loc(#loc)
    %44 = llvm.bitcast %43 : i16 to i16 loc(#loc)
    %45 = llvm.mlir.undef : !llvm.struct<(i16)> loc(#loc)
    %46 = llvm.insertvalue %44, %45[0] : !llvm.struct<(i16)>  loc(#loc)
    %47 = llvm.mlir.constant(12 : i16) : i16 loc(#loc)
    %48 = llvm.bitcast %47 : i16 to i16 loc(#loc)
    %49 = llvm.mlir.undef : !llvm.struct<(i16)> loc(#loc)
    %50 = llvm.insertvalue %48, %49[0] : !llvm.struct<(i16)>  loc(#loc)
    %51 = llvm.mlir.constant(8 : i8) : i8 loc(#loc)
    %52 = llvm.bitcast %51 : i8 to i8 loc(#loc)
    %53 = llvm.mlir.undef : !llvm.struct<(i8)> loc(#loc)
    %54 = llvm.insertvalue %52, %53[0] : !llvm.struct<(i8)>  loc(#loc)
    %55 = llvm.mlir.constant(6 : i16) : i16 loc(#loc)
    %56 = llvm.bitcast %55 : i16 to i16 loc(#loc)
    %57 = llvm.mlir.undef : !llvm.struct<(i16)> loc(#loc)
    %58 = llvm.insertvalue %56, %57[0] : !llvm.struct<(i16)>  loc(#loc)
    %59 = llvm.mlir.constant(112 : i8) : i8 loc(#loc)
    %60 = llvm.bitcast %59 : i8 to i8 loc(#loc)
    %61 = llvm.mlir.undef : !llvm.struct<(i8)> loc(#loc)
    %62 = llvm.insertvalue %60, %61[0] : !llvm.struct<(i8)>  loc(#loc)
    %63 = llvm.mlir.constant(7 : i8) : i8 loc(#loc)
    %64 = llvm.bitcast %63 : i8 to i8 loc(#loc)
    %65 = llvm.mlir.undef : !llvm.struct<(i8)> loc(#loc)
    %66 = llvm.insertvalue %64, %65[0] : !llvm.struct<(i8)>  loc(#loc)
    %67 = llvm.mlir.constant(256 : i32) : i32 loc(#loc)
    %68 = llvm.mlir.constant(16 : i32) : i32 loc(#loc)
    %69 = llvm.mlir.constant(16 : i32) : i32 loc(#loc)
    %70 = llvm.bitcast %69 : i32 to i32 loc(#loc)
    %71 = llvm.mlir.undef : !llvm.struct<(i32)> loc(#loc)
    %72 = llvm.insertvalue %70, %71[0] : !llvm.struct<(i32)>  loc(#loc)
    %73 = llvm.mlir.constant(7 : i16) : i16 loc(#loc)
    %74 = llvm.bitcast %73 : i16 to i16 loc(#loc)
    %75 = llvm.mlir.undef : !llvm.struct<(i16, i16)> loc(#loc)
    %76 = llvm.insertvalue %74, %75[0] : !llvm.struct<(i16, i16)>  loc(#loc)
    %77 = llvm.insertvalue %74, %76[1] : !llvm.struct<(i16, i16)>  loc(#loc)
    %78 = llvm.mlir.constant(255 : i32) : i32 loc(#loc)
    %79 = llvm.bitcast %78 : i32 to i32 loc(#loc)
    %80 = llvm.mlir.undef : !llvm.struct<(i32, i32)> loc(#loc)
    %81 = llvm.insertvalue %79, %80[0] : !llvm.struct<(i32, i32)>  loc(#loc)
    %82 = llvm.insertvalue %79, %81[1] : !llvm.struct<(i32, i32)>  loc(#loc)
    %83 = rocdl.workgroup.id.x : i32 loc(#loc)
    %84 = llvm.mul %83, %67 : i32 loc(#loc)
    %85 = llvm.mlir.constant(0 : index) : i32 loc(#loc)
    %86 = rocdl.workitem.id.x : i32 loc(#loc)
    %87 = llvm.mlir.constant(255 : i32) : i32 loc(#loc)
    %88 = llvm.and %86, %87 : i32 loc(#loc)
    %89 = llvm.mlir.constant(64 : i32) : i32 loc(#loc)
    %90 = llvm.urem %88, %89 : i32 loc(#loc)
    %91 = llvm.udiv %88, %89 : i32 loc(#loc)
    %92 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %93 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %94 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %95 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %96 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %97 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %98 = llvm.shl %90, %97 : i32 loc(#loc)
    %99 = llvm.or %96, %98 : i32 loc(#loc)
    %100 = llvm.mlir.constant(6 : i32) : i32 loc(#loc)
    %101 = llvm.shl %91, %100 : i32 loc(#loc)
    %102 = llvm.or %99, %101 : i32 loc(#loc)
    %103 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %104 = llvm.mlir.constant(240 : i32) : i32 loc(#loc)
    %105 = llvm.and %102, %104 : i32 loc(#loc)
    %106 = llvm.mlir.constant(4 : i32) : i32 loc(#loc)
    %107 = llvm.lshr %105, %106 : i32 loc(#loc)
    %108 = llvm.xor %103, %107 : i32 loc(#loc)
    %109 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %110 = llvm.xor %95, %108 : i32 loc(#loc)
    %111 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %112 = llvm.xor %110, %111 : i32 loc(#loc)
    %113 = llvm.add %112, %85 : i32 loc(#loc)
    %114 = llvm.mlir.undef : !llvm.struct<(i32)> loc(#loc)
    %115 = llvm.insertvalue %113, %114[0] : !llvm.struct<(i32)>  loc(#loc)
    %116 = llvm.mlir.constant(0 : index) : i32 loc(#loc)
    %117 = rocdl.workitem.id.x : i32 loc(#loc)
    %118 = llvm.mlir.constant(255 : i32) : i32 loc(#loc)
    %119 = llvm.and %117, %118 : i32 loc(#loc)
    %120 = llvm.mlir.constant(64 : i32) : i32 loc(#loc)
    %121 = llvm.urem %119, %120 : i32 loc(#loc)
    %122 = llvm.udiv %119, %120 : i32 loc(#loc)
    %123 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %124 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %125 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %126 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %127 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %128 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %129 = llvm.shl %121, %128 : i32 loc(#loc)
    %130 = llvm.or %127, %129 : i32 loc(#loc)
    %131 = llvm.mlir.constant(6 : i32) : i32 loc(#loc)
    %132 = llvm.shl %122, %131 : i32 loc(#loc)
    %133 = llvm.or %130, %132 : i32 loc(#loc)
    %134 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %135 = llvm.mlir.constant(240 : i32) : i32 loc(#loc)
    %136 = llvm.and %133, %135 : i32 loc(#loc)
    %137 = llvm.mlir.constant(4 : i32) : i32 loc(#loc)
    %138 = llvm.lshr %136, %137 : i32 loc(#loc)
    %139 = llvm.xor %134, %138 : i32 loc(#loc)
    %140 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %141 = llvm.xor %126, %139 : i32 loc(#loc)
    %142 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %143 = llvm.xor %141, %142 : i32 loc(#loc)
    %144 = llvm.add %143, %116 : i32 loc(#loc)
    %145 = llvm.mlir.undef : !llvm.struct<(i32)> loc(#loc)
    %146 = llvm.insertvalue %144, %145[0] : !llvm.struct<(i32)>  loc(#loc)
    %147 = llvm.extractvalue %115[0] : !llvm.struct<(i32)>  loc(#loc)
    %148 = llvm.mlir.undef : !llvm.struct<(i32)> loc(#loc)
    %149 = llvm.insertvalue %147, %148[0] : !llvm.struct<(i32)>  loc(#loc)
    %150 = llvm.extractvalue %146[0] : !llvm.struct<(i32)>  loc(#loc)
    %151 = llvm.mlir.undef : !llvm.struct<(i32, i32)> loc(#loc)
    %152 = llvm.insertvalue %150, %151[0] : !llvm.struct<(i32, i32)>  loc(#loc)
    %153 = llvm.insertvalue %150, %152[1] : !llvm.struct<(i32, i32)>  loc(#loc)
    %154 = llvm.extractvalue %149[0] : !llvm.struct<(i32)>  loc(#loc)
    %155 = llvm.extractvalue %72[0] : !llvm.struct<(i32)>  loc(#loc)
    %156 = llvm.mul %154, %155 : i32 loc(#loc)
    %157 = llvm.mlir.undef : !llvm.struct<(i32)> loc(#loc)
    %158 = llvm.insertvalue %156, %157[0] : !llvm.struct<(i32)>  loc(#loc)
    %159 = llvm.bitcast %84 : i32 to i32 loc(#loc)
    %160 = llvm.mlir.undef : !llvm.struct<(i32)> loc(#loc)
    %161 = llvm.insertvalue %159, %160[0] : !llvm.struct<(i32)>  loc(#loc)
    %162 = llvm.extractvalue %161[0] : !llvm.struct<(i32)>  loc(#loc)
    %163 = llvm.extractvalue %158[0] : !llvm.struct<(i32)>  loc(#loc)
    %164 = llvm.add %162, %163 : i32 loc(#loc)
    %165 = llvm.mlir.undef : !llvm.struct<(i32)> loc(#loc)
    %166 = llvm.insertvalue %164, %165[0] : !llvm.struct<(i32)>  loc(#loc)
    %167 = llvm.mlir.constant(0 : index) : i32 loc(#loc)
    %168 = rocdl.workitem.id.x : i32 loc(#loc)
    %169 = llvm.mlir.constant(255 : i32) : i32 loc(#loc)
    %170 = llvm.and %168, %169 : i32 loc(#loc)
    %171 = llvm.mlir.constant(64 : i32) : i32 loc(#loc)
    %172 = llvm.urem %170, %171 : i32 loc(#loc)
    %173 = llvm.udiv %170, %171 : i32 loc(#loc)
    %174 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %175 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %176 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %177 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %178 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %179 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %180 = llvm.shl %172, %179 : i32 loc(#loc)
    %181 = llvm.or %178, %180 : i32 loc(#loc)
    %182 = llvm.mlir.constant(6 : i32) : i32 loc(#loc)
    %183 = llvm.shl %173, %182 : i32 loc(#loc)
    %184 = llvm.or %181, %183 : i32 loc(#loc)
    %185 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %186 = llvm.mlir.constant(15 : i32) : i32 loc(#loc)
    %187 = llvm.and %184, %186 : i32 loc(#loc)
    %188 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %189 = llvm.lshr %187, %188 : i32 loc(#loc)
    %190 = llvm.xor %185, %189 : i32 loc(#loc)
    %191 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %192 = llvm.xor %177, %190 : i32 loc(#loc)
    %193 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %194 = llvm.xor %192, %193 : i32 loc(#loc)
    %195 = llvm.add %194, %167 : i32 loc(#loc)
    %196 = llvm.mlir.undef : !llvm.struct<(i32)> loc(#loc)
    %197 = llvm.insertvalue %195, %196[0] : !llvm.struct<(i32)>  loc(#loc)
    %198 = llvm.extractvalue %197[0] : !llvm.struct<(i32)>  loc(#loc)
    %199 = llvm.mlir.undef : !llvm.struct<(i32)> loc(#loc)
    %200 = llvm.insertvalue %198, %199[0] : !llvm.struct<(i32)>  loc(#loc)
    %201 = llvm.extractvalue %166[0] : !llvm.struct<(i32)>  loc(#loc)
    %202 = llvm.mlir.undef : !llvm.struct<(i32)> loc(#loc)
    %203 = llvm.insertvalue %201, %202[0] : !llvm.struct<(i32)>  loc(#loc)
    %204 = llvm.extractvalue %200[0] : !llvm.struct<(i32)>  loc(#loc)
    %205 = llvm.mlir.undef : !llvm.struct<(i32)> loc(#loc)
    %206 = llvm.insertvalue %204, %205[0] : !llvm.struct<(i32)>  loc(#loc)
    %207 = llvm.extractvalue %203[0] : !llvm.struct<(i32)>  loc(#loc)
    %208 = llvm.extractvalue %206[0] : !llvm.struct<(i32)>  loc(#loc)
    %209 = llvm.add %207, %208 : i32 loc(#loc)
    %210 = llvm.mlir.undef : !llvm.struct<(i32)> loc(#loc)
    %211 = llvm.insertvalue %209, %210[0] : !llvm.struct<(i32)>  loc(#loc)
    %212 = llvm.mul %N, %68 : i32 loc(#loc)
    %213 = llvm.bitcast %212 : i32 to i32 loc(#loc)
    %214 = llvm.mlir.undef : !llvm.struct<(i32)> loc(#loc)
    %215 = llvm.insertvalue %213, %214[0] : !llvm.struct<(i32)>  loc(#loc)
    %216 = llvm.extractvalue %211[0] : !llvm.struct<(i32)>  loc(#loc)
    %217 = llvm.extractvalue %215[0] : !llvm.struct<(i32)>  loc(#loc)
    %218 = llvm.icmp "slt" %216, %217 : i32 loc(#loc)
    %219 = llvm.mlir.undef : !llvm.struct<(i1)> loc(#loc)
    %220 = llvm.insertvalue %218, %219[0] : !llvm.struct<(i1)>  loc(#loc)
    %221 = llvm.extractvalue %158[0] : !llvm.struct<(i32)>  loc(#loc)
    %222 = llvm.mlir.undef : !llvm.struct<(i32)> loc(#loc)
    %223 = llvm.insertvalue %221, %222[0] : !llvm.struct<(i32)>  loc(#loc)
    %224 = llvm.extractvalue %223[0] : !llvm.struct<(i32)>  loc(#loc)
    %225 = llvm.extractvalue %206[0] : !llvm.struct<(i32)>  loc(#loc)
    %226 = llvm.add %224, %225 : i32 loc(#loc)
    %227 = llvm.mlir.undef : !llvm.struct<(i32)> loc(#loc)
    %228 = llvm.insertvalue %226, %227[0] : !llvm.struct<(i32)>  loc(#loc)
    %229 = llvm.getelementptr %x_ptr[%84] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, i8 loc(#loc)
    %230 = llvm.extractvalue %228[0] : !llvm.struct<(i32)>  loc(#loc)
    %231 = llvm.extractvalue %220[0] : !llvm.struct<(i1)>  loc(#loc)
    %232 = llvm.mlir.constant(0 : i16) : i16 loc(#loc)
    %233 = llvm.mlir.constant(159744 : i32) : i32 loc(#loc)
    %234 = llvm.mlir.constant(2147483646 : i32) : i32 loc(#loc)
    %235 = rocdl.make.buffer.rsrc %229, %232, %234, %233 : <1> to <8> loc(#loc)
    %236 = llvm.mlir.constant(dense<0> : vector<1xi8>) : vector<1xi8> loc(#loc)
    %237 = llvm.mlir.constant(-2147483648 : i32) : i32 loc(#loc)
    %238 = llvm.mlir.constant(1 : i32) : i32 loc(#loc)
    %239 = llvm.mul %238, %230 : i32 loc(#loc)
    %240 = llvm.select %231, %239, %237 : i1, i32 loc(#loc)
    %241 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %242 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %243 = rocdl.raw.ptr.buffer.load %235, %240, %241, %242 : i8 loc(#loc)
    %244 = llvm.bitcast %243 : i8 to vector<1xi8> loc(#loc)
    %245 = llvm.mlir.constant(0 : index) : i32 loc(#loc)
    %246 = llvm.extractelement %244[%245 : i32] : vector<1xi8> loc(#loc)
    %247 = llvm.mlir.undef : !llvm.struct<(i8)> loc(#loc)
    %248 = llvm.insertvalue %246, %247[0] : !llvm.struct<(i8)>  loc(#loc)
    %249 = llvm.mul %83, %68 : i32 loc(#loc)
    %250 = llvm.bitcast %249 : i32 to i32 loc(#loc)
    %251 = llvm.mlir.undef : !llvm.struct<(i32, i32)> loc(#loc)
    %252 = llvm.insertvalue %250, %251[0] : !llvm.struct<(i32, i32)>  loc(#loc)
    %253 = llvm.insertvalue %250, %252[1] : !llvm.struct<(i32, i32)>  loc(#loc)
    %254 = llvm.extractvalue %253[0] : !llvm.struct<(i32, i32)>  loc(#loc)
    %255 = llvm.extractvalue %253[1] : !llvm.struct<(i32, i32)>  loc(#loc)
    %256 = llvm.extractvalue %153[0] : !llvm.struct<(i32, i32)>  loc(#loc)
    %257 = llvm.extractvalue %153[1] : !llvm.struct<(i32, i32)>  loc(#loc)
    %258 = llvm.add %254, %256 : i32 loc(#loc)
    %259 = llvm.add %255, %257 : i32 loc(#loc)
    %260 = llvm.mlir.undef : !llvm.struct<(i32, i32)> loc(#loc)
    %261 = llvm.insertvalue %258, %260[0] : !llvm.struct<(i32, i32)>  loc(#loc)
    %262 = llvm.insertvalue %259, %261[1] : !llvm.struct<(i32, i32)>  loc(#loc)
    %263 = llvm.bitcast %N : i32 to i32 loc(#loc)
    %264 = llvm.mlir.undef : !llvm.struct<(i32, i32)> loc(#loc)
    %265 = llvm.insertvalue %263, %264[0] : !llvm.struct<(i32, i32)>  loc(#loc)
    %266 = llvm.insertvalue %263, %265[1] : !llvm.struct<(i32, i32)>  loc(#loc)
    %267 = llvm.extractvalue %262[0] : !llvm.struct<(i32, i32)>  loc(#loc)
    %268 = llvm.extractvalue %262[1] : !llvm.struct<(i32, i32)>  loc(#loc)
    %269 = llvm.extractvalue %266[0] : !llvm.struct<(i32, i32)>  loc(#loc)
    %270 = llvm.extractvalue %266[1] : !llvm.struct<(i32, i32)>  loc(#loc)
    %271 = llvm.icmp "slt" %267, %269 : i32 loc(#loc)
    %272 = llvm.icmp "slt" %268, %270 : i32 loc(#loc)
    %273 = llvm.mlir.undef : !llvm.struct<(i1, i1)> loc(#loc)
    %274 = llvm.insertvalue %271, %273[0] : !llvm.struct<(i1, i1)>  loc(#loc)
    %275 = llvm.insertvalue %272, %274[1] : !llvm.struct<(i1, i1)>  loc(#loc)
    %276 = llvm.getelementptr %scale_ptr[%249] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, i8 loc(#loc)
    %277 = llvm.extractvalue %153[0] : !llvm.struct<(i32, i32)>  loc(#loc)
    %278 = llvm.extractvalue %153[1] : !llvm.struct<(i32, i32)>  loc(#loc)
    %279 = llvm.extractvalue %275[0] : !llvm.struct<(i1, i1)>  loc(#loc)
    %280 = llvm.extractvalue %275[1] : !llvm.struct<(i1, i1)>  loc(#loc)
    %281 = llvm.mlir.constant(0 : i16) : i16 loc(#loc)
    %282 = llvm.mlir.constant(159744 : i32) : i32 loc(#loc)
    %283 = llvm.mlir.constant(2147483646 : i32) : i32 loc(#loc)
    %284 = rocdl.make.buffer.rsrc %276, %281, %283, %282 : <1> to <8> loc(#loc)
    %285 = llvm.mlir.constant(dense<0> : vector<1xi8>) : vector<1xi8> loc(#loc)
    %286 = llvm.mlir.constant(-2147483648 : i32) : i32 loc(#loc)
    %287 = llvm.mlir.constant(1 : i32) : i32 loc(#loc)
    %288 = llvm.mul %287, %277 : i32 loc(#loc)
    %289 = llvm.select %279, %288, %286 : i1, i32 loc(#loc)
    %290 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %291 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %292 = rocdl.raw.ptr.buffer.load %284, %289, %290, %291 : i8 loc(#loc)
    %293 = llvm.bitcast %292 : i8 to vector<1xi8> loc(#loc)
    %294 = llvm.mlir.constant(0 : index) : i32 loc(#loc)
    %295 = llvm.extractelement %293[%294 : i32] : vector<1xi8> loc(#loc)
    %296 = llvm.mlir.constant(dense<0> : vector<1xi8>) : vector<1xi8> loc(#loc)
    %297 = llvm.mlir.constant(-2147483648 : i32) : i32 loc(#loc)
    %298 = llvm.mlir.constant(1 : i32) : i32 loc(#loc)
    %299 = llvm.mul %298, %278 : i32 loc(#loc)
    %300 = llvm.select %280, %299, %297 : i1, i32 loc(#loc)
    %301 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %302 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %303 = rocdl.raw.ptr.buffer.load %284, %300, %301, %302 : i8 loc(#loc)
    %304 = llvm.bitcast %303 : i8 to vector<1xi8> loc(#loc)
    %305 = llvm.mlir.constant(0 : index) : i32 loc(#loc)
    %306 = llvm.extractelement %304[%305 : i32] : vector<1xi8> loc(#loc)
    %307 = llvm.mlir.undef : !llvm.struct<(i8, i8)> loc(#loc)
    %308 = llvm.insertvalue %295, %307[0] : !llvm.struct<(i8, i8)>  loc(#loc)
    %309 = llvm.insertvalue %306, %308[1] : !llvm.struct<(i8, i8)>  loc(#loc)
    %310 = llvm.extractvalue %309[0] : !llvm.struct<(i8, i8)>  loc(#loc)
    %311 = llvm.extractvalue %309[1] : !llvm.struct<(i8, i8)>  loc(#loc)
    %312 = llvm.zext %310 : i8 to i16 loc(#loc)
    %313 = llvm.zext %311 : i8 to i16 loc(#loc)
    %314 = llvm.mlir.undef : !llvm.struct<(i16, i16)> loc(#loc)
    %315 = llvm.insertvalue %312, %314[0] : !llvm.struct<(i16, i16)>  loc(#loc)
    %316 = llvm.insertvalue %313, %315[1] : !llvm.struct<(i16, i16)>  loc(#loc)
    %317 = llvm.extractvalue %316[0] : !llvm.struct<(i16, i16)>  loc(#loc)
    %318 = llvm.extractvalue %316[1] : !llvm.struct<(i16, i16)>  loc(#loc)
    %319 = llvm.extractvalue %77[0] : !llvm.struct<(i16, i16)>  loc(#loc)
    %320 = llvm.extractvalue %77[1] : !llvm.struct<(i16, i16)>  loc(#loc)
    %321 = llvm.shl %317, %319 : i16 loc(#loc)
    %322 = llvm.shl %318, %320 : i16 loc(#loc)
    %323 = llvm.mlir.undef : !llvm.struct<(i16, i16)> loc(#loc)
    %324 = llvm.insertvalue %321, %323[0] : !llvm.struct<(i16, i16)>  loc(#loc)
    %325 = llvm.insertvalue %322, %324[1] : !llvm.struct<(i16, i16)>  loc(#loc)
    %326 = llvm.extractvalue %325[0] : !llvm.struct<(i16, i16)>  loc(#loc)
    %327 = llvm.extractvalue %325[1] : !llvm.struct<(i16, i16)>  loc(#loc)
    %328 = llvm.bitcast %326 : i16 to bf16 loc(#loc)
    %329 = llvm.bitcast %327 : i16 to bf16 loc(#loc)
    %330 = llvm.mlir.undef : !llvm.struct<(bf16, bf16)> loc(#loc)
    %331 = llvm.insertvalue %328, %330[0] : !llvm.struct<(bf16, bf16)>  loc(#loc)
    %332 = llvm.insertvalue %329, %331[1] : !llvm.struct<(bf16, bf16)>  loc(#loc)
    %333 = llvm.extractvalue %248[0] : !llvm.struct<(i8)>  loc(#loc)
    %334 = llvm.extractvalue %66[0] : !llvm.struct<(i8)>  loc(#loc)
    %335 = llvm.and %333, %334 : i8 loc(#loc)
    %336 = llvm.mlir.undef : !llvm.struct<(i8)> loc(#loc)
    %337 = llvm.insertvalue %335, %336[0] : !llvm.struct<(i8)>  loc(#loc)
    %338 = llvm.extractvalue %248[0] : !llvm.struct<(i8)>  loc(#loc)
    %339 = llvm.extractvalue %62[0] : !llvm.struct<(i8)>  loc(#loc)
    %340 = llvm.and %338, %339 : i8 loc(#loc)
    %341 = llvm.mlir.undef : !llvm.struct<(i8)> loc(#loc)
    %342 = llvm.insertvalue %340, %341[0] : !llvm.struct<(i8)>  loc(#loc)
    %343 = llvm.extractvalue %337[0] : !llvm.struct<(i8)>  loc(#loc)
    %344 = llvm.zext %343 : i8 to i16 loc(#loc)
    %345 = llvm.mlir.undef : !llvm.struct<(i16)> loc(#loc)
    %346 = llvm.insertvalue %344, %345[0] : !llvm.struct<(i16)>  loc(#loc)
    %347 = llvm.extractvalue %346[0] : !llvm.struct<(i16)>  loc(#loc)
    %348 = llvm.extractvalue %58[0] : !llvm.struct<(i16)>  loc(#loc)
    %349 = llvm.shl %347, %348 : i16 loc(#loc)
    %350 = llvm.mlir.undef : !llvm.struct<(i16)> loc(#loc)
    %351 = llvm.insertvalue %349, %350[0] : !llvm.struct<(i16)>  loc(#loc)
    %352 = llvm.extractvalue %248[0] : !llvm.struct<(i8)>  loc(#loc)
    %353 = llvm.extractvalue %54[0] : !llvm.struct<(i8)>  loc(#loc)
    %354 = llvm.and %352, %353 : i8 loc(#loc)
    %355 = llvm.mlir.undef : !llvm.struct<(i8)> loc(#loc)
    %356 = llvm.insertvalue %354, %355[0] : !llvm.struct<(i8)>  loc(#loc)
    %357 = llvm.extractvalue %356[0] : !llvm.struct<(i8)>  loc(#loc)
    %358 = llvm.zext %357 : i8 to i16 loc(#loc)
    %359 = llvm.mlir.undef : !llvm.struct<(i16)> loc(#loc)
    %360 = llvm.insertvalue %358, %359[0] : !llvm.struct<(i16)>  loc(#loc)
    %361 = llvm.extractvalue %360[0] : !llvm.struct<(i16)>  loc(#loc)
    %362 = llvm.extractvalue %50[0] : !llvm.struct<(i16)>  loc(#loc)
    %363 = llvm.shl %361, %362 : i16 loc(#loc)
    %364 = llvm.mlir.undef : !llvm.struct<(i16)> loc(#loc)
    %365 = llvm.insertvalue %363, %364[0] : !llvm.struct<(i16)>  loc(#loc)
    %366 = llvm.extractvalue %351[0] : !llvm.struct<(i16)>  loc(#loc)
    %367 = llvm.extractvalue %365[0] : !llvm.struct<(i16)>  loc(#loc)
    %368 = llvm.or %366, %367 : i16 loc(#loc)
    %369 = llvm.mlir.undef : !llvm.struct<(i16)> loc(#loc)
    %370 = llvm.insertvalue %368, %369[0] : !llvm.struct<(i16)>  loc(#loc)
    %371 = llvm.extractvalue %342[0] : !llvm.struct<(i8)>  loc(#loc)
    %372 = llvm.zext %371 : i8 to i16 loc(#loc)
    %373 = llvm.mlir.undef : !llvm.struct<(i16)> loc(#loc)
    %374 = llvm.insertvalue %372, %373[0] : !llvm.struct<(i16)>  loc(#loc)
    %375 = llvm.extractvalue %374[0] : !llvm.struct<(i16)>  loc(#loc)
    %376 = llvm.extractvalue %46[0] : !llvm.struct<(i16)>  loc(#loc)
    %377 = llvm.shl %375, %376 : i16 loc(#loc)
    %378 = llvm.mlir.undef : !llvm.struct<(i16)> loc(#loc)
    %379 = llvm.insertvalue %377, %378[0] : !llvm.struct<(i16)>  loc(#loc)
    %380 = llvm.extractvalue %248[0] : !llvm.struct<(i8)>  loc(#loc)
    %381 = llvm.extractvalue %42[0] : !llvm.struct<(i8)>  loc(#loc)
    %382 = llvm.and %380, %381 : i8 loc(#loc)
    %383 = llvm.mlir.undef : !llvm.struct<(i8)> loc(#loc)
    %384 = llvm.insertvalue %382, %383[0] : !llvm.struct<(i8)>  loc(#loc)
    %385 = llvm.extractvalue %384[0] : !llvm.struct<(i8)>  loc(#loc)
    %386 = llvm.zext %385 : i8 to i16 loc(#loc)
    %387 = llvm.mlir.undef : !llvm.struct<(i16)> loc(#loc)
    %388 = llvm.insertvalue %386, %387[0] : !llvm.struct<(i16)>  loc(#loc)
    %389 = llvm.extractvalue %388[0] : !llvm.struct<(i16)>  loc(#loc)
    %390 = llvm.extractvalue %38[0] : !llvm.struct<(i16)>  loc(#loc)
    %391 = llvm.shl %389, %390 : i16 loc(#loc)
    %392 = llvm.mlir.undef : !llvm.struct<(i16)> loc(#loc)
    %393 = llvm.insertvalue %391, %392[0] : !llvm.struct<(i16)>  loc(#loc)
    %394 = llvm.extractvalue %379[0] : !llvm.struct<(i16)>  loc(#loc)
    %395 = llvm.extractvalue %393[0] : !llvm.struct<(i16)>  loc(#loc)
    %396 = llvm.or %394, %395 : i16 loc(#loc)
    %397 = llvm.mlir.undef : !llvm.struct<(i16)> loc(#loc)
    %398 = llvm.insertvalue %396, %397[0] : !llvm.struct<(i16)>  loc(#loc)
    %399 = llvm.extractvalue %337[0] : !llvm.struct<(i8)>  loc(#loc)
    %400 = llvm.extractvalue %34[0] : !llvm.struct<(i8)>  loc(#loc)
    %401 = llvm.and %399, %400 : i8 loc(#loc)
    %402 = llvm.mlir.undef : !llvm.struct<(i8)> loc(#loc)
    %403 = llvm.insertvalue %401, %402[0] : !llvm.struct<(i8)>  loc(#loc)
    %404 = llvm.extractvalue %403[0] : !llvm.struct<(i8)>  loc(#loc)
    %405 = llvm.zext %404 : i8 to i32 loc(#loc)
    %406 = llvm.mlir.undef : !llvm.struct<(i32)> loc(#loc)
    %407 = llvm.insertvalue %405, %406[0] : !llvm.struct<(i32)>  loc(#loc)
    %408 = llvm.extractvalue %407[0] : !llvm.struct<(i32)>  loc(#loc)
    %409 = llvm.extractvalue %30[0] : !llvm.struct<(i32)>  loc(#loc)
    %410 = llvm.icmp "ne" %408, %409 : i32 loc(#loc)
    %411 = llvm.mlir.undef : !llvm.struct<(i1)> loc(#loc)
    %412 = llvm.insertvalue %410, %411[0] : !llvm.struct<(i1)>  loc(#loc)
    %413 = llvm.extractvalue %370[0] : !llvm.struct<(i16)>  loc(#loc)
    %414 = llvm.extractvalue %26[0] : !llvm.struct<(i16)>  loc(#loc)
    %415 = llvm.add %413, %414 : i16 loc(#loc)
    %416 = llvm.mlir.undef : !llvm.struct<(i16)> loc(#loc)
    %417 = llvm.insertvalue %415, %416[0] : !llvm.struct<(i16)>  loc(#loc)
    %418 = llvm.extractvalue %412[0] : !llvm.struct<(i1)>  loc(#loc)
    %419 = llvm.extractvalue %417[0] : !llvm.struct<(i16)>  loc(#loc)
    %420 = llvm.extractvalue %370[0] : !llvm.struct<(i16)>  loc(#loc)
    %421 = llvm.select %418, %419, %420 : i1, i16 loc(#loc)
    %422 = llvm.mlir.undef : !llvm.struct<(i16)> loc(#loc)
    %423 = llvm.insertvalue %421, %422[0] : !llvm.struct<(i16)>  loc(#loc)
    %424 = llvm.extractvalue %342[0] : !llvm.struct<(i8)>  loc(#loc)
    %425 = llvm.extractvalue %22[0] : !llvm.struct<(i8)>  loc(#loc)
    %426 = llvm.and %424, %425 : i8 loc(#loc)
    %427 = llvm.mlir.undef : !llvm.struct<(i8)> loc(#loc)
    %428 = llvm.insertvalue %426, %427[0] : !llvm.struct<(i8)>  loc(#loc)
    %429 = llvm.extractvalue %428[0] : !llvm.struct<(i8)>  loc(#loc)
    %430 = llvm.zext %429 : i8 to i32 loc(#loc)
    %431 = llvm.mlir.undef : !llvm.struct<(i32)> loc(#loc)
    %432 = llvm.insertvalue %430, %431[0] : !llvm.struct<(i32)>  loc(#loc)
    %433 = llvm.extractvalue %432[0] : !llvm.struct<(i32)>  loc(#loc)
    %434 = llvm.extractvalue %30[0] : !llvm.struct<(i32)>  loc(#loc)
    %435 = llvm.icmp "ne" %433, %434 : i32 loc(#loc)
    %436 = llvm.mlir.undef : !llvm.struct<(i1)> loc(#loc)
    %437 = llvm.insertvalue %435, %436[0] : !llvm.struct<(i1)>  loc(#loc)
    %438 = llvm.extractvalue %398[0] : !llvm.struct<(i16)>  loc(#loc)
    %439 = llvm.extractvalue %26[0] : !llvm.struct<(i16)>  loc(#loc)
    %440 = llvm.add %438, %439 : i16 loc(#loc)
    %441 = llvm.mlir.undef : !llvm.struct<(i16)> loc(#loc)
    %442 = llvm.insertvalue %440, %441[0] : !llvm.struct<(i16)>  loc(#loc)
    %443 = llvm.extractvalue %437[0] : !llvm.struct<(i1)>  loc(#loc)
    %444 = llvm.extractvalue %442[0] : !llvm.struct<(i16)>  loc(#loc)
    %445 = llvm.extractvalue %398[0] : !llvm.struct<(i16)>  loc(#loc)
    %446 = llvm.select %443, %444, %445 : i1, i16 loc(#loc)
    %447 = llvm.mlir.undef : !llvm.struct<(i16)> loc(#loc)
    %448 = llvm.insertvalue %446, %447[0] : !llvm.struct<(i16)>  loc(#loc)
    %449 = llvm.extractvalue %337[0] : !llvm.struct<(i8)>  loc(#loc)
    %450 = llvm.zext %449 : i8 to i32 loc(#loc)
    %451 = llvm.mlir.undef : !llvm.struct<(i32)> loc(#loc)
    %452 = llvm.insertvalue %450, %451[0] : !llvm.struct<(i32)>  loc(#loc)
    %453 = llvm.extractvalue %452[0] : !llvm.struct<(i32)>  loc(#loc)
    %454 = llvm.extractvalue %18[0] : !llvm.struct<(i32)>  loc(#loc)
    %455 = llvm.icmp "eq" %453, %454 : i32 loc(#loc)
    %456 = llvm.mlir.undef : !llvm.struct<(i1)> loc(#loc)
    %457 = llvm.insertvalue %455, %456[0] : !llvm.struct<(i1)>  loc(#loc)
    %458 = llvm.extractvalue %423[0] : !llvm.struct<(i16)>  loc(#loc)
    %459 = llvm.extractvalue %14[0] : !llvm.struct<(i16)>  loc(#loc)
    %460 = llvm.and %458, %459 : i16 loc(#loc)
    %461 = llvm.mlir.undef : !llvm.struct<(i16)> loc(#loc)
    %462 = llvm.insertvalue %460, %461[0] : !llvm.struct<(i16)>  loc(#loc)
    %463 = llvm.extractvalue %462[0] : !llvm.struct<(i16)>  loc(#loc)
    %464 = llvm.extractvalue %26[0] : !llvm.struct<(i16)>  loc(#loc)
    %465 = llvm.or %463, %464 : i16 loc(#loc)
    %466 = llvm.mlir.undef : !llvm.struct<(i16)> loc(#loc)
    %467 = llvm.insertvalue %465, %466[0] : !llvm.struct<(i16)>  loc(#loc)
    %468 = llvm.extractvalue %457[0] : !llvm.struct<(i1)>  loc(#loc)
    %469 = llvm.extractvalue %467[0] : !llvm.struct<(i16)>  loc(#loc)
    %470 = llvm.extractvalue %423[0] : !llvm.struct<(i16)>  loc(#loc)
    %471 = llvm.select %468, %469, %470 : i1, i16 loc(#loc)
    %472 = llvm.mlir.undef : !llvm.struct<(i16)> loc(#loc)
    %473 = llvm.insertvalue %471, %472[0] : !llvm.struct<(i16)>  loc(#loc)
    %474 = llvm.extractvalue %342[0] : !llvm.struct<(i8)>  loc(#loc)
    %475 = llvm.zext %474 : i8 to i32 loc(#loc)
    %476 = llvm.mlir.undef : !llvm.struct<(i32)> loc(#loc)
    %477 = llvm.insertvalue %475, %476[0] : !llvm.struct<(i32)>  loc(#loc)
    %478 = llvm.extractvalue %477[0] : !llvm.struct<(i32)>  loc(#loc)
    %479 = llvm.extractvalue %10[0] : !llvm.struct<(i32)>  loc(#loc)
    %480 = llvm.icmp "eq" %478, %479 : i32 loc(#loc)
    %481 = llvm.mlir.undef : !llvm.struct<(i1)> loc(#loc)
    %482 = llvm.insertvalue %480, %481[0] : !llvm.struct<(i1)>  loc(#loc)
    %483 = llvm.extractvalue %448[0] : !llvm.struct<(i16)>  loc(#loc)
    %484 = llvm.extractvalue %14[0] : !llvm.struct<(i16)>  loc(#loc)
    %485 = llvm.and %483, %484 : i16 loc(#loc)
    %486 = llvm.mlir.undef : !llvm.struct<(i16)> loc(#loc)
    %487 = llvm.insertvalue %485, %486[0] : !llvm.struct<(i16)>  loc(#loc)
    %488 = llvm.extractvalue %487[0] : !llvm.struct<(i16)>  loc(#loc)
    %489 = llvm.extractvalue %26[0] : !llvm.struct<(i16)>  loc(#loc)
    %490 = llvm.or %488, %489 : i16 loc(#loc)
    %491 = llvm.mlir.undef : !llvm.struct<(i16)> loc(#loc)
    %492 = llvm.insertvalue %490, %491[0] : !llvm.struct<(i16)>  loc(#loc)
    %493 = llvm.extractvalue %482[0] : !llvm.struct<(i1)>  loc(#loc)
    %494 = llvm.extractvalue %492[0] : !llvm.struct<(i16)>  loc(#loc)
    %495 = llvm.extractvalue %448[0] : !llvm.struct<(i16)>  loc(#loc)
    %496 = llvm.select %493, %494, %495 : i1, i16 loc(#loc)
    %497 = llvm.mlir.undef : !llvm.struct<(i16)> loc(#loc)
    %498 = llvm.insertvalue %496, %497[0] : !llvm.struct<(i16)>  loc(#loc)
    %499 = llvm.extractvalue %473[0] : !llvm.struct<(i16)>  loc(#loc)
    %500 = llvm.extractvalue %498[0] : !llvm.struct<(i16)>  loc(#loc)
    %501 = llvm.mlir.undef : !llvm.struct<(i16, i16)> loc(#loc)
    %502 = llvm.insertvalue %499, %501[0] : !llvm.struct<(i16, i16)>  loc(#loc)
    %503 = llvm.insertvalue %500, %502[1] : !llvm.struct<(i16, i16)>  loc(#loc)
    %504 = llvm.extractvalue %503[0] : !llvm.struct<(i16, i16)>  loc(#loc)
    %505 = llvm.extractvalue %503[1] : !llvm.struct<(i16, i16)>  loc(#loc)
    %506 = llvm.mlir.undef : !llvm.struct<(i16, i16)> loc(#loc)
    %507 = llvm.insertvalue %504, %506[0] : !llvm.struct<(i16, i16)>  loc(#loc)
    %508 = llvm.insertvalue %505, %507[1] : !llvm.struct<(i16, i16)>  loc(#loc)
    %509 = llvm.extractvalue %508[0] : !llvm.struct<(i16, i16)>  loc(#loc)
    %510 = llvm.extractvalue %508[1] : !llvm.struct<(i16, i16)>  loc(#loc)
    %511 = llvm.bitcast %509 : i16 to bf16 loc(#loc)
    %512 = llvm.bitcast %510 : i16 to bf16 loc(#loc)
    %513 = llvm.mlir.undef : !llvm.struct<(bf16, bf16)> loc(#loc)
    %514 = llvm.insertvalue %511, %513[0] : !llvm.struct<(bf16, bf16)>  loc(#loc)
    %515 = llvm.insertvalue %512, %514[1] : !llvm.struct<(bf16, bf16)>  loc(#loc)
    %516 = llvm.extractvalue %332[0] : !llvm.struct<(bf16, bf16)>  loc(#loc)
    %517 = llvm.extractvalue %332[1] : !llvm.struct<(bf16, bf16)>  loc(#loc)
    %518 = llvm.mlir.undef : !llvm.struct<(bf16, bf16)> loc(#loc)
    %519 = llvm.insertvalue %517, %518[0] : !llvm.struct<(bf16, bf16)>  loc(#loc)
    %520 = llvm.insertvalue %517, %519[1] : !llvm.struct<(bf16, bf16)>  loc(#loc)
    %521 = llvm.extractvalue %515[0] : !llvm.struct<(bf16, bf16)>  loc(#loc)
    %522 = llvm.extractvalue %515[1] : !llvm.struct<(bf16, bf16)>  loc(#loc)
    %523 = llvm.extractvalue %520[0] : !llvm.struct<(bf16, bf16)>  loc(#loc)
    %524 = llvm.extractvalue %520[1] : !llvm.struct<(bf16, bf16)>  loc(#loc)
    %525 = llvm.bitcast %521 : bf16 to i16 loc(#loc)
    %526 = llvm.zext %525 : i16 to i32 loc(#loc)
    %527 = llvm.mlir.constant(16 : i32) : i32 loc(#loc)
    %528 = llvm.shl %526, %527 : i32 loc(#loc)
    %529 = llvm.bitcast %528 : i32 to f32 loc(#loc)
    %530 = llvm.bitcast %523 : bf16 to i16 loc(#loc)
    %531 = llvm.zext %530 : i16 to i32 loc(#loc)
    %532 = llvm.mlir.constant(16 : i32) : i32 loc(#loc)
    %533 = llvm.shl %531, %532 : i32 loc(#loc)
    %534 = llvm.bitcast %533 : i32 to f32 loc(#loc)
    %535 = llvm.fmul %529, %534 : f32 loc(#loc)
    %536 = llvm.bitcast %535 : f32 to i32 loc(#loc)
    %537 = llvm.mlir.constant(3 : i32) : i32 loc(#loc)
    %538 = llvm.call_intrinsic "llvm.is.fpclass"(%535, %537) : (f32, i32) -> i1 loc(#loc)
    %539 = llvm.mlir.constant(16 : i32) : i32 loc(#loc)
    %540 = llvm.lshr %536, %539 : i32 loc(#loc)
    %541 = llvm.mlir.constant(1 : i32) : i32 loc(#loc)
    %542 = llvm.and %540, %541 : i32 loc(#loc)
    %543 = llvm.mlir.constant(32767 : i32) : i32 loc(#loc)
    %544 = llvm.add %536, %542 : i32 loc(#loc)
    %545 = llvm.add %544, %543 : i32 loc(#loc)
    %546 = llvm.mlir.constant(2147418112 : i32) : i32 loc(#loc)
    %547 = llvm.select %538, %546, %545 : i1, i32 loc(#loc)
    %548 = llvm.lshr %547, %539 : i32 loc(#loc)
    %549 = llvm.trunc %548 : i32 to i16 loc(#loc)
    %550 = llvm.bitcast %549 : i16 to bf16 loc(#loc)
    %551 = llvm.bitcast %522 : bf16 to i16 loc(#loc)
    %552 = llvm.zext %551 : i16 to i32 loc(#loc)
    %553 = llvm.mlir.constant(16 : i32) : i32 loc(#loc)
    %554 = llvm.shl %552, %553 : i32 loc(#loc)
    %555 = llvm.bitcast %554 : i32 to f32 loc(#loc)
    %556 = llvm.bitcast %524 : bf16 to i16 loc(#loc)
    %557 = llvm.zext %556 : i16 to i32 loc(#loc)
    %558 = llvm.mlir.constant(16 : i32) : i32 loc(#loc)
    %559 = llvm.shl %557, %558 : i32 loc(#loc)
    %560 = llvm.bitcast %559 : i32 to f32 loc(#loc)
    %561 = llvm.fmul %555, %560 : f32 loc(#loc)
    %562 = llvm.bitcast %561 : f32 to i32 loc(#loc)
    %563 = llvm.mlir.constant(3 : i32) : i32 loc(#loc)
    %564 = llvm.call_intrinsic "llvm.is.fpclass"(%561, %563) : (f32, i32) -> i1 loc(#loc)
    %565 = llvm.mlir.constant(16 : i32) : i32 loc(#loc)
    %566 = llvm.lshr %562, %565 : i32 loc(#loc)
    %567 = llvm.mlir.constant(1 : i32) : i32 loc(#loc)
    %568 = llvm.and %566, %567 : i32 loc(#loc)
    %569 = llvm.mlir.constant(32767 : i32) : i32 loc(#loc)
    %570 = llvm.add %562, %568 : i32 loc(#loc)
    %571 = llvm.add %570, %569 : i32 loc(#loc)
    %572 = llvm.mlir.constant(2147418112 : i32) : i32 loc(#loc)
    %573 = llvm.select %564, %572, %571 : i1, i32 loc(#loc)
    %574 = llvm.lshr %573, %565 : i32 loc(#loc)
    %575 = llvm.trunc %574 : i32 to i16 loc(#loc)
    %576 = llvm.bitcast %575 : i16 to bf16 loc(#loc)
    %577 = llvm.mlir.undef : !llvm.struct<(bf16, bf16)> loc(#loc)
    %578 = llvm.insertvalue %550, %577[0] : !llvm.struct<(bf16, bf16)>  loc(#loc)
    %579 = llvm.insertvalue %576, %578[1] : !llvm.struct<(bf16, bf16)>  loc(#loc)
    %580 = llvm.extractvalue %309[0] : !llvm.struct<(i8, i8)>  loc(#loc)
    %581 = llvm.extractvalue %309[1] : !llvm.struct<(i8, i8)>  loc(#loc)
    %582 = llvm.zext %580 : i8 to i32 loc(#loc)
    %583 = llvm.zext %581 : i8 to i32 loc(#loc)
    %584 = llvm.mlir.undef : !llvm.struct<(i32, i32)> loc(#loc)
    %585 = llvm.insertvalue %582, %584[0] : !llvm.struct<(i32, i32)>  loc(#loc)
    %586 = llvm.insertvalue %583, %585[1] : !llvm.struct<(i32, i32)>  loc(#loc)
    %587 = llvm.extractvalue %586[0] : !llvm.struct<(i32, i32)>  loc(#loc)
    %588 = llvm.extractvalue %586[1] : !llvm.struct<(i32, i32)>  loc(#loc)
    %589 = llvm.extractvalue %82[0] : !llvm.struct<(i32, i32)>  loc(#loc)
    %590 = llvm.extractvalue %82[1] : !llvm.struct<(i32, i32)>  loc(#loc)
    %591 = llvm.icmp "eq" %587, %589 : i32 loc(#loc)
    %592 = llvm.icmp "eq" %588, %590 : i32 loc(#loc)
    %593 = llvm.mlir.undef : !llvm.struct<(i1, i1)> loc(#loc)
    %594 = llvm.insertvalue %591, %593[0] : !llvm.struct<(i1, i1)>  loc(#loc)
    %595 = llvm.insertvalue %592, %594[1] : !llvm.struct<(i1, i1)>  loc(#loc)
    %596 = llvm.extractvalue %595[0] : !llvm.struct<(i1, i1)>  loc(#loc)
    %597 = llvm.extractvalue %595[1] : !llvm.struct<(i1, i1)>  loc(#loc)
    %598 = llvm.mlir.undef : !llvm.struct<(i1, i1)> loc(#loc)
    %599 = llvm.insertvalue %597, %598[0] : !llvm.struct<(i1, i1)>  loc(#loc)
    %600 = llvm.insertvalue %597, %599[1] : !llvm.struct<(i1, i1)>  loc(#loc)
    %601 = llvm.extractvalue %600[0] : !llvm.struct<(i1, i1)>  loc(#loc)
    %602 = llvm.extractvalue %600[1] : !llvm.struct<(i1, i1)>  loc(#loc)
    %603 = llvm.extractvalue %4[0] : !llvm.struct<(bf16, bf16)>  loc(#loc)
    %604 = llvm.extractvalue %4[1] : !llvm.struct<(bf16, bf16)>  loc(#loc)
    %605 = llvm.extractvalue %579[0] : !llvm.struct<(bf16, bf16)>  loc(#loc)
    %606 = llvm.extractvalue %579[1] : !llvm.struct<(bf16, bf16)>  loc(#loc)
    %607 = llvm.select %601, %603, %605 : i1, bf16 loc(#loc)
    %608 = llvm.select %602, %604, %606 : i1, bf16 loc(#loc)
    %609 = llvm.mlir.undef : !llvm.struct<(bf16, bf16)> loc(#loc)
    %610 = llvm.insertvalue %607, %609[0] : !llvm.struct<(bf16, bf16)>  loc(#loc)
    %611 = llvm.insertvalue %608, %610[1] : !llvm.struct<(bf16, bf16)>  loc(#loc)
    %612 = llvm.mul %83, %5 : i32 loc(#loc)
    %613 = llvm.mlir.constant(0 : index) : i32 loc(#loc)
    %614 = rocdl.workitem.id.x : i32 loc(#loc)
    %615 = llvm.mlir.constant(255 : i32) : i32 loc(#loc)
    %616 = llvm.and %614, %615 : i32 loc(#loc)
    %617 = llvm.mlir.constant(64 : i32) : i32 loc(#loc)
    %618 = llvm.urem %616, %617 : i32 loc(#loc)
    %619 = llvm.udiv %616, %617 : i32 loc(#loc)
    %620 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %621 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %622 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %623 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %624 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %625 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %626 = llvm.shl %618, %625 : i32 loc(#loc)
    %627 = llvm.or %624, %626 : i32 loc(#loc)
    %628 = llvm.mlir.constant(6 : i32) : i32 loc(#loc)
    %629 = llvm.shl %619, %628 : i32 loc(#loc)
    %630 = llvm.or %627, %629 : i32 loc(#loc)
    %631 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %632 = llvm.mlir.constant(255 : i32) : i32 loc(#loc)
    %633 = llvm.and %630, %632 : i32 loc(#loc)
    %634 = llvm.mlir.constant(1 : i32) : i32 loc(#loc)
    %635 = llvm.shl %633, %634 : i32 loc(#loc)
    %636 = llvm.xor %631, %635 : i32 loc(#loc)
    %637 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %638 = llvm.xor %623, %636 : i32 loc(#loc)
    %639 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %640 = llvm.xor %638, %639 : i32 loc(#loc)
    %641 = llvm.mlir.constant(1 : i32) : i32 loc(#loc)
    %642 = llvm.xor %638, %641 : i32 loc(#loc)
    %643 = llvm.add %640, %613 : i32 loc(#loc)
    %644 = llvm.add %642, %613 : i32 loc(#loc)
    %645 = llvm.mlir.undef : !llvm.struct<(i32, i32)> loc(#loc)
    %646 = llvm.insertvalue %643, %645[0] : !llvm.struct<(i32, i32)>  loc(#loc)
    %647 = llvm.insertvalue %644, %646[1] : !llvm.struct<(i32, i32)>  loc(#loc)
    %648 = llvm.bitcast %612 : i32 to i32 loc(#loc)
    %649 = llvm.mlir.undef : !llvm.struct<(i32, i32)> loc(#loc)
    %650 = llvm.insertvalue %648, %649[0] : !llvm.struct<(i32, i32)>  loc(#loc)
    %651 = llvm.insertvalue %648, %650[1] : !llvm.struct<(i32, i32)>  loc(#loc)
    %652 = llvm.extractvalue %651[0] : !llvm.struct<(i32, i32)>  loc(#loc)
    %653 = llvm.extractvalue %651[1] : !llvm.struct<(i32, i32)>  loc(#loc)
    %654 = llvm.extractvalue %647[0] : !llvm.struct<(i32, i32)>  loc(#loc)
    %655 = llvm.extractvalue %647[1] : !llvm.struct<(i32, i32)>  loc(#loc)
    %656 = llvm.add %652, %654 : i32 loc(#loc)
    %657 = llvm.add %653, %655 : i32 loc(#loc)
    %658 = llvm.mlir.undef : !llvm.struct<(i32, i32)> loc(#loc)
    %659 = llvm.insertvalue %656, %658[0] : !llvm.struct<(i32, i32)>  loc(#loc)
    %660 = llvm.insertvalue %657, %659[1] : !llvm.struct<(i32, i32)>  loc(#loc)
    %661 = llvm.mul %N, %6 : i32 loc(#loc)
    %662 = llvm.bitcast %661 : i32 to i32 loc(#loc)
    %663 = llvm.mlir.undef : !llvm.struct<(i32, i32)> loc(#loc)
    %664 = llvm.insertvalue %662, %663[0] : !llvm.struct<(i32, i32)>  loc(#loc)
    %665 = llvm.insertvalue %662, %664[1] : !llvm.struct<(i32, i32)>  loc(#loc)
    %666 = llvm.extractvalue %660[0] : !llvm.struct<(i32, i32)>  loc(#loc)
    %667 = llvm.extractvalue %660[1] : !llvm.struct<(i32, i32)>  loc(#loc)
    %668 = llvm.extractvalue %665[0] : !llvm.struct<(i32, i32)>  loc(#loc)
    %669 = llvm.extractvalue %665[1] : !llvm.struct<(i32, i32)>  loc(#loc)
    %670 = llvm.icmp "slt" %666, %668 : i32 loc(#loc)
    %671 = llvm.icmp "slt" %667, %669 : i32 loc(#loc)
    %672 = llvm.mlir.undef : !llvm.struct<(i1, i1)> loc(#loc)
    %673 = llvm.insertvalue %670, %672[0] : !llvm.struct<(i1, i1)>  loc(#loc)
    %674 = llvm.insertvalue %670, %673[1] : !llvm.struct<(i1, i1)>  loc(#loc)
    %675 = llvm.getelementptr %mxfp_ptr[%612] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc)
    %676 = llvm.extractvalue %611[0] : !llvm.struct<(bf16, bf16)>  loc(#loc)
    %677 = llvm.extractvalue %611[1] : !llvm.struct<(bf16, bf16)>  loc(#loc)
    %678 = llvm.mlir.undef : !llvm.struct<(bf16, bf16)> loc(#loc)
    %679 = llvm.insertvalue %676, %678[0] : !llvm.struct<(bf16, bf16)>  loc(#loc)
    %680 = llvm.insertvalue %677, %679[1] : !llvm.struct<(bf16, bf16)>  loc(#loc)
    %681 = llvm.extractvalue %647[0] : !llvm.struct<(i32, i32)>  loc(#loc)
    %682 = llvm.extractvalue %647[1] : !llvm.struct<(i32, i32)>  loc(#loc)
    %683 = llvm.extractvalue %680[0] : !llvm.struct<(bf16, bf16)>  loc(#loc)
    %684 = llvm.extractvalue %680[1] : !llvm.struct<(bf16, bf16)>  loc(#loc)
    %685 = llvm.extractvalue %674[0] : !llvm.struct<(i1, i1)>  loc(#loc)
    %686 = llvm.extractvalue %674[1] : !llvm.struct<(i1, i1)>  loc(#loc)
    %687 = llvm.mlir.constant(0 : i16) : i16 loc(#loc)
    %688 = llvm.mlir.constant(159744 : i32) : i32 loc(#loc)
    %689 = llvm.mlir.constant(2147483646 : i32) : i32 loc(#loc)
    %690 = rocdl.make.buffer.rsrc %675, %687, %689, %688 : <1> to <8> loc(#loc)
    %691 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %692 = rocdl.workitem.id.x : i32 loc(#loc)
    %693 = llvm.mlir.constant(255 : i32) : i32 loc(#loc)
    %694 = llvm.and %692, %693 : i32 loc(#loc)
    %695 = llvm.mlir.constant(64 : i32) : i32 loc(#loc)
    %696 = llvm.urem %694, %695 : i32 loc(#loc)
    %697 = llvm.udiv %694, %695 : i32 loc(#loc)
    %698 = llvm.mlir.constant(true) : i1 loc(#loc)
    %699 = llvm.and %698, %685 : i1 loc(#loc)
    %700 = llvm.mlir.undef : vector<2xbf16> loc(#loc)
    %701 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %702 = llvm.insertelement %683, %700[%701 : i32] : vector<2xbf16> loc(#loc)
    %703 = llvm.mlir.constant(1 : i32) : i32 loc(#loc)
    %704 = llvm.insertelement %684, %702[%703 : i32] : vector<2xbf16> loc(#loc)
    %705 = llvm.bitcast %704 : vector<2xbf16> to i32 loc(#loc)
    %706 = llvm.mlir.constant(-2147483648 : i32) : i32 loc(#loc)
    %707 = llvm.mlir.constant(2 : i32) : i32 loc(#loc)
    %708 = llvm.mul %707, %681 : i32 loc(#loc)
    %709 = llvm.select %699, %708, %706 : i1, i32 loc(#loc)
    %710 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %711 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    rocdl.raw.ptr.buffer.store %705, %690, %709, %710, %711 : i32 loc(#loc)
    llvm.return loc(#loc)
  } loc(#loc)
} loc(#loc)


// -----// IR Dump Before CSE (cse) ('builtin.module' operation) //----- //
#loc = loc(unknown)
#loc1 = loc("x_ptr")
#loc2 = loc("scale_ptr")
#loc3 = loc("mxfp_ptr")
#loc4 = loc("N")
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.shared = 0 : i32, ttg.target = "hip:gfx950", "ttg.threads-per-warp" = 64 : i32} {
  llvm.mlir.global external @global_smem() {addr_space = 3 : i32, alignment = 16 : i64} : !llvm.array<0 x i8> loc(#loc)
  llvm.func @mxfp_upcast_kernel(%x_ptr: !llvm.ptr<1> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("x_ptr"), %scale_ptr: !llvm.ptr<1> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("scale_ptr"), %mxfp_ptr: !llvm.ptr<1> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("mxfp_ptr"), %N: i32 {tt.divisibility = 16 : i32} loc("N"), %arg4: !llvm.ptr<1> loc(unknown), %arg5: !llvm.ptr<1> loc(unknown)) attributes {noinline = false, nvvm.kernel = 1 : ui1, nvvm.reqntid = array<i32: 128>} {
    %0 = llvm.mlir.constant(2 : i32) : i32 loc(#loc)
    %1 = llvm.mlir.undef : vector<2xbf16> loc(#loc)
    %2 = llvm.mlir.constant(true) : i1 loc(#loc)
    %3 = llvm.mlir.constant(2147418112 : i32) : i32 loc(#loc)
    %4 = llvm.mlir.constant(32767 : i32) : i32 loc(#loc)
    %5 = llvm.mlir.constant(3 : i32) : i32 loc(#loc)
    %6 = llvm.mlir.constant(-2147483648 : i32) : i32 loc(#loc)
    %7 = llvm.mlir.constant(2147483646 : i32) : i32 loc(#loc)
    %8 = llvm.mlir.constant(159744 : i32) : i32 loc(#loc)
    %9 = llvm.mlir.constant(0 : i16) : i16 loc(#loc)
    %10 = llvm.mlir.constant(15 : i32) : i32 loc(#loc)
    %11 = llvm.mlir.constant(4 : i32) : i32 loc(#loc)
    %12 = llvm.mlir.constant(240 : i32) : i32 loc(#loc)
    %13 = llvm.mlir.constant(6 : i32) : i32 loc(#loc)
    %14 = llvm.mlir.constant(64 : i32) : i32 loc(#loc)
    %15 = llvm.mlir.constant(0 : index) : i32 loc(#loc)
    %16 = llvm.mlir.constant(255 : i32) : i32 loc(#loc)
    %17 = llvm.mlir.constant(7 : i16) : i16 loc(#loc)
    %18 = llvm.mlir.constant(256 : i32) : i32 loc(#loc)
    %19 = llvm.mlir.constant(7 : i8) : i8 loc(#loc)
    %20 = llvm.mlir.constant(112 : i8) : i8 loc(#loc)
    %21 = llvm.mlir.constant(6 : i16) : i16 loc(#loc)
    %22 = llvm.mlir.constant(8 : i8) : i8 loc(#loc)
    %23 = llvm.mlir.constant(12 : i16) : i16 loc(#loc)
    %24 = llvm.mlir.constant(2 : i16) : i16 loc(#loc)
    %25 = llvm.mlir.constant(-128 : i8) : i8 loc(#loc)
    %26 = llvm.mlir.constant(8 : i16) : i16 loc(#loc)
    %27 = llvm.mlir.constant(6 : i8) : i8 loc(#loc)
    %28 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %29 = llvm.mlir.constant(16128 : i16) : i16 loc(#loc)
    %30 = llvm.mlir.constant(96 : i8) : i8 loc(#loc)
    %31 = llvm.mlir.constant(1 : i32) : i32 loc(#loc)
    %32 = llvm.mlir.constant(-32768 : i16) : i16 loc(#loc)
    %33 = llvm.mlir.constant(16 : i32) : i32 loc(#loc)
    %34 = llvm.mlir.constant(32 : i32) : i32 loc(#loc)
    %35 = llvm.mlir.constant(512 : i32) : i32 loc(#loc)
    %36 = llvm.mlir.constant(0x7FC0 : bf16) : bf16 loc(#loc)
    %37 = rocdl.workgroup.id.x : i32 loc(#loc)
    %38 = llvm.mul %37, %18 : i32 loc(#loc)
    %39 = rocdl.workitem.id.x : i32 loc(#loc)
    %40 = llvm.and %39, %16 : i32 loc(#loc)
    %41 = llvm.urem %40, %14 : i32 loc(#loc)
    %42 = llvm.udiv %40, %14 : i32 loc(#loc)
    %43 = llvm.shl %41, %28 : i32 loc(#loc)
    %44 = llvm.or %28, %43 : i32 loc(#loc)
    %45 = llvm.shl %42, %13 : i32 loc(#loc)
    %46 = llvm.or %44, %45 : i32 loc(#loc)
    %47 = llvm.and %46, %12 : i32 loc(#loc)
    %48 = llvm.lshr %47, %11 : i32 loc(#loc)
    %49 = llvm.xor %28, %48 : i32 loc(#loc)
    %50 = llvm.xor %28, %49 : i32 loc(#loc)
    %51 = llvm.xor %50, %28 : i32 loc(#loc)
    %52 = llvm.add %51, %15 : i32 loc(#loc)
    %53 = rocdl.workitem.id.x : i32 loc(#loc)
    %54 = llvm.and %53, %16 : i32 loc(#loc)
    %55 = llvm.urem %54, %14 : i32 loc(#loc)
    %56 = llvm.udiv %54, %14 : i32 loc(#loc)
    %57 = llvm.shl %55, %28 : i32 loc(#loc)
    %58 = llvm.or %28, %57 : i32 loc(#loc)
    %59 = llvm.shl %56, %13 : i32 loc(#loc)
    %60 = llvm.or %58, %59 : i32 loc(#loc)
    %61 = llvm.and %60, %12 : i32 loc(#loc)
    %62 = llvm.lshr %61, %11 : i32 loc(#loc)
    %63 = llvm.xor %28, %62 : i32 loc(#loc)
    %64 = llvm.xor %28, %63 : i32 loc(#loc)
    %65 = llvm.xor %64, %28 : i32 loc(#loc)
    %66 = llvm.add %65, %15 : i32 loc(#loc)
    %67 = llvm.mul %52, %33 : i32 loc(#loc)
    %68 = llvm.add %38, %67 : i32 loc(#loc)
    %69 = rocdl.workitem.id.x : i32 loc(#loc)
    %70 = llvm.and %69, %16 : i32 loc(#loc)
    %71 = llvm.urem %70, %14 : i32 loc(#loc)
    %72 = llvm.udiv %70, %14 : i32 loc(#loc)
    %73 = llvm.shl %71, %28 : i32 loc(#loc)
    %74 = llvm.or %28, %73 : i32 loc(#loc)
    %75 = llvm.shl %72, %13 : i32 loc(#loc)
    %76 = llvm.or %74, %75 : i32 loc(#loc)
    %77 = llvm.and %76, %10 : i32 loc(#loc)
    %78 = llvm.lshr %77, %28 : i32 loc(#loc)
    %79 = llvm.xor %28, %78 : i32 loc(#loc)
    %80 = llvm.xor %28, %79 : i32 loc(#loc)
    %81 = llvm.xor %80, %28 : i32 loc(#loc)
    %82 = llvm.add %81, %15 : i32 loc(#loc)
    %83 = llvm.add %68, %82 : i32 loc(#loc)
    %84 = llvm.mul %N, %33 : i32 loc(#loc)
    %85 = llvm.icmp "slt" %83, %84 : i32 loc(#loc)
    %86 = llvm.add %67, %82 : i32 loc(#loc)
    %87 = llvm.getelementptr %x_ptr[%38] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, i8 loc(#loc)
    %88 = rocdl.make.buffer.rsrc %87, %9, %7, %8 : <1> to <8> loc(#loc)
    %89 = llvm.mul %86, %31 : i32 loc(#loc)
    %90 = llvm.select %85, %89, %6 : i1, i32 loc(#loc)
    %91 = rocdl.raw.ptr.buffer.load %88, %90, %28, %28 : i8 loc(#loc)
    %92 = llvm.bitcast %91 : i8 to vector<1xi8> loc(#loc)
    %93 = llvm.extractelement %92[%15 : i32] : vector<1xi8> loc(#loc)
    %94 = llvm.mul %37, %33 : i32 loc(#loc)
    %95 = llvm.add %94, %66 : i32 loc(#loc)
    %96 = llvm.icmp "slt" %95, %N : i32 loc(#loc)
    %97 = llvm.getelementptr %scale_ptr[%94] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, i8 loc(#loc)
    %98 = rocdl.make.buffer.rsrc %97, %9, %7, %8 : <1> to <8> loc(#loc)
    %99 = llvm.mul %66, %31 : i32 loc(#loc)
    %100 = llvm.select %96, %99, %6 : i1, i32 loc(#loc)
    %101 = rocdl.raw.ptr.buffer.load %98, %100, %28, %28 : i8 loc(#loc)
    %102 = llvm.bitcast %101 : i8 to vector<1xi8> loc(#loc)
    %103 = llvm.extractelement %102[%15 : i32] : vector<1xi8> loc(#loc)
    %104 = llvm.zext %103 : i8 to i16 loc(#loc)
    %105 = llvm.shl %104, %17 : i16 loc(#loc)
    %106 = llvm.and %93, %19 : i8 loc(#loc)
    %107 = llvm.and %93, %20 : i8 loc(#loc)
    %108 = llvm.zext %106 : i8 to i16 loc(#loc)
    %109 = llvm.shl %108, %21 : i16 loc(#loc)
    %110 = llvm.and %93, %22 : i8 loc(#loc)
    %111 = llvm.zext %110 : i8 to i16 loc(#loc)
    %112 = llvm.shl %111, %23 : i16 loc(#loc)
    %113 = llvm.or %109, %112 : i16 loc(#loc)
    %114 = llvm.zext %107 : i8 to i16 loc(#loc)
    %115 = llvm.shl %114, %24 : i16 loc(#loc)
    %116 = llvm.and %93, %25 : i8 loc(#loc)
    %117 = llvm.zext %116 : i8 to i16 loc(#loc)
    %118 = llvm.shl %117, %26 : i16 loc(#loc)
    %119 = llvm.or %115, %118 : i16 loc(#loc)
    %120 = llvm.and %106, %27 : i8 loc(#loc)
    %121 = llvm.zext %120 : i8 to i32 loc(#loc)
    %122 = llvm.icmp "ne" %121, %28 : i32 loc(#loc)
    %123 = llvm.add %113, %29 : i16 loc(#loc)
    %124 = llvm.select %122, %123, %113 : i1, i16 loc(#loc)
    %125 = llvm.and %107, %30 : i8 loc(#loc)
    %126 = llvm.zext %125 : i8 to i32 loc(#loc)
    %127 = llvm.icmp "ne" %126, %28 : i32 loc(#loc)
    %128 = llvm.add %119, %29 : i16 loc(#loc)
    %129 = llvm.select %127, %128, %119 : i1, i16 loc(#loc)
    %130 = llvm.zext %106 : i8 to i32 loc(#loc)
    %131 = llvm.icmp "eq" %130, %31 : i32 loc(#loc)
    %132 = llvm.and %124, %32 : i16 loc(#loc)
    %133 = llvm.or %132, %29 : i16 loc(#loc)
    %134 = llvm.select %131, %133, %124 : i1, i16 loc(#loc)
    %135 = llvm.zext %107 : i8 to i32 loc(#loc)
    %136 = llvm.icmp "eq" %135, %33 : i32 loc(#loc)
    %137 = llvm.and %129, %32 : i16 loc(#loc)
    %138 = llvm.or %137, %29 : i16 loc(#loc)
    %139 = llvm.select %136, %138, %129 : i1, i16 loc(#loc)
    %140 = llvm.zext %134 : i16 to i32 loc(#loc)
    %141 = llvm.shl %140, %33 : i32 loc(#loc)
    %142 = llvm.bitcast %141 : i32 to f32 loc(#loc)
    %143 = llvm.zext %105 : i16 to i32 loc(#loc)
    %144 = llvm.shl %143, %33 : i32 loc(#loc)
    %145 = llvm.bitcast %144 : i32 to f32 loc(#loc)
    %146 = llvm.fmul %142, %145 : f32 loc(#loc)
    %147 = llvm.bitcast %146 : f32 to i32 loc(#loc)
    %148 = llvm.call_intrinsic "llvm.is.fpclass"(%146, %5) : (f32, i32) -> i1 loc(#loc)
    %149 = llvm.lshr %147, %33 : i32 loc(#loc)
    %150 = llvm.and %149, %31 : i32 loc(#loc)
    %151 = llvm.add %147, %150 : i32 loc(#loc)
    %152 = llvm.add %151, %4 : i32 loc(#loc)
    %153 = llvm.select %148, %3, %152 : i1, i32 loc(#loc)
    %154 = llvm.lshr %153, %33 : i32 loc(#loc)
    %155 = llvm.trunc %154 : i32 to i16 loc(#loc)
    %156 = llvm.bitcast %155 : i16 to bf16 loc(#loc)
    %157 = llvm.zext %139 : i16 to i32 loc(#loc)
    %158 = llvm.shl %157, %33 : i32 loc(#loc)
    %159 = llvm.bitcast %158 : i32 to f32 loc(#loc)
    %160 = llvm.zext %105 : i16 to i32 loc(#loc)
    %161 = llvm.shl %160, %33 : i32 loc(#loc)
    %162 = llvm.bitcast %161 : i32 to f32 loc(#loc)
    %163 = llvm.fmul %159, %162 : f32 loc(#loc)
    %164 = llvm.bitcast %163 : f32 to i32 loc(#loc)
    %165 = llvm.call_intrinsic "llvm.is.fpclass"(%163, %5) : (f32, i32) -> i1 loc(#loc)
    %166 = llvm.lshr %164, %33 : i32 loc(#loc)
    %167 = llvm.and %166, %31 : i32 loc(#loc)
    %168 = llvm.add %164, %167 : i32 loc(#loc)
    %169 = llvm.add %168, %4 : i32 loc(#loc)
    %170 = llvm.select %165, %3, %169 : i1, i32 loc(#loc)
    %171 = llvm.lshr %170, %33 : i32 loc(#loc)
    %172 = llvm.trunc %171 : i32 to i16 loc(#loc)
    %173 = llvm.bitcast %172 : i16 to bf16 loc(#loc)
    %174 = llvm.zext %103 : i8 to i32 loc(#loc)
    %175 = llvm.icmp "eq" %174, %16 : i32 loc(#loc)
    %176 = llvm.select %175, %36, %156 : i1, bf16 loc(#loc)
    %177 = llvm.select %175, %36, %173 : i1, bf16 loc(#loc)
    %178 = llvm.mul %37, %35 : i32 loc(#loc)
    %179 = rocdl.workitem.id.x : i32 loc(#loc)
    %180 = llvm.and %179, %16 : i32 loc(#loc)
    %181 = llvm.urem %180, %14 : i32 loc(#loc)
    %182 = llvm.udiv %180, %14 : i32 loc(#loc)
    %183 = llvm.shl %181, %28 : i32 loc(#loc)
    %184 = llvm.or %28, %183 : i32 loc(#loc)
    %185 = llvm.shl %182, %13 : i32 loc(#loc)
    %186 = llvm.or %184, %185 : i32 loc(#loc)
    %187 = llvm.and %186, %16 : i32 loc(#loc)
    %188 = llvm.shl %187, %31 : i32 loc(#loc)
    %189 = llvm.xor %28, %188 : i32 loc(#loc)
    %190 = llvm.xor %28, %189 : i32 loc(#loc)
    %191 = llvm.xor %190, %28 : i32 loc(#loc)
    %192 = llvm.add %191, %15 : i32 loc(#loc)
    %193 = llvm.add %178, %192 : i32 loc(#loc)
    %194 = llvm.mul %N, %34 : i32 loc(#loc)
    %195 = llvm.icmp "slt" %193, %194 : i32 loc(#loc)
    %196 = llvm.getelementptr %mxfp_ptr[%178] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc)
    %197 = rocdl.make.buffer.rsrc %196, %9, %7, %8 : <1> to <8> loc(#loc)
    %198 = llvm.and %2, %195 : i1 loc(#loc)
    %199 = llvm.insertelement %176, %1[%28 : i32] : vector<2xbf16> loc(#loc)
    %200 = llvm.insertelement %177, %199[%31 : i32] : vector<2xbf16> loc(#loc)
    %201 = llvm.bitcast %200 : vector<2xbf16> to i32 loc(#loc)
    %202 = llvm.mul %192, %0 : i32 loc(#loc)
    %203 = llvm.select %198, %202, %6 : i1, i32 loc(#loc)
    rocdl.raw.ptr.buffer.store %201, %197, %203, %28, %28 : i32 loc(#loc)
    llvm.return loc(#loc)
  } loc(#loc)
} loc(#loc)


// -----// IR Dump Before ConvertControlFlowToLLVMPass (convert-cf-to-llvm) ('builtin.module' operation) //----- //
#loc = loc(unknown)
#loc1 = loc("x_ptr")
#loc2 = loc("scale_ptr")
#loc3 = loc("mxfp_ptr")
#loc4 = loc("N")
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.shared = 0 : i32, ttg.target = "hip:gfx950", "ttg.threads-per-warp" = 64 : i32} {
  llvm.mlir.global external @global_smem() {addr_space = 3 : i32, alignment = 16 : i64} : !llvm.array<0 x i8> loc(#loc)
  llvm.func @mxfp_upcast_kernel(%x_ptr: !llvm.ptr<1> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("x_ptr"), %scale_ptr: !llvm.ptr<1> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("scale_ptr"), %mxfp_ptr: !llvm.ptr<1> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("mxfp_ptr"), %N: i32 {tt.divisibility = 16 : i32} loc("N"), %arg4: !llvm.ptr<1> loc(unknown), %arg5: !llvm.ptr<1> loc(unknown)) attributes {noinline = false, nvvm.kernel = 1 : ui1, nvvm.reqntid = array<i32: 128>} {
    %0 = llvm.mlir.constant(2 : i32) : i32 loc(#loc)
    %1 = llvm.mlir.undef : vector<2xbf16> loc(#loc)
    %2 = llvm.mlir.constant(true) : i1 loc(#loc)
    %3 = llvm.mlir.constant(2147418112 : i32) : i32 loc(#loc)
    %4 = llvm.mlir.constant(32767 : i32) : i32 loc(#loc)
    %5 = llvm.mlir.constant(3 : i32) : i32 loc(#loc)
    %6 = llvm.mlir.constant(-2147483648 : i32) : i32 loc(#loc)
    %7 = llvm.mlir.constant(2147483646 : i32) : i32 loc(#loc)
    %8 = llvm.mlir.constant(159744 : i32) : i32 loc(#loc)
    %9 = llvm.mlir.constant(0 : i16) : i16 loc(#loc)
    %10 = llvm.mlir.constant(15 : i32) : i32 loc(#loc)
    %11 = llvm.mlir.constant(4 : i32) : i32 loc(#loc)
    %12 = llvm.mlir.constant(240 : i32) : i32 loc(#loc)
    %13 = llvm.mlir.constant(6 : i32) : i32 loc(#loc)
    %14 = llvm.mlir.constant(64 : i32) : i32 loc(#loc)
    %15 = llvm.mlir.constant(0 : index) : i32 loc(#loc)
    %16 = llvm.mlir.constant(255 : i32) : i32 loc(#loc)
    %17 = llvm.mlir.constant(7 : i16) : i16 loc(#loc)
    %18 = llvm.mlir.constant(256 : i32) : i32 loc(#loc)
    %19 = llvm.mlir.constant(7 : i8) : i8 loc(#loc)
    %20 = llvm.mlir.constant(112 : i8) : i8 loc(#loc)
    %21 = llvm.mlir.constant(6 : i16) : i16 loc(#loc)
    %22 = llvm.mlir.constant(8 : i8) : i8 loc(#loc)
    %23 = llvm.mlir.constant(12 : i16) : i16 loc(#loc)
    %24 = llvm.mlir.constant(2 : i16) : i16 loc(#loc)
    %25 = llvm.mlir.constant(-128 : i8) : i8 loc(#loc)
    %26 = llvm.mlir.constant(8 : i16) : i16 loc(#loc)
    %27 = llvm.mlir.constant(6 : i8) : i8 loc(#loc)
    %28 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %29 = llvm.mlir.constant(16128 : i16) : i16 loc(#loc)
    %30 = llvm.mlir.constant(96 : i8) : i8 loc(#loc)
    %31 = llvm.mlir.constant(1 : i32) : i32 loc(#loc)
    %32 = llvm.mlir.constant(-32768 : i16) : i16 loc(#loc)
    %33 = llvm.mlir.constant(16 : i32) : i32 loc(#loc)
    %34 = llvm.mlir.constant(32 : i32) : i32 loc(#loc)
    %35 = llvm.mlir.constant(512 : i32) : i32 loc(#loc)
    %36 = llvm.mlir.constant(0x7FC0 : bf16) : bf16 loc(#loc)
    %37 = rocdl.workgroup.id.x : i32 loc(#loc)
    %38 = llvm.mul %37, %18 : i32 loc(#loc)
    %39 = rocdl.workitem.id.x : i32 loc(#loc)
    %40 = llvm.and %39, %16 : i32 loc(#loc)
    %41 = llvm.urem %40, %14 : i32 loc(#loc)
    %42 = llvm.udiv %40, %14 : i32 loc(#loc)
    %43 = llvm.shl %41, %28 : i32 loc(#loc)
    %44 = llvm.or %28, %43 : i32 loc(#loc)
    %45 = llvm.shl %42, %13 : i32 loc(#loc)
    %46 = llvm.or %44, %45 : i32 loc(#loc)
    %47 = llvm.and %46, %12 : i32 loc(#loc)
    %48 = llvm.lshr %47, %11 : i32 loc(#loc)
    %49 = llvm.xor %28, %48 : i32 loc(#loc)
    %50 = llvm.xor %28, %49 : i32 loc(#loc)
    %51 = llvm.xor %50, %28 : i32 loc(#loc)
    %52 = llvm.add %51, %15 : i32 loc(#loc)
    %53 = llvm.mul %52, %33 : i32 loc(#loc)
    %54 = llvm.add %38, %53 : i32 loc(#loc)
    %55 = llvm.and %46, %10 : i32 loc(#loc)
    %56 = llvm.lshr %55, %28 : i32 loc(#loc)
    %57 = llvm.xor %28, %56 : i32 loc(#loc)
    %58 = llvm.xor %28, %57 : i32 loc(#loc)
    %59 = llvm.xor %58, %28 : i32 loc(#loc)
    %60 = llvm.add %59, %15 : i32 loc(#loc)
    %61 = llvm.add %54, %60 : i32 loc(#loc)
    %62 = llvm.mul %N, %33 : i32 loc(#loc)
    %63 = llvm.icmp "slt" %61, %62 : i32 loc(#loc)
    %64 = llvm.add %53, %60 : i32 loc(#loc)
    %65 = llvm.getelementptr %x_ptr[%38] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, i8 loc(#loc)
    %66 = rocdl.make.buffer.rsrc %65, %9, %7, %8 : <1> to <8> loc(#loc)
    %67 = llvm.mul %64, %31 : i32 loc(#loc)
    %68 = llvm.select %63, %67, %6 : i1, i32 loc(#loc)
    %69 = rocdl.raw.ptr.buffer.load %66, %68, %28, %28 : i8 loc(#loc)
    %70 = llvm.bitcast %69 : i8 to vector<1xi8> loc(#loc)
    %71 = llvm.extractelement %70[%15 : i32] : vector<1xi8> loc(#loc)
    %72 = llvm.mul %37, %33 : i32 loc(#loc)
    %73 = llvm.add %72, %52 : i32 loc(#loc)
    %74 = llvm.icmp "slt" %73, %N : i32 loc(#loc)
    %75 = llvm.getelementptr %scale_ptr[%72] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, i8 loc(#loc)
    %76 = rocdl.make.buffer.rsrc %75, %9, %7, %8 : <1> to <8> loc(#loc)
    %77 = llvm.mul %52, %31 : i32 loc(#loc)
    %78 = llvm.select %74, %77, %6 : i1, i32 loc(#loc)
    %79 = rocdl.raw.ptr.buffer.load %76, %78, %28, %28 : i8 loc(#loc)
    %80 = llvm.bitcast %79 : i8 to vector<1xi8> loc(#loc)
    %81 = llvm.extractelement %80[%15 : i32] : vector<1xi8> loc(#loc)
    %82 = llvm.zext %81 : i8 to i16 loc(#loc)
    %83 = llvm.shl %82, %17 : i16 loc(#loc)
    %84 = llvm.and %71, %19 : i8 loc(#loc)
    %85 = llvm.and %71, %20 : i8 loc(#loc)
    %86 = llvm.zext %84 : i8 to i16 loc(#loc)
    %87 = llvm.shl %86, %21 : i16 loc(#loc)
    %88 = llvm.and %71, %22 : i8 loc(#loc)
    %89 = llvm.zext %88 : i8 to i16 loc(#loc)
    %90 = llvm.shl %89, %23 : i16 loc(#loc)
    %91 = llvm.or %87, %90 : i16 loc(#loc)
    %92 = llvm.zext %85 : i8 to i16 loc(#loc)
    %93 = llvm.shl %92, %24 : i16 loc(#loc)
    %94 = llvm.and %71, %25 : i8 loc(#loc)
    %95 = llvm.zext %94 : i8 to i16 loc(#loc)
    %96 = llvm.shl %95, %26 : i16 loc(#loc)
    %97 = llvm.or %93, %96 : i16 loc(#loc)
    %98 = llvm.and %84, %27 : i8 loc(#loc)
    %99 = llvm.zext %98 : i8 to i32 loc(#loc)
    %100 = llvm.icmp "ne" %99, %28 : i32 loc(#loc)
    %101 = llvm.add %91, %29 : i16 loc(#loc)
    %102 = llvm.select %100, %101, %91 : i1, i16 loc(#loc)
    %103 = llvm.and %85, %30 : i8 loc(#loc)
    %104 = llvm.zext %103 : i8 to i32 loc(#loc)
    %105 = llvm.icmp "ne" %104, %28 : i32 loc(#loc)
    %106 = llvm.add %97, %29 : i16 loc(#loc)
    %107 = llvm.select %105, %106, %97 : i1, i16 loc(#loc)
    %108 = llvm.zext %84 : i8 to i32 loc(#loc)
    %109 = llvm.icmp "eq" %108, %31 : i32 loc(#loc)
    %110 = llvm.and %102, %32 : i16 loc(#loc)
    %111 = llvm.or %110, %29 : i16 loc(#loc)
    %112 = llvm.select %109, %111, %102 : i1, i16 loc(#loc)
    %113 = llvm.zext %85 : i8 to i32 loc(#loc)
    %114 = llvm.icmp "eq" %113, %33 : i32 loc(#loc)
    %115 = llvm.and %107, %32 : i16 loc(#loc)
    %116 = llvm.or %115, %29 : i16 loc(#loc)
    %117 = llvm.select %114, %116, %107 : i1, i16 loc(#loc)
    %118 = llvm.zext %112 : i16 to i32 loc(#loc)
    %119 = llvm.shl %118, %33 : i32 loc(#loc)
    %120 = llvm.bitcast %119 : i32 to f32 loc(#loc)
    %121 = llvm.zext %83 : i16 to i32 loc(#loc)
    %122 = llvm.shl %121, %33 : i32 loc(#loc)
    %123 = llvm.bitcast %122 : i32 to f32 loc(#loc)
    %124 = llvm.fmul %120, %123 : f32 loc(#loc)
    %125 = llvm.bitcast %124 : f32 to i32 loc(#loc)
    %126 = llvm.call_intrinsic "llvm.is.fpclass"(%124, %5) : (f32, i32) -> i1 loc(#loc)
    %127 = llvm.lshr %125, %33 : i32 loc(#loc)
    %128 = llvm.and %127, %31 : i32 loc(#loc)
    %129 = llvm.add %125, %128 : i32 loc(#loc)
    %130 = llvm.add %129, %4 : i32 loc(#loc)
    %131 = llvm.select %126, %3, %130 : i1, i32 loc(#loc)
    %132 = llvm.lshr %131, %33 : i32 loc(#loc)
    %133 = llvm.trunc %132 : i32 to i16 loc(#loc)
    %134 = llvm.bitcast %133 : i16 to bf16 loc(#loc)
    %135 = llvm.zext %117 : i16 to i32 loc(#loc)
    %136 = llvm.shl %135, %33 : i32 loc(#loc)
    %137 = llvm.bitcast %136 : i32 to f32 loc(#loc)
    %138 = llvm.fmul %137, %123 : f32 loc(#loc)
    %139 = llvm.bitcast %138 : f32 to i32 loc(#loc)
    %140 = llvm.call_intrinsic "llvm.is.fpclass"(%138, %5) : (f32, i32) -> i1 loc(#loc)
    %141 = llvm.lshr %139, %33 : i32 loc(#loc)
    %142 = llvm.and %141, %31 : i32 loc(#loc)
    %143 = llvm.add %139, %142 : i32 loc(#loc)
    %144 = llvm.add %143, %4 : i32 loc(#loc)
    %145 = llvm.select %140, %3, %144 : i1, i32 loc(#loc)
    %146 = llvm.lshr %145, %33 : i32 loc(#loc)
    %147 = llvm.trunc %146 : i32 to i16 loc(#loc)
    %148 = llvm.bitcast %147 : i16 to bf16 loc(#loc)
    %149 = llvm.zext %81 : i8 to i32 loc(#loc)
    %150 = llvm.icmp "eq" %149, %16 : i32 loc(#loc)
    %151 = llvm.select %150, %36, %134 : i1, bf16 loc(#loc)
    %152 = llvm.select %150, %36, %148 : i1, bf16 loc(#loc)
    %153 = llvm.mul %37, %35 : i32 loc(#loc)
    %154 = llvm.and %46, %16 : i32 loc(#loc)
    %155 = llvm.shl %154, %31 : i32 loc(#loc)
    %156 = llvm.xor %28, %155 : i32 loc(#loc)
    %157 = llvm.xor %28, %156 : i32 loc(#loc)
    %158 = llvm.xor %157, %28 : i32 loc(#loc)
    %159 = llvm.add %158, %15 : i32 loc(#loc)
    %160 = llvm.add %153, %159 : i32 loc(#loc)
    %161 = llvm.mul %N, %34 : i32 loc(#loc)
    %162 = llvm.icmp "slt" %160, %161 : i32 loc(#loc)
    %163 = llvm.getelementptr %mxfp_ptr[%153] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc)
    %164 = rocdl.make.buffer.rsrc %163, %9, %7, %8 : <1> to <8> loc(#loc)
    %165 = llvm.and %2, %162 : i1 loc(#loc)
    %166 = llvm.insertelement %151, %1[%28 : i32] : vector<2xbf16> loc(#loc)
    %167 = llvm.insertelement %152, %166[%31 : i32] : vector<2xbf16> loc(#loc)
    %168 = llvm.bitcast %167 : vector<2xbf16> to i32 loc(#loc)
    %169 = llvm.mul %159, %0 : i32 loc(#loc)
    %170 = llvm.select %165, %169, %6 : i1, i32 loc(#loc)
    rocdl.raw.ptr.buffer.store %168, %164, %170, %28, %28 : i32 loc(#loc)
    llvm.return loc(#loc)
  } loc(#loc)
} loc(#loc)


// -----// IR Dump Before ArithToLLVMConversionPass (convert-arith-to-llvm) ('builtin.module' operation) //----- //
#loc = loc(unknown)
#loc1 = loc("x_ptr")
#loc2 = loc("scale_ptr")
#loc3 = loc("mxfp_ptr")
#loc4 = loc("N")
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.shared = 0 : i32, ttg.target = "hip:gfx950", "ttg.threads-per-warp" = 64 : i32} {
  llvm.mlir.global external @global_smem() {addr_space = 3 : i32, alignment = 16 : i64} : !llvm.array<0 x i8> loc(#loc)
  llvm.func @mxfp_upcast_kernel(%x_ptr: !llvm.ptr<1> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("x_ptr"), %scale_ptr: !llvm.ptr<1> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("scale_ptr"), %mxfp_ptr: !llvm.ptr<1> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("mxfp_ptr"), %N: i32 {tt.divisibility = 16 : i32} loc("N"), %arg4: !llvm.ptr<1> loc(unknown), %arg5: !llvm.ptr<1> loc(unknown)) attributes {noinline = false, nvvm.kernel = 1 : ui1, nvvm.reqntid = array<i32: 128>} {
    %0 = llvm.mlir.constant(2 : i32) : i32 loc(#loc)
    %1 = llvm.mlir.undef : vector<2xbf16> loc(#loc)
    %2 = llvm.mlir.constant(true) : i1 loc(#loc)
    %3 = llvm.mlir.constant(2147418112 : i32) : i32 loc(#loc)
    %4 = llvm.mlir.constant(32767 : i32) : i32 loc(#loc)
    %5 = llvm.mlir.constant(3 : i32) : i32 loc(#loc)
    %6 = llvm.mlir.constant(-2147483648 : i32) : i32 loc(#loc)
    %7 = llvm.mlir.constant(2147483646 : i32) : i32 loc(#loc)
    %8 = llvm.mlir.constant(159744 : i32) : i32 loc(#loc)
    %9 = llvm.mlir.constant(0 : i16) : i16 loc(#loc)
    %10 = llvm.mlir.constant(15 : i32) : i32 loc(#loc)
    %11 = llvm.mlir.constant(4 : i32) : i32 loc(#loc)
    %12 = llvm.mlir.constant(240 : i32) : i32 loc(#loc)
    %13 = llvm.mlir.constant(6 : i32) : i32 loc(#loc)
    %14 = llvm.mlir.constant(64 : i32) : i32 loc(#loc)
    %15 = llvm.mlir.constant(0 : index) : i32 loc(#loc)
    %16 = llvm.mlir.constant(255 : i32) : i32 loc(#loc)
    %17 = llvm.mlir.constant(7 : i16) : i16 loc(#loc)
    %18 = llvm.mlir.constant(256 : i32) : i32 loc(#loc)
    %19 = llvm.mlir.constant(7 : i8) : i8 loc(#loc)
    %20 = llvm.mlir.constant(112 : i8) : i8 loc(#loc)
    %21 = llvm.mlir.constant(6 : i16) : i16 loc(#loc)
    %22 = llvm.mlir.constant(8 : i8) : i8 loc(#loc)
    %23 = llvm.mlir.constant(12 : i16) : i16 loc(#loc)
    %24 = llvm.mlir.constant(2 : i16) : i16 loc(#loc)
    %25 = llvm.mlir.constant(-128 : i8) : i8 loc(#loc)
    %26 = llvm.mlir.constant(8 : i16) : i16 loc(#loc)
    %27 = llvm.mlir.constant(6 : i8) : i8 loc(#loc)
    %28 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %29 = llvm.mlir.constant(16128 : i16) : i16 loc(#loc)
    %30 = llvm.mlir.constant(96 : i8) : i8 loc(#loc)
    %31 = llvm.mlir.constant(1 : i32) : i32 loc(#loc)
    %32 = llvm.mlir.constant(-32768 : i16) : i16 loc(#loc)
    %33 = llvm.mlir.constant(16 : i32) : i32 loc(#loc)
    %34 = llvm.mlir.constant(32 : i32) : i32 loc(#loc)
    %35 = llvm.mlir.constant(512 : i32) : i32 loc(#loc)
    %36 = llvm.mlir.constant(0x7FC0 : bf16) : bf16 loc(#loc)
    %37 = rocdl.workgroup.id.x : i32 loc(#loc)
    %38 = llvm.mul %37, %18 : i32 loc(#loc)
    %39 = rocdl.workitem.id.x : i32 loc(#loc)
    %40 = llvm.and %39, %16 : i32 loc(#loc)
    %41 = llvm.urem %40, %14 : i32 loc(#loc)
    %42 = llvm.udiv %40, %14 : i32 loc(#loc)
    %43 = llvm.shl %41, %28 : i32 loc(#loc)
    %44 = llvm.or %28, %43 : i32 loc(#loc)
    %45 = llvm.shl %42, %13 : i32 loc(#loc)
    %46 = llvm.or %44, %45 : i32 loc(#loc)
    %47 = llvm.and %46, %12 : i32 loc(#loc)
    %48 = llvm.lshr %47, %11 : i32 loc(#loc)
    %49 = llvm.xor %28, %48 : i32 loc(#loc)
    %50 = llvm.xor %28, %49 : i32 loc(#loc)
    %51 = llvm.xor %50, %28 : i32 loc(#loc)
    %52 = llvm.add %51, %15 : i32 loc(#loc)
    %53 = llvm.mul %52, %33 : i32 loc(#loc)
    %54 = llvm.add %38, %53 : i32 loc(#loc)
    %55 = llvm.and %46, %10 : i32 loc(#loc)
    %56 = llvm.lshr %55, %28 : i32 loc(#loc)
    %57 = llvm.xor %28, %56 : i32 loc(#loc)
    %58 = llvm.xor %28, %57 : i32 loc(#loc)
    %59 = llvm.xor %58, %28 : i32 loc(#loc)
    %60 = llvm.add %59, %15 : i32 loc(#loc)
    %61 = llvm.add %54, %60 : i32 loc(#loc)
    %62 = llvm.mul %N, %33 : i32 loc(#loc)
    %63 = llvm.icmp "slt" %61, %62 : i32 loc(#loc)
    %64 = llvm.add %53, %60 : i32 loc(#loc)
    %65 = llvm.getelementptr %x_ptr[%38] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, i8 loc(#loc)
    %66 = rocdl.make.buffer.rsrc %65, %9, %7, %8 : <1> to <8> loc(#loc)
    %67 = llvm.mul %64, %31 : i32 loc(#loc)
    %68 = llvm.select %63, %67, %6 : i1, i32 loc(#loc)
    %69 = rocdl.raw.ptr.buffer.load %66, %68, %28, %28 : i8 loc(#loc)
    %70 = llvm.bitcast %69 : i8 to vector<1xi8> loc(#loc)
    %71 = llvm.extractelement %70[%15 : i32] : vector<1xi8> loc(#loc)
    %72 = llvm.mul %37, %33 : i32 loc(#loc)
    %73 = llvm.add %72, %52 : i32 loc(#loc)
    %74 = llvm.icmp "slt" %73, %N : i32 loc(#loc)
    %75 = llvm.getelementptr %scale_ptr[%72] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, i8 loc(#loc)
    %76 = rocdl.make.buffer.rsrc %75, %9, %7, %8 : <1> to <8> loc(#loc)
    %77 = llvm.mul %52, %31 : i32 loc(#loc)
    %78 = llvm.select %74, %77, %6 : i1, i32 loc(#loc)
    %79 = rocdl.raw.ptr.buffer.load %76, %78, %28, %28 : i8 loc(#loc)
    %80 = llvm.bitcast %79 : i8 to vector<1xi8> loc(#loc)
    %81 = llvm.extractelement %80[%15 : i32] : vector<1xi8> loc(#loc)
    %82 = llvm.zext %81 : i8 to i16 loc(#loc)
    %83 = llvm.shl %82, %17 : i16 loc(#loc)
    %84 = llvm.and %71, %19 : i8 loc(#loc)
    %85 = llvm.and %71, %20 : i8 loc(#loc)
    %86 = llvm.zext %84 : i8 to i16 loc(#loc)
    %87 = llvm.shl %86, %21 : i16 loc(#loc)
    %88 = llvm.and %71, %22 : i8 loc(#loc)
    %89 = llvm.zext %88 : i8 to i16 loc(#loc)
    %90 = llvm.shl %89, %23 : i16 loc(#loc)
    %91 = llvm.or %87, %90 : i16 loc(#loc)
    %92 = llvm.zext %85 : i8 to i16 loc(#loc)
    %93 = llvm.shl %92, %24 : i16 loc(#loc)
    %94 = llvm.and %71, %25 : i8 loc(#loc)
    %95 = llvm.zext %94 : i8 to i16 loc(#loc)
    %96 = llvm.shl %95, %26 : i16 loc(#loc)
    %97 = llvm.or %93, %96 : i16 loc(#loc)
    %98 = llvm.and %84, %27 : i8 loc(#loc)
    %99 = llvm.zext %98 : i8 to i32 loc(#loc)
    %100 = llvm.icmp "ne" %99, %28 : i32 loc(#loc)
    %101 = llvm.add %91, %29 : i16 loc(#loc)
    %102 = llvm.select %100, %101, %91 : i1, i16 loc(#loc)
    %103 = llvm.and %85, %30 : i8 loc(#loc)
    %104 = llvm.zext %103 : i8 to i32 loc(#loc)
    %105 = llvm.icmp "ne" %104, %28 : i32 loc(#loc)
    %106 = llvm.add %97, %29 : i16 loc(#loc)
    %107 = llvm.select %105, %106, %97 : i1, i16 loc(#loc)
    %108 = llvm.zext %84 : i8 to i32 loc(#loc)
    %109 = llvm.icmp "eq" %108, %31 : i32 loc(#loc)
    %110 = llvm.and %102, %32 : i16 loc(#loc)
    %111 = llvm.or %110, %29 : i16 loc(#loc)
    %112 = llvm.select %109, %111, %102 : i1, i16 loc(#loc)
    %113 = llvm.zext %85 : i8 to i32 loc(#loc)
    %114 = llvm.icmp "eq" %113, %33 : i32 loc(#loc)
    %115 = llvm.and %107, %32 : i16 loc(#loc)
    %116 = llvm.or %115, %29 : i16 loc(#loc)
    %117 = llvm.select %114, %116, %107 : i1, i16 loc(#loc)
    %118 = llvm.zext %112 : i16 to i32 loc(#loc)
    %119 = llvm.shl %118, %33 : i32 loc(#loc)
    %120 = llvm.bitcast %119 : i32 to f32 loc(#loc)
    %121 = llvm.zext %83 : i16 to i32 loc(#loc)
    %122 = llvm.shl %121, %33 : i32 loc(#loc)
    %123 = llvm.bitcast %122 : i32 to f32 loc(#loc)
    %124 = llvm.fmul %120, %123 : f32 loc(#loc)
    %125 = llvm.bitcast %124 : f32 to i32 loc(#loc)
    %126 = llvm.call_intrinsic "llvm.is.fpclass"(%124, %5) : (f32, i32) -> i1 loc(#loc)
    %127 = llvm.lshr %125, %33 : i32 loc(#loc)
    %128 = llvm.and %127, %31 : i32 loc(#loc)
    %129 = llvm.add %125, %128 : i32 loc(#loc)
    %130 = llvm.add %129, %4 : i32 loc(#loc)
    %131 = llvm.select %126, %3, %130 : i1, i32 loc(#loc)
    %132 = llvm.lshr %131, %33 : i32 loc(#loc)
    %133 = llvm.trunc %132 : i32 to i16 loc(#loc)
    %134 = llvm.bitcast %133 : i16 to bf16 loc(#loc)
    %135 = llvm.zext %117 : i16 to i32 loc(#loc)
    %136 = llvm.shl %135, %33 : i32 loc(#loc)
    %137 = llvm.bitcast %136 : i32 to f32 loc(#loc)
    %138 = llvm.fmul %137, %123 : f32 loc(#loc)
    %139 = llvm.bitcast %138 : f32 to i32 loc(#loc)
    %140 = llvm.call_intrinsic "llvm.is.fpclass"(%138, %5) : (f32, i32) -> i1 loc(#loc)
    %141 = llvm.lshr %139, %33 : i32 loc(#loc)
    %142 = llvm.and %141, %31 : i32 loc(#loc)
    %143 = llvm.add %139, %142 : i32 loc(#loc)
    %144 = llvm.add %143, %4 : i32 loc(#loc)
    %145 = llvm.select %140, %3, %144 : i1, i32 loc(#loc)
    %146 = llvm.lshr %145, %33 : i32 loc(#loc)
    %147 = llvm.trunc %146 : i32 to i16 loc(#loc)
    %148 = llvm.bitcast %147 : i16 to bf16 loc(#loc)
    %149 = llvm.zext %81 : i8 to i32 loc(#loc)
    %150 = llvm.icmp "eq" %149, %16 : i32 loc(#loc)
    %151 = llvm.select %150, %36, %134 : i1, bf16 loc(#loc)
    %152 = llvm.select %150, %36, %148 : i1, bf16 loc(#loc)
    %153 = llvm.mul %37, %35 : i32 loc(#loc)
    %154 = llvm.and %46, %16 : i32 loc(#loc)
    %155 = llvm.shl %154, %31 : i32 loc(#loc)
    %156 = llvm.xor %28, %155 : i32 loc(#loc)
    %157 = llvm.xor %28, %156 : i32 loc(#loc)
    %158 = llvm.xor %157, %28 : i32 loc(#loc)
    %159 = llvm.add %158, %15 : i32 loc(#loc)
    %160 = llvm.add %153, %159 : i32 loc(#loc)
    %161 = llvm.mul %N, %34 : i32 loc(#loc)
    %162 = llvm.icmp "slt" %160, %161 : i32 loc(#loc)
    %163 = llvm.getelementptr %mxfp_ptr[%153] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc)
    %164 = rocdl.make.buffer.rsrc %163, %9, %7, %8 : <1> to <8> loc(#loc)
    %165 = llvm.and %2, %162 : i1 loc(#loc)
    %166 = llvm.insertelement %151, %1[%28 : i32] : vector<2xbf16> loc(#loc)
    %167 = llvm.insertelement %152, %166[%31 : i32] : vector<2xbf16> loc(#loc)
    %168 = llvm.bitcast %167 : vector<2xbf16> to i32 loc(#loc)
    %169 = llvm.mul %159, %0 : i32 loc(#loc)
    %170 = llvm.select %165, %169, %6 : i1, i32 loc(#loc)
    rocdl.raw.ptr.buffer.store %168, %164, %170, %28, %28 : i32 loc(#loc)
    llvm.return loc(#loc)
  } loc(#loc)
} loc(#loc)


// -----// IR Dump Before Canonicalizer (canonicalize) ('builtin.module' operation) //----- //
#loc = loc(unknown)
#loc1 = loc("x_ptr")
#loc2 = loc("scale_ptr")
#loc3 = loc("mxfp_ptr")
#loc4 = loc("N")
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.shared = 0 : i32, ttg.target = "hip:gfx950", "ttg.threads-per-warp" = 64 : i32} {
  llvm.mlir.global external @global_smem() {addr_space = 3 : i32, alignment = 16 : i64} : !llvm.array<0 x i8> loc(#loc)
  llvm.func @mxfp_upcast_kernel(%x_ptr: !llvm.ptr<1> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("x_ptr"), %scale_ptr: !llvm.ptr<1> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("scale_ptr"), %mxfp_ptr: !llvm.ptr<1> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("mxfp_ptr"), %N: i32 {tt.divisibility = 16 : i32} loc("N"), %arg4: !llvm.ptr<1> loc(unknown), %arg5: !llvm.ptr<1> loc(unknown)) attributes {noinline = false, nvvm.kernel = 1 : ui1, nvvm.reqntid = array<i32: 128>} {
    %0 = llvm.mlir.constant(2 : i32) : i32 loc(#loc)
    %1 = llvm.mlir.undef : vector<2xbf16> loc(#loc)
    %2 = llvm.mlir.constant(true) : i1 loc(#loc)
    %3 = llvm.mlir.constant(2147418112 : i32) : i32 loc(#loc)
    %4 = llvm.mlir.constant(32767 : i32) : i32 loc(#loc)
    %5 = llvm.mlir.constant(3 : i32) : i32 loc(#loc)
    %6 = llvm.mlir.constant(-2147483648 : i32) : i32 loc(#loc)
    %7 = llvm.mlir.constant(2147483646 : i32) : i32 loc(#loc)
    %8 = llvm.mlir.constant(159744 : i32) : i32 loc(#loc)
    %9 = llvm.mlir.constant(0 : i16) : i16 loc(#loc)
    %10 = llvm.mlir.constant(15 : i32) : i32 loc(#loc)
    %11 = llvm.mlir.constant(4 : i32) : i32 loc(#loc)
    %12 = llvm.mlir.constant(240 : i32) : i32 loc(#loc)
    %13 = llvm.mlir.constant(6 : i32) : i32 loc(#loc)
    %14 = llvm.mlir.constant(64 : i32) : i32 loc(#loc)
    %15 = llvm.mlir.constant(0 : index) : i32 loc(#loc)
    %16 = llvm.mlir.constant(255 : i32) : i32 loc(#loc)
    %17 = llvm.mlir.constant(7 : i16) : i16 loc(#loc)
    %18 = llvm.mlir.constant(256 : i32) : i32 loc(#loc)
    %19 = llvm.mlir.constant(7 : i8) : i8 loc(#loc)
    %20 = llvm.mlir.constant(112 : i8) : i8 loc(#loc)
    %21 = llvm.mlir.constant(6 : i16) : i16 loc(#loc)
    %22 = llvm.mlir.constant(8 : i8) : i8 loc(#loc)
    %23 = llvm.mlir.constant(12 : i16) : i16 loc(#loc)
    %24 = llvm.mlir.constant(2 : i16) : i16 loc(#loc)
    %25 = llvm.mlir.constant(-128 : i8) : i8 loc(#loc)
    %26 = llvm.mlir.constant(8 : i16) : i16 loc(#loc)
    %27 = llvm.mlir.constant(6 : i8) : i8 loc(#loc)
    %28 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %29 = llvm.mlir.constant(16128 : i16) : i16 loc(#loc)
    %30 = llvm.mlir.constant(96 : i8) : i8 loc(#loc)
    %31 = llvm.mlir.constant(1 : i32) : i32 loc(#loc)
    %32 = llvm.mlir.constant(-32768 : i16) : i16 loc(#loc)
    %33 = llvm.mlir.constant(16 : i32) : i32 loc(#loc)
    %34 = llvm.mlir.constant(32 : i32) : i32 loc(#loc)
    %35 = llvm.mlir.constant(512 : i32) : i32 loc(#loc)
    %36 = llvm.mlir.constant(0x7FC0 : bf16) : bf16 loc(#loc)
    %37 = rocdl.workgroup.id.x : i32 loc(#loc)
    %38 = llvm.mul %37, %18 : i32 loc(#loc)
    %39 = rocdl.workitem.id.x : i32 loc(#loc)
    %40 = llvm.and %39, %16 : i32 loc(#loc)
    %41 = llvm.urem %40, %14 : i32 loc(#loc)
    %42 = llvm.udiv %40, %14 : i32 loc(#loc)
    %43 = llvm.shl %41, %28 : i32 loc(#loc)
    %44 = llvm.or %28, %43 : i32 loc(#loc)
    %45 = llvm.shl %42, %13 : i32 loc(#loc)
    %46 = llvm.or %44, %45 : i32 loc(#loc)
    %47 = llvm.and %46, %12 : i32 loc(#loc)
    %48 = llvm.lshr %47, %11 : i32 loc(#loc)
    %49 = llvm.xor %28, %48 : i32 loc(#loc)
    %50 = llvm.xor %28, %49 : i32 loc(#loc)
    %51 = llvm.xor %50, %28 : i32 loc(#loc)
    %52 = llvm.add %51, %15 : i32 loc(#loc)
    %53 = llvm.mul %52, %33 : i32 loc(#loc)
    %54 = llvm.add %38, %53 : i32 loc(#loc)
    %55 = llvm.and %46, %10 : i32 loc(#loc)
    %56 = llvm.lshr %55, %28 : i32 loc(#loc)
    %57 = llvm.xor %28, %56 : i32 loc(#loc)
    %58 = llvm.xor %28, %57 : i32 loc(#loc)
    %59 = llvm.xor %58, %28 : i32 loc(#loc)
    %60 = llvm.add %59, %15 : i32 loc(#loc)
    %61 = llvm.add %54, %60 : i32 loc(#loc)
    %62 = llvm.mul %N, %33 : i32 loc(#loc)
    %63 = llvm.icmp "slt" %61, %62 : i32 loc(#loc)
    %64 = llvm.add %53, %60 : i32 loc(#loc)
    %65 = llvm.getelementptr %x_ptr[%38] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, i8 loc(#loc)
    %66 = rocdl.make.buffer.rsrc %65, %9, %7, %8 : <1> to <8> loc(#loc)
    %67 = llvm.mul %64, %31 : i32 loc(#loc)
    %68 = llvm.select %63, %67, %6 : i1, i32 loc(#loc)
    %69 = rocdl.raw.ptr.buffer.load %66, %68, %28, %28 : i8 loc(#loc)
    %70 = llvm.bitcast %69 : i8 to vector<1xi8> loc(#loc)
    %71 = llvm.extractelement %70[%15 : i32] : vector<1xi8> loc(#loc)
    %72 = llvm.mul %37, %33 : i32 loc(#loc)
    %73 = llvm.add %72, %52 : i32 loc(#loc)
    %74 = llvm.icmp "slt" %73, %N : i32 loc(#loc)
    %75 = llvm.getelementptr %scale_ptr[%72] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, i8 loc(#loc)
    %76 = rocdl.make.buffer.rsrc %75, %9, %7, %8 : <1> to <8> loc(#loc)
    %77 = llvm.mul %52, %31 : i32 loc(#loc)
    %78 = llvm.select %74, %77, %6 : i1, i32 loc(#loc)
    %79 = rocdl.raw.ptr.buffer.load %76, %78, %28, %28 : i8 loc(#loc)
    %80 = llvm.bitcast %79 : i8 to vector<1xi8> loc(#loc)
    %81 = llvm.extractelement %80[%15 : i32] : vector<1xi8> loc(#loc)
    %82 = llvm.zext %81 : i8 to i16 loc(#loc)
    %83 = llvm.shl %82, %17 : i16 loc(#loc)
    %84 = llvm.and %71, %19 : i8 loc(#loc)
    %85 = llvm.and %71, %20 : i8 loc(#loc)
    %86 = llvm.zext %84 : i8 to i16 loc(#loc)
    %87 = llvm.shl %86, %21 : i16 loc(#loc)
    %88 = llvm.and %71, %22 : i8 loc(#loc)
    %89 = llvm.zext %88 : i8 to i16 loc(#loc)
    %90 = llvm.shl %89, %23 : i16 loc(#loc)
    %91 = llvm.or %87, %90 : i16 loc(#loc)
    %92 = llvm.zext %85 : i8 to i16 loc(#loc)
    %93 = llvm.shl %92, %24 : i16 loc(#loc)
    %94 = llvm.and %71, %25 : i8 loc(#loc)
    %95 = llvm.zext %94 : i8 to i16 loc(#loc)
    %96 = llvm.shl %95, %26 : i16 loc(#loc)
    %97 = llvm.or %93, %96 : i16 loc(#loc)
    %98 = llvm.and %84, %27 : i8 loc(#loc)
    %99 = llvm.zext %98 : i8 to i32 loc(#loc)
    %100 = llvm.icmp "ne" %99, %28 : i32 loc(#loc)
    %101 = llvm.add %91, %29 : i16 loc(#loc)
    %102 = llvm.select %100, %101, %91 : i1, i16 loc(#loc)
    %103 = llvm.and %85, %30 : i8 loc(#loc)
    %104 = llvm.zext %103 : i8 to i32 loc(#loc)
    %105 = llvm.icmp "ne" %104, %28 : i32 loc(#loc)
    %106 = llvm.add %97, %29 : i16 loc(#loc)
    %107 = llvm.select %105, %106, %97 : i1, i16 loc(#loc)
    %108 = llvm.zext %84 : i8 to i32 loc(#loc)
    %109 = llvm.icmp "eq" %108, %31 : i32 loc(#loc)
    %110 = llvm.and %102, %32 : i16 loc(#loc)
    %111 = llvm.or %110, %29 : i16 loc(#loc)
    %112 = llvm.select %109, %111, %102 : i1, i16 loc(#loc)
    %113 = llvm.zext %85 : i8 to i32 loc(#loc)
    %114 = llvm.icmp "eq" %113, %33 : i32 loc(#loc)
    %115 = llvm.and %107, %32 : i16 loc(#loc)
    %116 = llvm.or %115, %29 : i16 loc(#loc)
    %117 = llvm.select %114, %116, %107 : i1, i16 loc(#loc)
    %118 = llvm.zext %112 : i16 to i32 loc(#loc)
    %119 = llvm.shl %118, %33 : i32 loc(#loc)
    %120 = llvm.bitcast %119 : i32 to f32 loc(#loc)
    %121 = llvm.zext %83 : i16 to i32 loc(#loc)
    %122 = llvm.shl %121, %33 : i32 loc(#loc)
    %123 = llvm.bitcast %122 : i32 to f32 loc(#loc)
    %124 = llvm.fmul %120, %123 : f32 loc(#loc)
    %125 = llvm.bitcast %124 : f32 to i32 loc(#loc)
    %126 = llvm.call_intrinsic "llvm.is.fpclass"(%124, %5) : (f32, i32) -> i1 loc(#loc)
    %127 = llvm.lshr %125, %33 : i32 loc(#loc)
    %128 = llvm.and %127, %31 : i32 loc(#loc)
    %129 = llvm.add %125, %128 : i32 loc(#loc)
    %130 = llvm.add %129, %4 : i32 loc(#loc)
    %131 = llvm.select %126, %3, %130 : i1, i32 loc(#loc)
    %132 = llvm.lshr %131, %33 : i32 loc(#loc)
    %133 = llvm.trunc %132 : i32 to i16 loc(#loc)
    %134 = llvm.bitcast %133 : i16 to bf16 loc(#loc)
    %135 = llvm.zext %117 : i16 to i32 loc(#loc)
    %136 = llvm.shl %135, %33 : i32 loc(#loc)
    %137 = llvm.bitcast %136 : i32 to f32 loc(#loc)
    %138 = llvm.fmul %137, %123 : f32 loc(#loc)
    %139 = llvm.bitcast %138 : f32 to i32 loc(#loc)
    %140 = llvm.call_intrinsic "llvm.is.fpclass"(%138, %5) : (f32, i32) -> i1 loc(#loc)
    %141 = llvm.lshr %139, %33 : i32 loc(#loc)
    %142 = llvm.and %141, %31 : i32 loc(#loc)
    %143 = llvm.add %139, %142 : i32 loc(#loc)
    %144 = llvm.add %143, %4 : i32 loc(#loc)
    %145 = llvm.select %140, %3, %144 : i1, i32 loc(#loc)
    %146 = llvm.lshr %145, %33 : i32 loc(#loc)
    %147 = llvm.trunc %146 : i32 to i16 loc(#loc)
    %148 = llvm.bitcast %147 : i16 to bf16 loc(#loc)
    %149 = llvm.zext %81 : i8 to i32 loc(#loc)
    %150 = llvm.icmp "eq" %149, %16 : i32 loc(#loc)
    %151 = llvm.select %150, %36, %134 : i1, bf16 loc(#loc)
    %152 = llvm.select %150, %36, %148 : i1, bf16 loc(#loc)
    %153 = llvm.mul %37, %35 : i32 loc(#loc)
    %154 = llvm.and %46, %16 : i32 loc(#loc)
    %155 = llvm.shl %154, %31 : i32 loc(#loc)
    %156 = llvm.xor %28, %155 : i32 loc(#loc)
    %157 = llvm.xor %28, %156 : i32 loc(#loc)
    %158 = llvm.xor %157, %28 : i32 loc(#loc)
    %159 = llvm.add %158, %15 : i32 loc(#loc)
    %160 = llvm.add %153, %159 : i32 loc(#loc)
    %161 = llvm.mul %N, %34 : i32 loc(#loc)
    %162 = llvm.icmp "slt" %160, %161 : i32 loc(#loc)
    %163 = llvm.getelementptr %mxfp_ptr[%153] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc)
    %164 = rocdl.make.buffer.rsrc %163, %9, %7, %8 : <1> to <8> loc(#loc)
    %165 = llvm.and %2, %162 : i1 loc(#loc)
    %166 = llvm.insertelement %151, %1[%28 : i32] : vector<2xbf16> loc(#loc)
    %167 = llvm.insertelement %152, %166[%31 : i32] : vector<2xbf16> loc(#loc)
    %168 = llvm.bitcast %167 : vector<2xbf16> to i32 loc(#loc)
    %169 = llvm.mul %159, %0 : i32 loc(#loc)
    %170 = llvm.select %165, %169, %6 : i1, i32 loc(#loc)
    rocdl.raw.ptr.buffer.store %168, %164, %170, %28, %28 : i32 loc(#loc)
    llvm.return loc(#loc)
  } loc(#loc)
} loc(#loc)


// -----// IR Dump Before CSE (cse) ('builtin.module' operation) //----- //
#loc = loc(unknown)
#loc1 = loc("x_ptr")
#loc2 = loc("scale_ptr")
#loc3 = loc("mxfp_ptr")
#loc4 = loc("N")
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.shared = 0 : i32, ttg.target = "hip:gfx950", "ttg.threads-per-warp" = 64 : i32} {
  llvm.mlir.global external @global_smem() {addr_space = 3 : i32, alignment = 16 : i64} : !llvm.array<0 x i8> loc(#loc)
  llvm.func @mxfp_upcast_kernel(%x_ptr: !llvm.ptr<1> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("x_ptr"), %scale_ptr: !llvm.ptr<1> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("scale_ptr"), %mxfp_ptr: !llvm.ptr<1> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("mxfp_ptr"), %N: i32 {tt.divisibility = 16 : i32} loc("N"), %arg4: !llvm.ptr<1> loc(unknown), %arg5: !llvm.ptr<1> loc(unknown)) attributes {noinline = false, nvvm.kernel = 1 : ui1, nvvm.reqntid = array<i32: 128>} {
    %0 = llvm.mlir.constant(2 : i32) : i32 loc(#loc)
    %1 = llvm.mlir.undef : vector<2xbf16> loc(#loc)
    %2 = llvm.mlir.constant(true) : i1 loc(#loc)
    %3 = llvm.mlir.constant(2147418112 : i32) : i32 loc(#loc)
    %4 = llvm.mlir.constant(32767 : i32) : i32 loc(#loc)
    %5 = llvm.mlir.constant(3 : i32) : i32 loc(#loc)
    %6 = llvm.mlir.constant(-2147483648 : i32) : i32 loc(#loc)
    %7 = llvm.mlir.constant(2147483646 : i32) : i32 loc(#loc)
    %8 = llvm.mlir.constant(159744 : i32) : i32 loc(#loc)
    %9 = llvm.mlir.constant(0 : i16) : i16 loc(#loc)
    %10 = llvm.mlir.constant(15 : i32) : i32 loc(#loc)
    %11 = llvm.mlir.constant(4 : i32) : i32 loc(#loc)
    %12 = llvm.mlir.constant(240 : i32) : i32 loc(#loc)
    %13 = llvm.mlir.constant(6 : i32) : i32 loc(#loc)
    %14 = llvm.mlir.constant(64 : i32) : i32 loc(#loc)
    %15 = llvm.mlir.constant(0 : index) : i32 loc(#loc)
    %16 = llvm.mlir.constant(255 : i32) : i32 loc(#loc)
    %17 = llvm.mlir.constant(7 : i16) : i16 loc(#loc)
    %18 = llvm.mlir.constant(256 : i32) : i32 loc(#loc)
    %19 = llvm.mlir.constant(7 : i8) : i8 loc(#loc)
    %20 = llvm.mlir.constant(112 : i8) : i8 loc(#loc)
    %21 = llvm.mlir.constant(6 : i16) : i16 loc(#loc)
    %22 = llvm.mlir.constant(8 : i8) : i8 loc(#loc)
    %23 = llvm.mlir.constant(12 : i16) : i16 loc(#loc)
    %24 = llvm.mlir.constant(2 : i16) : i16 loc(#loc)
    %25 = llvm.mlir.constant(-128 : i8) : i8 loc(#loc)
    %26 = llvm.mlir.constant(8 : i16) : i16 loc(#loc)
    %27 = llvm.mlir.constant(6 : i8) : i8 loc(#loc)
    %28 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %29 = llvm.mlir.constant(16128 : i16) : i16 loc(#loc)
    %30 = llvm.mlir.constant(96 : i8) : i8 loc(#loc)
    %31 = llvm.mlir.constant(1 : i32) : i32 loc(#loc)
    %32 = llvm.mlir.constant(-32768 : i16) : i16 loc(#loc)
    %33 = llvm.mlir.constant(16 : i32) : i32 loc(#loc)
    %34 = llvm.mlir.constant(32 : i32) : i32 loc(#loc)
    %35 = llvm.mlir.constant(512 : i32) : i32 loc(#loc)
    %36 = llvm.mlir.constant(0x7FC0 : bf16) : bf16 loc(#loc)
    %37 = rocdl.workgroup.id.x : i32 loc(#loc)
    %38 = llvm.mul %37, %18 : i32 loc(#loc)
    %39 = rocdl.workitem.id.x : i32 loc(#loc)
    %40 = llvm.and %39, %16 : i32 loc(#loc)
    %41 = llvm.urem %40, %14 : i32 loc(#loc)
    %42 = llvm.udiv %40, %14 : i32 loc(#loc)
    %43 = llvm.shl %41, %28 : i32 loc(#loc)
    %44 = llvm.or %28, %43 : i32 loc(#loc)
    %45 = llvm.shl %42, %13 : i32 loc(#loc)
    %46 = llvm.or %44, %45 : i32 loc(#loc)
    %47 = llvm.and %46, %12 : i32 loc(#loc)
    %48 = llvm.lshr %47, %11 : i32 loc(#loc)
    %49 = llvm.xor %28, %48 : i32 loc(#loc)
    %50 = llvm.xor %28, %49 : i32 loc(#loc)
    %51 = llvm.xor %50, %28 : i32 loc(#loc)
    %52 = llvm.add %51, %15 : i32 loc(#loc)
    %53 = llvm.mul %52, %33 : i32 loc(#loc)
    %54 = llvm.add %38, %53 : i32 loc(#loc)
    %55 = llvm.and %46, %10 : i32 loc(#loc)
    %56 = llvm.lshr %55, %28 : i32 loc(#loc)
    %57 = llvm.xor %28, %56 : i32 loc(#loc)
    %58 = llvm.xor %28, %57 : i32 loc(#loc)
    %59 = llvm.xor %58, %28 : i32 loc(#loc)
    %60 = llvm.add %59, %15 : i32 loc(#loc)
    %61 = llvm.add %54, %60 : i32 loc(#loc)
    %62 = llvm.mul %N, %33 : i32 loc(#loc)
    %63 = llvm.icmp "slt" %61, %62 : i32 loc(#loc)
    %64 = llvm.add %53, %60 : i32 loc(#loc)
    %65 = llvm.getelementptr %x_ptr[%38] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, i8 loc(#loc)
    %66 = rocdl.make.buffer.rsrc %65, %9, %7, %8 : <1> to <8> loc(#loc)
    %67 = llvm.mul %64, %31 : i32 loc(#loc)
    %68 = llvm.select %63, %67, %6 : i1, i32 loc(#loc)
    %69 = rocdl.raw.ptr.buffer.load %66, %68, %28, %28 : i8 loc(#loc)
    %70 = llvm.bitcast %69 : i8 to vector<1xi8> loc(#loc)
    %71 = llvm.extractelement %70[%15 : i32] : vector<1xi8> loc(#loc)
    %72 = llvm.mul %37, %33 : i32 loc(#loc)
    %73 = llvm.add %72, %52 : i32 loc(#loc)
    %74 = llvm.icmp "slt" %73, %N : i32 loc(#loc)
    %75 = llvm.getelementptr %scale_ptr[%72] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, i8 loc(#loc)
    %76 = rocdl.make.buffer.rsrc %75, %9, %7, %8 : <1> to <8> loc(#loc)
    %77 = llvm.mul %52, %31 : i32 loc(#loc)
    %78 = llvm.select %74, %77, %6 : i1, i32 loc(#loc)
    %79 = rocdl.raw.ptr.buffer.load %76, %78, %28, %28 : i8 loc(#loc)
    %80 = llvm.bitcast %79 : i8 to vector<1xi8> loc(#loc)
    %81 = llvm.extractelement %80[%15 : i32] : vector<1xi8> loc(#loc)
    %82 = llvm.zext %81 : i8 to i16 loc(#loc)
    %83 = llvm.shl %82, %17 : i16 loc(#loc)
    %84 = llvm.and %71, %19 : i8 loc(#loc)
    %85 = llvm.and %71, %20 : i8 loc(#loc)
    %86 = llvm.zext %84 : i8 to i16 loc(#loc)
    %87 = llvm.shl %86, %21 : i16 loc(#loc)
    %88 = llvm.and %71, %22 : i8 loc(#loc)
    %89 = llvm.zext %88 : i8 to i16 loc(#loc)
    %90 = llvm.shl %89, %23 : i16 loc(#loc)
    %91 = llvm.or %87, %90 : i16 loc(#loc)
    %92 = llvm.zext %85 : i8 to i16 loc(#loc)
    %93 = llvm.shl %92, %24 : i16 loc(#loc)
    %94 = llvm.and %71, %25 : i8 loc(#loc)
    %95 = llvm.zext %94 : i8 to i16 loc(#loc)
    %96 = llvm.shl %95, %26 : i16 loc(#loc)
    %97 = llvm.or %93, %96 : i16 loc(#loc)
    %98 = llvm.and %84, %27 : i8 loc(#loc)
    %99 = llvm.zext %98 : i8 to i32 loc(#loc)
    %100 = llvm.icmp "ne" %99, %28 : i32 loc(#loc)
    %101 = llvm.add %91, %29 : i16 loc(#loc)
    %102 = llvm.select %100, %101, %91 : i1, i16 loc(#loc)
    %103 = llvm.and %85, %30 : i8 loc(#loc)
    %104 = llvm.zext %103 : i8 to i32 loc(#loc)
    %105 = llvm.icmp "ne" %104, %28 : i32 loc(#loc)
    %106 = llvm.add %97, %29 : i16 loc(#loc)
    %107 = llvm.select %105, %106, %97 : i1, i16 loc(#loc)
    %108 = llvm.zext %84 : i8 to i32 loc(#loc)
    %109 = llvm.icmp "eq" %108, %31 : i32 loc(#loc)
    %110 = llvm.and %102, %32 : i16 loc(#loc)
    %111 = llvm.or %110, %29 : i16 loc(#loc)
    %112 = llvm.select %109, %111, %102 : i1, i16 loc(#loc)
    %113 = llvm.zext %85 : i8 to i32 loc(#loc)
    %114 = llvm.icmp "eq" %113, %33 : i32 loc(#loc)
    %115 = llvm.and %107, %32 : i16 loc(#loc)
    %116 = llvm.or %115, %29 : i16 loc(#loc)
    %117 = llvm.select %114, %116, %107 : i1, i16 loc(#loc)
    %118 = llvm.zext %112 : i16 to i32 loc(#loc)
    %119 = llvm.shl %118, %33 : i32 loc(#loc)
    %120 = llvm.bitcast %119 : i32 to f32 loc(#loc)
    %121 = llvm.zext %83 : i16 to i32 loc(#loc)
    %122 = llvm.shl %121, %33 : i32 loc(#loc)
    %123 = llvm.bitcast %122 : i32 to f32 loc(#loc)
    %124 = llvm.fmul %120, %123 : f32 loc(#loc)
    %125 = llvm.bitcast %124 : f32 to i32 loc(#loc)
    %126 = llvm.call_intrinsic "llvm.is.fpclass"(%124, %5) : (f32, i32) -> i1 loc(#loc)
    %127 = llvm.lshr %125, %33 : i32 loc(#loc)
    %128 = llvm.and %127, %31 : i32 loc(#loc)
    %129 = llvm.add %125, %128 : i32 loc(#loc)
    %130 = llvm.add %129, %4 : i32 loc(#loc)
    %131 = llvm.select %126, %3, %130 : i1, i32 loc(#loc)
    %132 = llvm.lshr %131, %33 : i32 loc(#loc)
    %133 = llvm.trunc %132 : i32 to i16 loc(#loc)
    %134 = llvm.bitcast %133 : i16 to bf16 loc(#loc)
    %135 = llvm.zext %117 : i16 to i32 loc(#loc)
    %136 = llvm.shl %135, %33 : i32 loc(#loc)
    %137 = llvm.bitcast %136 : i32 to f32 loc(#loc)
    %138 = llvm.fmul %137, %123 : f32 loc(#loc)
    %139 = llvm.bitcast %138 : f32 to i32 loc(#loc)
    %140 = llvm.call_intrinsic "llvm.is.fpclass"(%138, %5) : (f32, i32) -> i1 loc(#loc)
    %141 = llvm.lshr %139, %33 : i32 loc(#loc)
    %142 = llvm.and %141, %31 : i32 loc(#loc)
    %143 = llvm.add %139, %142 : i32 loc(#loc)
    %144 = llvm.add %143, %4 : i32 loc(#loc)
    %145 = llvm.select %140, %3, %144 : i1, i32 loc(#loc)
    %146 = llvm.lshr %145, %33 : i32 loc(#loc)
    %147 = llvm.trunc %146 : i32 to i16 loc(#loc)
    %148 = llvm.bitcast %147 : i16 to bf16 loc(#loc)
    %149 = llvm.zext %81 : i8 to i32 loc(#loc)
    %150 = llvm.icmp "eq" %149, %16 : i32 loc(#loc)
    %151 = llvm.select %150, %36, %134 : i1, bf16 loc(#loc)
    %152 = llvm.select %150, %36, %148 : i1, bf16 loc(#loc)
    %153 = llvm.mul %37, %35 : i32 loc(#loc)
    %154 = llvm.and %46, %16 : i32 loc(#loc)
    %155 = llvm.shl %154, %31 : i32 loc(#loc)
    %156 = llvm.xor %28, %155 : i32 loc(#loc)
    %157 = llvm.xor %28, %156 : i32 loc(#loc)
    %158 = llvm.xor %157, %28 : i32 loc(#loc)
    %159 = llvm.add %158, %15 : i32 loc(#loc)
    %160 = llvm.add %153, %159 : i32 loc(#loc)
    %161 = llvm.mul %N, %34 : i32 loc(#loc)
    %162 = llvm.icmp "slt" %160, %161 : i32 loc(#loc)
    %163 = llvm.getelementptr %mxfp_ptr[%153] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc)
    %164 = rocdl.make.buffer.rsrc %163, %9, %7, %8 : <1> to <8> loc(#loc)
    %165 = llvm.and %2, %162 : i1 loc(#loc)
    %166 = llvm.insertelement %151, %1[%28 : i32] : vector<2xbf16> loc(#loc)
    %167 = llvm.insertelement %152, %166[%31 : i32] : vector<2xbf16> loc(#loc)
    %168 = llvm.bitcast %167 : vector<2xbf16> to i32 loc(#loc)
    %169 = llvm.mul %159, %0 : i32 loc(#loc)
    %170 = llvm.select %165, %169, %6 : i1, i32 loc(#loc)
    rocdl.raw.ptr.buffer.store %168, %164, %170, %28, %28 : i32 loc(#loc)
    llvm.return loc(#loc)
  } loc(#loc)
} loc(#loc)


// -----// IR Dump Before SymbolDCE (symbol-dce) ('builtin.module' operation) //----- //
#loc = loc(unknown)
#loc1 = loc("x_ptr")
#loc2 = loc("scale_ptr")
#loc3 = loc("mxfp_ptr")
#loc4 = loc("N")
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.shared = 0 : i32, ttg.target = "hip:gfx950", "ttg.threads-per-warp" = 64 : i32} {
  llvm.mlir.global external @global_smem() {addr_space = 3 : i32, alignment = 16 : i64} : !llvm.array<0 x i8> loc(#loc)
  llvm.func @mxfp_upcast_kernel(%x_ptr: !llvm.ptr<1> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("x_ptr"), %scale_ptr: !llvm.ptr<1> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("scale_ptr"), %mxfp_ptr: !llvm.ptr<1> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("mxfp_ptr"), %N: i32 {tt.divisibility = 16 : i32} loc("N"), %arg4: !llvm.ptr<1> loc(unknown), %arg5: !llvm.ptr<1> loc(unknown)) attributes {noinline = false, nvvm.kernel = 1 : ui1, nvvm.reqntid = array<i32: 128>} {
    %0 = llvm.mlir.constant(2 : i32) : i32 loc(#loc)
    %1 = llvm.mlir.undef : vector<2xbf16> loc(#loc)
    %2 = llvm.mlir.constant(true) : i1 loc(#loc)
    %3 = llvm.mlir.constant(2147418112 : i32) : i32 loc(#loc)
    %4 = llvm.mlir.constant(32767 : i32) : i32 loc(#loc)
    %5 = llvm.mlir.constant(3 : i32) : i32 loc(#loc)
    %6 = llvm.mlir.constant(-2147483648 : i32) : i32 loc(#loc)
    %7 = llvm.mlir.constant(2147483646 : i32) : i32 loc(#loc)
    %8 = llvm.mlir.constant(159744 : i32) : i32 loc(#loc)
    %9 = llvm.mlir.constant(0 : i16) : i16 loc(#loc)
    %10 = llvm.mlir.constant(15 : i32) : i32 loc(#loc)
    %11 = llvm.mlir.constant(4 : i32) : i32 loc(#loc)
    %12 = llvm.mlir.constant(240 : i32) : i32 loc(#loc)
    %13 = llvm.mlir.constant(6 : i32) : i32 loc(#loc)
    %14 = llvm.mlir.constant(64 : i32) : i32 loc(#loc)
    %15 = llvm.mlir.constant(0 : index) : i32 loc(#loc)
    %16 = llvm.mlir.constant(255 : i32) : i32 loc(#loc)
    %17 = llvm.mlir.constant(7 : i16) : i16 loc(#loc)
    %18 = llvm.mlir.constant(256 : i32) : i32 loc(#loc)
    %19 = llvm.mlir.constant(7 : i8) : i8 loc(#loc)
    %20 = llvm.mlir.constant(112 : i8) : i8 loc(#loc)
    %21 = llvm.mlir.constant(6 : i16) : i16 loc(#loc)
    %22 = llvm.mlir.constant(8 : i8) : i8 loc(#loc)
    %23 = llvm.mlir.constant(12 : i16) : i16 loc(#loc)
    %24 = llvm.mlir.constant(2 : i16) : i16 loc(#loc)
    %25 = llvm.mlir.constant(-128 : i8) : i8 loc(#loc)
    %26 = llvm.mlir.constant(8 : i16) : i16 loc(#loc)
    %27 = llvm.mlir.constant(6 : i8) : i8 loc(#loc)
    %28 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %29 = llvm.mlir.constant(16128 : i16) : i16 loc(#loc)
    %30 = llvm.mlir.constant(96 : i8) : i8 loc(#loc)
    %31 = llvm.mlir.constant(1 : i32) : i32 loc(#loc)
    %32 = llvm.mlir.constant(-32768 : i16) : i16 loc(#loc)
    %33 = llvm.mlir.constant(16 : i32) : i32 loc(#loc)
    %34 = llvm.mlir.constant(32 : i32) : i32 loc(#loc)
    %35 = llvm.mlir.constant(512 : i32) : i32 loc(#loc)
    %36 = llvm.mlir.constant(0x7FC0 : bf16) : bf16 loc(#loc)
    %37 = rocdl.workgroup.id.x : i32 loc(#loc)
    %38 = llvm.mul %37, %18 : i32 loc(#loc)
    %39 = rocdl.workitem.id.x : i32 loc(#loc)
    %40 = llvm.and %39, %16 : i32 loc(#loc)
    %41 = llvm.urem %40, %14 : i32 loc(#loc)
    %42 = llvm.udiv %40, %14 : i32 loc(#loc)
    %43 = llvm.shl %41, %28 : i32 loc(#loc)
    %44 = llvm.or %28, %43 : i32 loc(#loc)
    %45 = llvm.shl %42, %13 : i32 loc(#loc)
    %46 = llvm.or %44, %45 : i32 loc(#loc)
    %47 = llvm.and %46, %12 : i32 loc(#loc)
    %48 = llvm.lshr %47, %11 : i32 loc(#loc)
    %49 = llvm.xor %28, %48 : i32 loc(#loc)
    %50 = llvm.xor %28, %49 : i32 loc(#loc)
    %51 = llvm.xor %50, %28 : i32 loc(#loc)
    %52 = llvm.add %51, %15 : i32 loc(#loc)
    %53 = llvm.mul %52, %33 : i32 loc(#loc)
    %54 = llvm.add %38, %53 : i32 loc(#loc)
    %55 = llvm.and %46, %10 : i32 loc(#loc)
    %56 = llvm.lshr %55, %28 : i32 loc(#loc)
    %57 = llvm.xor %28, %56 : i32 loc(#loc)
    %58 = llvm.xor %28, %57 : i32 loc(#loc)
    %59 = llvm.xor %58, %28 : i32 loc(#loc)
    %60 = llvm.add %59, %15 : i32 loc(#loc)
    %61 = llvm.add %54, %60 : i32 loc(#loc)
    %62 = llvm.mul %N, %33 : i32 loc(#loc)
    %63 = llvm.icmp "slt" %61, %62 : i32 loc(#loc)
    %64 = llvm.add %53, %60 : i32 loc(#loc)
    %65 = llvm.getelementptr %x_ptr[%38] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, i8 loc(#loc)
    %66 = rocdl.make.buffer.rsrc %65, %9, %7, %8 : <1> to <8> loc(#loc)
    %67 = llvm.mul %64, %31 : i32 loc(#loc)
    %68 = llvm.select %63, %67, %6 : i1, i32 loc(#loc)
    %69 = rocdl.raw.ptr.buffer.load %66, %68, %28, %28 : i8 loc(#loc)
    %70 = llvm.bitcast %69 : i8 to vector<1xi8> loc(#loc)
    %71 = llvm.extractelement %70[%15 : i32] : vector<1xi8> loc(#loc)
    %72 = llvm.mul %37, %33 : i32 loc(#loc)
    %73 = llvm.add %72, %52 : i32 loc(#loc)
    %74 = llvm.icmp "slt" %73, %N : i32 loc(#loc)
    %75 = llvm.getelementptr %scale_ptr[%72] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, i8 loc(#loc)
    %76 = rocdl.make.buffer.rsrc %75, %9, %7, %8 : <1> to <8> loc(#loc)
    %77 = llvm.mul %52, %31 : i32 loc(#loc)
    %78 = llvm.select %74, %77, %6 : i1, i32 loc(#loc)
    %79 = rocdl.raw.ptr.buffer.load %76, %78, %28, %28 : i8 loc(#loc)
    %80 = llvm.bitcast %79 : i8 to vector<1xi8> loc(#loc)
    %81 = llvm.extractelement %80[%15 : i32] : vector<1xi8> loc(#loc)
    %82 = llvm.zext %81 : i8 to i16 loc(#loc)
    %83 = llvm.shl %82, %17 : i16 loc(#loc)
    %84 = llvm.and %71, %19 : i8 loc(#loc)
    %85 = llvm.and %71, %20 : i8 loc(#loc)
    %86 = llvm.zext %84 : i8 to i16 loc(#loc)
    %87 = llvm.shl %86, %21 : i16 loc(#loc)
    %88 = llvm.and %71, %22 : i8 loc(#loc)
    %89 = llvm.zext %88 : i8 to i16 loc(#loc)
    %90 = llvm.shl %89, %23 : i16 loc(#loc)
    %91 = llvm.or %87, %90 : i16 loc(#loc)
    %92 = llvm.zext %85 : i8 to i16 loc(#loc)
    %93 = llvm.shl %92, %24 : i16 loc(#loc)
    %94 = llvm.and %71, %25 : i8 loc(#loc)
    %95 = llvm.zext %94 : i8 to i16 loc(#loc)
    %96 = llvm.shl %95, %26 : i16 loc(#loc)
    %97 = llvm.or %93, %96 : i16 loc(#loc)
    %98 = llvm.and %84, %27 : i8 loc(#loc)
    %99 = llvm.zext %98 : i8 to i32 loc(#loc)
    %100 = llvm.icmp "ne" %99, %28 : i32 loc(#loc)
    %101 = llvm.add %91, %29 : i16 loc(#loc)
    %102 = llvm.select %100, %101, %91 : i1, i16 loc(#loc)
    %103 = llvm.and %85, %30 : i8 loc(#loc)
    %104 = llvm.zext %103 : i8 to i32 loc(#loc)
    %105 = llvm.icmp "ne" %104, %28 : i32 loc(#loc)
    %106 = llvm.add %97, %29 : i16 loc(#loc)
    %107 = llvm.select %105, %106, %97 : i1, i16 loc(#loc)
    %108 = llvm.zext %84 : i8 to i32 loc(#loc)
    %109 = llvm.icmp "eq" %108, %31 : i32 loc(#loc)
    %110 = llvm.and %102, %32 : i16 loc(#loc)
    %111 = llvm.or %110, %29 : i16 loc(#loc)
    %112 = llvm.select %109, %111, %102 : i1, i16 loc(#loc)
    %113 = llvm.zext %85 : i8 to i32 loc(#loc)
    %114 = llvm.icmp "eq" %113, %33 : i32 loc(#loc)
    %115 = llvm.and %107, %32 : i16 loc(#loc)
    %116 = llvm.or %115, %29 : i16 loc(#loc)
    %117 = llvm.select %114, %116, %107 : i1, i16 loc(#loc)
    %118 = llvm.zext %112 : i16 to i32 loc(#loc)
    %119 = llvm.shl %118, %33 : i32 loc(#loc)
    %120 = llvm.bitcast %119 : i32 to f32 loc(#loc)
    %121 = llvm.zext %83 : i16 to i32 loc(#loc)
    %122 = llvm.shl %121, %33 : i32 loc(#loc)
    %123 = llvm.bitcast %122 : i32 to f32 loc(#loc)
    %124 = llvm.fmul %120, %123 : f32 loc(#loc)
    %125 = llvm.bitcast %124 : f32 to i32 loc(#loc)
    %126 = llvm.call_intrinsic "llvm.is.fpclass"(%124, %5) : (f32, i32) -> i1 loc(#loc)
    %127 = llvm.lshr %125, %33 : i32 loc(#loc)
    %128 = llvm.and %127, %31 : i32 loc(#loc)
    %129 = llvm.add %125, %128 : i32 loc(#loc)
    %130 = llvm.add %129, %4 : i32 loc(#loc)
    %131 = llvm.select %126, %3, %130 : i1, i32 loc(#loc)
    %132 = llvm.lshr %131, %33 : i32 loc(#loc)
    %133 = llvm.trunc %132 : i32 to i16 loc(#loc)
    %134 = llvm.bitcast %133 : i16 to bf16 loc(#loc)
    %135 = llvm.zext %117 : i16 to i32 loc(#loc)
    %136 = llvm.shl %135, %33 : i32 loc(#loc)
    %137 = llvm.bitcast %136 : i32 to f32 loc(#loc)
    %138 = llvm.fmul %137, %123 : f32 loc(#loc)
    %139 = llvm.bitcast %138 : f32 to i32 loc(#loc)
    %140 = llvm.call_intrinsic "llvm.is.fpclass"(%138, %5) : (f32, i32) -> i1 loc(#loc)
    %141 = llvm.lshr %139, %33 : i32 loc(#loc)
    %142 = llvm.and %141, %31 : i32 loc(#loc)
    %143 = llvm.add %139, %142 : i32 loc(#loc)
    %144 = llvm.add %143, %4 : i32 loc(#loc)
    %145 = llvm.select %140, %3, %144 : i1, i32 loc(#loc)
    %146 = llvm.lshr %145, %33 : i32 loc(#loc)
    %147 = llvm.trunc %146 : i32 to i16 loc(#loc)
    %148 = llvm.bitcast %147 : i16 to bf16 loc(#loc)
    %149 = llvm.zext %81 : i8 to i32 loc(#loc)
    %150 = llvm.icmp "eq" %149, %16 : i32 loc(#loc)
    %151 = llvm.select %150, %36, %134 : i1, bf16 loc(#loc)
    %152 = llvm.select %150, %36, %148 : i1, bf16 loc(#loc)
    %153 = llvm.mul %37, %35 : i32 loc(#loc)
    %154 = llvm.and %46, %16 : i32 loc(#loc)
    %155 = llvm.shl %154, %31 : i32 loc(#loc)
    %156 = llvm.xor %28, %155 : i32 loc(#loc)
    %157 = llvm.xor %28, %156 : i32 loc(#loc)
    %158 = llvm.xor %157, %28 : i32 loc(#loc)
    %159 = llvm.add %158, %15 : i32 loc(#loc)
    %160 = llvm.add %153, %159 : i32 loc(#loc)
    %161 = llvm.mul %N, %34 : i32 loc(#loc)
    %162 = llvm.icmp "slt" %160, %161 : i32 loc(#loc)
    %163 = llvm.getelementptr %mxfp_ptr[%153] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc)
    %164 = rocdl.make.buffer.rsrc %163, %9, %7, %8 : <1> to <8> loc(#loc)
    %165 = llvm.and %2, %162 : i1 loc(#loc)
    %166 = llvm.insertelement %151, %1[%28 : i32] : vector<2xbf16> loc(#loc)
    %167 = llvm.insertelement %152, %166[%31 : i32] : vector<2xbf16> loc(#loc)
    %168 = llvm.bitcast %167 : vector<2xbf16> to i32 loc(#loc)
    %169 = llvm.mul %159, %0 : i32 loc(#loc)
    %170 = llvm.select %165, %169, %6 : i1, i32 loc(#loc)
    rocdl.raw.ptr.buffer.store %168, %164, %170, %28, %28 : i32 loc(#loc)
    llvm.return loc(#loc)
  } loc(#loc)
} loc(#loc)


// -----// IR Dump Before ConvertBuiltinFuncToLLVM (convert-builtin-func-to-llvm) ('builtin.module' operation) //----- //
#loc = loc(unknown)
#loc1 = loc("x_ptr")
#loc2 = loc("scale_ptr")
#loc3 = loc("mxfp_ptr")
#loc4 = loc("N")
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.shared = 0 : i32, ttg.target = "hip:gfx950", "ttg.threads-per-warp" = 64 : i32} {
  llvm.mlir.global external @global_smem() {addr_space = 3 : i32, alignment = 16 : i64} : !llvm.array<0 x i8> loc(#loc)
  llvm.func @mxfp_upcast_kernel(%x_ptr: !llvm.ptr<1> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("x_ptr"), %scale_ptr: !llvm.ptr<1> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("scale_ptr"), %mxfp_ptr: !llvm.ptr<1> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("mxfp_ptr"), %N: i32 {tt.divisibility = 16 : i32} loc("N"), %arg4: !llvm.ptr<1> loc(unknown), %arg5: !llvm.ptr<1> loc(unknown)) attributes {noinline = false, nvvm.kernel = 1 : ui1, nvvm.reqntid = array<i32: 128>} {
    %0 = llvm.mlir.constant(2 : i32) : i32 loc(#loc)
    %1 = llvm.mlir.undef : vector<2xbf16> loc(#loc)
    %2 = llvm.mlir.constant(true) : i1 loc(#loc)
    %3 = llvm.mlir.constant(2147418112 : i32) : i32 loc(#loc)
    %4 = llvm.mlir.constant(32767 : i32) : i32 loc(#loc)
    %5 = llvm.mlir.constant(3 : i32) : i32 loc(#loc)
    %6 = llvm.mlir.constant(-2147483648 : i32) : i32 loc(#loc)
    %7 = llvm.mlir.constant(2147483646 : i32) : i32 loc(#loc)
    %8 = llvm.mlir.constant(159744 : i32) : i32 loc(#loc)
    %9 = llvm.mlir.constant(0 : i16) : i16 loc(#loc)
    %10 = llvm.mlir.constant(15 : i32) : i32 loc(#loc)
    %11 = llvm.mlir.constant(4 : i32) : i32 loc(#loc)
    %12 = llvm.mlir.constant(240 : i32) : i32 loc(#loc)
    %13 = llvm.mlir.constant(6 : i32) : i32 loc(#loc)
    %14 = llvm.mlir.constant(64 : i32) : i32 loc(#loc)
    %15 = llvm.mlir.constant(0 : index) : i32 loc(#loc)
    %16 = llvm.mlir.constant(255 : i32) : i32 loc(#loc)
    %17 = llvm.mlir.constant(7 : i16) : i16 loc(#loc)
    %18 = llvm.mlir.constant(256 : i32) : i32 loc(#loc)
    %19 = llvm.mlir.constant(7 : i8) : i8 loc(#loc)
    %20 = llvm.mlir.constant(112 : i8) : i8 loc(#loc)
    %21 = llvm.mlir.constant(6 : i16) : i16 loc(#loc)
    %22 = llvm.mlir.constant(8 : i8) : i8 loc(#loc)
    %23 = llvm.mlir.constant(12 : i16) : i16 loc(#loc)
    %24 = llvm.mlir.constant(2 : i16) : i16 loc(#loc)
    %25 = llvm.mlir.constant(-128 : i8) : i8 loc(#loc)
    %26 = llvm.mlir.constant(8 : i16) : i16 loc(#loc)
    %27 = llvm.mlir.constant(6 : i8) : i8 loc(#loc)
    %28 = llvm.mlir.constant(0 : i32) : i32 loc(#loc)
    %29 = llvm.mlir.constant(16128 : i16) : i16 loc(#loc)
    %30 = llvm.mlir.constant(96 : i8) : i8 loc(#loc)
    %31 = llvm.mlir.constant(1 : i32) : i32 loc(#loc)
    %32 = llvm.mlir.constant(-32768 : i16) : i16 loc(#loc)
    %33 = llvm.mlir.constant(16 : i32) : i32 loc(#loc)
    %34 = llvm.mlir.constant(32 : i32) : i32 loc(#loc)
    %35 = llvm.mlir.constant(512 : i32) : i32 loc(#loc)
    %36 = llvm.mlir.constant(0x7FC0 : bf16) : bf16 loc(#loc)
    %37 = rocdl.workgroup.id.x : i32 loc(#loc)
    %38 = llvm.mul %37, %18 : i32 loc(#loc)
    %39 = rocdl.workitem.id.x : i32 loc(#loc)
    %40 = llvm.and %39, %16 : i32 loc(#loc)
    %41 = llvm.urem %40, %14 : i32 loc(#loc)
    %42 = llvm.udiv %40, %14 : i32 loc(#loc)
    %43 = llvm.shl %41, %28 : i32 loc(#loc)
    %44 = llvm.or %28, %43 : i32 loc(#loc)
    %45 = llvm.shl %42, %13 : i32 loc(#loc)
    %46 = llvm.or %44, %45 : i32 loc(#loc)
    %47 = llvm.and %46, %12 : i32 loc(#loc)
    %48 = llvm.lshr %47, %11 : i32 loc(#loc)
    %49 = llvm.xor %28, %48 : i32 loc(#loc)
    %50 = llvm.xor %28, %49 : i32 loc(#loc)
    %51 = llvm.xor %50, %28 : i32 loc(#loc)
    %52 = llvm.add %51, %15 : i32 loc(#loc)
    %53 = llvm.mul %52, %33 : i32 loc(#loc)
    %54 = llvm.add %38, %53 : i32 loc(#loc)
    %55 = llvm.and %46, %10 : i32 loc(#loc)
    %56 = llvm.lshr %55, %28 : i32 loc(#loc)
    %57 = llvm.xor %28, %56 : i32 loc(#loc)
    %58 = llvm.xor %28, %57 : i32 loc(#loc)
    %59 = llvm.xor %58, %28 : i32 loc(#loc)
    %60 = llvm.add %59, %15 : i32 loc(#loc)
    %61 = llvm.add %54, %60 : i32 loc(#loc)
    %62 = llvm.mul %N, %33 : i32 loc(#loc)
    %63 = llvm.icmp "slt" %61, %62 : i32 loc(#loc)
    %64 = llvm.add %53, %60 : i32 loc(#loc)
    %65 = llvm.getelementptr %x_ptr[%38] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, i8 loc(#loc)
    %66 = rocdl.make.buffer.rsrc %65, %9, %7, %8 : <1> to <8> loc(#loc)
    %67 = llvm.mul %64, %31 : i32 loc(#loc)
    %68 = llvm.select %63, %67, %6 : i1, i32 loc(#loc)
    %69 = rocdl.raw.ptr.buffer.load %66, %68, %28, %28 : i8 loc(#loc)
    %70 = llvm.bitcast %69 : i8 to vector<1xi8> loc(#loc)
    %71 = llvm.extractelement %70[%15 : i32] : vector<1xi8> loc(#loc)
    %72 = llvm.mul %37, %33 : i32 loc(#loc)
    %73 = llvm.add %72, %52 : i32 loc(#loc)
    %74 = llvm.icmp "slt" %73, %N : i32 loc(#loc)
    %75 = llvm.getelementptr %scale_ptr[%72] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, i8 loc(#loc)
    %76 = rocdl.make.buffer.rsrc %75, %9, %7, %8 : <1> to <8> loc(#loc)
    %77 = llvm.mul %52, %31 : i32 loc(#loc)
    %78 = llvm.select %74, %77, %6 : i1, i32 loc(#loc)
    %79 = rocdl.raw.ptr.buffer.load %76, %78, %28, %28 : i8 loc(#loc)
    %80 = llvm.bitcast %79 : i8 to vector<1xi8> loc(#loc)
    %81 = llvm.extractelement %80[%15 : i32] : vector<1xi8> loc(#loc)
    %82 = llvm.zext %81 : i8 to i16 loc(#loc)
    %83 = llvm.shl %82, %17 : i16 loc(#loc)
    %84 = llvm.and %71, %19 : i8 loc(#loc)
    %85 = llvm.and %71, %20 : i8 loc(#loc)
    %86 = llvm.zext %84 : i8 to i16 loc(#loc)
    %87 = llvm.shl %86, %21 : i16 loc(#loc)
    %88 = llvm.and %71, %22 : i8 loc(#loc)
    %89 = llvm.zext %88 : i8 to i16 loc(#loc)
    %90 = llvm.shl %89, %23 : i16 loc(#loc)
    %91 = llvm.or %87, %90 : i16 loc(#loc)
    %92 = llvm.zext %85 : i8 to i16 loc(#loc)
    %93 = llvm.shl %92, %24 : i16 loc(#loc)
    %94 = llvm.and %71, %25 : i8 loc(#loc)
    %95 = llvm.zext %94 : i8 to i16 loc(#loc)
    %96 = llvm.shl %95, %26 : i16 loc(#loc)
    %97 = llvm.or %93, %96 : i16 loc(#loc)
    %98 = llvm.and %84, %27 : i8 loc(#loc)
    %99 = llvm.zext %98 : i8 to i32 loc(#loc)
    %100 = llvm.icmp "ne" %99, %28 : i32 loc(#loc)
    %101 = llvm.add %91, %29 : i16 loc(#loc)
    %102 = llvm.select %100, %101, %91 : i1, i16 loc(#loc)
    %103 = llvm.and %85, %30 : i8 loc(#loc)
    %104 = llvm.zext %103 : i8 to i32 loc(#loc)
    %105 = llvm.icmp "ne" %104, %28 : i32 loc(#loc)
    %106 = llvm.add %97, %29 : i16 loc(#loc)
    %107 = llvm.select %105, %106, %97 : i1, i16 loc(#loc)
    %108 = llvm.zext %84 : i8 to i32 loc(#loc)
    %109 = llvm.icmp "eq" %108, %31 : i32 loc(#loc)
    %110 = llvm.and %102, %32 : i16 loc(#loc)
    %111 = llvm.or %110, %29 : i16 loc(#loc)
    %112 = llvm.select %109, %111, %102 : i1, i16 loc(#loc)
    %113 = llvm.zext %85 : i8 to i32 loc(#loc)
    %114 = llvm.icmp "eq" %113, %33 : i32 loc(#loc)
    %115 = llvm.and %107, %32 : i16 loc(#loc)
    %116 = llvm.or %115, %29 : i16 loc(#loc)
    %117 = llvm.select %114, %116, %107 : i1, i16 loc(#loc)
    %118 = llvm.zext %112 : i16 to i32 loc(#loc)
    %119 = llvm.shl %118, %33 : i32 loc(#loc)
    %120 = llvm.bitcast %119 : i32 to f32 loc(#loc)
    %121 = llvm.zext %83 : i16 to i32 loc(#loc)
    %122 = llvm.shl %121, %33 : i32 loc(#loc)
    %123 = llvm.bitcast %122 : i32 to f32 loc(#loc)
    %124 = llvm.fmul %120, %123 : f32 loc(#loc)
    %125 = llvm.bitcast %124 : f32 to i32 loc(#loc)
    %126 = llvm.call_intrinsic "llvm.is.fpclass"(%124, %5) : (f32, i32) -> i1 loc(#loc)
    %127 = llvm.lshr %125, %33 : i32 loc(#loc)
    %128 = llvm.and %127, %31 : i32 loc(#loc)
    %129 = llvm.add %125, %128 : i32 loc(#loc)
    %130 = llvm.add %129, %4 : i32 loc(#loc)
    %131 = llvm.select %126, %3, %130 : i1, i32 loc(#loc)
    %132 = llvm.lshr %131, %33 : i32 loc(#loc)
    %133 = llvm.trunc %132 : i32 to i16 loc(#loc)
    %134 = llvm.bitcast %133 : i16 to bf16 loc(#loc)
    %135 = llvm.zext %117 : i16 to i32 loc(#loc)
    %136 = llvm.shl %135, %33 : i32 loc(#loc)
    %137 = llvm.bitcast %136 : i32 to f32 loc(#loc)
    %138 = llvm.fmul %137, %123 : f32 loc(#loc)
    %139 = llvm.bitcast %138 : f32 to i32 loc(#loc)
    %140 = llvm.call_intrinsic "llvm.is.fpclass"(%138, %5) : (f32, i32) -> i1 loc(#loc)
    %141 = llvm.lshr %139, %33 : i32 loc(#loc)
    %142 = llvm.and %141, %31 : i32 loc(#loc)
    %143 = llvm.add %139, %142 : i32 loc(#loc)
    %144 = llvm.add %143, %4 : i32 loc(#loc)
    %145 = llvm.select %140, %3, %144 : i1, i32 loc(#loc)
    %146 = llvm.lshr %145, %33 : i32 loc(#loc)
    %147 = llvm.trunc %146 : i32 to i16 loc(#loc)
    %148 = llvm.bitcast %147 : i16 to bf16 loc(#loc)
    %149 = llvm.zext %81 : i8 to i32 loc(#loc)
    %150 = llvm.icmp "eq" %149, %16 : i32 loc(#loc)
    %151 = llvm.select %150, %36, %134 : i1, bf16 loc(#loc)
    %152 = llvm.select %150, %36, %148 : i1, bf16 loc(#loc)
    %153 = llvm.mul %37, %35 : i32 loc(#loc)
    %154 = llvm.and %46, %16 : i32 loc(#loc)
    %155 = llvm.shl %154, %31 : i32 loc(#loc)
    %156 = llvm.xor %28, %155 : i32 loc(#loc)
    %157 = llvm.xor %28, %156 : i32 loc(#loc)
    %158 = llvm.xor %157, %28 : i32 loc(#loc)
    %159 = llvm.add %158, %15 : i32 loc(#loc)
    %160 = llvm.add %153, %159 : i32 loc(#loc)
    %161 = llvm.mul %N, %34 : i32 loc(#loc)
    %162 = llvm.icmp "slt" %160, %161 : i32 loc(#loc)
    %163 = llvm.getelementptr %mxfp_ptr[%153] : (!llvm.ptr<1>, i32) -> !llvm.ptr<1>, bf16 loc(#loc)
    %164 = rocdl.make.buffer.rsrc %163, %9, %7, %8 : <1> to <8> loc(#loc)
    %165 = llvm.and %2, %162 : i1 loc(#loc)
    %166 = llvm.insertelement %151, %1[%28 : i32] : vector<2xbf16> loc(#loc)
    %167 = llvm.insertelement %152, %166[%31 : i32] : vector<2xbf16> loc(#loc)
    %168 = llvm.bitcast %167 : vector<2xbf16> to i32 loc(#loc)
    %169 = llvm.mul %159, %0 : i32 loc(#loc)
    %170 = llvm.select %165, %169, %6 : i1, i32 loc(#loc)
    rocdl.raw.ptr.buffer.store %168, %164, %170, %28, %28 : i32 loc(#loc)
    llvm.return loc(#loc)
  } loc(#loc)
} loc(#loc)



// -----// AMDGCN Dump //----- //
	.amdgcn_target "amdgcn-amd-amdhsa--gfx950"
	.amdhsa_code_object_version 5
	.text
	.globl	mxfp_upcast_kernel              ; -- Begin function mxfp_upcast_kernel
	.p2align	8
	.type	mxfp_upcast_kernel,@function
mxfp_upcast_kernel:                     ; @mxfp_upcast_kernel
; %bb.1:
	s_load_dwordx2 s[2:3], s[0:1], 0x0
	s_load_dwordx8 s[4:11], s[0:1], 0x8
	s_load_dwordx2 s[12:13], s[0:1], 0x28
	s_waitcnt lgkmcnt(0)
	s_branch .LBB0_0
	.p2align	8
; %bb.2:
.LBB0_0:
	s_lshl_b32 s0, s14, 8
	s_lshl_b32 s9, s8, 4
	s_ashr_i32 s1, s0, 31
	v_or_b32_e32 v1, s0, v0
	s_add_u32 s0, s2, s0
	s_addc_u32 s1, s3, s1
	v_bfrev_b32_e32 v2, 1
	v_cmp_gt_i32_e32 vcc, s9, v1
	s_and_b32 s1, s1, 0xffff
	s_mov_b32 s3, 0x27000
	s_mov_b32 s2, 0x7ffffffe
	v_cndmask_b32_e32 v1, v2, v0, vcc
	buffer_load_ubyte v1, v1, s[0:3], 0 offen
	s_lshl_b32 s0, s14, 4
	v_lshrrev_b32_e32 v3, 4, v0
	s_ashr_i32 s1, s0, 31
	v_or_b32_e32 v4, s0, v3
	s_add_u32 s0, s4, s0
	s_addc_u32 s1, s5, s1
	v_cmp_gt_i32_e32 vcc, s8, v4
	s_and_b32 s1, s1, 0xffff
	s_movk_i32 s4, 0x80
	v_cndmask_b32_e32 v3, v2, v3, vcc
	buffer_load_ubyte v3, v3, s[0:3], 0 offen
	s_movk_i32 s5, 0x3f00
	v_mov_b32_e32 v4, 0xffff8000
	s_movk_i32 s9, 0x7fff
	s_lshl_b32 s0, s14, 9
	v_mov_b32_e32 v5, 0x7fff
	s_ashr_i32 s1, s0, 31
	s_movk_i32 s10, 0xff
	v_lshlrev_b32_e32 v7, 2, v0
	s_lshl_b32 s8, s8, 5
	v_lshl_or_b32 v0, v0, 1, s0
	s_lshl_b64 s[0:1], s[0:1], 1
	v_mov_b32_e32 v6, 0x7fc0
	s_add_u32 s0, s6, s0
	s_mov_b32 s11, 0x5040100
	s_addc_u32 s1, s7, s1
	s_and_b32 s1, s1, 0xffff
	s_waitcnt vmcnt(1)
	v_and_b32_e32 v8, 7, v1
	v_and_b32_e32 v10, 8, v1
	v_and_b32_e32 v9, 0x70, v1
	v_lshlrev_b16_e32 v13, 6, v8
	v_lshlrev_b16_e32 v10, 12, v10
	v_and_b32_sdwa v11, v1, s4 dst_sel:BYTE_1 dst_unused:UNUSED_PAD src0_sel:DWORD src1_sel:DWORD
	v_and_b32_e32 v12, 6, v1
	v_lshlrev_b16_e32 v14, 2, v9
	v_or_b32_e32 v10, v13, v10
	v_and_b32_e32 v1, 0x60, v1
	v_or_b32_e32 v11, v14, v11
	v_add_u16_e32 v13, 0x3f00, v10
	v_cmp_eq_u16_e32 vcc, 0, v12
	v_add_u16_e32 v14, 0x3f00, v11
	s_waitcnt vmcnt(0)
	v_lshlrev_b32_e32 v15, 23, v3
	v_cndmask_b32_e32 v10, v13, v10, vcc
	v_cmp_eq_u16_e32 vcc, 0, v1
	s_nop 1
	v_cndmask_b32_e32 v1, v14, v11, vcc
	v_bitop3_b16 v11, v10, s5, v4 bitop3:0xec
	v_cmp_eq_u16_e32 vcc, 1, v8
	v_bitop3_b16 v4, v1, s5, v4 bitop3:0xec
	s_nop 0
	v_cndmask_b32_e32 v8, v10, v11, vcc
	v_cmp_eq_u16_e32 vcc, 16, v9
	s_nop 1
	v_cndmask_b32_e32 v1, v1, v4, vcc
	v_lshlrev_b32_e32 v4, 16, v8
	v_lshlrev_b32_e32 v1, 16, v1
	v_mul_f32_e32 v4, v15, v4
	v_mul_f32_e32 v1, v1, v15
	v_bfe_u32 v8, v4, 16, 1
	v_bfe_u32 v9, v1, 16, 1
	v_add3_u32 v8, v4, v8, s9
	v_add3_u32 v9, v1, v9, s9
	v_lshrrev_b32_e32 v8, 16, v8
	v_cmp_o_f32_e32 vcc, v4, v4
	v_lshrrev_b32_e32 v9, 16, v9
	s_nop 0
	v_cndmask_b32_e32 v4, v5, v8, vcc
	v_cmp_o_f32_e32 vcc, v1, v1
	s_nop 1
	v_cndmask_b32_e32 v1, v5, v9, vcc
	v_cmp_eq_u16_e32 vcc, s10, v3
	s_nop 1
	v_cndmask_b32_e32 v3, v4, v6, vcc
	v_cndmask_b32_e32 v1, v1, v6, vcc
	v_cmp_gt_i32_e32 vcc, s8, v0
	v_perm_b32 v1, v1, v3, s11
	s_nop 0
	v_cndmask_b32_e32 v0, v2, v7, vcc
	buffer_store_dword v1, v0, s[0:3], 0 offen
	s_endpgm
	.section	.rodata,"a",@progbits
	.p2align	6, 0x0
	.amdhsa_kernel mxfp_upcast_kernel
		.amdhsa_group_segment_fixed_size 0
		.amdhsa_private_segment_fixed_size 0
		.amdhsa_kernarg_size 48
		.amdhsa_user_sgpr_count 14
		.amdhsa_user_sgpr_dispatch_ptr 0
		.amdhsa_user_sgpr_queue_ptr 0
		.amdhsa_user_sgpr_kernarg_segment_ptr 1
		.amdhsa_user_sgpr_dispatch_id 0
		.amdhsa_user_sgpr_kernarg_preload_length 12
		.amdhsa_user_sgpr_kernarg_preload_offset 0
		.amdhsa_user_sgpr_private_segment_size 0
		.amdhsa_uses_dynamic_stack 0
		.amdhsa_enable_private_segment 0
		.amdhsa_system_sgpr_workgroup_id_x 1
		.amdhsa_system_sgpr_workgroup_id_y 0
		.amdhsa_system_sgpr_workgroup_id_z 0
		.amdhsa_system_sgpr_workgroup_info 0
		.amdhsa_system_vgpr_workitem_id 0
		.amdhsa_next_free_vgpr 16
		.amdhsa_next_free_sgpr 15
		.amdhsa_accum_offset 16
		.amdhsa_reserve_vcc 1
		.amdhsa_reserve_xnack_mask 1
		.amdhsa_float_round_mode_32 0
		.amdhsa_float_round_mode_16_64 0
		.amdhsa_float_denorm_mode_32 3
		.amdhsa_float_denorm_mode_16_64 3
		.amdhsa_dx10_clamp 1
		.amdhsa_ieee_mode 1
		.amdhsa_fp16_overflow 0
		.amdhsa_tg_split 0
		.amdhsa_exception_fp_ieee_invalid_op 0
		.amdhsa_exception_fp_denorm_src 0
		.amdhsa_exception_fp_ieee_div_zero 0
		.amdhsa_exception_fp_ieee_overflow 0
		.amdhsa_exception_fp_ieee_underflow 0
		.amdhsa_exception_fp_ieee_inexact 0
		.amdhsa_exception_int_div_zero 0
	.end_amdhsa_kernel
	.text
.Lfunc_end0:
	.size	mxfp_upcast_kernel, .Lfunc_end0-mxfp_upcast_kernel
                                        ; -- End function
	.set mxfp_upcast_kernel.num_vgpr, 16
	.set mxfp_upcast_kernel.num_agpr, 0
	.set mxfp_upcast_kernel.numbered_sgpr, 15
	.set mxfp_upcast_kernel.private_seg_size, 0
	.set mxfp_upcast_kernel.uses_vcc, 1
	.set mxfp_upcast_kernel.uses_flat_scratch, 0
	.set mxfp_upcast_kernel.has_dyn_sized_stack, 0
	.set mxfp_upcast_kernel.has_recursion, 0
	.set mxfp_upcast_kernel.has_indirect_call, 0
	.section	.AMDGPU.csdata,"",@progbits
; Kernel info:
; codeLenInByte = 736
; TotalNumSgprs: 21
; NumVgprs: 16
; NumAgprs: 0
; TotalNumVgprs: 16
; ScratchSize: 0
; MemoryBound: 0
; FloatMode: 240
; IeeeMode: 1
; LDSByteSize: 0 bytes/workgroup (compile time only)
; SGPRBlocks: 2
; VGPRBlocks: 1
; NumSGPRsForWavesPerEU: 21
; NumVGPRsForWavesPerEU: 16
; AccumOffset: 16
; Occupancy: 8
; WaveLimiterHint : 0
; COMPUTE_PGM_RSRC2:SCRATCH_EN: 0
; COMPUTE_PGM_RSRC2:USER_SGPR: 14
; COMPUTE_PGM_RSRC2:TRAP_HANDLER: 0
; COMPUTE_PGM_RSRC2:TGID_X_EN: 1
; COMPUTE_PGM_RSRC2:TGID_Y_EN: 0
; COMPUTE_PGM_RSRC2:TGID_Z_EN: 0
; COMPUTE_PGM_RSRC2:TIDIG_COMP_CNT: 0
; COMPUTE_PGM_RSRC3_GFX90A:ACCUM_OFFSET: 3
; COMPUTE_PGM_RSRC3_GFX90A:TG_SPLIT: 0
	.text
	.p2alignl 6, 3212836864
	.fill 256, 4, 3212836864
	.section	.AMDGPU.gpr_maximums,"",@progbits
	.set amdgpu.max_num_vgpr, 0
	.set amdgpu.max_num_agpr, 0
	.set amdgpu.max_num_sgpr, 0
	.text
	.section	".note.GNU-stack","",@progbits
	.amdgpu_metadata
---
amdhsa.kernels:
  - .agpr_count:     0
    .args:
      - .address_space:  global
        .offset:         0
        .size:           8
        .value_kind:     global_buffer
      - .address_space:  global
        .offset:         8
        .size:           8
        .value_kind:     global_buffer
      - .address_space:  global
        .offset:         16
        .size:           8
        .value_kind:     global_buffer
      - .offset:         24
        .size:           4
        .value_kind:     by_value
      - .address_space:  global
        .offset:         32
        .size:           8
        .value_kind:     global_buffer
      - .address_space:  global
        .offset:         40
        .size:           8
        .value_kind:     global_buffer
    .group_segment_fixed_size: 0
    .kernarg_segment_align: 8
    .kernarg_segment_size: 48
    .max_flat_workgroup_size: 256
    .name:           mxfp_upcast_kernel
    .private_segment_fixed_size: 0
    .sgpr_count:     21
    .sgpr_spill_count: 0
    .symbol:         mxfp_upcast_kernel.kd
    .uses_dynamic_stack: false
    .vgpr_count:     16
    .vgpr_spill_count: 0
    .wavefront_size: 64
amdhsa.target:   amdgcn-amd-amdhsa--gfx950
amdhsa.version:
  - 1
  - 2
...

	.end_amdgpu_metadata

.

=============================== warnings summary ===============================
python/test/unit/language/test_core.py::test_scaled_dot[32-32-256-False-True-True-e2m1-bf16-4-16-1]
  /data/triton/python/test/unit/language/test_core.py:4366: UserWarning: Attempting to use hipBLASLt on an unsupported architecture! Overriding blas backend to hipblas (Triggered internally at /therock/pytorch/aten/src/ATen/Context.cpp:370.)
    return torch.matmul(x_upcast, y_upcast)

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
================ 1 passed, 17618 deselected, 1 warning in 4.00s ================
